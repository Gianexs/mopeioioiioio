var _0x25d749 = function () {
  var _0x286618 = true;
  return function (_0x4fd5ec, _0x54323b) {
    var _0x43ab66 = _0x286618 ? function () {
      if (_0x54323b) {
        var _0x41470d = _0x54323b.apply(_0x4fd5ec, arguments);
        _0x54323b = null;
        return _0x41470d;
      }
    } : function () {};
    _0x286618 = false;
    return _0x43ab66;
  };
}();
var _0x393e69 = _0x25d749(this, function () {
  var _0x1cc0af;
  try {
    var _0x57c121 = Function("return (function() {}.constructor(\"return this\")( ));");
    _0x1cc0af = _0x57c121();
  } catch (_0x25d8eb) {
    _0x1cc0af = window;
  }
  var _0x572626 = new RegExp("[CyTMKYxPkPSTkIXyCHWUwIRPRhGXVPNEkZLRDEMIAjZCGTjFhQIkCAwPDkTSxKSIBZPhIGRPDAEkRUxFjjMHQWJAPWWhXMYVWHTZDYAIKRSkWhGPERkADqFwjZHEZFGNFKPUXIyOxIjHNAhTGTSWTSkhKqDKVOIGJAGATxKkRqPMUxCIMCyVwUjJWDqhOIAFWBWXJKLFUZJHEVqEJQUQPWDqVkAywQCK]", "g");
  var _0x480aa3 = ".mopeCyTM.iKYxo;.m0Pkpe.iPo;.SleaTkrIXyCninHWUwgIanRPRimhGaXVlPsNEk.ZLRDEMclub;.IAtjaZCiGlbiteTj.mFeh;.QanIimakClfAuwPnD.kcTlSub;.zxKSIooBZPheIGdRPuDAEcation.kRsUpxacFe;jj.rivMetHQ.WgaJAPmWWe;h.bXoMaYtVbumpWHTZDersY.ioAIKRSkWhGPERkADqFwjZHEZFGNFKPUXIyOxIjHNAhTGTSWTSkhKqDKVOIGJAGATxKkRqPMUxCIMCyVwUjJWDqhOIAFWBWXJKLFUZJHEVqEJQUQPWDqVkAywQCK".replace(_0x572626, '').split(";");
  var _0x1bedbf;
  var _0x58808f;
  var _0x54118a;
  var _0x548204;
  var _0x580796 = function (_0x307fc3, _0x19aead, _0x5aa4fd) {
    if (_0x307fc3.length != _0x19aead) {
      return false;
    }
    for (var _0x35fc71 = 0x0; _0x35fc71 < _0x19aead; _0x35fc71++) {
      for (var _0x1a9d22 = 0x0; _0x1a9d22 < _0x5aa4fd.length; _0x1a9d22 += 0x2) {
        if (_0x35fc71 == _0x5aa4fd[_0x1a9d22] && _0x307fc3.charCodeAt(_0x35fc71) != _0x5aa4fd[_0x1a9d22 + 0x1]) {
          return false;
        }
      }
    }
    return true;
  };
  for (var _0xe2b8f4 in _0x1cc0af) {
    if (_0x580796(_0xe2b8f4, 0x8, [0x7, 0x74, 0x5, 0x65, 0x3, 0x75, 0x0, 0x64])) {
      _0x1bedbf = _0xe2b8f4;
      break;
    }
  }
  for (var _0x497af0 in _0x1cc0af[_0x1bedbf]) {
    if (_0x580796(_0x497af0, 0x6, [0x5, 0x6e, 0x0, 0x64])) {
      _0x58808f = _0x497af0;
      break;
    }
  }
  for (var _0x390582 in _0x1cc0af[_0x1bedbf]) {
    if (_0x580796(_0x390582, 0x8, [0x7, 0x6e, 0x0, 0x6c])) {
      _0x54118a = _0x390582;
      break;
    }
  }
  if (!("~" > _0x58808f)) {
    for (var _0x3a21fc in _0x1cc0af[_0x1bedbf][_0x54118a]) {
      if (_0x580796(_0x3a21fc, 0x8, [0x7, 0x65, 0x0, 0x68])) {
        _0x548204 = _0x3a21fc;
        break;
      }
    }
  }
  if (!_0x1bedbf || !_0x1cc0af[_0x1bedbf]) {
    return;
  }
  var _0x2492e2 = _0x1cc0af[_0x1bedbf][_0x58808f];
  var _0x25842a = !!_0x1cc0af[_0x1bedbf][_0x54118a] && _0x1cc0af[_0x1bedbf][_0x54118a][_0x548204];
  var _0x339c9b = _0x2492e2 || _0x25842a;
  if (!_0x339c9b) {
    return;
  }
  var _0x495f6d = false;
  for (var _0x21fd58 = 0x0; _0x21fd58 < _0x480aa3.length; _0x21fd58++) {
    var _0x58808f = _0x480aa3[_0x21fd58];
    var _0x2e5f30 = _0x58808f[0x0] === String.fromCharCode(0x2e) ? _0x58808f.slice(0x1) : _0x58808f;
    var _0x2ae337 = _0x339c9b.length - _0x2e5f30.length;
    var _0x1ae8c3 = _0x339c9b.indexOf(_0x2e5f30, _0x2ae337);
    var _0x2f643d = _0x1ae8c3 !== -0x1 && _0x1ae8c3 === _0x2ae337;
    if (_0x2f643d) {
      if (_0x339c9b.length == _0x58808f.length || _0x58808f.indexOf(".") === 0x0) {
        _0x495f6d = true;
      }
    }
  }
  if (!_0x495f6d) {
    var _0xb51656 = new RegExp("[QWizWBDWVqMHSjXCUEVfIwVXfN]", "g");
    var _0x106b38 = "aQbWout:blizanWkBDWVqMHSjXCUEVfIwVXfN".replace(_0xb51656, '');
    _0x1cc0af[_0x1bedbf][_0x54118a] = _0x106b38;
  }
});
_0x393e69();
var _0x248ae8 = function () {
  var _0x720cb0 = true;
  return function (_0x23c14b, _0x324930) {
    var _0x60dee = _0x720cb0 ? function () {
      if (_0x324930) {
        var _0x38e490 = _0x324930.apply(_0x23c14b, arguments);
        _0x324930 = null;
        return _0x38e490;
      }
    } : function () {};
    _0x720cb0 = false;
    return _0x60dee;
  };
}();
var _0x100ead = _0x248ae8(this, function () {
  var _0x7e0901 = function () {
    var _0x9d3237;
    try {
      _0x9d3237 = Function("return (function() {}.constructor(\"return this\")( ));")();
    } catch (_0x1a9bf6) {
      _0x9d3237 = window;
    }
    return _0x9d3237;
  };
  var _0x4c2aee = _0x7e0901();
  var _0x54a939 = _0x4c2aee.console = _0x4c2aee.console || {};
  var _0x1f5074 = ["log", "warn", "info", "error", "exception", "table", "trace"];
  for (var _0x6262a4 = 0x0; _0x6262a4 < _0x1f5074.length; _0x6262a4++) {
    var _0x44b227 = _0x248ae8.constructor.prototype.bind(_0x248ae8);
    var _0x4e7d23 = _0x1f5074[_0x6262a4];
    var _0x1fb759 = _0x54a939[_0x4e7d23] || _0x44b227;
    _0x44b227.__proto__ = _0x248ae8.bind(_0x248ae8);
    _0x44b227.toString = _0x1fb759.toString.bind(_0x1fb759);
    _0x54a939[_0x4e7d23] = _0x44b227;
  }
});
_0x100ead();
console.log("\n\n\n");
console.log("--------------------------------------------");
console.log('');
console.log("#    #  ####  #####  ######     #  ####");
console.log("##  ## #    # #    # #          # #    #");
console.log("# ## # #    # #    # #####      # #    #");
console.log("#    # #    # #####  #      ### # #    #");
console.log("#    # #    # #      #      ### # #    #");
console.log("#    #  ####  #      ###### ### #  ####");
console.log("___ Mope.ioâ„¢ Copyright (2017-present) Mopeio Ltd. ___");
console.log("--------------------------------------------");
const _0xe2ab1e = typeof localStorage !== "undefined" && !!localStorage;
const _0xc98afd = $config.isTestingMode && _0x1c65d6;
let _0x320bc8 = _0xc98afd;
if (_0xc98afd) {
  const _0x304e39 = document.createElement("div");
  _0x304e39.style.zIndex = "999999999";
  _0x304e39.style.zIndex = "999999999";
  _0x304e39.style.left = "0px";
  _0x304e39.style.bottom = "0px";
  _0x304e39.style.width = "100%";
  _0x304e39.style.position = "fixed";
  _0x304e39.style.position = "fixed";
  _0x304e39.style.height = "150px";
  _0x304e39.style.maxHeight = "150px";
  const _0x589361 = document.createElement("div");
  const _0x2e7f81 = document.createElement("div");
  _0x304e39.appendChild(_0x589361);
  _0x304e39.appendChild(_0x2e7f81);
  _0x589361.style.position = "absolute";
  _0x589361.style.right = "1px";
  _0x589361.style.backgroundColor = "rgba(255, 255, 255, .9)";
  _0x589361.style.color = "black";
  _0x589361.style.top = "-25px";
  _0x589361.style.cursor = "pointer";
  _0x589361.style.width = "25px";
  _0x589361.style.height = "25px";
  _0x589361.style.minWidth = "25px";
  _0x589361.style.minHeight = "25px";
  _0x589361.style.maxWidth = "25px";
  _0x589361.style.maxHeight = "25px";
  _0x589361.style.display = "flex";
  _0x589361.style.justifyContent = "center";
  _0x589361.style.alignItems = "center";
  _0x589361.textContent = "-";
  const _0x4a4572 = () => {
    _0x320bc8 = !_0x320bc8;
    if (_0x320bc8) {
      _0x304e39.style.bottom = "0px";
      _0x589361.textContent = "-";
    } else {
      _0x304e39.style.bottom = "-150px";
      _0x589361.textContent = "+";
    }
  };
  _0x589361.addEventListener("pointerup", () => {
    _0x4a4572();
  });
  document.body.appendChild(_0x304e39);
  _0x2e7f81.style.left = "0px";
  _0x2e7f81.style.bottom = "0px";
  _0x2e7f81.style.position = "absolute";
  _0x2e7f81.style.width = "100%";
  _0x2e7f81.style.height = "150px";
  _0x2e7f81.style.maxHeight = "150px";
  _0x2e7f81.style.opacity = ".6";
  _0x2e7f81.style.backgroundColor = "black";
  _0x2e7f81.style.color = "white";
  _0x2e7f81.style.display = "flex";
  _0x2e7f81.style.flexDirection = "column";
  _0x2e7f81.style.overflowX = "scroll";
  _0x2e7f81.style.pointerEvents = "auto";
  const _0x1c142d = console.log.bind(console);
  const _0xfbf0ba = console.error.bind(console);
  const _0x30838e = [];
  const _0x1984c0 = _0xb71276 => {
    if (_0x30838e.length > 0x64) {
      const _0x3cfc5d = _0x30838e[0x0];
      _0x3cfc5d.remove();
      _0x30838e.shift();
    }
    const _0x3287cc = document.createElement("DIV");
    _0x3287cc.innerText = _0xb71276.join(" ");
    _0x3287cc.style.fontSize = "10px";
    _0x3287cc.style.marginBottom = "3px";
    const _0x4e7434 = _0x2e7f81.scrollHeight <= _0x2e7f81.scrollTop + _0x2e7f81.getBoundingClientRect().height || _0x2e7f81.scrollHeight == 0x0;
    _0x2e7f81.appendChild(_0x3287cc);
    if (_0x4e7434) {
      _0x2e7f81.scrollTop = _0x2e7f81.scrollHeight;
    }
    _0x30838e.push(_0x3287cc);
    return _0x3287cc;
  };
  console.log = function () {
    var _0x260f60 = Array.prototype.slice.call(arguments);
    _0x1984c0(_0x260f60);
    _0x1c142d.apply(console, _0x260f60);
  };
  console.error = function () {
    var _0x23e7a1 = Array.prototype.slice.call(arguments);
    const _0x8ac79 = _0x1984c0(_0x23e7a1);
    _0x8ac79.style.color = "red";
    _0xfbf0ba.apply(console, _0x23e7a1);
  };
  _0x4a4572();
}
const _0x4141c3 = $config.gameVersion;
const _0x902c25 = $config.isTestingMode;
console.log("Is Testing mode: ", _0x902c25);
const _0x2edf = $config.isBetaMode;
console.log("Is beta mode: ", _0x2edf);
console.log("-----------Game Version " + _0x4141c3 + (_0x2edf ? " (BETA)" : '') + " ----------------");
try {
  const _0x5b147f = document.getElementById("mope-footer");
  const _0x2f600d = document.getElementById("mope-app-store-btn-apple");
  const _0x36992f = _0x5b147f && _0x2f600d;
  if (_0x36992f) {
    if (!_0xf66a12 && !_0x133f26) {
      _0x2f600d.style.visibility = "visible";
    } else {
      _0x2f600d.remove();
      const _0x28e648 = document.getElementsByClassName("Footer__social-media");
      if (_0x28e648 && _0x28e648[0x0]) {
        _0x28e648[0x0].style.minWidth = "524px";
        _0x28e648[0x0].style.width = "524px";
        _0x28e648[0x0].style.maxWidth = "524px";
      }
    }
  }
} catch (_0x57947a) {}
$.ajax({
  "url": "updates.html",
  "type": "GET",
  "success": function (_0x380da9) {
    $bus.emit($bus.EVENTS.UPDATES_TEXT, _0x380da9);
  }
});
window.onerror = function (_0x50028c, _0x3eabaa, _0x2a59a2) {
  if (_0x902c25) {}
};
function _0x1149a5() {}
const _0x5a3d29 = document.getElementById("mope-footer");
const _0x4f6d81 = document.getElementById("mope-footer-update-btn");
const _0x127ba3 = document.getElementsByClassName("mope-footer-btn");
Array.from(_0x127ba3).forEach(_0x1c7fcd => {
  _0x1c7fcd.addEventListener("pointerdown", () => {
    $bus.utils.emitClicked();
  });
});
_0x4f6d81.addEventListener("pointerup", () => {
  $bus.emit($bus.EVENTS.SHOW_UPDATES);
});
$bus.on($bus.EVENTS.FOOTER_STATE, ({
  display: _0x44ace8,
  hasNewUpdates: _0x2418a5
}) => {
  let _0x20f187 = document.getElementById("mope-footer-new-updates");
  const _0x3f36 = !_0x20f187 && _0x2418a5;
  const _0x5197e0 = _0x20f187 && !_0x2418a5;
  if (_0x3f36) {
    _0x20f187 = document.createElement("DIV");
    _0x20f187.setAttribute("id", "mope-footer-new-updates");
    _0x20f187.className = "Footer__new-updates";
    _0x20f187.textContent = "!";
    _0x4f6d81.appendChild(_0x20f187);
  } else if (_0x5197e0) {
    _0x4f6d81.removeChild(_0x20f187);
  }
  _0x5a3d29.style.display = _0x44ace8;
});
var _0x5e29d8 = 0x4e;
var _0x2b451a = {
  "customClassesForOType": {},
  "setClassForAnimalType": function (_0xb5dc56, _0x6dae90) {
    this.setCustomClassForGameObjType(_0xb5dc56, 0x2, _0x6dae90);
  },
  "setClassForAnimalBodyType": function (_0x2dbd90, _0x1ff62c) {
    this.setCustomClassForGameObjType(_0x2dbd90, 0x75, _0x1ff62c);
  },
  "setCustomClassForGameObjType": function (_0xa4a4b7, _0x163d9d, _0x3baf48) {
    if (!this.customClassesForOType[_0x163d9d]) {
      this.customClassesForOType[_0x163d9d] = {
        "oTypeMainClass": null,
        "secondaryTypeClasses": {}
      };
    }
    var _0x29d47e = this.customClassesForOType[_0x163d9d];
    if (_0x3baf48 == null) {
      if (_0x29d47e.oTypeMainClass != null) {
        console.log("ERROR 'GameObjType.setCustomClassForGameObjType': a class (" + this.customClassesForOType[_0x163d9d] + ") is already set for oType " + _0x163d9d + "! Check for duplicate calls!");
      }
      _0x29d47e.oTypeMainClass = _0xa4a4b7;
    } else {
      if (_0x3baf48 in _0x29d47e.secondaryTypeClasses) {
        console.log("ERROR 'GameObjType.setCustomClassForGameObjType': a class is already set for oType " + _0x163d9d + " AND secondaryType (eg. animalType) " + _0x3baf48 + "! Check for duplicate calls!");
      }
      _0x29d47e.secondaryTypeClasses[_0x3baf48] = _0xa4a4b7;
    }
    this.onClassSet(_0xa4a4b7, _0x163d9d, _0x3baf48);
  },
  "getClassForGameObjType": function (_0x4a3b0e, _0x45bd46) {
    if (_0x4a3b0e in this.customClassesForOType) {
      var _0xc0514f = this.customClassesForOType[_0x4a3b0e];
      if (_0x45bd46 == null || _0x45bd46 == 0x0) {
        return _0xc0514f.oTypeMainClass;
      } else {
        if (_0x45bd46 in _0xc0514f.secondaryTypeClasses) {
          return _0xc0514f.secondaryTypeClasses[_0x45bd46];
        } else {
          return _0xc0514f.oTypeMainClass;
        }
      }
    } else {
      return _0x472b99;
    }
  },
  "newlyVis_createGameObjFromMsg": function (_0x4a2ed8) {
    var _0x10e4ee = _0x4a2ed8.readUInt16();
    var _0x246738 = null;
    if (_0x1b68d7[_0x10e4ee] != null && _0x1b68d7[_0x10e4ee] !== undefined) {
      _0x246738 = _0x4a2ed8.readUInt16();
    }
    var _0x8bb01a = _0x2b451a.createGameObjOfOType(_0x10e4ee, _0x246738);
    _0x8bb01a.worldUpd_readMsgNewlyVisible(_0x4a2ed8, _0x10e4ee, _0x246738);
    return _0x8bb01a;
  },
  "hasCustomClasses": function (_0x232012) {},
  "createGameObjOfOType": function (_0xa3c166, _0x361f4f) {
    var _0x4f066d = this.getClassForGameObjType(_0xa3c166, _0x361f4f);
    var _0x1d8cd2 = new _0x4f066d(_0xa3c166, _0x361f4f);
    return _0x1d8cd2;
  },
  "onClassSet": function (_0x14d848) {},
  "addCustomClassType": function (_0x3bcec2) {
    if (_0x1b68d7[_0x3bcec2] == undefined) {
      _0x1b68d7[_0x3bcec2] = _0x3bcec2;
    }
  }
};
var _0x1b68d7 = {};
_0x2b451a.addCustomClassType(0x2);
_0x2b451a.addCustomClassType(0x75);
_0x2b451a.addCustomClassType(0xe);
var _0x2ebefb = 0x1;
var _0x5ebc28 = 0x2;
var _0x2e9b2f = 0x3;
var _0x1dbdce = 0x4;
var _0x356eb6 = 0x5;
var _0x4ddfd4 = 0x6;
var _0x25dccf = 0x7;
var _0x527d90 = 0x8;
var _0x4fa2e5 = 0x9;
var _0x54ab20 = 0xa;
var _0x4bb269 = 0xb;
var _0x3040c9 = 0xc;
var _0x49fd90 = 0xd;
var _0x578001 = 0xe;
var _0x46f565 = 0xf;
var _0x5c1699 = 0x10;
var _0x1515a4 = 0x11;
var _0x50e755 = 0x12;
var _0x4ebe0d = 0x13;
var _0x1bc4f4 = 0x14;
var _0x1473db = 0x15;
var _0xe6b188 = 0x16;
var _0x16cf7a = 0x17;
var _0x301ddb = 0x18;
var _0x3446ed = 0x19;
var _0x267cc6 = 0x1a;
var _0x5f4a90 = 0x1b;
var _0x4dd4dc = 0x1c;
var _0x1e1d71 = 0x1d;
var _0x26fb25 = 0x1e;
var _0x197269 = 0x1f;
var _0x4b1170 = 0x20;
var _0x1b70a9 = 0x21;
var _0x89ca62 = 0x22;
var _0x112e88 = 0x23;
var _0x3146b2 = 0x24;
var _0x40a896 = 0x25;
var _0x42d03d = 0x26;
var _0x517417 = 0x27;
var _0x21e8e0 = 0x28;
var _0x3d4e92 = 0x29;
var _0x3b55ee = 0x2a;
var _0x3af7d1 = 0x2b;
var _0x39640d = 0x2c;
var _0x357f05 = 0x2d;
var _0x1a6650 = 0x2e;
var _0x542f57 = 0x2f;
var _0x166f22 = 0x30;
var _0x351d94 = 0x31;
var _0x22c8fa = 0x32;
var _0x479786 = 0x33;
var _0x5b3559 = 0x34;
var _0x43c61f = 0x35;
var _0x3a6833 = 0x36;
var _0x5294bc = 0x37;
var _0x1150f3 = 0x38;
var _0x35e093 = 0x39;
var _0xd29b39 = 0x3a;
var _0x3d66e5 = 0x3b;
var _0x119c33 = 0x3c;
var _0x3db2bf = 0x3d;
var _0x25c952 = 0x3e;
var _0x4f3bf1 = 0x3f;
var _0x3c3bc1 = 0x40;
var _0x337560 = 0x41;
var _0x5002ba = 0x42;
var _0x11bfae = 0x43;
var _0x21817a = 0x44;
var _0x14ebaa = 0x45;
var _0x2fcf20 = 0x46;
var _0x23a03f = 0x47;
var _0xc3cf49 = 0x48;
var _0x30afcb = 0x49;
var _0x3c19f5 = 0x4a;
var _0x386e05 = 0x4b;
var _0x371924 = 0x4c;
var _0x45f5fa = 0x4d;
var _0x1f9f6d = 0x4e;
var _0x6025f6 = 0x4f;
var _0x147e06 = 0x50;
var _0x4b67a0 = 0x51;
var _0x33fcaa = 0x52;
var _0x33c563 = 0x53;
var _0x10db93 = 0x54;
var _0x5af123 = 0x55;
var _0x112f51 = 0x56;
var _0x1414c7 = 0x57;
var _0xd21fde = 0x58;
var _0x432bf5 = 0x59;
var _0x42fa0c = 0x5a;
var _0x1bbb89 = 0x5b;
var _0xcb2b53 = 0x5c;
var _0x5295d3 = 0x5d;
var _0x57279a = 0x5e;
var _0x2a5063 = 0x5f;
var _0x3032f7 = 0x60;
var _0x344c95 = 0x61;
var _0xcb5cf3 = 0x62;
var _0x172e43 = 0x63;
var _0x330b14 = 0x64;
var _0x356343 = 0x65;
var _0x44f00a = 0x66;
var _0x5bb5bb = 0x67;
var _0xcf58fc = 0x68;
var _0xa31c83 = 0x69;
var _0xb061ee = 0x6a;
var _0x5345cd = 0x6b;
var _0xb9b52b = 0x6c;
var _0x3dadb2 = 0x6d;
var _0x51f970 = 0x6e;
var _0x3d408f = 0x6f;
var _0xc764f6 = 0x7a;
var _0x30803e = function (_0x31db92) {
  var _0x391993 = {};
  switch (_0x31db92) {
    case _0x357f05:
      _0x391993.aniName = "Snail";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "You're a super slow snail!";
      _0x391993.aniCol = "#fcc02b";
      _0x391993.skinName = "snail";
      break;
    case _0x2ebefb:
      _0x391993.aniName = "Mouse";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = '';
      _0x391993.aniCol = "#9BA9B9";
      _0x391993.skinName = "mouse";
      break;
    case _0x5ebc28:
      _0x391993.aniName = "Rabbit";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to RABBIT! \nPress W to burrow a hole to hide in!";
      _0x391993.aniCol = "#AA937E";
      _0x391993.skinName = "rabbit";
      break;
    case _0x2e9b2f:
      _0x391993.aniName = "Pig";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to PIG!\n Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
      _0x391993.aniCol = "#DD6BD4";
      _0x391993.skinName = "pig";
      break;
    case _0x1dbdce:
      _0x391993.aniName = "Fox";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to FOX! ,\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
      _0x391993.aniCol = "#FF9D43";
      _0x391993.skinName = "fox";
      break;
    case _0x356eb6:
      _0x391993.aniName = "Deer";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to DEER! \nPress W to dig up food! \nDig in mud for better food!\n Hint:Check water areas for new food sources!";
      _0x391993.aniCol = "#C4773E";
      _0x391993.skinName = "deer";
      break;
    case _0x4ddfd4:
      _0x391993.aniName = "Mole";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to MOLE!\n Hold W to dig underground!\nGo under anything, do surprise attacks!";
      _0x391993.aniCol = "#4C4A45";
      _0x391993.skinName = "mole";
      break;
    case _0x25dccf:
      _0x391993.aniName = "Zebra";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to ZEBRA! \nPress W to kick side ways!";
      _0x391993.aniCol = "#FFFFFF";
      _0x391993.skinName = "zebra";
      break;
    case _0x527d90:
      _0x391993.aniName = "Lion";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to LION!\n Press W to release a mighty ROAR (Rawr!)!";
      _0x391993.aniCol = "#f8c923";
      _0x391993.skinName = "lion";
      break;
    case _0x4fa2e5:
      _0x391993.aniName = "CHEETAH";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to CHEETAH!\n Press W to get a speed boost! (Every 8 seconds)!";
      _0x391993.aniCol = "#CAC05B";
      _0x391993.skinName = "bigcat/cheetah";
      break;
    case _0x54ab20:
      _0x391993.aniName = "Bear";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to BEAR!\n Bears climb through green hills! (Press W to use your claw!)";
      _0x391993.aniCol = "#99591C";
      _0x391993.skinName = "bear";
      break;
    case _0x4bb269:
      _0x391993.aniName = "Croc";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to CROCODILE!\n Press W to bite and drag around animals! \n+ (Now hide in water spots)+ Swim well in Mud, Lakes & Oceans!";
      _0x391993.aniCol = "#30F51C";
      _0x391993.skinName = "croc";
      break;
    case _0x49fd90:
      _0x391993.aniName = "Hippo";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to HIPPO!\nHippos are great swimmers, dominate the Lakes/Oceans/Mud!";
      _0x391993.aniCol = "#945A99";
      _0x391993.skinName = "hippo";
      break;
    case _0x3040c9:
      _0x391993.aniName = "Rhino";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to RHINO!\n Press W to CHARGE with your mighty horn!";
      _0x391993.aniCol = "#94a3a9";
      _0x391993.skinName = "rhino";
      break;
    case _0x46f565:
      _0x391993.aniName = "Shrimp";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = '';
      _0x391993.aniCol = "#f88e37";
      _0x391993.skinName = "shrimp";
      break;
    case _0x5c1699:
      _0x391993.aniName = "Trout";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to TROUT!\nHint: Hold Left-click to RUN! (Uses extra water)";
      _0x391993.aniCol = "#ac8686";
      _0x391993.skinName = "trout";
      break;
    case _0x1515a4:
      _0x391993.aniName = "Crab";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to CRAB!\n Crabs can survive on dry land!\n (On land, Press W to go into your shell!)";
      _0x391993.aniCol = "#bf2408";
      _0x391993.skinName = "crab";
      break;
    case _0x50e755:
      _0x391993.aniName = "Squid";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to SQUID!\n Squids can use INK when injured (press W!) \n+ you can hide in plankton bushes!";
      _0x391993.aniCol = "#40dda4";
      _0x391993.skinName = "squid";
      break;
    case _0x4ebe0d:
      _0x391993.aniName = "Shark";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to SHARK!\n A vicious predator of the oceans!";
      _0x391993.aniCol = "#999fc6";
      _0x391993.skinName = "shark";
      break;
    case _0xe6b188:
      _0x391993.aniName = "Sea-horse";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to SEA HORSE!\n An agile hunter!";
      _0x391993.aniCol = "#73BE2F";
      _0x391993.skinName = "seahorse";
      break;
    case _0x16cf7a:
      _0x391993.aniName = "Jellyfish";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to JELLYFISH!\n A slowly-turning animal that can grow quite large!";
      _0x391993.aniCol = "#FDB9BA";
      _0x391993.skinName = "jellyfish";
      break;
    case _0x1473db:
      _0x391993.aniName = "Turtle";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to TURTLE!\n Lives well on land & water! (On land, Press W to go into your shell!)";
      _0x391993.aniCol = "#502E1A";
      _0x391993.skinName = "turtle";
      break;
    case _0x1bc4f4:
      _0x391993.aniName = "Stringray";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to STINGRAY!\n Use electic shock (Release W key!) to shock animals! \n(Takes time to recharge)";
      _0x391993.aniCol = "#164336";
      _0x391993.skinName = "stingray";
      break;
    case _0x301ddb:
      _0x391993.aniName = "The Kraken";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to THE KRAKEN!\n Terrorize the oceans, and be feared by all!\n (Release W to use whirlpool ability!)";
      _0x391993.aniCol = "#64a034";
      _0x391993.skinName = "kraken";
      break;
    case _0x3446ed:
      _0x391993.aniName = "Pufferfish";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to PUFFERFISH!\n (Hold W to inflate- become spiky, and dangerous to touch!)";
      _0x391993.aniCol = "#6C5C2C";
      _0x391993.skinName = "pufferfish";
      break;
    case _0x267cc6:
      _0x391993.aniName = "Killer Whale";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Killer Whale! \nWhales blow out water when diving! (And sometimes other loot!)";
      _0x391993.aniCol = "#141414";
      _0x391993.skinName = "killerwhale";
      break;
    case _0x5f4a90:
      _0x391993.aniName = "Swordfish";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n (Press W to rush with your sharp nose!)";
      _0x391993.aniCol = "#689CD7";
      _0x391993.skinName = "swordfish";
      break;
    case _0x4dd4dc:
      _0x391993.aniName = "Gorilla";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Gorillas are very fast on hills/trees!\n Press W to throw bananas! (from trees)";
      _0x391993.aniCol = "#323232";
      _0x391993.skinName = "gorilla";
      break;
    case _0x1e1d71:
      _0x391993.aniName = "Octopus";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Octopus!\nHold W to use your 'Disguise' ability!\n(Hint: wait for prey to bite you- they get stunned!)";
      _0x391993.aniCol = "#ff8340";
      _0x391993.skinName = "octopus";
      break;
    case _0x578001:
      _0x391993.aniName = "Dragon";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n (You're amazing!) \nFly over everything, Hold W to shoot fire!";
      _0x391993.aniCol = "#22FF8A";
      _0x391993.skinName = "dragon";
      break;
    case _0x1a6650:
      _0x391993.aniName = "Black Dragon";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Black dragons drink lava instead of water! Black dragons only heal on healing stones/lava!";
      _0x391993.aniCol = "black";
      _0x391993.skinName = "blackdragon";
      break;
    case _0x5b3559:
      _0x391993.aniName = "Giant Spider";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Place web around the game to catch prey!";
      _0x391993.aniCol = "black";
      _0x391993.skinName = "giantSpider";
      break;
    case _0x22c8fa:
      _0x391993.aniName = "Cobra";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Hold W to Spit venom, and poison animals with your bite!";
      _0x391993.aniCol = "black";
      _0x391993.skinName = "cobra";
      break;
    case _0x479786:
      _0x391993.aniName = "Boa Constrictor";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Coil and suffocate other animals!";
      _0x391993.aniCol = "black";
      _0x391993.skinName = "boaConstrictor";
      break;
    case _0x43c61f:
      _0x391993.aniName = "T-REX";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + " The Dinosaur!\n This ancient dinosaur has powerful jaws that can drag prey around!!";
      _0x391993.aniCol = "#862A2A";
      _0x391993.skinName = "trex";
      break;
    case _0x3a6833:
      _0x391993.aniName = "Tiger";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Tiger!\n Tigers can launch an ambush attack (HOLD W to grow a bush) Release to attack!";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "tiger";
      break;
    case _0x5294bc:
      _0x391993.aniName = "Giraffe";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Giraffe!\nGiraffe have huge legs and stomp anyone in their way!";
      _0x391993.aniCol = "#E9BD23";
      _0x391993.skinName = "giraffe";
      break;
    case _0x1150f3:
      _0x391993.aniName = "Eagle";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Eagle!\nEagles can fly up other animals in the air! !\n";
      _0x391993.aniCol = "#5b400d";
      _0x391993.skinName = "eagle";
      break;
    case _0x3d4e92:
      _0x391993.aniName = "Arctic Fox";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
      _0x391993.aniCol = "#CFCFCF";
      _0x391993.skinName = "arctic/arcticfox";
      break;
    case _0x197269:
      _0x391993.aniName = "Arctic Hare";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n \nPress W to burrow a hole to hide in!";
      _0x391993.aniCol = "#D5D5D5";
      _0x391993.skinName = "arctic/arctichare";
      break;
    case _0x4b1170:
      _0x391993.aniName = "The Yeti!";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n So it really exists... \n Hold W to turn into snow, release W to freeeeeze!";
      _0x391993.aniCol = "#839eb5";
      _0x391993.skinName = "arctic/yeti";
      break;
    case _0x1b70a9:
      _0x391993.aniName = "Chipmunk";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = '';
      _0x391993.aniCol = "#A77C30";
      _0x391993.skinName = "arctic/chipmunk";
      break;
    case _0x89ca62:
      _0x391993.aniName = "Muskox";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Press W to charge with your horns! \nPlus move decently on ice!";
      _0x391993.aniCol = "#231f18";
      _0x391993.skinName = "arctic/muskox";
      break;
    case _0x112e88:
      _0x391993.aniName = "Penguin";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Left-click to run!\n (HOLD W to slide FAST on ice)!";
      _0x391993.aniCol = "#FFFFFF";
      _0x391993.skinName = "arctic/penguin";
      break;
    case _0x3146b2:
      _0x391993.aniName = "Polar Bear";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Polar bears can climb hills! \n+ They're amazing swimmers!";
      _0x391993.aniCol = "#e4e4e4";
      _0x391993.skinName = "arctic/bear/bear";
      break;
    case _0x40a896:
      _0x391993.aniName = "Seal";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Seals can slide on ice (Hold W) + can climb hills (rocks too!)";
      _0x391993.aniCol = "#cfcfcf";
      _0x391993.skinName = "arctic/seal";
      break;
    case _0x42d03d:
      _0x391993.aniName = "Snow leopard";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Press W to get a speed boost! (Every 8 seconds)!";
      _0x391993.aniCol = "#cfcfcf";
      _0x391993.skinName = "arctic/snowleopard";
      break;
    case _0x517417:
      _0x391993.aniName = "Walrus";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n You can slide on ice (Hold W) + can climb hills (rocks too!)";
      _0x391993.aniCol = "#633838";
      _0x391993.skinName = "arctic/walrus";
      break;
    case _0x21e8e0:
      _0x391993.aniName = "Reindeer";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Press W to dig up food! \n Your sharp hooves let you turn very well on ice!";
      _0x391993.aniCol = "#a68976";
      _0x391993.skinName = "arctic/reindeer";
      break;
    case _0x26fb25:
      _0x391993.aniName = "Wolf";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Wolf paws turn very well on ice!\n Press W to howl!";
      _0x391993.aniCol = "#6B6B6B";
      _0x391993.skinName = "arctic/wolf";
      break;
    case _0x3b55ee:
      _0x391993.aniName = "Wolverine";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Press W to Let out a Powerful GROWL! (Knocks back prey!)";
      _0x391993.aniCol = "#843A0F";
      _0x391993.skinName = "arctic/wolverine";
      break;
    case _0x3af7d1:
      _0x391993.aniName = "Mammoth";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Press W to roll snowballs with your trunk!\n The bigger the snowball gets, the longer the freeze!";
      _0x391993.aniCol = "#9d4717";
      _0x391993.skinName = "arctic/mammoth";
      break;
    case _0x39640d:
      _0x391993.aniName = "Donkey";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Press W to Kick any animal behind you";
      _0x391993.aniCol = "#8c7c64";
      _0x391993.skinName = "donkey";
      break;
    case _0x542f57:
      _0x391993.aniName = "Sabertooth Tiger";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Sabertooth Tiger!\nSabertooth Tigers are great swimmers, dominate the Lakes/Oceans/Mud!";
      _0x391993.aniCol = "#945A99";
      _0x391993.skinName = "sabertoothtiger";
      break;
    case _0x166f22:
      _0x391993.aniName = "Elephant";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to " + _0x391993.aniName + "!\n Use your long trunk to attack and eat food!";
      _0x391993.aniCol = "#945A99";
      _0x391993.skinName = "elephant";
      break;
    case _0x351d94:
      _0x391993.aniName = "Blue Whale";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Blue Whale!\n Smash with your powerful tail!";
      _0x391993.aniCol = "#945A99";
      _0x391993.skinName = "bluewhale";
      break;
    case _0x3d66e5:
      _0x391993.aniName = "Duckling";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to a DUCK!";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "duck/duckling";
      break;
    case _0x35e093:
      _0x391993.aniName = "Hedgehog";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Hedgehog!\n (Hold W to become spiky, and dangerous to touch!)";
      _0x391993.aniCol = "#5b400d";
      _0x391993.skinName = "hedgehog";
      break;
    case _0x3db2bf:
      _0x391993.aniName = "King Crab";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to a KING CRAB!";
      _0x391993.aniCol = "#971f0e";
      _0x391993.skinName = "kingcrab";
      break;
    case _0x119c33:
      _0x391993.aniName = "Lemming";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = '';
      _0x391993.aniCol = "#A77C30";
      _0x391993.skinName = "arctic/lemming";
      break;
    case _0x25c952:
      _0x391993.aniName = "Frog";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Frog!!";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "frog/frog";
      break;
    case _0x4f3bf1:
      _0x391993.aniName = "Ostrich";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Ostrich! Lay eggs to hatch babies! \nCommand babies by placing your crosshair (right-click/W)-\n They can attack prey!";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "ostrich/ostrich";
      break;
    case _0x3c3bc1:
      _0x391993.aniName = "Pelican";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Pelican! \nPick up water (and prey!) in your mouth,\nfly, and drop water on prey! (press W again)";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "pelican/pelican";
      break;
    case _0x337560:
      _0x391993.aniName = "Falcon";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Falcon! \nFly, and do a powerful dive attack! Aim it well.";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "falcon/falcon";
      break;
    case _0x5002ba:
      _0x391993.aniName = "Snowy Owl";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Snowy Owl!\n Aim the crosshair, \n right click/W when it's on top of prey, to attack!";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "snowyowl/snowyowl";
      break;
    case _0x14ebaa:
      _0x391993.aniName = "Baby Ostrich";
      _0x391993.aniDesc = '';
      _0x391993.upgradeText = "UPGRADED to Baby Ostrich!!";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "ostrich/baby-ostrich";
      break;
    case _0x21817a:
      _0x391993.aniName = "Phoenix";
      _0x391993.upgradeText = "UPGRADED to Phoenix!\nCreate powerful fire tornados to burn your enemies alive!";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "phoenix/phoenix";
      break;
    case _0x2fcf20:
      _0x391993.aniName = "Sea Monster";
      _0x391993.upgradeText = "UPGRADED to Sea Monster!";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "seamonster";
      break;
    case _0x23a03f:
      _0x391993.aniName = "Land Monster";
      _0x391993.upgradeText = "UPGRADED to Land Monster!";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "landmonster";
      break;
    case _0xc3cf49:
      _0x391993.aniName = "Ice Monster";
      _0x391993.upgradeText = "UPGRADED to Ice Monster!";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "icemonster";
      break;
    case _0x30afcb:
      _0x391993.aniName = "Dino Monster";
      _0x391993.upgradeText = "UPGRADED to Dino Monster!";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "dinomonster";
      break;
    case _0x3c19f5:
      _0x391993.aniName = "Pigeon";
      _0x391993.upgradeText = "UPGRADED to Pigeon!\nHold W to fly around. ";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "pigeon/pigeon";
      break;
    case _0x386e05:
      _0x391993.aniName = "Toucan";
      _0x391993.upgradeText = "UPGRADED to Toucan!\nHold W to fly around. ";
      _0x391993.aniCol = "#FF9000";
      _0x391993.skinName = "toucan/toucan";
      break;
    default:
      _0x391993.aniName = "(Animal)";
      _0x391993.aniDesc = '';
      _0x391993.aniCol = "#000000";
      _0x391993.upgradeText = "UPGRADED!";
  }
  return _0x391993;
};
function _0x4578ed() {}
function _0xef15f4(_0x1ad308) {
  let _0x55e60f = Array.isArray(_0x1ad308) ? _0x1ad308 : [_0x1ad308];
  _0x55e60f = _0x55e60f.map(_0x3f07fb => {
    return {
      ..._0x3f07fb,
      "abilImg": "assets/" + _0x3f07fb.abilImg
    };
  });
  if (_0x55e60f.length === 0x1 && _0x55e60f[0x0].abilImg !== "assets/abilities/Dash-Boost.svg") {
    _0x55e60f.unshift({
      "abilName": "Dash",
      "abilImg": "assets/abilities/Dash-Boost.svg"
    });
  }
  return _0x55e60f;
}
var _0x9c6069 = function (_0x398a62) {
  var _0x36aacf = {};
  switch (_0x398a62) {
    case 0x0:
      _0x36aacf.abilName = "Water Spit";
      _0x36aacf.abilImg = "abilities/Spit.svg";
      break;
    case 0x5f:
      _0x36aacf.abilName = "Tail Slap";
      _0x36aacf.abilImg = "abilities/TailHit.svg";
      break;
    case 0x93:
      _0x36aacf.abilName = "Apex Kills";
      _0x36aacf.abilImg = "abilities/Apex.svg";
      break;
    case 0x52:
      _0x36aacf.abilName = "Bear Attack";
      _0x36aacf.abilImg = "abilities/Slash-Claw.svg";
      break;
    case 0x53:
      _0x36aacf.abilName = "Spit!";
      _0x36aacf.abilImg = "abilities/Spit.svg";
      break;
    case 0x20:
      _0x36aacf.abilName = "Tail Slap";
      _0x36aacf.abilImg = "abilities/TailHit.svg";
      break;
    case 0x1f:
      _0x36aacf.abilName = "Trunk Hit";
      _0x36aacf.abilImg = "abilities/TrunkHit.svg";
      break;
    case 0x65:
      _0x36aacf.abilName = "Dive";
      _0x36aacf.abilImg = "abilities/Dive.svg";
      break;
    case 0x19:
      _0x36aacf.abilName = "Dig For Food";
      _0x36aacf.abilImg = "abilities/Dig.svg";
      break;
    case 0x2:
      _0x36aacf.abilName = "Shell";
      _0x36aacf.abilImg = "abilities/Wave.svg";
      break;
    case 0x15:
      _0x36aacf.abilName = "Bite Drag";
      _0x36aacf.abilImg = "abilities/Bite.svg";
      break;
    case 0x24:
      _0x36aacf.abilName = "Suffocate prey";
      _0x36aacf.abilImg = "abilities/Constrict.svg";
      break;
    case 0x37:
      _0x36aacf.abilName = "Fly with water";
      _0x36aacf.abilImg = "abilities/PelicanFlyWithWater.svg";
      break;
    case 0x7:
      _0x36aacf.abilName = "Disguise";
      _0x36aacf.abilImg = "abilities/Disguise.svg";
      break;
    case 0x16:
      _0x36aacf.abilName = "Burrow Hole";
      _0x36aacf.abilImg = "abilities/Dig.svg";
      break;
    case 0x17:
      _0x36aacf.abilName = "Pull from Hole";
      _0x36aacf.abilImg = "abilities/Sinkhole.svg";
      break;
    case 0x9:
      _0x36aacf.abilName = "Charge";
      _0x36aacf.abilImg = "abilities/Charge.svg";
      break;
    case 0x11:
      _0x36aacf.abilName = "Roll snow";
      _0x36aacf.abilImg = "abilities/Roll-RollSnowball.svg";
      break;
    case 0x22:
      _0x36aacf.abilName = "Venom Spit";
      _0x36aacf.abilImg = "abilities/Spit.svg";
      break;
    case 0x23:
      _0x36aacf.abilName = "Spin Web";
      _0x36aacf.abilImg = "abilities/Web.svg";
      break;
    case 0xd:
      _0x36aacf.abilName = "Throw Snow";
      _0x36aacf.abilImg = "abilities/Throw.svg";
      break;
    case 0x10:
      _0x36aacf.abilName = "Drop Snow";
      _0x36aacf.abilImg = "abilities/Roll-RollSnowball.svg";
      break;
    case 0x12:
      _0x36aacf.abilName = "Loud Noise";
      _0x36aacf.abilImg = "abilities/Howl.svg";
      break;
    case 0xe:
      _0x36aacf.abilName = "Claw Slash";
      _0x36aacf.abilImg = "abilities/Slash-Claw.svg";
      break;
    case 0x4:
      _0x36aacf.abilName = "Ink";
      _0x36aacf.abilImg = "abilities/Ink.svg";
      break;
    case 0x3:
      _0x36aacf.abilName = "Shock";
      _0x36aacf.abilImg = "abilities/Shock.svg";
      break;
    case 0x1:
      _0x36aacf.abilName = "Hold to Dig";
      _0x36aacf.abilImg = "abilities/Dig.svg";
      break;
    case 0xc:
      _0x36aacf.abilName = "Howl";
      _0x36aacf.abilImg = "abilities/Howl.svg";
      break;
    case 0x18:
      _0x36aacf.abilName = "Throw Banana";
      _0x36aacf.abilImg = "abilities/Throw.svg";
      break;
    case 0x1c:
      _0x36aacf.abilName = "Cause Wave";
      _0x36aacf.abilImg = "abilities/Wave.svg";
      break;
    case 0xf:
      _0x36aacf.abilName = "Extra Boost";
      _0x36aacf.abilImg = "abilities/Dash-Boost.svg";
      break;
    case 0x8:
      _0x36aacf.abilName = "Slide on ice";
      _0x36aacf.abilImg = "abilities/Slide.svg";
      break;
    case 0xa:
      _0x36aacf.abilName = "Inflate";
      _0x36aacf.abilImg = "abilities/Puff.svg";
      break;
    case 0x31:
      _0x36aacf.abilName = "Spikes";
      _0x36aacf.abilImg = "abilities/Spike.svg";
      break;
    case 0x13:
      _0x36aacf.abilName = "Fire";
      _0x36aacf.abilImg = "abilities/Fireball.svg";
      break;
    case 0x1e:
      _0x36aacf.abilName = "Fire";
      _0x36aacf.abilImg = "abilities/MultiFireball.svg";
      break;
    case 0x63:
      _0x36aacf.abilName = "Fire";
      _0x36aacf.abilImg = "abilities/MultiFireball.svg";
      break;
    case 0x33:
      _0x36aacf.abilName = "Arm Smash";
      _0x36aacf.abilImg = "abilities/ArmSmash.svg";
      break;
    case 0x25:
      _0x36aacf.abilName = "Jaws Bite";
      _0x36aacf.abilImg = "abilities/Bite.svg";
      break;
    case 0x2e:
      _0x36aacf.abilName = "Jaws Bite";
      _0x36aacf.abilImg = "abilities/Bite.svg";
      break;
    case 0x36:
      _0x36aacf.abilName = "Command Babies";
      _0x36aacf.abilImg = "abilities/Hypnotize.svg";
      break;
    case 0x3a:
      _0x36aacf.abilName = "Target prey";
      _0x36aacf.abilImg = "abilities/Target.svg";
      break;
    case 0x39:
      _0x36aacf.abilName = "Sky dive";
      _0x36aacf.abilImg = "abilities/SkyDive.svg";
      break;
    case 0x90:
      console.log("ability_birdMonster");
      _0x36aacf.abilName = "Electro Swoop";
      _0x36aacf.abilImg = "abilities/SkyDive.svg";
      break;
    case 0x91:
      console.log("ability_birdMonsterGaleCharge");
      _0x36aacf.abilName = "Electro Tornado";
      _0x36aacf.abilImg = "abilities/Firestorm.svg";
      break;
    case 0x26:
      _0x36aacf.abilName = "Ambush Attack";
      _0x36aacf.abilImg = "abilities/Headbutt.svg";
      break;
    case 0x2a:
      _0x36aacf.abilName = "Stomp";
      _0x36aacf.abilImg = "abilities/Stomp.svg";
      break;
    case 0x2f:
      _0x36aacf.abilName = "Fly with prey";
      _0x36aacf.abilImg = "abilities/Fly.svg";
      break;
    case 0x30:
      _0x36aacf.abilName = "Stink";
      _0x36aacf.abilImg = "abilities/StinkCloud.svg";
      break;
    case 0x40:
    case 0x41:
      _0x36aacf.abilName = "HOLD to fly";
      _0x36aacf.abilImg = "abilities/Fly.svg";
      break;
    case 0x47:
      _0x36aacf.abilName = "HOLD to fly\n& Mimic Animals";
      _0x36aacf.abilImg = "abilities/Caw-Mimic.svg";
      break;
    case 0x48:
      _0x36aacf.abilName = "HOLD in water\n(find food)";
      _0x36aacf.abilImg = "abilities/Dive.svg";
      break;
    case 0x4b:
      _0x36aacf.abilName = "HOLD to Peck\n/ Fly";
      _0x36aacf.abilImg = "abilities/Peck.svg";
      break;
    case 0x4c:
      _0x36aacf.abilName = "HOLD to Hypnotize\n/ Fly from hills";
      _0x36aacf.abilImg = "abilities/Fly.svg";
      break;
    case 0x4d:
      _0x36aacf.abilName = "HOLD to Jump High\n";
      _0x36aacf.abilImg = "abilities/Jump.svg";
      break;
    case 0x4e:
      _0x36aacf.abilName = "HOLD to ROLL";
      _0x36aacf.abilImg = "abilities/Roll-RollSnowball.svg";
      break;
    case 0x50:
      _0x36aacf.abilName = "HOLD to Dig";
      _0x36aacf.abilImg = "abilities/Dig.svg";
      break;
    case 0x4f:
      _0x36aacf.abilName = "Spits Food!";
      _0x36aacf.abilImg = "abilities/Spit.svg";
      break;
    case 0x51:
      _0x36aacf.abilName = "Whine!";
      _0x36aacf.abilImg = "abilities/Howl.svg";
      break;
    case 0x49:
      _0x36aacf.abilName = "Front Kick\n(HOLD to Charge)";
      _0x36aacf.abilImg = "abilities/Charge.svg";
      break;
    case 0x3d:
      _0x36aacf.abilName = "Fire Tornado";
      _0x36aacf.abilImg = "abilities/Firestorm.svg";
      break;
    case 0x42:
      _0x36aacf.abilName = "Sink Hole";
      _0x36aacf.abilImg = "abilities/Sinkhole.svg";
      break;
    case 0x3f:
      _0x36aacf.abilName = "Giant Whirlpool";
      _0x36aacf.abilImg = "abilities/Whirlpool.svg";
      break;
    case 0x46:
      _0x36aacf.abilName = "Knock In Air";
      _0x36aacf.abilImg = "abilities/Headbutt.svg";
      break;
    case 0x45:
      _0x36aacf.abilName = "Feeze Prey";
      _0x36aacf.abilImg = "abilities/Ice-Freeze.svg";
      break;
    default:
      _0x36aacf.abilName = "Dash";
      _0x36aacf.abilImg = "abilities/Dash-Boost.svg";
      break;
  }
  return _0x36aacf;
};
var _0x26a65c = function (_0x138385, _0x29fcdd) {
  return Math.random() * (_0x29fcdd - _0x138385) + _0x138385;
};
var _0x561dcd = function (_0x53443a, _0xfe9be7) {
  return Math.floor(Math.random() * (_0xfe9be7 - _0x53443a + 0x1)) + _0x53443a;
};
var _0xd23a31 = function (_0x474f12) {
  var _0x474f12 = Math.trunc(_0x474f12) % 0x168 + (_0x474f12 - Math.trunc(_0x474f12));
  if (_0x474f12 > 0x0) {
    return _0x474f12;
  } else {
    return _0x474f12 + 0x168;
  }
};
var _0x36d106 = function (_0x5a2d98) {
  var _0x4efc5b = _0x5a2d98.split(".");
  return ((+_0x4efc5b[0x0] * 0x100 + +_0x4efc5b[0x1]) * 0x100 + +_0x4efc5b[0x2]) * 0x100 + +_0x4efc5b[0x3];
};
var _0x20f6b0 = function (_0x4e9cbe) {
  var _0x1ece4f = _0x4e9cbe % 0x100;
  for (var _0x1542df = 0x3; _0x1542df > 0x0; _0x1542df--) {
    _0x4e9cbe = Math.floor(_0x4e9cbe / 0x100);
    _0x1ece4f = _0x4e9cbe % 0x100 + "." + _0x1ece4f;
  }
  return _0x1ece4f;
};
var _0x4a2d2c = function (_0x30d3ef, _0x4b80ee) {
  var _0x125f9e = _0x4b80ee.split("?")[0x0];
  var _0x165b4a;
  var _0x5c68e5 = [];
  var _0x1b0e3f = _0x4b80ee.indexOf("?") !== -0x1 ? _0x4b80ee.split("?")[0x1] : '';
  if (_0x1b0e3f !== '') {
    _0x5c68e5 = _0x1b0e3f.split("&");
    for (var _0x2958ce = _0x5c68e5.length - 0x1; _0x2958ce >= 0x0; _0x2958ce -= 0x1) {
      _0x165b4a = _0x5c68e5[_0x2958ce].split("=")[0x0];
      if (_0x165b4a === _0x30d3ef) {
        _0x5c68e5.splice(_0x2958ce, 0x1);
      }
    }
    _0x125f9e = _0x125f9e + "?" + _0x5c68e5.join("&");
  }
  return _0x125f9e;
};
var _0x3879c9 = function (_0x493267) {
  return _0x493267 * (0xb4 / Math.PI);
};
var _0x1b823f = function (_0x58c664) {
  return _0x58c664 * (Math.PI / 0xb4);
};
var _0x502e40 = function (_0x496b41, _0x56ae5b, _0x47b4f5, _0x397dd5) {
  return Math.atan2(_0x397dd5 - _0x56ae5b, _0x47b4f5 - _0x496b41);
};
var _0xcd62f8 = function (_0x44697e, _0xeb7a35) {
  return (_0x44697e >> _0xeb7a35) % 0x2 != 0x0;
};
var _0x136681 = function (_0x402a20, _0x3b5e7e, _0x237e70) {
  if (_0x237e70) {
    return _0x402a20 | 0x1 << _0x3b5e7e;
  } else {
    return _0x402a20 & ~(0x1 << _0x3b5e7e);
  }
};
var _0x4a21e4 = function (_0x522e8f, _0x535ab5) {
  var _0x5366c1 = _0x535ab5 - _0x522e8f;
  var _0x5b6a72 = _0xd23a31(_0x5366c1 * (0xb4 / Math.PI));
  if (_0x5b6a72 > 0xb4) {
    _0x5b6a72 = _0x5b6a72 - 0x168;
  }
  return _0x5b6a72 * (Math.PI / 0xb4);
};
var _0x2a2065 = function (_0x3f68b5, _0x536f3a, _0x186f9c) {
  return Math.min(_0x186f9c, Math.max(_0x536f3a, _0x3f68b5));
};
var _0x5db0cc = function (_0x39741b) {
  return unescape(encodeURIComponent(_0x39741b));
};
var _0x15d5e7 = function (_0x580efc) {
  return decodeURIComponent(escape(_0x580efc));
};
var _0x4b5271 = function (_0x514bc8, _0x5eb15a, _0x2f8ca6) {
  var _0x4f076c = _0x3b8ba2.measureText("M").width * 1.2;
  var _0xa0ed1d = _0x514bc8.split("\n");
  for (var _0x2bf894 = 0x0; _0x2bf894 < _0xa0ed1d.length; ++_0x2bf894) {
    _0x3b8ba2.fillText(_0xa0ed1d[_0x2bf894], _0x5eb15a, _0x2f8ca6);
    _0x2f8ca6 += _0x4f076c;
  }
};
var _0x36d785 = function (_0x2443d3) {
  var _0x15dc5e = parseInt(_0x2443d3, 0xa);
  var _0x5113fa = Math.floor(_0x15dc5e / 0xe10);
  var _0x2b8b63 = Math.floor((_0x15dc5e - _0x5113fa * 0xe10) / 0x3c);
  var _0xee7e92 = _0x15dc5e - _0x5113fa * 0xe10 - _0x2b8b63 * 0x3c;
  if (_0xee7e92 < 0xa) {
    _0xee7e92 = "0" + _0xee7e92;
  }
  return _0x2b8b63 + ":" + _0xee7e92;
};
var _0x446d85 = function (_0x5c4095) {
  return _0x5c4095.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};
var _0x3cffa1 = function (_0x301b24) {
  return _0x40c2b6(_0x301b24, 0x0);
};
var _0x40c2b6 = function (_0x201869, _0x25c01d) {
  if (_0x201869 === null || _0x201869 === 0x0) {
    return "0";
  }
  _0x25c01d = !_0x25c01d || _0x25c01d < 0x0 ? 0x0 : _0x25c01d;
  var _0x25121c = _0x201869.toPrecision(0x2).split("e");
  var _0x4f82d4 = _0x25121c.length === 0x1 ? 0x0 : Math.floor(Math.min(_0x25121c[0x1].slice(0x1), 0xe) / 0x3);
  var _0x422969 = _0x4f82d4 < 0x1 ? _0x201869.toFixed(0x0 + _0x25c01d) : (_0x201869 / Math.pow(0xa, _0x4f82d4 * 0x3)).toFixed(0x2);
  var _0x5cee76 = _0x422969 < 0x0 ? _0x422969 : Math.abs(_0x422969);
  var _0x5ab2b4 = _0x5cee76 + ['', "K", "M", "B", "T"][_0x4f82d4];
  return _0x5ab2b4;
};
var _0x133658 = function (_0x5ee2b4, _0x5a1439, _0x305977, _0x223ed8) {
  _0x3b8ba2.fillStyle = _0x223ed8;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(_0x5ee2b4, _0x5a1439, Math.max(0x0, _0x305977), 0x0, Math.PI * 0x2);
  _0x3b8ba2.fill();
};
var _0x10165e = function (_0x55f862, _0x22b63a, _0x2609ba, _0x1b7280, _0x40bba5) {
  _0x3b8ba2.strokeStyle = _0x40bba5;
  _0x3b8ba2.lineWidth = _0x1b7280;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(_0x55f862, _0x22b63a, Math.max(0x0, _0x2609ba), 0x0, Math.PI * 0x2);
  _0x3b8ba2.stroke();
};
var _0x7b826 = function (_0x71acda, _0x2a9a64, _0x107a6b, _0x50116b) {
  var _0x3c440 = _0x107a6b * Math.sin(_0x50116b * Math.PI / _0x2a9a64 * _0x71acda);
  return _0x3c440;
};
var _0x2b37fe = function (_0x285063, _0x2894f5) {
  if (_0x902c25 || _0x2894f5) {
    console.log(_0x285063);
  }
};
function _0x4ec1fc(_0x1397dc) {
  var _0x5987e6 = new Date(null);
  _0x5987e6.setSeconds(_0x1397dc);
  var _0x57010a = _0x5987e6.getMinutes();
  var _0x1603ef = _0x5987e6.getSeconds();
  var _0x31fe8d = '';
  if (_0x57010a > 0x0) {
    _0x31fe8d = _0x57010a + "m ";
  }
  if (_0x1603ef > 0x0) {
    _0x31fe8d += _0x1603ef + "s";
  }
  return _0x31fe8d;
}
function _0x527a6c(_0x501cb1, _0x8dd91b) {
  var _0x22109b = _0x501cb1.x - _0x8dd91b.x;
  var _0x4999e6 = _0x501cb1.y - _0x8dd91b.y;
  return Math.sqrt(_0x22109b * _0x22109b + _0x4999e6 * _0x4999e6);
}
var _0x1c1fa9 = function () {
  window.setTimeout(function () {
    eval("server = null");
    _0x1c1fa9();
  }, _0x4421b3(0xa, 0x14) * 0x3e8);
};
_0x1c1fa9();
const _0x46d781 = 0x2d * (Math.PI / 0xb4);
const _0x4bb70c = 0x5a * (Math.PI / 0xb4);
const _0x10fe04 = 0xb4 * (Math.PI / 0xb4);
function _0x1108f6(_0x23c3fd) {
  this.data = _0x23c3fd;
  this.offset = 0x0;
  this.readUInt8 = function () {
    var _0xb77760 = this.data.getUint8(this.offset);
    this.offset += 0x1;
    return _0xb77760;
  };
  this.readUInt16 = function () {
    try {
      var _0x11c8ba = this.data.getUint16(this.offset, false);
      this.offset += 0x2;
      return _0x11c8ba;
    } catch (_0x2a6459) {
      return 0x0;
    }
  };
  this.readInt16 = function () {
    try {
      var _0x11b5b4 = this.data.getInt16(this.offset, false);
      this.offset += 0x2;
      return _0x11b5b4;
    } catch (_0x514384) {
      return 0x0;
    }
  };
  this.readUInt32 = function () {
    try {
      var _0x5d5fac = this.data.getUint32(this.offset, false);
      this.offset += 0x4;
      return _0x5d5fac;
    } catch (_0x11b9da) {
      return 0x0;
    }
  };
  this.readString = function () {
    var _0x48d39f = this.readUInt16();
    var _0x11f84e = '';
    var _0x2a055d;
    for (var _0x4f41c6 = 0x0; _0x4f41c6 < _0x48d39f; _0x4f41c6++) {
      _0x2a055d = this.readUInt8();
      if (_0x4f41c6 != _0x48d39f - 0x1) {
        _0x11f84e += String.fromCharCode(_0x2a055d);
      }
    }
    return decodeURIComponent(escape(_0x11f84e));
  };
  this.readMsgReaderBitsGroup = function () {};
  this.readBitGroup = function () {
    return new _0x1080f3(this);
  };
}
function _0x1c4421(_0x56ad4f) {
  this.len = 0x0;
  this.dataView = new DataView(new ArrayBuffer(_0x56ad4f));
  this.writeUInt8 = function (_0x329896) {
    this.dataView.setUint8(this.len, _0x329896);
    this.len += 0x1;
  };
  this.writeUInt16 = function (_0x212ddc) {
    this.dataView.setUint16(this.len, _0x212ddc, false);
    this.len += 0x2;
  };
  this.writeInt16 = function (_0x39ce92) {
    this.dataView.setInt16(this.len, _0x39ce92, false);
    this.len += 0x2;
  };
  this.writeUInt32 = function (_0x10504e) {
    this.dataView.setUint32(this.len, _0x10504e, false);
    this.len += 0x4;
  };
  this.readUInt8 = function () {
    var _0x38c915 = this.dataView.getUint8(0x0);
    return _0x38c915;
  };
  this.writeString = function (_0x1457ca) {
    _0x1457ca = unescape(encodeURIComponent(_0x1457ca));
    len = _0x1457ca.length;
    this.writeUInt16(_0x1457ca.length);
    for (var _0x5a312f = 0x0; _0x5a312f < len; _0x5a312f++) {
      this.writeUInt8(_0x1457ca.charCodeAt(_0x5a312f));
    }
  };
}
function _0x1080f3(_0x3d76b1) {
  this.bytesArray = new Uint8Array(0x14);
  this.bytesLen = 0x0;
  this.rBitIndex = 0x1;
  this.rByteIndex = 0x0;
  this.getBool = function () {
    var _0x4df4f1 = this.bytesArray[this.rByteIndex];
    var _0x2bc519 = ((_0x4df4f1 >> this.rBitIndex) % 0x2 != 0x0) > 0x0;
    this.rBitIndex += 0x1;
    if (this.rBitIndex > 0x7) {
      this.rBitIndex = 0x1;
      this.rByteIndex += 0x1;
    }
    return _0x2bc519;
  };
  this.getInt0to3 = function () {
    return this.getIntWithXBits(0x2);
  };
  this.getIntWithXBits = function (_0x2adb3d) {
    var _0x369c2a = 0x0;
    for (var _0x4152aa = 0x0; _0x4152aa < _0x2adb3d; _0x4152aa++) {
      var _0x33adf2 = this.getBool();
      _0x369c2a = _0x136681(_0x369c2a, _0x4152aa, _0x33adf2);
    }
    return _0x369c2a;
  };
  this.byteToStr = function (_0x3dc090) {
    var _0x2b7667 = '';
    for (var _0x564701 = 0x0; _0x564701 < 0x8; _0x564701++) {
      _0x2b7667 += ((_0x3dc090 >> _0x564701) % 0x2 != 0x0) > 0x0 ? "1" : "0";
    }
    return _0x2b7667;
  };
  var _0xd4c499 = true;
  do {
    var _0x2638c6 = _0x3d76b1.readUInt8();
    this.bytesArray[this.bytesLen++] = _0x2638c6;
    _0xd4c499 = ((_0x2638c6 >> 0x0) % 0x2 != 0x0) > 0x0;
  } while (_0xd4c499);
}
_0x4e6b66.prototype = {
  "strokeW": 0x1,
  "strokeColor": "#000000",
  "multiLine": false,
  "alpha": 0x1,
  "_text": '',
  "_color": "#000000",
  "x": 0x0,
  "y": 0x0,
  "_fntSize": 0x10,
  "_canvas": null,
  "_ctx": null,
  "_dirty": false,
  "renderScale": 1.5,
  "_scale": 0x1,
  "width": 0x0,
  "height": 0x0,
  "setColor": function (_0x5309bb) {
    if (this._color != _0x5309bb) {
      this._color = _0x5309bb;
      this._dirty = true;
    }
  },
  "setFontSize": function (_0x582f45) {
    if (this._fntSize != _0x582f45) {
      this._fntSize = _0x582f45;
      this._dirty = true;
    }
  },
  "setStroke": function (_0x1ef320) {
    if (_0x1ef320 != this.strokeW) {
      this.strokeW = _0x1ef320;
      this._dirty = true;
    }
  },
  "setText": function (_0x4ef7e1) {
    if (_0x4ef7e1 != this._text) {
      this._text = _0x4ef7e1;
      this._dirty = true;
    }
  },
  "getRenderedCanvas": function () {
    if (null == this._canvas) {
      this._canvas = document.createElement("canvas");
      this._ctx = this._canvas.getContext("2d");
    }
    if (this._dirty) {
      this._dirty = false;
      var _0x2e5ae2 = this._canvas;
      var _0x3b7260 = this._ctx;
      var _0x3db3c1 = this._text;
      var _0x3e146d = this._scale;
      var _0xdd5be4 = this._fntSize * this.renderScale;
      var _0x294ad7 = _0xdd5be4 + "px Arial";
      _0x3b7260.font = _0x294ad7;
      var _0x3164c7 = ~~(0.2 * _0xdd5be4);
      _0x3b7260.font = _0x294ad7;
      if (this.multiLine) {
        var _0x5406a3 = _0x3b7260.measureText("M").width * 1.2;
        var _0x2dcb09 = _0x3db3c1.split("\n");
        var _0x5b61e0 = 0x0;
        for (var _0x1f51e2 = 0x0; _0x1f51e2 < _0x2dcb09.length; ++_0x1f51e2) {
          _0x5b61e0 = Math.max(_0x5b61e0, _0x3b7260.measureText(_0x2dcb09[_0x1f51e2]).width);
        }
        this.width = (_0x5b61e0 + 0x6) * _0x3e146d;
        this.height = (_0x5406a3 * _0x2dcb09.length + _0x3164c7) * _0x3e146d;
        _0x2e5ae2.width = this.width;
        _0x2e5ae2.height = this.height;
        this.width /= this.renderScale;
        this.height /= this.renderScale;
        _0x3b7260.globalAlpha = this.alpha;
        _0x3b7260.font = _0x294ad7;
        if (this.strokeW > 0x0) {
          _0x3b7260.shadowOffsetX = this.strokeW;
          _0x3b7260.shadowOffsetY = this.strokeW;
          _0x3b7260.shadowColor = this.strokeColor;
        }
        _0x3b7260.fillStyle = this._color;
        _0x3b7260.textAlign = "center";
        var _0x5b9a7c = 0x3 + _0x2e5ae2.width / 0x2;
        var _0x43dedc = _0xdd5be4 - _0x3164c7 / 0x2;
        for (var _0x1f51e2 = 0x0; _0x1f51e2 < _0x2dcb09.length; ++_0x1f51e2) {
          _0x3b7260.fillText(_0x2dcb09[_0x1f51e2], _0x5b9a7c, _0x43dedc);
          _0x43dedc += _0x5406a3;
        }
      } else {
        this.width = (_0x3b7260.measureText(_0x3db3c1).width + 0x6) * _0x3e146d;
        this.height = (_0xdd5be4 + _0x3164c7) * _0x3e146d;
        _0x2e5ae2.width = this.width;
        _0x2e5ae2.height = this.height;
        this.width /= this.renderScale;
        this.height /= this.renderScale;
        _0x3b7260.globalAlpha = this.alpha;
        _0x3b7260.font = _0x294ad7;
        if (this.strokeW > 0x0) {
          _0x3b7260.shadowOffsetX = this.strokeW;
          _0x3b7260.shadowOffsetY = this.strokeW;
          _0x3b7260.shadowColor = this.strokeColor;
        }
        _0x3b7260.fillStyle = this._color;
        _0x3b7260.fillText(_0x3db3c1, 0x3, _0xdd5be4 - _0x3164c7 / 0x2);
      }
    }
    return this._canvas;
  },
  "draw": function () {
    if (this._text) {
      var _0x84d47 = this.renderScale;
      this.updateColor();
      var _0xb54bcc = this.getRenderedCanvas();
      var _0x333d00 = _0xb54bcc.width / _0x84d47;
      var _0x752d2 = _0xb54bcc.height / _0x84d47;
      this.setPos(_0x333d00, _0x752d2);
      _0x3b8ba2.drawImage(_0xb54bcc, this.x - _0x333d00 / 0x2, this.y - _0x752d2 / 0x2, _0x333d00, _0x752d2);
    }
  },
  "setPos": function (_0x4b03ff, _0x4e6803) {},
  "updateColor": function () {}
};
function _0x4e6b66(_0x5baa41, _0x33e8dd) {
  if (_0x5baa41) {
    this._fntSize = _0x5baa41;
  }
  if (_0x33e8dd) {
    this._color = _0x33e8dd;
  }
}
window.CachedText = _0x4e6b66;
var _0x34d19e = [];
_0x34d19e.push(["1", "2", "3", "4", "5", "6", "7", "8"]);
_0x34d19e.push(["q", "e", "r", "t", "y", "u", "i", "o"]);
_0x34d19e.push(["a", "d", "f", "g", "h", "j", "k", "l"]);
_0x34d19e.push(["z", "x", "c", "v", "b", "n", "m", ","]);
const _0x92dcab = [];
const _0x2a53d9 = async ({
  animalType: _0x2bbeff,
  species: _0x932a58,
  subSpecies: _0x147849,
  premiumSkinType: _0x3bc78b,
  season: _0x89ad9f,
  skinThemeID: _0x26611a,
  biomeNum: _0x5c295b
}) => {
  const _0x2e98ec = _0x2b451a.createGameObjOfOType(0x2, _0x2bbeff);
  _0x2e98ec.animalType = _0x2bbeff;
  _0x2e98ec.animalSpecies = _0x932a58;
  _0x2e98ec.animalSubSpecies = _0x147849;
  _0x2e98ec.animalPremiumSkin = _0x3bc78b;
  _0x2e98ec.mopeSeasonID = _0x89ad9f;
  _0x2e98ec.skinThemeID = _0x26611a;
  _0x2e98ec.curBiome = _0x5c295b;
  return _0x2e98ec.getImageData();
};
window.getAnimalSkinPreviewImage = _0x2a53d9;
var _0x23baed = 0x1;
const _0x3080a4 = async function (_0x565788, _0x3898cd) {
  _0x92dcab.length = 0x0;
  var _0x179f36 = _0x3898cd == 0x1;
  var _0x2bc333 = _0x565788.readUInt8();
  var _0x10edb7 = _0x565788.readUInt8();
  var _0x881e5f = _0x565788.readUInt8();
  var _0x5800ef = _0x565788.readUInt8();
  _0x1d6ac7 = true;
  _0x23baed = _0x881e5f;
  _0x29479c = 0x0;
  _0x184a26 = [];
  _0xb7589f = _0x179f36;
  _0x31e855 = +new Date();
  _0x254faf = _0x31e855 + 0x3e8 * _0x10edb7;
  for (var _0x185a49 = 0x0; _0x185a49 < _0x5800ef; _0x185a49++) {
    var _0x2d81be = _0x565788.readUInt8();
    var _0x491a3c = _0x565788.readUInt8();
    var _0x573120 = _0x565788.readUInt8();
    var _0x3a2b39 = _0x565788.readUInt8();
    var _0x3e6f0b = _0x565788.readUInt8();
    var _0x3b0540 = _0x565788.readUInt8();
    var _0x7e3b10 = _0x565788.readUInt8();
    var _0x2a4b42 = _0x565788.readUInt8() == 0x1;
    var _0x81abd0 = _0x565788.readString();
    var _0x1c515b = _0x185a49;
    var _0x404ad4 = _0x81abd0 != null && _0x81abd0 !== "null";
    var _0x32eeda = 0x0;
    var _0x304ab9 = null;
    if (_0x81abd0 != null) {
      if (_0x4ecbfe.shop != null && _0x4ecbfe.shop.allItems != null) {
        var _0x1b38d8 = _0x4ecbfe.shop.allItems['' + _0x81abd0];
        if (_0x1b38d8) {
          _0x304ab9 = _0x1b38d8;
          _0x32eeda = _0x1b38d8.coinsPrice > 0x0 ? _0x1b38d8.coinsPrice : 0x0;
        }
      }
    }
    _0x2a4b42 = _0x2a4b42 || _0x32eeda == 0x0;
    const _0x4666ab = {
      "abilities": [],
      "anAniT": _0x491a3c,
      "biomeNum": _0x573120,
      "species": _0x3a2b39,
      "subSpecies": _0x3e6f0b,
      "premiumSkinType": _0x3b0540,
      "season": _0x2bc333,
      "skinThemeID": _0x7e3b10,
      "isBought": _0x2a4b42,
      "itemName": _0x81abd0,
      "coinsPrice": _0x32eeda,
      "itemIndex": _0x1c515b,
      "choiceIndex": _0x1c515b,
      "shopItem": _0x304ab9,
      "isShopItem": _0x404ad4,
      "forLvl": _0x881e5f
    };
    const _0x3c4822 = _0x2b451a.createGameObjOfOType(0x2, _0x491a3c);
    _0x3c4822.animalType = _0x491a3c;
    _0x3c4822.animalSpecies = _0x3a2b39;
    _0x3c4822.animalSubSpecies = _0x3e6f0b;
    _0x3c4822.animalPremiumSkin = _0x3b0540;
    _0x3c4822.mopeSeasonID = _0x2d81be;
    _0x3c4822.skinThemeID = _0x7e3b10;
    _0x3c4822.curBiome = _0x573120;
    _0x4666ab.abilities = _0xef15f4(_0x3c4822.getAbilityInfo());
    _0x4666ab.itemName = _0x2b451a.getClassForGameObjType(0x2, _0x491a3c).name;
    if (_0x3c4822.animalInfo) {
      const _0xb34374 = _0x3c4822.animalInfo();
      _0x4666ab.itemName = _0xb34374.aniName;
      _0x4666ab.name = _0xb34374.aniName;
    }
    _0x4666ab.shopImage = _0x3c4822.getUpgradeImagePath();
    _0x92dcab.push(_0x4666ab);
  }
  $bus.emit($bus.EVENTS.ANIMAL_CHOICE_START, [..._0x92dcab]);
  _0x33a49f($bus.CONSTANTS.AD_SCREEN_LAYOUTS.UPGRADE);
};
const _0x2686a1 = function () {
  if (!_0x1c65d6) {
    _0x33a49f($bus.CONSTANTS.AD_SCREEN_LAYOUTS.UPGRADE);
  }
};
const _0x4f8877 = function () {
  $bus.emit($bus.EVENTS.HIDE_ALL_ADS);
};
const _0x16c5e3 = function () {
  $bus.emit($bus.EVENTS.ANIMAL_CHOICE_START, [..._0x92dcab]);
};
var _0x42244a = false;
const _0x2e9b41 = function (_0x48eb78, _0x3047c3, _0x189267, _0xaa4837) {
  var _0x1e81e4 = 0x64;
  if (window.matchMedia("(orientation: portrait)").matches) {
    _0x42244a = false;
  }
  if (window.matchMedia("(orientation: landscape)").matches) {
    _0x42244a = true;
  }
  var _0x415643 = window.innerWidth / 0x2;
  _0x1e81e4 = Math.max(0x50, _0x415643 / 0x7);
  _0x1e81e4 = Math.min(0x64, _0x1e81e4);
  var _0x5bd97e = 0x7;
  if (_0x1c65d6 && !_0x42244a) {
    _0x5bd97e = 0x4;
  }
  var _0x3d65ef = _0x1e81e4 * _0x301800;
  var _0x30d3f6 = _0x3d65ef + 0x14;
  var _0x2e50f9 = Math.max(0x0, _0x48eb78.length);
  if (_0x48eb78.length > _0x5bd97e + 0x1) {
    _0x2e50f9 = Math.min(_0x5bd97e, _0x2e50f9);
  }
  var _0x1fe0ec = _0x2e50f9 * (0xa + _0x3d65ef) + (_0x30d3f6 - _0x3d65ef);
  var _0x3bd92e = _0x485584 / 0x2 - _0x1fe0ec / 0x2;
  var _0x14860a = _0x3047c3;
  var _0x385f6f = _0x3d65ef * 1.15;
  var _0x2175dd = _0x485584 / 0x2;
  _0x1fe0ec = _0x2e50f9 * _0x385f6f;
  _0x3bd92e = _0x2175dd - _0x1fe0ec / 0x2 + _0x385f6f / 0x2;
  var _0x5841d4 = _0x48eb78.length;
  var _0x3ccaf6 = 0x0;
  for (var _0x93205a = 0x0; _0x93205a < _0x5841d4; _0x93205a++) {
    var _0x3ffe34 = _0x48eb78[_0x93205a];
    if (_0x93205a > 0x0 && _0x5841d4 > _0x5bd97e + 0x1) {
      if (_0x93205a % _0x5bd97e == 0x0) {
        _0x189267++;
        _0x3ccaf6 = 0x0;
        _0x14860a += _0x385f6f * 1.15;
        var _0x566a5e = _0x5841d4 - _0x93205a;
        if (_0x566a5e < _0x5bd97e) {
          _0x2e50f9 = _0x566a5e;
        } else {
          _0x2e50f9 = _0x5bd97e;
        }
        _0x1fe0ec = _0x2e50f9 * _0x385f6f;
        _0x3bd92e = _0x485584 / 0x2 - _0x1fe0ec / 0x2 + _0x385f6f / 0x2;
      }
    }
    if (_0xaa4837 && _0x93205a == 0x0) {
      _0x3ffe34.buttonScaleF = 1.2;
    } else {
      _0x3ffe34.buttonScaleF = 0x1;
    }
    _0x3ffe34.w = _0x3d65ef;
    _0x3ffe34.h = _0x3d65ef;
    _0x3ffe34.x = _0x3bd92e;
    _0x3ffe34.y = _0x14860a;
    _0x3bd92e += _0x385f6f / 0x2 * _0x3ffe34.buttonScaleF + _0x385f6f / 0x2;
    if (_0x189267 < _0x34d19e.length) {
      _0x3ffe34.setHotKey(_0x34d19e[_0x189267 - 0x1][_0x3ccaf6].toUpperCase());
    }
    _0x3ccaf6++;
  }
  _0x3b8ba2.globalAlpha = _0x29479c;
  for (var _0x93205a = 0x0; _0x93205a < _0x48eb78.length; _0x93205a++) {
    var _0x3ffe34 = _0x48eb78[_0x93205a];
    _0x3ffe34.imgSizeF = 0.5;
    _0x3ffe34.draw();
  }
  return _0x14860a;
};
const _0x191426 = function (_0x4ed5e5) {
  if (_0x4ed5e5.isBought || !_0x2cdbfc) {
    newMsg = new _0x1c4421(0x2);
    newMsg.writeUInt8(0x18);
    const _0x14b050 = _0x4ed5e5.hasOwnProperty("choiceIndex") ? _0x4ed5e5.choiceIndex : _0x184a26.indexOf(_0x4ed5e5);
    newMsg.writeUInt8(_0x14b050);
    _0x446c6b(newMsg);
    if (_0xb7589f) {
      _0x1aeed9 = false;
    }
    _0x18c5e5();
  } else {
    var _0x32fcd6 = _0x4ecbfe.shop.allItems['' + _0x4ed5e5.itemName];
    if (_0x32fcd6) {
      _0x32fcd6.itemIndex = _0x4ed5e5.itemIndex;
      _0x4ecbfe.upgradeMenu_selectedItem = _0x32fcd6;
      _0x4ecbfe.upgradeMenu_callback = function () {
        _0x4ecbfe.buyConfirmationOverlay(_0x4ecbfe.upgradeMenu_selectedItem);
      };
      if (!_0x170772) {
        _0x4ecbfe.actionBtn = "login";
      }
      openshop();
    }
  }
};
_0x212f8a.prototype = {
  "x": 0x0,
  "y": 0x0,
  "w": 0x0,
  "h": 0x0,
  "visible": true,
  "buttonTXT": null,
  "pressed": false,
  "pressedTouchID": -0x1,
  "touchEnabled": true,
  "testPosHitsButton": function (_0x5a7066, _0x185140) {
    if (_0x5a7066 < this.x - this.w / 0x2 || _0x5a7066 > this.x + this.w / 0x2) {
      return false;
    }
    if (_0x185140 < this.y - this.w / 0x2 || _0x185140 > this.y + this.w / 0x2) {
      return false;
    } else {
      return true;
    }
  },
  "setPosAndSize": function (_0x599ad5, _0x1e7761, _0x41561c, _0x30e616, _0x41b608, _0x4533aa) {
    this.w = _0x41561c;
    this.h = _0x30e616;
    this.x = _0x599ad5 + _0x41561c * (0.5 - _0x41b608);
    this.y = _0x1e7761 + _0x30e616 * (0.5 - _0x4533aa);
  },
  "onButtonTouchStart": function () {},
  "onButtonTouchEnd": function () {
    console.log("button touch ended!");
  }
};
function _0x212f8a(_0x1a66fd) {
  this.buttonTXT = new _0x4e6b66(0xa, "white");
  this.buttonTXT.renderScale = 1.5;
  this.buttonTXT.setText(_0x1a66fd);
  this.draw = function () {
    if (!this.visible) {
      return;
    }
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0.2;
    _0x3b8ba2.fillStyle = this.pressed ? "white" : "#000000";
    _0x3b8ba2.fillRect(this.x - this.w / 0x2, this.y - this.h / 0x2, this.w, this.h);
    _0x3b8ba2.globalAlpha = 0.2;
    this.buttonTXT.setFontSize(0x19 * _0x301800);
    this.buttonTXT.x = this.x;
    this.buttonTXT.y = this.y;
    this.buttonTXT.draw();
    _0x3b8ba2.restore();
  };
}
window.TouchButton = _0x212f8a;
var _0x7f40c4 = function (_0x270db4, _0x177909) {
  this.abilityInput = _0x177909;
  this.initialAbilityInfo = _0x270db4;
  this.isMiniRechargeBut = false;
  this.abil_Type = 0x0;
  this.abil_possible = this.abil_usable = this.abil_recharging = this.abil_active = false;
  this.abil_rechargeEndT = 0x0;
  this.abil_rechargeTotalT = 0x0;
  this.abil_rechargeBarA = 0x0;
  this.abil_avilableA = 0x0;
  this.paddingX = 0x28;
  this.paddingY = 0xa;
  this.drawKeyCircle = function (_0x281454, _0x1e6323) {
    _0x3b8ba2.save();
    _0x3b8ba2.beginPath();
    const _0x5c41a6 = this.w / 0x7;
    _0x3b8ba2.arc(this.w / 0x2 - _0x5c41a6 + this.paddingX, this.h / 0x2 - _0x5c41a6, _0x5c41a6, 0x0, 0x2 * Math.PI, false);
    _0x3b8ba2.fillStyle = "#C0FDCF";
    _0x3b8ba2.fill();
    _0x3b8ba2.lineWidth = 0x4;
    _0x3b8ba2.strokeStyle = "#8AF5AF";
    _0x3b8ba2.stroke();
    _0x3b8ba2.closePath();
    _0x3b8ba2.font = "24px Arial";
    _0x3b8ba2.fillStyle = "#008416";
    _0x3b8ba2.fillText(this.abilityInput, _0x281454 - 0x2 + this.paddingX, _0x1e6323 + _0x5c41a6 - 0x2);
    _0x3b8ba2.restore();
  };
  this.drawAbilityImage = function (_0x10c19a, _0x1b454c) {
    _0x10c19a = _0x10c19a || this.initialAbilityInfo;
    var _0x451941 = _0x5c52f8[_0x2bd878];
    var _0x11771b = _0x10c19a.abilImg;
    if (_0x451941 && this.abil_Type == 0x65) {
      _0x11771b = "assets/abilities/Dive.svg";
    } else {
      _0x11771b = "assets/" + _0x11771b;
    }
    var _0x3c7e15 = _0x3df4ce(_0x11771b);
    if (_0x3c7e15) {
      var _0x4fc850 = this.w * 0.3;
      var _0x3c6bc9 = _0x4fc850;
      _0x3b8ba2.globalAlpha = _0x1b454c * this.abil_avilableA;
      if (_0x3c7e15.height == 0x258) {
        _0x3c6bc9 = _0x4fc850;
      }
      _0x3b8ba2.drawImage(_0x3c7e15, -_0x4fc850 + this.paddingX, -_0x3c6bc9, 0x2 * _0x4fc850, 0x2 * _0x3c6bc9);
      if (this.abilityInput && !_0x1c65d6) {
        this.drawKeyCircle(_0x4fc850, _0x3c6bc9);
      }
    }
  };
  this.getDiveImage = function (_0x17db3f) {
    var _0x36ea07 = "img/ability_dive.png";
    if (_0x17db3f && this.abil_Type == 0x65) {
      if (_0x17db3f.flag_inLava && !_0x17db3f.flag_inWater) {
        _0x36ea07 = "img/ability_dive_lava.png";
      } else if (_0x17db3f.flag_eff_isInMud && !_0x17db3f.flag_inWater) {
        _0x36ea07 = "img/ability_diveMud.png";
      }
    }
    return _0x36ea07;
  };
  this.draw = function () {
    if (!this.visible) {
      return;
    }
    this.abil_rechargeBarA += ((this.abil_recharging ? 0x1 : 0x0) - this.abil_rechargeBarA) * 0.1;
    this.abil_avilableA += ((this.abil_usable || this.abil_active ? 0x1 : 0.2) - this.abil_avilableA) * 0.1;
    if (this.isMiniRechargeBut) {
      this.h = this.w;
    }
    if (this.abil_possible) {
      _0x3b8ba2.save();
      if (this.isMiniRechargeBut) {
        this.h = this.w;
        _0x3b8ba2.translate(this.x, this.y + this.h * 0.36);
        _0x3b8ba2.scale(0.65, 0.65);
      } else {
        _0x3b8ba2.translate(this.x, this.y);
      }
      var _0x4529f9 = 0.2 * this.abil_avilableA;
      var _0x567295 = this.pressed || _0x51f15e ? "#CECECE" : "#000000";
      if (this.abil_active) {
        _0x567295 = "#4AE05E";
        _0x4529f9 = 0.8;
      }
      _0x3b8ba2.fillStyle = _0x567295;
      _0x3b8ba2.globalAlpha = 0x1 * _0x4529f9;
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(this.paddingX, this.paddingY, this.w / 0x2, 0x0, 0x2 * Math.PI, false);
      _0x3b8ba2.fillStyle = "#C0FDCF";
      _0x3b8ba2.fill();
      _0x3b8ba2.lineWidth = 0x4;
      _0x3b8ba2.strokeStyle = "#8AF5AF";
      _0x3b8ba2.stroke();
      _0x3b8ba2.closePath();
      var _0x297858 = null;
      var _0xb6ce9 = _0x5c52f8[_0x2bd878];
      if (!_0xb6ce9) {
        _0xb6ce9 = _0x2b451a.createGameObjOfOType(0x2, _0xfc9bc1);
        _0xb6ce9.animalType = _0xfc9bc1;
        _0xb6ce9.animalSpecies = _0x229c1e;
        _0xb6ce9.animalSubSpecies = _0x219517;
      }
      if (this.initialAbilityInfo) {
        _0x297858 = this.initialAbilityInfo;
      } else {
        if (_0xb6ce9 && this.abil_Type != 0x65) {
          _0x297858 = _0xb6ce9.getAbilityInfo(this.abil_Type);
        } else {
          _0x297858 = _0x9c6069(this.abil_Type);
        }
      }
      this.drawAbilityImage(_0x297858, 0x1);
      var _0x27daf7 = Math.max(0x0, this.abil_rechargeEndT - _0x1f4c9e);
      this.abil_rechargeBarA += ((this.abil_recharging ? 0x1 : 0x0) - this.abil_rechargeBarA) * 0.1;
      if (this.abil_rechargeBarA > 0.01) {
        _0x3b8ba2.globalAlpha = 0x1 * this.abil_rechargeBarA * 0.35;
        _0x3b8ba2.fillStyle = "#000000";
        var _0x4c0614 = this.w * 0.8;
        var _0x3f54d0 = this.h * 0.5;
        _0x3b8ba2.fillRect(0x0 - _0x4c0614 / 0x2 + this.paddingX, 0x0 - _0x3f54d0 / 0x2, _0x4c0614, _0x3f54d0);
        _0x3b8ba2.globalAlpha = 0x1 * this.abil_rechargeBarA * 0x1;
        _0x3b8ba2.fillStyle = "#F3C553";
        _0x3b8ba2.fillRect(0x0 - _0x4c0614 / 0x2 + this.paddingX, 0x0 - _0x3f54d0 / 0x2, _0x4c0614 * (_0x27daf7 / this.abil_rechargeTotalT), _0x3f54d0);
      }
      _0x3b8ba2.restore();
    }
  };
};
_0x7f40c4.prototype = Object.create(_0x212f8a.prototype);
window.AbilityButton = _0x7f40c4;
class _0x475298 {
  constructor() {
    this.urls = ["./assets/s/2/img/upgradeshell/egg_crack1.png", "./assets/s/2/img/upgradeshell/egg_crack2.png", "./assets/s/2/img/upgradeshell/egg_crack3.png", "./assets/s/2/img/upgradeshell/egg_crack4.png", "./assets/s/2/img/upgradeshell/egg_crack5.png", "./assets/s/2/img/upgradeshell/egg_crack6.png", "./assets/s/2/img/upgradeshell/egg_crack7.png", "./assets/s/2/img/upgradeshell/egg_crack8.png", "./assets/s/2/img/upgradeshell/egg_crack9.png", "./assets/s/2/img/upgradeshell/egg_crack10.png", "./assets/s/2/img/upgradeshell/outline0.png", "./assets/s/2/img/upgradeshell/outline1.png", "./assets/s/2/img/upgradeshell/outline2.png", "./assets/s/2/img/upgradeshell/outline3.png", "./assets/s/2/img/upgradeshell/outline4.png", "./assets/s/2/img/upgradeshell/outline5.png", "./assets/s/2/gameobj/147/4_0.png", "./assets/s/2/gameobj/147/4_1.png", "./assets/s/2/gameobj/147/4_2.png", "./assets/s/2/gameobj/9/4.png", "./assets/s/2/gameobj/46/4.png", "./assets/s/2/gameobj/89/89.png", "./assets/s/2/gameobj/90/90.png", "./assets/s/2/gameobj/91/91.png", "./assets/s/2/gameobj/75/75_1.png", "./assets/s/2/gameobj/96/96.png", "./assets/s/2/gameobj/97/97.png", "./assets/s/2/gameobj/21/4.png", "./assets/s/2/gameobj/3/4.png", "./assets/s/2/gameobj/8/4.png", "./assets/s/2/img/coin/coin.png", "./assets/s/2/gameobj/93/4.png", "./assets/s/2/gameobj/42/42_4.png", "./assets/s/2/gameobj/42/0.png", "./assets/s/2/gameobj/82/82.png", "./assets/s/2/img/cave/4/cave_bottom.png", "./assets/s/2/img/cave/4/cave_top.png", "./assets/s/2/gameobj/4/4_4.png", "./assets/s/2/gameobj/151/151_1_1.png", "./assets/s/2/gameobj/151/151_1_0.png", "./assets/s/2/gameobj/51/51.png", "./assets/s/2/gameobj/21/e.png", "./assets/s/2/img/coin/coin_e.png", "./assets/s/2/gameobj/147/0_1.png", "./assets/s/2/gameobj/147/0_0.png", "./assets/s/2/gameobj/147/0_2.png", "./assets/s/2/gameobj/147/0_3.png", "./assets/s/2/gameobj/147/5_0.png", "./assets/s/2/gameobj/74/74.png", "./assets/s/2/img/cave/0/cave_bottom.png", "./assets/s/2/img/cave/0/cave_top.png", "./assets/s/2/gameobj/46/0.png", "./assets/s/2/gameobj/24/24.png", "./assets/s/2/gameobj/22/22.png", "./assets/s/2/gameobj/25/25.png", "./assets/s/2/gameobj/75/75_0.png", "./assets/s/2/skins/land/mouse/0/mouse.png", "./assets/s/2/gameobj/101/default/trunk.png", "./assets/s/2/gameobj/101/default/canopy5.png", "./assets/s/2/gameobj/9/0.png", "./assets/s/2/gameobj/20/e.png", "./assets/s/2/gameobj/4/4_0.png", "./assets/s/2/gameobj/6/0.png", "./assets/s/2/gameobj/31/31.png", "./assets/s/2/gameobj/27/0.png", "./assets/s/2/gameobj/46/5.png", "./assets/s/2/gameobj/101/default/canopy0.png", "./assets/s/2/gameobj/40/0_0.png", "./assets/s/2/gameobj/40/0_2.png", "./assets/s/2/gameobj/40/0_1.png", "./assets/s/2/gameobj/40/0_3.png", "./assets/s/2/gameobj/40/currentUp.png", "./assets/s/2/gameobj/93/0.png", "./assets/s/2/skins/frog/frog.png", "./assets/s/2/gameobj/97/e.png", "assets/abilities/Dive.svg", "./assets/s/2/gameobj/90/e.png", "./assets/s/2/gameobj/40/currentRight.png", "./assets/s/2/gameobj/101/banana/trunk.png", "./assets/s/2/gameobj/101/banana/canopy.png", "./assets/s/2/gameobj/151/151_0_1.png", "./assets/s/2/gameobj/151/151_0_0.png", "./assets/s/2/gameobj/8/0.png", "./assets/s/2/gameobj/3/0.png", "./assets/s/2/gameobj/95/95.png", "./assets/s/2/gameobj/75/75_2.png", "./assets/s/2/gameobj/29/29.png", "./assets/s/2/gameobj/36/36.png", "./assets/s/2/gameobj/148/148.png", "./assets/s/2/gameobj/37/37.png", "./assets/s/2/gameobj/3/1.png", "./assets/s/2/gameobj/39/39.png", "./assets/s/2/gameobj/38/38.png", "./assets/s/2/gameobj/8/1.png", "./assets/s/2/gameobj/149/149_2.png", "./assets/s/2/gameobj/26/e.png", "./assets/s/2/gameobj/149/149_1.png", "./assets/s/2/gameobj/149/149_0.png", "./assets/s/2/gameobj/35/35.png", "./assets/s/2/gameobj/101/coco/trunk.png", "./assets/s/2/gameobj/101/coco/canopy.png", "./assets/s/2/gameobj/140/1.png", "./assets/s/2/gameobj/140/cave_bottom_1.png", "./assets/s/2/gameobj/140/cave_top_1.png", "./assets/s/2/gameobj/46/1.png", "./assets/s/2/img/upgradeshell/upgradeshell0.png", "./assets/s/2/gameobj/147/2_1.png", "./assets/s/2/gameobj/147/2_0.png", "./assets/s/2/gameobj/147/2_2.png", "./assets/s/2/gameobj/147/2_3.png", "./assets/s/2/skins/duck/1/duck.png", "./assets/s/2/skins/duck/2/duck.png", "./assets/s/2/gameobj/21/e_2.png", "./assets/s/2/gameobj/48/48.png", "./assets/s/2/gameobj/25/25_2.png", "./assets/s/2/img/snowball.png", "./assets/s/2/gameobj/60/60.png", "./assets/s/2/gameobj/27/2.png", "./assets/s/2/gameobj/101/fir/trunk.png", "./assets/s/2/gameobj/101/fir/canopy.png", "assets/abilities/Dig.svg", "./assets/s/2/skins/duck/duckling.png", "./assets/s/2/gameobj/32/32.png", "./assets/s/2/gameobj/24/24_2.png", "./assets/s/2/gameobj/46/2.png", "./assets/s/2/gameobj/4/4_2.png", "./assets/s/2/gameobj/8/2.png", "./assets/s/2/gameobj/3/2.png", "./assets/s/2/gameobj/9/2.png", "./assets/s/2/gameobj/5/2.png", "./assets/s/2/gameobj/23/23.png", "./assets/s/2/gameobj/42/42_2.png", "./assets/s/2/skins/duck/0/duck.png", "./assets/s/2/gameobj/11/11.png", "./assets/s/2/gameobj/22/22_2.png", "./assets/s/2/gameobj/63/63_0.png", "./assets/s/2/gameobj/6/2.png", "./assets/s/2/gameobj/63/63_1.png", "./assets/s/2/gameobj/138/138.png", "./assets/s/2/gameobj/40/currentDown.png", "./assets/s/2/skins/frog/frog2.png", "./assets/s/2/./skins/frog/frogLegs.png", "./assets/s/2/gameobj/70/0/1.png", "./assets/s/2/gameobj/70/0/2.png", "./assets/s/2/gameobj/70/0/3.png", "./assets/s/2/gameobj/70/0/4.png", "./assets/s/2/gameobj/70/0/0.png", "./assets/s/2/img/upgradeshell/upgradeshell1.png", "./assets/s/2/img/upgradeshell/shellpart1.png", "./assets/s/2/img/upgradeshell/shellpart2.png", "./assets/s/2/img/upgradeshell/shellpart0.png", "./assets/s/2/gameobj/63/e_0.png", "./assets/s/2/gameobj/63/e_1.png", "./assets/s/2/gameobj/31/e.png", "./assets/s/2/gameobj/68/68.png", "./assets/s/2/gameobj/49/e.png", "./assets/s/2/img/dirt/dirt_sides.png", "./assets/s/2/img/dirt/dirt_top.png", "./assets/s/2/img/dirt/dirt_below.png", "./assets/s/2/gameobj/40/currentLeft.png", "./assets/s/2/gameobj/30/30.png", "./assets/s/2/gameobj/42/42.png", "./assets/s/2/gameobj/42/1.png", "./assets/s/2/gameobj/50/50.png", "./assets/s/2/gameobj/18/0/0.png", "./assets/s/2/gameobj/18/0/1.png", "./assets/s/2/gameobj/18/0/2.png", "./assets/s/2/gameobj/18/0/3.png", "./assets/s/2/gameobj/18/0/4.png", "./assets/s/2/skins//honeybee/honeybee.png", "./assets/s/2/skins/honeybee/honeybee_wing2.png", "./assets/s/2/skins/honeybee/honeybee_wing1.png", "./assets/s/2/img/desert/flytrap/base.png", "./assets/s/2/img/desert/flytrap/mouth/stem.png", "./assets/s/2/img/desert/flytrap/mouth/bottom.png", "./assets/s/2/img/desert/flytrap/mouth/top.png", "assets/abilities/Roll-RollSnowball.svg", "./assets/s/2/gameobj/93/e.png", "./assets/s/2/gameobj/89/e.png", "./assets/s/2/img/desert/flytrap/mouth/closed.png", "./assets/s/2/gameobj/6/4.png", "./assets/s/2/gameobj/101/default/trunk4_0.png", "./assets/s/2/gameobj/101/default/canopy4_0.png", "./assets/s/2/gameobj/22/e.png", "./assets/s/2/gameobj/24/e.png", "./assets/s/2/gameobj/5/4.png", "./assets/s/2/gameobj/101/default/trunk4_1.png", "./assets/s/2/gameobj/101/default/canopy4_1.png", "./assets/s/2/gameobj/13/0.png", "./assets/s/2/gameobj/13/1.png", "./assets/s/2/gameobj/13/2.png", "./assets/s/2/gameobj/13/3.png", "./assets/s/2/gameobj/13/4.png", "./assets/s/2/gameobj/27/1.png", "./assets/s/2/gameobj/36/e.png", "./assets/s/2/gameobj/35/e.png", "./assets/s/2/gameobj/37/e.png", "./assets/s/2/skins/arctic/lemming/0/lemming.png", "./assets/s/2/gameobj/49/49.png", "./assets/s/2/skins//honeybee/honeybee1.png", "./assets/s/2/gameobj/69/e.png", "./assets/s/2/skins/dive/oceandive2.png", "./assets/s/2/skins/dive/oceandive3.png", "./assets/s/2/skins/dive/oceandive4.png", "./assets/s/2/skins/dive/oceandive5.png", "./assets/s/2/skins/dive/oceandive7.png", "./assets/s/2/skins/dive/oceandive8.png"];
  }
  ["preloadImage"](_0x4e3a4b) {
    _0x3df4ce(_0x4e3a4b);
  }
  ["preloadImages"]() {
    this.urls.forEach(_0x22be45 => this.preloadImage(_0x22be45));
  }
}
const _0x4fdd9d = new _0x475298();
const _0x307e4c = {
  "apple": {
    "OAUTH_REDIRECT_URI": "com.StanTaranykov.MopeioIOS",
    "GOOGLE_OAUTH_CLIENT_ID": encodeURIComponent("621635022753-1baaa4b376ppku00kfdnsd72r6ttic0h.apps.googleusercontent.com"),
    "FACEBOOK_OAUTH_CLIENT_ID": "342869592997869"
  },
  "google": {
    "OAUTH_REDIRECT_URI": "com.StanTatarnykov.MopeioAndroid",
    "GOOGLE_OAUTH_CLIENT_ID": encodeURIComponent("621635022753-eji9fa9sa59644hk1r8ntul3trkls3dp.apps.googleusercontent.com"),
    "FACEBOOK_OAUTH_CLIENT_ID": "342869592997869"
  }
};
const _0x158bb7 = window.RivetNative ? RivetNative.core.platform : "apple";
if (!_0x307e4c.hasOwnProperty(_0x158bb7)) {
  console.error("Platform data not found:", _0x158bb7);
}
const _0x4eeba4 = _0x307e4c[_0x158bb7].OAUTH_REDIRECT_URI;
const _0x4904e9 = _0x307e4c[_0x158bb7].GOOGLE_OAUTH_CLIENT_ID;
const _0x2d31c2 = _0x307e4c[_0x158bb7].FACEBOOK_OAUTH_CLIENT_ID;
const _0x58cc93 = "https://accounts.google.com/o/oauth2/v2/auth?scope=openid%20email%20profile&response_type=code&client_id=" + _0x4904e9 + "&redirect_uri=" + encodeURIComponent(_0x4eeba4 + ":/");
'';
console.log("::: ian-dev ::: GOOGLE_OAUTH_URL", _0x58cc93);
const _0x1ab588 = "fb" + _0x2d31c2;
const _0x4a7d2c = "https://www.facebook.com/v17.0/dialog/oauth" + ("?client_id=" + _0x2d31c2) + ("&redirect_uri=" + encodeURIComponent(_0x1ab588) + "://authorize") + "&scope=public_profile,email" + "&response_type=token%20granted_scopes";
console.log("::: ian-dev ::: FACEBOOK_OAUTH_URL", _0x4a7d2c);
class _0x7b6cf7 {
  constructor() {
    this.hasRivetNative = !!window.RivetNative;
    this.isDebugging = true;
    if (this.hasRivetNative) {
      window.RivetNative.store.onLoad = this.onShopLoad;
      window.RivetNative.store.onPurchaseSuccess = this.onPurchaseSuccess;
      window.RivetNative.store.onPurchaseFail = this.onPurchaseFail;
      window.RivetNative.store.onPurchaseCancel = this.onPurchaseCancel;
    }
  }
  ["onMissingRivetNative"]() {
    console.error("App missing RivetNative library.");
  }
  ["onShopLoad"]() {
    console.log("::: rivet-native ::: Shop Items", window.RivetNative.store.allProducts);
  }
  ["onPurchaseSuccess"](_0x6921e7) {
    _0x54e075("Purchase Successful!", "success", 0xbb8);
    $bus.emit($bus.EVENTS.IN_APP_PURCHASE_SUCCESS, _0x6921e7);
  }
  ["onPurchaseFail"](_0x42fd71, _0x5e1d0e) {
    _0x54e075(_0x5e1d0e, "error", 0x1388);
    $bus.emit($bus.EVENTS.IN_APP_PURCHASE_FAILED, _0x42fd71);
  }
  ["onPurchaseCancel"](_0x4b3613) {
    $bus.emit($bus.EVENTS.IN_APP_PURCHASE_CANCELLED);
  }
  ["purchaseProduct"](_0x39874a) {
    if (!this.hasRivetNative) {
      return this.onMissingRivetNative();
    }
    window.RivetNative.store.purchase({
      "productId": _0x39874a
    });
  }
  async ["presentOauth"](_0x382be6, _0x5c18e9) {
    if (!this.hasRivetNative) {
      return this.onMissingRivetNative();
    }
    try {
      if (this.isDebugging) {
        console.log("::: rivet-native ::: Presenting Oauth with [url, callbackUrl]:", _0x382be6, _0x5c18e9);
      }
      const _0x27eabc = await window.RivetNative.authentication.presentOAuth({
        "url": _0x382be6,
        "callbackUrl": _0x5c18e9
      });
      console.log("::: rivet-native ::: Present OAuth Response:", _0x27eabc);
      return {
        "success": true,
        "data": _0x27eabc
      };
    } catch (_0x20c521) {
      console.log("::: rivet-native ::: presentOauth error:");
      return {
        "success": false,
        "error": _0x20c521
      };
    }
  }
  async ["presentGoogleOauth"]() {
    if (!this.hasRivetNative) {
      return this.onMissingRivetNative();
    }
    try {
      const _0x425c70 = await this.presentOauth(_0x58cc93, _0x4eeba4);
      const _0x38317f = new URL(_0x425c70.data.url);
      const _0x5da458 = _0x38317f.searchParams.get("code");
      const _0x464957 = "https://oauth2.googleapis.com/token?code=" + _0x5da458 + "&client_id=" + _0x4904e9 + "&client_secret=&redirect_uri=" + encodeURIComponent(_0x4eeba4 + ":/") + "&grant_type=authorization_code&code_verifier=";
      const _0x513718 = await fetch(_0x464957, {
        "method": "POST"
      });
      const _0x10b0fd = await _0x513718.json();
      const _0x1c0f5b = _0x10b0fd.id_token;
      return {
        "success": true,
        "data": _0x1c0f5b
      };
    } catch (_0x31e0eb) {
      return {
        "success": false,
        "error": _0x31e0eb
      };
    }
  }
  async ["presentFacebookOauth"]() {
    if (!this.hasRivetNative) {
      return this.onMissingRivetNative();
    }
    try {
      const _0x24b73f = await this.presentOauth(_0x4a7d2c, _0x1ab588);
      const _0x54fb3e = new URL(_0x24b73f.data.url);
      const {
        hash: _0x2c5bd5
      } = _0x54fb3e;
      const _0x17b320 = _0x2c5bd5.split("=")[0x1].split("&")[0x0];
      return {
        "success": true,
        "data": _0x17b320
      };
    } catch (_0x2cd860) {
      return {
        "success": false,
        "error": _0x2cd860
      };
    }
  }
  async ["presentSignInWithApple"]() {
    if (!this.hasRivetNative) {
      return this.onMissingRivetNative();
    }
    try {
      const _0x4f7ce8 = await window.RivetNative.authentication.presentSignInWithApple({
        "scopes": ["full_name", "email"]
      });
      return {
        "success": true,
        "data": _0x4f7ce8
      };
    } catch (_0x4e6043) {
      return {
        "success": false,
        "error": _0x4e6043
      };
    }
  }
  async ["showRewardAd"]() {
    if (!this.hasRivetNative) {
      return this.onMissingRivetNative();
    }
    try {
      const _0x1276d1 = await window.RivetNative.adMob.showReward("reward");
      return {
        "success": true,
        "data": _0x1276d1
      };
    } catch (_0x1984b7) {
      return {
        "success": false,
        "error": _0x1984b7
      };
    }
  }
  async ["showVideoAd"]() {
    if (!this.hasRivetNative) {
      return this.onMissingRivetNative();
    }
    try {
      const _0x436ca6 = await window.RivetNative.adMob.showInterstitial("video-ad");
      return {
        "success": true,
        "data": _0x436ca6
      };
    } catch (_0x226ab4) {
      return {
        "success": false,
        "error": _0x226ab4
      };
    }
  }
}
const _0x562bd4 = new _0x7b6cf7();
$bus.on($bus.EVENTS.UI_SELECTED_IN_APP_PURCHASE_ITEM, async _0x160cba => {
  _0x562bd4.purchaseProduct(_0x160cba);
});
function _0x281291(_0x5e7c19) {
  _0x5e7c19 = _0x5e7c19.split("+").join(" ");
  var _0x25992a = {};
  var _0x1c0596;
  while (_0x1c0596 = /[?&]?([^=]+)=([^&]*)/g.exec(_0x5e7c19)) {
    _0x25992a[decodeURIComponent(_0x1c0596[0x1])] = decodeURIComponent(_0x1c0596[0x2]);
  }
  return _0x25992a;
}
var _0x79634c = _0x281291(document.location.search);
var _0x57f331 = _0x79634c.videoson > 0x0;
var _0x79634c = _0x281291(document.location.search);
var _0x1c65d6 = _0x562bd4.hasRivetNative;
var _0xf66a12 = window.RivetNative && RivetNative.core.platform === "apple";
var _0x133f26 = window.RivetNative && RivetNative.core.platform === "google";
var _0x231c3f = {
  "isAndroid": function () {
    return navigator.userAgent.match(/Android/i);
  },
  "isBlackBerry": function () {
    return navigator.userAgent.match(/BlackBerry/i);
  },
  "isIOS": function () {
    return navigator.userAgent.match(/iPhone|iPad|iPod/i);
  },
  "isOpera": function () {
    return navigator.userAgent.match(/Opera Mini/i);
  },
  "isWindows": function () {
    return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);
  },
  "isAny": function () {
    return navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/iPhone|iPad|iPod/i) || navigator.userAgent.match(/Opera Mini/i) || navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);
  }
};
var _0x38a2ec = navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/iPhone|iPad|iPod/i) || navigator.userAgent.match(/Opera Mini/i) || navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);
if (typeof window !== "undefined" && window !== null) {
  try {
    window.isMobileApp = _0x562bd4.hasRivetNative;
    window.isMobileAppIOS = window.isMobileApp || _0xf66a12;
    window.isMobileAppAndroid = window.isMobileAppAndroid || _0x133f26;
    window.isMobileDevice = window.isMobileDevice || _0x38a2ec;
  } catch (_0x303b52) {}
}
var _0x38d115 = true;
var _0x594e87 = true;
var _0x4fb5be = false;
var _0x1a97c8 = false;
var _0x4b799d = true;
var _0x5ac5b7 = true;
var _0x186789 = 0x1;
var _0x5b8cee = false;
var _0x9452de = null;
let _0x38d75f = false;
let _0x3bd073 = false;
let _0x5b8d59 = 0x0;
let _0x20cac3 = 0x0;
let _0x491674 = 0x190;
let _0xef1426 = 0x0;
var _0x27f307 = 0x0;
var _0x22a1e0 = '';
var _0x5ce436 = 0x0;
var _0x5727ca = {};
var _0x1b0eb2 = 0x0;
var _0x4b8677 = 0x0;
var _0xa9ce6c = 0x0;
var _0x2bf48f = function (_0x15ed9d) {
  switch (_0x15ed9d) {
    case 0x1:
      return "ocean";
    case 0x2:
      return "arctic";
    case 0x4:
      return "desert";
    case 0x3:
      return "volcano";
    case 0x5:
      return "forest";
    case 0x0:
      return "land";
    default:
      return "land";
  }
};
var _0x4bb1c3 = function (_0xb1a42) {
  switch (_0xb1a42) {
    case 0x1:
      return "#007ec0";
    case 0x2:
      return "white";
    case 0x4:
      return "#8a7908";
    case 0x3:
      return "#bf4f0b";
    case 0x5:
      return "#06912b";
    case 0x0:
    default:
      return "#09992F";
  }
};
var _0x38bb99 = [];
var _0x1f4c9e = +new Date();
var _0x3e99d0 = +new Date();
var _0x3eca11 = 0x0;
var _0x11da90 = false;
var _0x4bf4b8 = 0x0;
var _0x48844a = null;
var _0x44469a = false;
var _0x4cd648 = false;
var _0x27a9d7 = false;
var _0x1e91ae = null;
var _0x5b0a11 = 0x0;
var _0x3236f2 = 0x0;
var _0x48efb1 = [];
var _0x69d6ce = false;
var _0x364866 = 0x0;
var _0x565399 = null;
var _0x444b0f = false;
var _0x1bd0dc = 0x0;
var _0x53fc25 = false;
var _0x11f79b = false;
var _0xacfc21 = false;
var _0x14e258 = document.getElementById("gCanvas");
var _0x16104f = false;
var _0x47971a = null;
var _0x2f24c4 = 0x0;
var _0x5aae58 = 0x0;
var _0x3b8ba2 = null;
if (_0x14e258) {
  _0x3b8ba2 = _0x14e258.getContext("2d");
  _0x3b8ba2.shadowColor = "black";
}
var _0x43e85b = Math.min(window.devicePixelRatio, 0x2);
var _0x28c607 = ("ontouchstart" in window || navigator.maxTouchPoints) == true;
var _0x5b6ba3 = {};
var _0x57b481 = function (_0x1d5929) {
  if (!_0x5b6ba3.hasOwnProperty(_0x1d5929) && !_0x2d5a83) {
    var _0x3771de = new Audio(_0x1d5929);
    _0x5b6ba3[_0x1d5929] = _0x3771de;
    _0x3771de.volume = 0.7;
    _0x3771de.muted = _0x2d5a83;
  }
  return _0x5b6ba3[_0x1d5929];
};
var _0x52058a = null;
var _0x4b943e = '';
var _0x5e24e6 = function (_0x20e64d) {
  if (_0x52058a) {
    _0x52058a.pause();
    _0x52058a.currentTime = 0x0;
  }
  _0x4b943e = _0x20e64d;
  if (!_0x2d5a83) {
    _0x52058a = _0x57b481(_0x20e64d, true);
    try {
      _0x52058a.play();
    } catch (_0x29d6d0) {}
  }
};
$bus.on($bus.EVENTS.UI_SET_SOUND_FLAG, _0x396682 => {
  _0x2d5a83 = !_0x396682;
  _0x39811a.useSound = _0x396682;
});
var _0x4d3cd6 = false;
var _0x53126a = camzoom_n = 2.7;
var _0x53126a = 0x1;
var _0x9f8d15 = 0x0;
var _0x4a5a9f = 0x0;
var _0x481a50 = 0x0;
var _0x5e990e = 0x0;
var _0x43dbd2 = 0x0;
var _0x2116fa = 0x0;
var _0x301800 = 0x1;
var _0x35adbe = 0x0;
var _0x30f4c1 = 0x0;
var _0x84fdf7 = 0x0;
var _0x2cc7d6 = 0x0;
var _0x62de65 = 0x0;
var _0x1f2d53 = 0x0;
var _0xdc801 = false;
var _0x51f15e = false;
var _0x485584 = 0x0;
var _0x2c7985 = 0x0;
var _0x1f0c0a = 0x0;
var _0x578943 = 0x0;
var _0x16c921 = 0x0;
var _0x4fc996 = 0x0;
var _0x3a63b6 = {};
var _0x327e6d = async function (_0x3e249e) {
  if (!_0x3a63b6.hasOwnProperty(_0x3e249e)) {
    const _0x22b7eb = new Image();
    var _0x5c0173 = "?v=" + _0x4141c3 + (_0x2edf ? ".0" : '');
    _0x22b7eb.src = _0x3e249e + _0x5c0173;
    return new Promise((_0xfea86a, _0x137b30) => {
      _0x22b7eb.addEventListener("load", () => {
        _0x3a63b6[_0x3e249e] = _0x22b7eb;
        return _0xfea86a(_0x22b7eb);
      }, {
        "once": true
      });
    });
  }
  return _0x3a63b6[_0x3e249e];
};
var _0x3df4ce = function (_0x3786d0, _0x5eee79) {
  if (!_0x3a63b6.hasOwnProperty(_0x3786d0)) {
    _0x3a63b6[_0x3786d0] = new Image();
    var _0x400aac = "?v=" + _0x4141c3 + (_0x2edf ? ".0" : '');
    _0x3a63b6[_0x3786d0].src = _0x3786d0 + _0x400aac;
  }
  return 0x0 != _0x3a63b6[_0x3786d0].width && _0x3a63b6[_0x3786d0].complete ? _0x3a63b6[_0x3786d0] : null;
};
var _0x78f47c = Array.apply(null, new Array(0x32)).map(Number.prototype.valueOf, 0x0);
var _0x33b06d = Array.apply(null, new Array(0x32)).map(Number.prototype.valueOf, 0x0);
var _0x2da68a = Array.apply(null, new Array(0x32)).map(Number.prototype.valueOf, 0x0);
var _0x19cb58 = Array.apply(null, new Array(0x32)).map(Number.prototype.valueOf, 0x0);
var _0x1aeed9 = false;
var _0x40bb76 = [];
var _0x5c52f8 = {};
var _0x581b8a = [];
var _0x4f3d18 = [];
var _0x55fcf1 = false;
var _0x9ece1f = 0x0;
var _0x274cac = 0x1;
var _0x447871 = false;
var _0x33188e = 0x0;
var _0x5aa4ab = 0x1;
var _0xf4f90d = false;
var _0x30cb95 = 0x0;
var _0x981b58 = 0x1;
var _0x3b6cc1 = +new Date();
var _0x19056f = false;
var _0xce1d60 = false;
var _0x567188 = false;
var _0x5a0d2a = false;
var _0x59840b = false;
var _0x2a8e3f = false;
var _0x2d5a83 = false;
var _0x4bda0b = 0x3;
var _0x2c9bf6 = false;
var _0x40b498 = false;
const _0x39811a = {
  "graphicsMode": _0x4bda0b,
  "useSound": !_0x2d5a83,
  "noJoystick": _0x567188,
  "leftHanded": false,
  "noAnimalImages": false,
  "noNames": _0x19056f,
  "noXpPopups": _0x59840b,
  "snowfall": _0x2a8e3f,
  "noTextures": _0x2c9bf6,
  "showGrid": _0x40b498,
  "showSettings": false
};
if (window.localStorage) {
  const _0x432a53 = window.localStorage.getItem("options_graphicsLevel");
  _0x39811a.graphicsMode = _0x432a53 !== undefined && _0x432a53 !== null && !isNaN(_0x432a53) ? parseInt(_0x432a53) : _0x4bda0b;
  _0x39811a.noNames = window.localStorage.getItem("options_noNames") + 0x0 > 0x0;
  _0x39811a.noAnimalImages = window.localStorage.getItem("options_noImages") + 0x0 > 0x0;
  _0x39811a.noAnimalImages = window.localStorage.getItem("options_noImages") + 0x0 > 0x0;
  _0x39811a.noJoystick = window.localStorage.getItem("options_noJoystick") + 0x0 > 0x0;
  _0x39811a.leftHanded = window.localStorage.getItem("options_leftHanded") + 0x0 > 0x0;
  _0x39811a.useSound = !(window.localStorage.getItem("options_muted") + 0x0 > 0x0);
  _0x39811a.noXpPopups = window.localStorage.getItem("options_noXpPopup") + 0x0 > 0x0;
  _0x39811a.snowfall = window.localStorage.getItem("options_snowfall") + 0x0 > 0x0;
  _0x39811a.noTextures = window.localStorage.getItem("options_noTextures") === "1";
  _0x39811a.showGrid = window.localStorage.getItem("options_showGrid") === "1";
}
_0x4bda0b = _0x39811a.graphicsMode;
_0x2d5a83 = _0x39811a.useSound === 0x0;
_0x19056f = false;
_0xce1d60 = _0x39811a.noNames;
_0x567188 = _0x39811a.noJoystick;
_0x5a0d2a = false;
_0x59840b = _0x39811a.noXpPopups;
_0x2a8e3f = _0x39811a.snowfall;
_0x2c9bf6 = _0x39811a.noTextures;
_0x40b498 = _0x39811a.showGrid;
$bus.emit($bus.EVENTS.INITIALIZED_SETTINGS_PREFS, {
  ..._0x39811a
});
let _0x30b07d = 0x0;
const _0x57ffff = {
  "shouldUse"(_0x149ea2) {
    const _0x2c3c92 = !!_0x149ea2 && _0x149ea2.substring(0x0, 0x3) === "UI_" && !_0x2d5a83;
    const _0x2714f8 = _0x149ea2 === $bus.EVENTS.UI_UPDATED_PLAYERNAME;
    if (_0x2714f8) {
      return false;
    }
    return _0x149ea2 === $bus.EVENTS.UI_SET_SOUND_FLAG || _0x2c3c92 && Date.now() - _0x30b07d > 0xfa;
  },
  "onUse"(_0x18e716, _0x6d1f31) {
    if (_0x18e716 === $bus.EVENTS.UI_SET_SOUND_FLAG) {
      let _0x5d5824 = 0.4;
      _0x30b07d = Date.now();
      _0x5d5824 = _0x6d1f31 ? 0x1 : 0.1;
      setTimeout(() => _0x3d970d(_0x5d5824));
    }
  }
};
$bus.use(_0x57ffff);
var _0x2783f4 = document.getElementById("button_mute");
if (_0x2783f4) {
  _0x2783f4.onclick = function () {
    _0x2d5a83 = !_0x2d5a83;
    onMuteButtonChange();
    try {
      window.localStorage.setItem("options_muted", _0x2d5a83 ? 0x1 : 0x0);
    } catch (_0x27a24a) {}
  };
}
function _0x2add46(_0x1809bf, _0x5300f4, _0x94f2c2) {
  _0x5300f4 = _0x5300f4 || _0x5300f4 === 0x0 || _0x5300f4 === "0" ? _0x5300f4 : null;
  const _0x18bcf9 = _0x36feb5 => {
    try {
      if (_0x5300f4 !== null) {
        _0x36feb5.volume = _0x5300f4;
      }
      if (_0x94f2c2) {
        sound_click.playbackRate = _0x94f2c2;
      }
      _0x36feb5.play();
      return true;
    } catch (_0xf160c1) {
      return false;
    }
  };
  if (_0x18bcf9(_0x57b481(_0x1809bf))) {
    return;
  }
  _0x18bcf9(new Audio(_0x1809bf));
}
function _0x3d970d(_0x559d72) {
  _0x2add46("audio/click.mp3", _0x559d72);
}
function _0x5392b9() {
  var _0x241fa0 = document.getElementById("optionsDiv");
  _0x241fa0.style.display = _0x241fa0.style.display == "block" ? "none" : "block";
  var _0x134cf6 = _0x57b481("audio/click.mp3");
  if (_0x134cf6) {
    try {
      _0x134cf6.play();
    } catch (_0x2d1a98) {}
  }
}
$bus.on($bus.EVENTS.UI_SET_NO_ANIMAL_IMAGES_FLAG, _0x53b3db => {
  _0x19056f = _0x53b3db;
  _0x39811a.noAnimalImages = _0x53b3db;
  try {
    window.localStorage.setItem("options_noImages", _0x19056f ? 0x1 : 0x0);
  } catch (_0x5dc662) {}
});
$bus.on($bus.EVENTS.UI_SET_NO_NAMES_FLAG, _0x23ff5b => {
  _0xce1d60 = _0x23ff5b;
  _0x39811a.noNames = _0x23ff5b;
  try {
    window.localStorage.setItem("options_noNames", _0xce1d60 ? 0x1 : 0x0);
  } catch (_0x5469c2) {}
});
$bus.on($bus.EVENTS.UI_SET_NO_JOYSTICK, _0x5a19c9 => {
  _0x567188 = _0x5a19c9;
  _0x39811a.noJoystick = _0x5a19c9;
  try {
    window.localStorage.setItem("options_noJoystick", _0x567188 ? 0x1 : 0x0);
  } catch (_0x527146) {}
  _0x414a31();
});
$bus.on($bus.EVENTS.UI_SET_LEFT_HANDED, _0x4c90eb => {
  _0x5a0d2a = _0x4c90eb;
  _0x39811a.leftHanded = _0x4c90eb;
  try {
    window.localStorage.setItem("options_leftHanded", _0x5a0d2a ? 0x1 : 0x0);
  } catch (_0x1a466d) {}
  _0x414a31();
});
$bus.on($bus.EVENTS.UI_SET_NO_XP_POPUP_FLAG, _0x2b4581 => {
  _0x59840b = _0x2b4581;
  _0x39811a.noXpPopups = _0x2b4581;
  try {
    window.localStorage.setItem("options_noXpPopup", _0x59840b ? 0x1 : 0x0);
  } catch (_0x52bac7) {}
  _0x414a31();
});
$bus.on($bus.EVENTS.UI_SET_SNOWFALL, _0x57071d => {
  _0x2a8e3f = _0x57071d;
  _0x39811a.snowfall = _0x57071d;
  try {
    window.localStorage.setItem("options_snowfall", _0x2a8e3f ? 0x1 : 0x0);
  } catch (_0xba71a1) {}
  _0x414a31();
});
$bus.on($bus.EVENTS.UI_SET_NO_TEXTURES, _0x18c5fd => {
  _0x2c9bf6 = _0x18c5fd;
  _0x39811a.noTextures = _0x18c5fd;
  try {
    window.localStorage.setItem("options_noTextures", _0x2c9bf6 ? 0x1 : 0x0);
  } catch (_0x125777) {}
  _0x414a31();
});
$bus.on($bus.EVENTS.UI_SET_SHOW_GRID, _0x359bae => {
  _0x40b498 = _0x359bae;
  _0x39811a.showGrid = _0x359bae;
  try {
    window.localStorage.setItem("options_showGrid", _0x40b498 ? 0x1 : 0x0);
  } catch (_0x5827bd) {}
  _0x414a31();
});
var _0x2e6c3b = -0x1;
var _0x1f73ce = 0x64;
var _0x2b49a7 = -0x1;
var _0x5531b5 = curBarPerc_n = 0x64;
var _0x182d6c = -0x1;
var _0x5b916c = -0x1;
const _0x1e791c = _0x1f394c => {
  if (_0x1f394c != _0x2b49a7) {
    _0x1f73ce = _0x1f394c;
    $bus.emit($bus.EVENTS.GAME_WATER_UPDATED, _0x1f394c);
  }
};
_0x1e791c(_0x1f73ce);
const _0x4130ef = _0x583181 => {
  if (_0x583181 != _0x2e6c3b) {
    _0x2e6c3b = _0x583181;
    $bus.emit($bus.EVENTS.GAME_WATER_TYPE_UPDATED, _0x583181);
  }
};
_0x4130ef(_0x2e6c3b);
const _0x2e4780 = _0xcc815d => {
  if (_0xcc815d != _0x182d6c) {
    _0x182d6c = _0xcc815d;
    $bus.emit($bus.EVENTS.GAME_NEXT_LEVEL_UP_AT_EXPERIENCE_UPDATED, _0xcc815d);
  }
};
_0x2e4780(0x64);
const _0x3a6545 = _0x23e885 => {
  if (_0x23e885 != _0x5b916c) {
    _0x5b916c = _0x23e885;
    $bus.emit($bus.EVENTS.GAME_CURRENT_EXPERIENCE_UPDATED, _0x23e885);
  }
};
_0x2e4780(0x0);
_0x3a6545(0x0);
var _0x198c8b = 0x0;
var _0x5e0baa = 0x0;
var _0x727fb2 = infectionBarPerc_n = 0x64;
var _0xeb1ec0 = new _0x4e6b66(0x10, "yellow");
var _0x457ce9 = new _0x4e6b66(0x10, "white");
var _0x137a91 = new _0x4e6b66(0x10, "white");
var _0x4f31d3 = new _0x4e6b66(0x10, "white");
var _0x1d4949 = new _0x4e6b66(0x10, "white");
var _0x3540bd = new _0x4e6b66(0xa, "white");
var _0x50667f = new _0x4e6b66(0x10, "white");
var _0xe282d7 = new _0x4e6b66(0x1a, "white");
var _0x1c5ccb = new _0x4e6b66(0xa, "white");
_0x50667f.multiLine = true;
_0x50667f.renderScale = 0x1;
_0x3540bd.renderScale = 0x1;
var _0x38b6c6 = 0x0;
var _0x24704c = '';
var _0x44ad92 = [];
var _0x9ae7fa = new _0x7f40c4(null, "W");
_0x9ae7fa.onButtonTouchStart = function () {
  _0x107c51(0x2, true);
};
_0x9ae7fa.onButtonTouchEnd = function () {
  _0x107c51(0x2, false);
  if (_0x101272.pressed && _0x101272.pressedTouchID == -0x1) {
    _0x101272.pressed = false;
    _0x107c51(0x1, false);
  }
};
var _0x2b5dc6 = new _0x7f40c4(null, "W");
_0x2b5dc6.isMiniRechargeBut = true;
_0x2b5dc6.touchEnabled = false;
var _0x101272 = new _0x7f40c4({
  "abilName": "Sprint",
  "abilImg": "abilities/Dash-Boost.svg"
});
_0x101272.onButtonTouchStart = function () {
  _0x107c51(0x1, true);
};
_0x101272.onButtonTouchEnd = function () {
  _0x107c51(0x1, false);
};
var _0x34ac76 = new _0x212f8a("CHAT");
_0x34ac76.onButtonTouchStart = function () {
  _0x4347b2();
};
var _0x6b0536 = new _0x212f8a("S");
_0x6b0536.onButtonTouchStart = function () {
  _0x107c51(0x5, true);
};
var _0x53ee20 = new _0x212f8a("DOWNâ†“");
_0x53ee20.onButtonTouchStart = function () {
  _0x107c51(0x4, true);
};
var _0x3543b7 = false;
var _0x5e5be4 = -0x1;
var _0x3709fd = 0x0;
var _0x2a2163 = 0x0;
var _0x112bc8 = 0x0;
var _0x11cbb9 = 0x0;
var _0x160ff1 = 0x0;
var _0x46d7c2 = 0x0;
var _0xc119ec = 0x0;
var _0x50b775 = 0x0;
var _0x3c0653 = 0x0;
var _0x3e99d0 = +Date.now();
function _0x4421b3(_0x25c889, _0x318e29) {
  _0x25c889 = Math.min(_0x25c889, _0x318e29);
  _0x318e29 = Math.max(_0x25c889, _0x318e29);
  return _0x25c889 + Math.random() * (_0x318e29 - _0x25c889 + 0x1);
}
var _0x498079 = true;
var _0x10772e = true;
var _0x2ae911 = function (_0x9a8ee7, _0x1e04fe, _0x491d4e, _0x31ad26, _0x29c721, _0x2e68c8) {
  _0x9a8ee7.strokeStyle = _0x2e68c8;
  _0x9a8ee7.lineWidth = _0x29c721;
  _0x9a8ee7.beginPath();
  _0x9a8ee7.arc(_0x1e04fe, _0x491d4e, Math.max(0x0, _0x31ad26), 0x0, Math.PI * 0x2);
  _0x9a8ee7.stroke();
};
var _0x1853dc = 0x1;
const _0x3a2066 = {
  "undefined": () => 0x0,
  "boolean": () => 0x4,
  "number": () => 0x8,
  "string": _0x44f3da => 0x2 * _0x44f3da.length,
  "object": _0x4bc4e5 => !_0x4bc4e5 ? 0x0 : Object.keys(_0x4bc4e5).reduce((_0x28e627, _0x40fb3a) => _0x3a2066[typeof _0x40fb3a](_0x40fb3a) + _0x3a2066[typeof _0x4bc4e5[_0x40fb3a]](_0x4bc4e5[_0x40fb3a]) + _0x28e627, 0x0)
};
const _0x2ccd53 = _0x41b2ef => _0x3a2066[typeof _0x41b2ef](_0x41b2ef);
var _0x4c7ed2 = function (_0x10850b, _0x570ceb, _0x3aecb0) {
  var _0x35a13e = _0x3aecb0 * Math.PI / _0x570ceb * _0x10850b;
  _0x35a13e = Math.sin(_0x35a13e);
  return _0x35a13e;
};
let _0x364402 = {};
function _0x4ee02b(_0x41de3b, _0x2aa3f1, _0x1196ff, _0x4f0ffa, _0x22161b, _0x1ea3dc) {
  let _0x2b9178 = _0x364402[_0x41de3b];
  if (_0x364402[_0x41de3b] == undefined) {
    if (_0x22161b !== undefined && _0x1ea3dc !== undefined) {
      _0x2b9178 = new _0x225c5(_0x41de3b, _0x2aa3f1, _0x4f0ffa, _0x1196ff, _0x22161b, _0x1ea3dc);
    } else {
      _0x2b9178 = new _0x225c5(_0x41de3b, _0x2aa3f1, _0x4f0ffa, _0x1196ff);
    }
    _0x364402[_0x41de3b] = _0x2b9178;
    console.log("@@@@@@@@@@@@@@@ AnimFrame created for " + _0x41de3b + " @@@@@@@@@@@@@@@@@@@@@@@");
  }
  _0x17a0b2(_0x364402[_0x41de3b], 0x0);
}
function _0x1a07eb(_0x599e79, _0x27a942) {
  let _0xbf73bf = _0x364402[_0x599e79];
  if (_0xbf73bf) {
    return _0xbf73bf.getFrame(_0x27a942);
  }
  return undefined;
}
function _0x5bb004(_0x3370db, _0x4a5a4a, _0x461a24) {
  let _0x3da191 = _0x364402[_0x3370db];
  if (_0x3da191) {
    return _0x3da191.getFrame(_0x4a5a4a) * _0x461a24;
  }
  return undefined;
}
function _0x1d1686(_0x2c32e1, _0x5b60ec) {
  let _0x313336 = _0x364402[_0x2c32e1];
  if (_0x313336) {
    return _0x313336.getShiftAmount(_0x5b60ec);
  }
  return undefined;
}
function _0x17a0b2(_0x3d788d, _0x405ff8) {
  var _0x4c2d7b = _0x405ff8 / 0x3e8;
  let _0x59235b = _0x4c7ed2(_0x4c2d7b, _0x3d788d.period, _0x3d788d.sine);
  let _0x1f0369 = _0x59235b.toFixed(0xa);
  let _0x4c8d88 = _0x4c2d7b.toFixed(0x3);
  _0x3d788d.add(_0x4c8d88, _0x1f0369);
  if (_0x4c2d7b >= _0x3d788d.period) {
    console.log("@@@@@@@@@@@@@@@@@ baking finished for " + _0x3d788d.forObj);
    return;
  }
  _0x405ff8++;
  setTimeout(function () {
    _0x17a0b2(_0x3d788d, _0x405ff8);
  }, 0x1);
}
class _0x225c5 {
  constructor(_0x403b8d, _0x1a509e, _0x4cf650, _0xafdb72, _0x3990b8, _0x5789fe) {
    this.forObj = _0x403b8d;
    this.period = _0x1a509e;
    this.sine = _0x4cf650;
    this.shiftAmount = _0xafdb72;
    this.frame = {};
    if (_0x3990b8 !== undefined && _0x5789fe !== undefined) {
      this.startShift = _0x3990b8;
      this.endShift = _0x5789fe;
      this.amplitude = this.shiftAmount * (this.endShift - this.startShift);
    }
  }
  ["getAnimalName"]() {
    return this.forAni;
  }
  ["add"](_0x4c6330, _0x18c4ad) {
    this.frame[_0x4c6330] = _0x18c4ad;
  }
  ["getShiftAmount"](_0x1ea19f) {
    let _0x10c935 = this.getFrame(this.timeKey(_0x1ea19f));
    if (_0x10c935) {
      if (this.amplitude !== undefined) {
        let _0x131b46 = this.startShift + this.amplitude;
        return _0x131b46 + this.amplitude * this.getFrame(_0x1ea19f);
      } else {
        return _0x10c935 * this.shiftAmount;
      }
    }
    return null;
  }
  ["getFrame"](_0x17465c) {
    return this.frame[this.timeKey(_0x17465c)];
  }
  ["timeKey"](_0x26e382) {
    let _0x441b37 = (_0x1f4c9e - _0x26e382) / 0x3e8 / this.period;
    let _0x5e39c8 = (_0x441b37 - Math.floor(_0x441b37)) * this.period;
    return _0x5e39c8.toFixed(0x3);
  }
}
_0x4ee02b("bird", 0.5, 0.5, 0x2);
_0x4ee02b("eagle", 0.9, 0.3, 0x2);
_0x4ee02b("volcano", 0x6, 1.5, 0x2);
_0x4ee02b("lake", 0x4, 5.5, 0x2);
_0x4ee02b("lavalake", 0x4, 2.5, 0x2);
_0x4ee02b("fennecfox", 0.5, 0x5, 0x1);
_0x4ee02b("fireball", 0x1, 0.5, 0x2, 0.85, 0x1);
_0x4ee02b("kd", 0x5, 0x1, 0x1);
$bus.emit($bus.EVENTS.INITIALIZED_MOBILE_FLAGS, {
  "isMobileAppIOS": _0xf66a12,
  "isMobileAppAndroid": _0x133f26,
  "isMobileApp": _0x1c65d6
});
_0x1c8e57.wave = 0x1;
_0x1c8e57.halfWave = 0x2;
_0x1c8e57.arc = 0x3;
_0x1c8e57.quad = 0x4;
_0x1c8e57.bow = 0x5;
_0x1c8e57.bounce = 0x6;
_0x1c8e57.elastic = 0x7;
_0x1c8e57.bounceEaseOut = 0x8;
_0x1c8e57.bounceEaseInOut = 0x9;
function _0x1c8e57(_0x1e841e, _0x9588b1, _0x52c08e, _0xb24356) {
  this.forObj = _0x1e841e;
  this.duration = _0x9588b1;
  this.animation = _0x52c08e;
  this.startTime = null;
  this.frame = 0x0;
  this.frameRate = 0x3e8;
  this.timePassed = 0x0;
  this.generate = true;
  this.stopWhenDurationPassed = true;
  this.state = 0x0;
  this.accelerateEnd = 0x0;
  this.hasStopped = false;
  this.img = null;
  this.vars = _0xb24356;
  this.keepLastFrame = false;
  this.loop = false;
  this.setImage = function (_0x5701b9) {
    this.img = _0x3df4ce(_0x5701b9);
  };
  this.run = function () {
    if (this.startTime == null) {
      this.startTime = _0x1f4c9e;
    }
    if (this.startTime != null) {
      if (this.state == 0x2 && !this.hasStopped) {
        this.hasStopped = true;
        this.onStop();
      }
      if (!this.hasStopped) {
        this.calcTimePassed();
        this.generateFrame();
        this.onFrameEntered(this.frame);
        if (this.timePassed >= this.duration && this.stopWhenDurationPassed) {
          this.state = 0x2;
        }
      }
      if (this.hasStopped) {
        if (this.keepLastFrame) {
          this.onFrameEntered(this.frame);
        }
        if (this.loop) {
          this.reset();
        }
      }
    }
  };
  this.reset = function () {
    this.timestamp = null;
    this.hasStopped = false;
    this.state = 0x0;
  };
  this.generateFrame = function () {
    if (this.generate) {
      this.state = 0x1;
      switch (this.animation) {
        case _0x1c8e57.wave:
          this.frame = this.wave(this.timePassed);
          break;
        case _0x1c8e57.halfWave:
          this.frame = this.halfWave(this.timePassed);
          break;
        case _0x1c8e57.arc:
          this.frame = this.arc(this.timePassed);
          break;
        case _0x1c8e57.quad:
          this.frame = this.quad(this.timePassed);
          break;
        case _0x1c8e57.bow:
          if (this.vars == undefined) {
            this.vars = {
              "v1": 0x1
            };
          }
          this.frame = this.bow(this.timePassed);
          break;
        case _0x1c8e57.bounce:
          this.frame = this.bounce(this.timePassed);
          break;
        case _0x1c8e57.elastic:
          if (this.vars == undefined) {
            this.vars = {
              "v1": 0x1
            };
          }
          this.frame = this.elastic(this.timePassed);
          break;
        case _0x1c8e57.bounceEaseOut:
          this.frame = this.bounceEaseOut(this.timePassed);
          break;
        case _0x1c8e57.bounceEaseInOut:
          this.frame = this.bounceEaseInOut(this.timePassed);
          break;
        default:
          break;
      }
    }
  };
  this.timing = function (_0x585b80) {
    return _0x585b80;
  };
  this.halfWave = function (_0xc57aec) {
    return 0x1 * Math.sin(0.5 * Math.PI / this.duration * _0xc57aec);
  };
  this.wave = function (_0x4af993) {
    return 0x1 * Math.sin(0x1 * Math.PI / this.duration * _0x4af993);
  };
  this.arc = function (_0xdd3a75) {
    return 0x1 - Math.sin(Math.acos(_0xdd3a75));
  };
  this.quad = function (_0x580c45) {
    return Math.pow(_0x580c45, 0x2);
  };
  this.bow = function (_0x2ae780) {
    var _0x44e196 = this.vars.v1;
    return Math.pow(_0x2ae780, 0x2) * ((_0x44e196 + 0x1) * _0x2ae780 - _0x44e196);
  };
  this.bounce = function (_0xec1b77) {
    let _0x3b4068 = 0x0;
    for (let _0x231a12 = 0x1; 0x1; _0x3b4068 += _0x231a12, _0x231a12 /= 0x2) {
      if (_0xec1b77 >= (0x7 - 0x4 * _0x3b4068) / 0xb) {
        return -Math.pow((0xb - 0x6 * _0x3b4068 - 0xb * _0xec1b77) / 0x4, 0x2) + Math.pow(_0x231a12, 0x2);
      }
    }
  };
  this.elastic = function (_0x213f35) {
    var _0x1278ce = this.vars.v1;
    return Math.pow(0x2, 0xa * (_0x213f35 - 0x1)) * Math.cos(0x14 * Math.PI * _0x1278ce / 0x3 * _0x213f35);
  };
  this.bounceEaseOut = function (_0x2169d2) {
    return 0x1 - this.bounce(0x1 - _0x2169d2);
  };
  this.bounceEaseInOut = function (_0x5840b0) {
    if (_0x5840b0 < 0.5) {
      return this.bounce(0x2 * _0x5840b0) / 0x2;
    } else {
      return (0x2 - this.bounce(0x2 * (0x1 - _0x5840b0))) / 0x2;
    }
  };
  this.calcTimePassed = function () {
    this.timePassed = (_0x1f4c9e - this.startTime) / this.frameRate;
  };
  this.onFrameEntered = function (_0xa3b9cd) {};
  this.onStop = function () {};
}
var _0x219d8c = window.innerWidth;
class _0x92faf {
  constructor(_0x5901e1) {
    this.season = _0x5901e1;
  }
  ["loadMiniMap"](_0x855887) {}
  static ["create"](_0x2aff8f) {
    let _0x50da0c = _0x2aff8f.readUInt8();
    this.season = _0x50da0c;
    switch (_0x50da0c) {
      case 0x1:
      case 0x2:
        let _0x26672b = new _0x2c8c01();
        _0x26672b.loadMiniMap(_0x2aff8f);
        return _0x26672b;
    }
    return null;
  }
}
class _0x2c8c01 extends _0x92faf {
  constructor() {
    super(0x2);
  }
  ["loadMiniMap"](_0x4998e7) {
    let _0x25239c = _0x4998e7.readUInt16() * 0x1;
    let _0x4a9b2c = _0x4998e7.readUInt16() * 0x1;
    let _0x5c50ce = _0x4998e7.readUInt16();
    let _0x4285b4 = _0x4998e7.readUInt16();
    let _0xedd4ba = _0x4998e7.readUInt16();
    let _0x4eadb5 = _0x4998e7.readUInt16();
    let _0x513437 = _0x4998e7.readUInt16();
    let _0x1edcd1 = {
      "scale": _0x25239c,
      "objScale": _0x4a9b2c,
      "mapWidth": _0x5c50ce,
      "mapHeight": _0x4285b4,
      "width": _0x219d8c,
      "height": _0x219d8c,
      "gameWidth": _0xedd4ba,
      "gameHeight": _0x4eadb5,
      "scaleX": 0x1,
      "scaleY": 0x1,
      "totalObjects": _0x513437,
      "objects": []
    };
    for (let _0x7e5489 = 0x0; _0x7e5489 < _0x513437; _0x7e5489++) {
      let _0x4d5377 = _0x4998e7.readUInt16();
      for (let _0x386c29 = 0x0; _0x386c29 < _0x4d5377; _0x386c29++) {
        let _0xce84a5 = _0x4998e7.readUInt16();
        let _0x1641de = _0x4998e7.readUInt16();
        let _0x34a602 = _0x4998e7.readUInt8() == 0x1;
        let _0x47a805 = {
          "isRect": _0x34a602,
          "objType": _0xce84a5
        };
        if (_0xce84a5 == _0x5e29d8) {
          _0x47a805.teamID = _0x4998e7.readUInt8();
          _0x47a805.outline = "black";
        }
        if (_0x34a602) {
          let _0x15cad1 = _0x4998e7.readUInt16();
          let _0x4a98bd = _0x4998e7.readUInt16();
          let _0x7a696d = _0x4998e7.readUInt16();
          let _0x1c924e = _0x4998e7.readUInt16();
          _0x47a805.w = _0x7a696d;
          _0x47a805.h = _0x1c924e;
          _0x47a805.x = _0x15cad1;
          _0x47a805.y = _0x4a98bd;
        } else {
          let _0x1f42e5 = _0x4998e7.readUInt16();
          let _0x2c4ad4 = _0x4998e7.readUInt16();
          let _0x4b4d4b = _0x4998e7.readUInt16();
          _0x47a805.r = _0x1f42e5;
          _0x47a805.x = _0x2c4ad4;
          _0x47a805.y = _0x4b4d4b;
        }
        _0x47a805.c = this.getColorForObjType(_0xce84a5, _0x1641de);
        _0x47a805.biome = _0x1641de;
        _0x1edcd1.objects.push(_0x47a805);
      }
    }
    _0x18c03a = new _0x2a8b3a(_0x1edcd1);
    _0x18c03a.setPlayersCount(_0x2f24c4);
  }
  ["getColorForObjType"](_0x2a9fb3, _0x4c4e63) {
    switch (_0x2a9fb3) {
      case 0xc:
        return "#4854a2";
      case 0x1:
        return "#1aad41";
      case 0x4f:
        return "#c8b745";
      case 0x10:
        return "white";
      case 0x2a:
        return "#604729";
      case 0x2c:
        return "#ff6000";
      case 0x2f:
        return "#604729";
      case 0x76:
        return "#07631f";
      case 0x28:
        return "#4854a2";
      case 0xa:
        return "#4854a2";
      case 0x7:
        return "#907A33";
      case 0x11:
        return "#7BB7BB";
      case 0x3:
        if (_0x4c4e63 == 0x0) {
          return "#1aad41";
        } else {
          if (_0x4c4e63 == 0x4) {
            return "#8f822e";
          } else {
            if (_0x4c4e63 == 0x2) {
              return "white";
            }
          }
        }
      case 0x8:
        return "#8C9688";
      case 0xf:
        return "#09992F";
      case 0xb:
        return "#b0a13b";
      case 0x1b:
        return "#F35F53";
      case 0x4:
        return "#4E66E4";
      case 0x63:
        return "#b0a13b";
      case 0x64:
        return "#007fa9";
      case 0x21:
        return "#bfaf43";
      case 0x8c:
      case 0x8a:
        if (_0x4c4e63 == 0x4) {
          return "#8f822e";
        } else {
          if (_0x4c4e63 == 0x2) {
            return "red";
          } else {
            if (_0x4c4e63 == 0x1) {
              return "#198ebd";
            }
          }
        }
        return "brown";
      case 0x65:
        if (_0x4c4e63 == 0x4) {
          return "#8f822e";
        } else {
          if (_0x4c4e63 == 0x2) {
            return "white";
          }
        }
        return "#00b01a";
      default:
        return "green";
    }
  }
}
let _0x48e65e = null;
let _0x18c03a = null;
var _0x219364 = [];
var _0x19a957 = {};
var _0x4dfdf3 = null;
function _0x206141(_0x287315) {
  var _0x58f5e6 = _0x287315.readUInt32();
  if (_0x58f5e6 > 0x0) {
    _0x4dfdf3 = {
      "id": _0x58f5e6,
      "x": _0x287315.readUInt32(),
      "y": _0x287315.readUInt32(),
      "rad": 0x3
    };
  }
}
function _0x26cee8(_0x5b392f, _0x5e22a0, _0x1e437e) {
  if (_0x5b392f) {
    var _0x4719f5 = 0x3;
    var _0x547cce = _0x5e22a0;
    if (_0x2bd878 == _0x5b392f.id) {
      _0x547cce = _0x5e22a0;
    } else {
      if (_0x4dfdf3 == _0x5b392f) {
        _0x547cce = _0x5e22a0;
      } else {
        if (_0x16c921 == 0x3) {
          _0x547cce = _0x388788.getTeamColor(_0x5b392f.teamID);
        } else {
          _0x547cce = "yellow";
        }
        _0x4719f5 = _0x5b392f.rad;
      }
    }
    var _0x3b829a = _0x5b392f.x;
    var _0x35e552 = _0x5b392f.y;
    if (_0x2bd878 == _0x5b392f.id || _0x4dfdf3) {
      var _0x4bae70 = _0x4719f5 + 0x2;
      _0x19a957.push({
        "drawType": "arc",
        "fillStyle": "black",
        "params": [_0x3b829a, _0x35e552, _0x4bae70, 0x0, 0x2 * Math.PI]
      });
    }
    _0x19a957.push({
      "drawType": "arc",
      "fillStyle": _0x547cce,
      "params": [_0x3b829a, _0x35e552, _0x4719f5, 0x0, 0x2 * Math.PI]
    });
  }
}
class _0x427f9b {
  constructor() {
    this.subscribers = {};
  }
  ["subscribe"](_0x3685dd, _0x2daac7) {
    if (!this.subscribers[_0x3685dd]) {
      this.subscribers[_0x3685dd] = [];
    }
    this.subscribers[_0x3685dd].push(_0x2daac7);
  }
  ["emit"](_0x117fe3, _0x5c475f) {
    const _0x185526 = this.subscribers[_0x117fe3];
    if (_0x185526) {
      _0x185526.forEach(_0x13fee6 => _0x13fee6(_0x5c475f));
    }
  }
}
class _0x5bd2c6 {
  constructor() {}
  static ["type"] = 0x0;
  ["send"]() {}
}
class _0x12b8d0 {
  constructor() {}
  static ["type"] = 0x0;
  static ["validate"]() {}
  static ["handle"]() {}
}
class _0x29c53f {
  constructor() {}
  static ["type"] = 0x0;
  static ["send"]() {}
  static ["validate"]() {}
  static ["handle"]() {}
}
class _0x4822e0 extends _0x5bd2c6 {
  constructor() {
    super();
  }
  static ["type"] = 0x1;
  static ["send"](_0x22e4ff, _0x234156, _0x229bc6) {
    let _0x51e838 = 0x9 + _0x229bc6.length + 0x2;
    if (_0x234156 && _0x234156.length) {
      _0x51e838 += _0x234156.length;
    }
    const _0x52ba09 = new _0x1c4421(_0x51e838);
    _0x52ba09.writeUInt8(_0x4822e0.type);
    _0x52ba09.writeUInt16(_0x485584);
    _0x52ba09.writeUInt16(_0x2c7985);
    _0x52ba09.writeUInt16(_0x219d8c);
    if (_0x234156) {
      _0x52ba09.writeString(_0x234156);
    } else {
      _0x52ba09.writeString('');
    }
    _0x52ba09.writeString(_0x229bc6);
    _0x22e4ff.send(_0x52ba09.dataView.buffer);
  }
}
class _0x3d42b3 extends _0x12b8d0 {
  constructor() {}
  static ["type"] = 0x2;
  static ["handle"](_0x3e6393) {
    const _0x49f45e = _0x3e6393.readString();
    const _0x56ea26 = _0x3e6393.readUInt16();
    const _0x40cb27 = _0x3e6393.readUInt8();
    const _0x2aa365 = _0x3e6393.readUInt8();
    const _0x33c476 = _0x3e6393.readString();
    return {
      "sessionId": _0x49f45e,
      "gameVersion": _0x56ea26,
      "gameMode": _0x40cb27,
      "season": _0x2aa365,
      "serverId": _0x33c476
    };
  }
}
class _0xd29ba8 extends _0x12b8d0 {
  constructor() {
    super();
  }
  static ["type"] = 0x11;
  static ["handle"](_0x524e53) {
    const _0x6ca1c8 = _0x524e53.readUInt16();
    const _0x2d5f4b = _0x524e53.readUInt16();
    const _0x41bf1d = _0x524e53.readUInt16();
    const _0x48599e = _0x524e53.readUInt16();
    const _0x1a4dd3 = _0x524e53.readUInt16();
    return {
      "gameWidth": _0x6ca1c8,
      "gameHeight": _0x2d5f4b,
      "camX": _0x41bf1d,
      "camY": _0x48599e,
      "camZoom": _0x1a4dd3
    };
  }
}
class _0x26eef5 extends _0x5bd2c6 {
  constructor() {
    super();
  }
  static ["type"] = 0x71;
  static ["send"](_0x70e556, _0x38d33d, _0x22847c, _0x4d4f1b) {
    const _0xabb35a = 0x21 + _0x38d33d.length;
    const _0x3079f5 = new _0x1c4421(_0xabb35a);
    _0x3079f5.writeUInt8(_0x26eef5.type);
    _0x3079f5.writeUInt16(_0x22847c);
    _0x3079f5.writeUInt16(_0x4d4f1b);
    _0x3079f5.writeString(_0x38d33d);
    _0x70e556.send(_0x3079f5.dataView.buffer);
  }
}
class _0x1f828a extends _0x29c53f {
  constructor() {
    super();
  }
  static ["type"] = 0x18;
  static ["readUpgradeMenu"](_0x5716f0) {
    const _0x4cf6a8 = _0x5716f0.readUInt8();
    const _0x5d4574 = _0x5716f0.readUInt8();
    const _0x275344 = _0x5716f0.readUInt8();
    const _0x582878 = _0x5716f0.readUInt8();
    const _0x281c7e = _0x5716f0.readUInt8();
    const _0x1a69c0 = [];
    for (var _0x381947 = 0x0; _0x381947 < _0x281c7e; _0x381947++) {
      const _0x38bd31 = _0x5716f0.readUInt8();
      const _0x349c15 = _0x5716f0.readUInt8();
      const _0x179a65 = _0x5716f0.readUInt8();
      const _0x3a99df = _0x5716f0.readUInt8();
      const _0x1f2645 = _0x5716f0.readUInt16();
      const _0x948772 = _0x5716f0.readUInt8();
      const _0x1b3aa2 = _0x5716f0.readUInt8();
      let _0x34fcfe = _0x5716f0.readUInt8() == 0x1;
      const _0x3b1a30 = _0x5716f0.readString();
      const _0x43db6e = _0x381947;
      const _0xb060e6 = _0x3b1a30 != null && _0x3b1a30 !== "null";
      let _0x39cd1e = 0x0;
      let _0x67de48 = null;
      if (_0x3b1a30) {
        if (_0x4ecbfe.shop != null && _0x4ecbfe.shop.allItems != null) {
          var _0x19f2de = _0x4ecbfe.shop.allItems['' + _0x3b1a30];
          if (_0x19f2de) {
            _0x67de48 = _0x19f2de;
            _0x39cd1e = _0x19f2de.coinsPrice > 0x0 ? _0x19f2de.coinsPrice : 0x0;
          }
        }
      }
      _0x34fcfe = _0x34fcfe || _0x39cd1e == 0x0;
      const _0xee000f = {
        "forLvl": _0x582878,
        "abilities": [],
        "anAniT": _0x349c15,
        "biomeNum": _0x179a65,
        "species": _0x3a99df,
        "subSpecies": _0x1f2645,
        "premiumSkinType": _0x948772,
        "season": _0x38bd31,
        "skinThemeID": _0x1b3aa2,
        "isBought": _0x34fcfe,
        "itemName": _0x3b1a30,
        "itemIndex": _0x43db6e,
        "isShopItem": _0xb060e6,
        "coinsPrice": _0x39cd1e,
        "shopItem": _0x67de48,
        "choiceIndex": _0x43db6e
      };
      const _0x48eb86 = _0x2b451a.createGameObjOfOType(0x2, _0x349c15);
      _0x48eb86.animalType = _0x349c15;
      _0x48eb86.animalSpecies = _0x3a99df;
      _0x48eb86.animalSubSpecies = _0x1f2645;
      _0x48eb86.animalPremiumSkin = _0x948772;
      _0x48eb86.mopeSeasonID = _0x38bd31;
      _0x48eb86.skinThemeID = _0x1b3aa2;
      _0x48eb86.curBiome = _0x179a65;
      if (_0x48eb86.animalInfo) {
        const _0x2ca6aa = _0x48eb86.animalInfo();
        _0xee000f.itemName = _0x2ca6aa.aniName;
        _0xee000f.name = _0x2ca6aa.aniName;
      }
      _0xee000f.abilities = _0xef15f4(_0x48eb86.getAbilityInfo());
      _0xee000f.itemName = _0x2b451a.getClassForGameObjType(0x2, _0x349c15).name;
      if (_0x48eb86.animalInfo) {
        const _0x5584f1 = _0x48eb86.animalInfo();
        _0xee000f.itemName = _0x5584f1.aniName;
        _0xee000f.name = _0x5584f1.aniName;
      }
      _0xee000f.shopImage = _0x48eb86.getUpgradeImagePath();
      _0x1a69c0.push(_0xee000f);
    }
    return {
      "isSpectator": _0x4cf6a8,
      "gameSession": _0x5d4574,
      "timeout": _0x275344,
      "upgradeLevel": _0x582878,
      "animalChoices": _0x1a69c0
    };
  }
  static ["handle"](_0xc4f408) {
    const {
      isSpectator: _0xc4e54f,
      gameSession: _0x3d4536,
      timeout: _0x35e499,
      upgradeLevel: _0x2f8011,
      animalChoices: _0x56fbed
    } = _0x1f828a.readUpgradeMenu(_0xc4f408);
    return {
      "isSpectator": _0xc4e54f,
      "gameSession": _0x3d4536,
      "timeout": _0x35e499,
      "upgradeLevel": _0x2f8011,
      "animalChoices": _0x56fbed
    };
  }
  static ["send"](_0x18199a, _0x58b9f5) {
    const _0xa30a89 = new _0x1c4421(0x2);
    _0xa30a89.writeUInt8(_0x1f828a.type);
    _0xa30a89.writeUInt8(_0x58b9f5);
    _0x18199a.send(_0xa30a89.dataView.buffer);
  }
}
class _0x4ca6a7 extends _0x5bd2c6 {
  constructor() {
    super();
  }
  static ["type"] = 0xb;
  static ["send"](_0x431203) {
    const _0x1f6358 = new _0x1c4421(0x1);
    _0x1f6358.writeUInt8(_0x4ca6a7.type);
    _0x431203.send(_0x1f6358.dataView.buffer);
  }
}
class _0xda2ff2 extends _0x29c53f {
  constructor() {
    super();
  }
  static ["type"] = 0x72;
  static ["handle"](_0x4afd29) {
    let _0x4ba580 = [];
    const _0x521a0e = _0x4afd29.readUInt8();
    for (var _0x44b50e = 0x0; _0x44b50e < _0x521a0e; _0x44b50e++) {
      const _0x31333c = _0x4afd29.readUInt8();
      const _0x4675cb = _0x4afd29.readString();
      const _0x5ec936 = _0x4afd29.readUInt8() == 0x1;
      if (_0x5ec936) {
        const _0x143026 = _0x4afd29.readUInt8() == 0x1;
        const _0x65014e = _0x4afd29.readUInt8() == 0x1;
        const _0x5ca146 = _0x4afd29.readString();
        const _0x15dee8 = _0x4afd29.readString();
        _0x4ba580.push({
          "buffType": _0x31333c,
          "name": _0x4675cb,
          "itemName": _0x15dee8,
          "bought": _0x5ec936,
          "active": _0x143026,
          "paused": _0x65014e,
          "buffTier": _0x5ca146
        });
      } else {
        _0x4ba580.push({
          "buffType": _0x31333c,
          "name": _0x4675cb
        });
      }
    }
    _0x4ba580 = _0x8cd1d1(_0x4ba580);
    console.log("UserBuffsMsgType =>", _0x4ba580);
    $bus.emit($bus.EVENTS.PLAYER_POWERUPS, _0x4ba580);
  }
}
function _0x366f78(_0x528644) {
  if (!_0x528644) {
    return _0x528644;
  }
  return _0x528644.toUpperCase();
}
function _0x8cd1d1(_0x333bab) {
  const _0x749ce4 = _0x4ecbfe.shop.buffs;
  _0x333bab.forEach(_0x520245 => {
    let _0x2b466d = new Array();
    _0x749ce4.forEach(_0x780a16 => {
      if (_0x520245.itemName !== undefined) {
        if (_0x780a16.itemName === _0x520245.itemName && _0x2b466d.length == 0x0) {
          _0x2b466d.push(_0x780a16);
        }
      } else {
        if (_0x780a16.buffType === _0x520245.buffType) {
          _0x2b466d.push(_0x780a16);
        }
      }
    });
    _0x520245.icon = "assets/powerups/powerup-" + _0x520245.name + ".png";
    _0x520245.buffLabel = _0x366f78(_0x520245.name) + " BUFF";
    _0x520245.itemName = _0x2b466d[0x0].itemName;
    _0x520245.duration = _0x2b466d[0x0].duration;
    _0x520245.progress = '';
    if (_0x520245.bought === undefined) {
      _0x520245.status = "buy";
      _0x520245.action = "BUY";
    } else {
      if (_0x520245.bought == true && _0x520245.active == false) {
        _0x520245.status = "activate";
        _0x520245.action = "ACTIVATE";
        _0x520245.progress = _0x2b466d[0x0].tier;
        _0x520245.duration = _0x2b466d[0x0].duration;
      } else if (_0x520245.bought == true && _0x520245.active == true) {
        _0x520245.status = "in-progress";
        _0x520245.action = _0x2b466d[0x0].duration + "m";
        _0x520245.progress = _0x2b466d[0x0].tier;
      }
    }
    _0x520245.label = _0x2b466d.length == 0x1 ? _0x2b466d[0x0].tier : '';
    _0x520245.options = new Array();
    _0x2b466d.forEach(_0x167fe3 => {
      _0x520245.options.push({
        "itemName": _0x167fe3.itemName,
        "icon": _0x520245.icon,
        "label": _0x167fe3.tier,
        "cost": _0x167fe3.coinsPrice,
        "duration": _0x167fe3.duration
      });
    });
  });
  return _0x333bab;
}
class _0x19bb01 extends _0x29c53f {
  constructor() {
    super();
  }
  static ["type"] = 0x73;
  static ["handle"](_0x7f5229) {
    const _0x42b69a = [];
    const _0x102a32 = _0x7f5229.readUInt8();
    for (var _0x8e6a22 = 0x0; _0x8e6a22 < _0x102a32; _0x8e6a22++) {
      const _0x3d8e1a = _0x7f5229.readUInt8();
      _0x42b69a.push({
        "buffType": _0x3d8e1a
      });
    }
  }
}
class _0x350182 {
  constructor({
    name: _0x499363,
    conn: _0x221e43,
    gm: _0x2c985c,
    rivetPlayerToken: _0x143fee,
    gameVersion = null,
    serverId = null,
    sessionId = null
  }) {
    this.name = _0x499363;
    this.season = null;
    this.conn = _0x221e43;
    this.gm = _0x2c985c;
    this.rivetPlayerToken = _0x143fee;
    this.gameVersion = gameVersion;
    this.season = null;
    this.serverId = serverId;
    this.sessionId = sessionId;
  }
  ["setGameMode"](_0x594555) {
    this.gm = _0x594555;
  }
  ["setGameVersion"](_0xfc9f89) {
    this.gameVersion = _0xfc9f89;
  }
  ["setServerId"](_0x5f22ee) {
    this.serverId = _0x5f22ee;
  }
  ["setSeason"](_0x2b6ba2) {
    this.season = _0x2b6ba2;
  }
  ["setGameSessionId"](_0x100c1b) {
    this.sessionId = _0x100c1b;
  }
}
const _0x2ca72e = {
  "WebSocketOpen": "WebSocketOpen",
  "WebSocketClose": "WebSocketClose",
  "FirstConnect": "FirstConnect",
  "SpectateClient": "SpectateClient",
  "ClientResize": "ClientResize",
  "SelectAnimal": "SelectAnimal",
  "PlayerPowerups": "PlayerPowerups"
};
let _0x243816 = null;
class _0x23b018 {
  constructor(_0x5b91e3) {
    this.serverInfo = _0x5b91e3;
    this.state = 0x0;
    this.ws = null;
    this.emitter = new _0x427f9b();
    this.gameDisconnected = false;
  }
  ["isPlayerInGame"]() {
    return this.state >= 0x4;
  }
  ["testDisconnect"]() {
    const _0x21d050 = this.ws && this.ws.readyState === WebSocket.OPEN;
    if (_0x21d050) {
      _0x243816 = this.serverInfo;
      this.ws.close();
    }
  }
  ["testReconnect"]() {
    if (_0x243816) {
      this.emitter.emit("TestReconnect", {
        ...this
      });
    }
  }
  ["connect"]() {
    const _0x479935 = this.serverInfo.conn.isTls ? "wss://" : "ws://";
    this.ws = new WebSocket('' + _0x479935 + this.serverInfo.conn.hostname + ":" + this.serverInfo.conn.port);
    this.ws.binaryType = "arraybuffer";
    this.ws.onopen = this.onOpen.bind(this);
    this.ws.onclose = this.onClose.bind(this);
    this.ws.onerror = this.onError.bind(this);
    this.ws.onmessage = this.onMessage.bind(this);
  }
  ["disconnect"]() {
    const _0x284350 = this.ws && this.ws.readyState === WebSocket.OPEN;
    if (_0x284350) {
      _0x4ca6a7.send(this.ws);
      this.ws.close();
    }
  }
  ["onOpen"]() {
    this.gameDisconnected = false;
    this.emitter.emit("WebSocketOpen", {
      "success": true,
      "serverInfo": this.serverInfo
    });
    this.sendFirstConnect();
  }
  ["onClose"]() {
    console.log("::: shahbaz:dev ::: this.gameDisconnected: " + this.gameDisconnected);
    if (!this.gameDisconnected) {
      _0x54e075("CONNECTION LOST! PLEASE WAIT WHILE WE RECONNECT.", "error", 0x6, function () {});
      this.gameDisconnected = false;
    }
    this.emitter.emit("WebSocketClose", {
      "success": true,
      "serverInfo": this.serverInfo
    });
    setTimeout(() => {
      $bus.emit($bus.EVENTS.ENABLE_PLAY_BUTTON);
      $bus.emit($bus.EVENTS.ENABLE_SERVER_CONTROLS);
    }, 0x3e8);
  }
  ["onError"]() {
    setTimeout(() => {
      $bus.emit($bus.EVENTS.ENABLE_PLAY_BUTTON);
      $bus.emit($bus.EVENTS.ENABLE_SERVER_CONTROLS);
    }, 0x3e8);
  }
  ["onMessage"](_0x5148b6) {
    const _0x27fc4f = new DataView(_0x5148b6.data);
    const _0x519273 = new _0x1108f6(_0x27fc4f);
    this.handleConnectMessage(_0x519273);
  }
  ["handleConnectMessage"](_0x19d7b3) {
    const _0x34b1c5 = _0x19d7b3.readUInt8();
    switch (_0x34b1c5) {
      case _0x3d42b3.type:
        this.handleSpectateClient(_0x19d7b3);
        break;
      case _0xd29ba8.type:
        this.handleClientResize(_0x19d7b3);
        break;
      case _0x26eef5.type:
        this.handlePlayGame(_0x19d7b3);
        break;
      case _0x1f828a.type:
        this.handleSelectAnimal(_0x19d7b3);
        break;
      case 0x4:
        this.handleAnimalSelected(_0x19d7b3);
        break;
      case _0xda2ff2.type:
        this.handlePlayerPowerups(_0x19d7b3);
        break;
      case _0x19bb01.type:
        _0x19bb01.handle(_0x19d7b3);
        break;
    }
  }
  ["handleSpectateClient"](_0x179ae0) {
    this.state = 0x2;
    const {
      sessionId: _0x37b873,
      gameVersion: _0x3fb09d,
      gameMode: _0x100c7c,
      season: _0x5f136b,
      serverId: _0x35a54c
    } = _0x3d42b3.handle(_0x179ae0);
    this.serverInfo.setGameSessionId(_0x37b873);
    this.serverInfo.setGameVersion(_0x3fb09d);
    this.serverInfo.setGameMode(_0x100c7c);
    this.serverInfo.setSeason(_0x5f136b);
    this.serverInfo.setServerId(_0x35a54c);
    if (_0x37b873) {
      this.serverInfo.setGameSessionId(_0x37b873);
      this.emitter.emit("SpectateClient", {
        "success": true,
        "serverInfo": this.serverInfo
      });
      setTimeout(() => {
        $bus.emit($bus.EVENTS.ENABLE_PLAY_BUTTON);
        $bus.emit($bus.EVENTS.ENABLE_SERVER_CONTROLS);
      }, 0x3e8);
    } else {
      this.emitter.emit("SpectateClient", {
        "success": false,
        "serverInfo": this.serverInfo
      });
      $bus.emit($bus.EVENTS.ENABLE_SERVER_CONTROLS);
    }
  }
  ["handleClientResize"](_0x2dbe04) {
    const {
      gameWidth: _0x5388b9,
      gameHeight: _0x5ef3bc,
      camX: _0x580b7b,
      camY: _0x577fcb,
      camZoom: _0x4f6a10
    } = _0xd29ba8.handle(_0x2dbe04);
    this.emitter.emit("ClientResize", {
      "success": true,
      "serverInfo": _0x47d60a,
      "gameWidth": _0x5388b9,
      "gameHeight": _0x5ef3bc,
      "camX": _0x580b7b,
      "camY": _0x577fcb,
      "camZoom": _0x4f6a10
    });
  }
  ["handleSelectAnimal"](_0x2758cf) {
    this.state = 0x3;
    const {
      isSpectator: _0x2bf346,
      gameSession: _0xa65122,
      timeout: _0x56622b,
      upgradeLevel: _0x5a523c,
      animalChoices: _0x5a89fe
    } = _0x1f828a.handle(_0x2758cf);
    this.emitter.emit("SelectAnimal", {
      "success": true,
      "serverInfo": this.serverInfo,
      "isSpectator": _0x2bf346,
      "gameSession": _0xa65122,
      "timeout": _0x56622b,
      "upgradeLevel": _0x5a523c,
      "animalChoices": _0x5a89fe
    });
  }
  ["handlePlayerPowerups"](_0x2f9fe8) {
    _0xda2ff2.handle(_0x2f9fe8);
  }
  ["handleUserBuffs"](_0x4a982a) {
    const {
      isSpectator: _0x46359d,
      gameSession: _0xb8c1c3,
      timeout: _0x4b0b34,
      upgradeLevel: _0xd0e120,
      animalChoices: _0x810bf8
    } = userGameBuffs.handle(_0x4a982a);
    this.emitter.emit("SelectAnimal", {
      "success": true,
      "serverInfo": this.serverInfo,
      "isSpectator": _0x46359d,
      "gameSession": _0xb8c1c3,
      "timeout": _0x4b0b34,
      "upgradeLevel": _0xd0e120,
      "animalChoices": _0x810bf8
    });
  }
  ["handleAnimalSelected"](_0x63ebd6) {
    this.state = 0x4;
  }
  ["sendFirstConnect"]() {
    _0x4822e0.send(this.ws, this.serverInfo.sessionId, this.serverInfo.rivetPlayerToken);
    this.emitter.emit("FirstConnect", {
      "success": true,
      "serverInfo": this.serverInfo
    });
  }
  ["playGame"](_0x59f582, _0x46dd14, _0x1a389b) {
    _0x26eef5.send(this.ws, _0x59f582, _0x46dd14, _0x1a389b);
  }
  ["selectAnimal"](_0x26426f) {
    _0x1f828a.send(this.ws, _0x26426f);
    this.emitter.emit(_0x2ca72e.AnimalSelected, {
      "success": true,
      "serverInfo": this.serverInfo,
      "animalChoiceIndex": _0x26426f
    });
  }
}
const _0x47d60a = new _0x350182({
  "name": "LOCAL",
  "region": "local",
  "url": "localhost",
  "gameMode": 0x0
});
const _0x227f63 = new _0x23b018({
  "serverInfo": _0x47d60a
});
const _0x346146 = () => {
  try {
    _0x227f63.connect();
    _0x227f63.ws.addEventListener("open", () => {
      if (_0x227f63.ws.readyState === WebSocket.OPEN) {
        console.log("::: testing suite ::: Test Passed!", "ws.readyState:", _0x227f63.ws.readyState);
      } else {
        console.log("::: testing suite ::: Test Failed! readyState was not equal to WebSocket.OPEN. ws.readyState:", _0x227f63.ws.readyState);
      }
      _0x227f63.ws.close();
    });
  } catch (_0x4958c4) {
    console.log("::: tesitng-suite ::: Test Failed!", _0x4958c4);
    _0x227f63.ws.close();
  }
};
const _0x30a14e = () => {
  try {
    _0x227f63.connect();
    _0x227f63.ws.addEventListener("open", () => {
      if (_0x227f63.ws.readyState === WebSocket.OPEN) {
        _0x227f63.sendFirstConnect();
      }
    });
    _0x227f63.ws.addEventListener("message", async _0x2f648a => {
      const _0x487602 = new DataView(_0x2f648a.data);
      const _0x5b0954 = new _0x1108f6(_0x487602);
      const _0x50e6c2 = _0x5b0954.readUInt8();
      console.log("::: testing-suite message handled ::: msgType:", _0x50e6c2);
      const _0x34c575 = _0x50e6c2 == _0x3d42b3.type;
      console.log("::: testing-suite isSpectateClient:", _0x34c575);
      if (_0x34c575) {
        console.log("::: testing-suite reading SpectateClient msg :::");
        const _0x41a45d = _0x5b0954.readString();
        const _0x423e1b = _0x5b0954.readUInt16();
        const _0x5c9f03 = _0x5b0954.readUInt8();
        const _0x3e57c3 = _0x5b0954.readString();
        console.log("::: testing-suite received SpectateClient :::", _0x41a45d, _0x423e1b, _0x5c9f03, _0x3e57c3);
      }
    });
  } catch (_0xc139ac) {
    console.log("::: tesitng-suite ::: Test Failed!", _0xc139ac);
    _0x227f63.ws.close();
  }
};
console.log("::: *************************************************** :::");
console.log("::: *************************************************** :::");
console.log("::: *************************************************** :::");
console.log("::: *************************************************** :::");
console.log("::: *********                                ********** :::");
console.log("::: *********                                ********** :::");
console.log("::: *********                                ********** :::");
console.log("::: *********                                ********** :::");
console.log("::: *********         HEY YOU!!!!!!          ********** :::");
console.log("::: *********                                ********** :::");
console.log("::: *********         YEAH, YOU!!!!          ********** :::");
console.log("::: *********   DISABLE CONSOLE LOGGING!!!   ********** :::");
console.log("::: *********                                ********** :::");
console.log("::: *********                                ********** :::");
console.log("::: *********                                ********** :::");
console.log("::: *********                                ********** :::");
console.log("::: *************************************************** :::");
console.log("::: *************************************************** :::");
console.log("::: *************************************************** :::");
console.log("::: *************************************************** :::");
var _0x361a73 = false;
var _0xd10e01 = false;
var _0x480f5b;
var _0x1aaf8f = window.innerWidth;
var _0x1f262d = window.innerHeight;
var _0x1aaf8f = window.innerWidth;
var _0x1f262d = window.innerHeight;
var _0x142dd2 = {
  [$bus.CONSTANTS.AD_IDS.LEFT]: false,
  [$bus.CONSTANTS.AD_IDS.RIGHT]: false,
  [$bus.CONSTANTS.AD_IDS.HOME]: false
};
function _0x3fc99b() {
  const _0x48186a = document.getElementById("eg-ccpa-msg-id");
  if (_0x48186a) {
    _0x48186a.remove();
  }
}
const _0x227930 = () => new Promise(_0x5448b8 => {
  fetch(new Request("https://api.adinplay.com/libs/aiptag/pub/LBS/mope.io/tag.min.js")).then(_0x6766c5 => _0x5448b8(false))["catch"](_0x4b55dc => _0x5448b8(true));
});
async function _0x535aac() {
  _0x361a73 = false;
  try {
    await fetch(new Request("https://api.adinplay.com/libs/aiptag/pub/LBS/mope.io/tag.min.js"))["catch"](_0x54d382 => _0x361a73 = true);
  } catch (_0xb97580) {
    _0x361a73 = true;
  } finally {
    console.log("AdBlock Enabled: " + _0x361a73);
  }
}
if (!_0x1c65d6) {
  if (document.getElementById("xTRbLiXhOoyu_adsbl0ck")) {
    _0x535aac();
  } else {
    _0x361a73 = true;
  }
  console.log("ad block enabled:", _0x361a73);
}
function _0x3da1d3() {
  var _0x2ce155 = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
  return _0x2ce155 ? parseInt(_0x2ce155[0x2], 0xa) : false;
}
var _0x4458c7 = !_0x1c65d6 && _0x3da1d3() && (_0x3da1d3() == 0x54 || _0x3da1d3() == 0x55);
if (_0x4458c7 && true) {
  console.log("slow chrome!");
  var _0x1de41a = document.getElementById("chromebugdiv");
  if (_0x1de41a) {
    _0x1de41a.style.display = "block";
  }
  var _0x1de41a = document.getElementById("chromebugp");
  if (_0x1de41a) {
    _0x1de41a.innerHTML = "Your browser (Chrome V " + _0x3da1d3() + ") has a bug, which can make mope.io laggy!";
  }
  var _0x1de41a = document.getElementById("chromebug_closebut");
  if (_0x1de41a) {
    _0x1de41a.onclick = function () {
      var _0x314eca = document.getElementById("chromebugdiv");
      if (_0x314eca) {
        _0x314eca.parentNode.removeChild(_0x314eca);
      }
      if (window.localStorage) {
        try {
          window.localStorage.setItem("chromeBug_closed", true);
        } catch (_0x10cc97) {}
      }
    };
  }
} else {
  var _0x1de41a = document.getElementById("chromebugdiv");
  if (_0x1de41a) {
    _0x1de41a.parentNode.removeChild(_0x1de41a);
  }
}
console.log("Chrome version " + _0x3da1d3());
var _0x79634c = _0x281291(document.location.search);
var _0x500dc8 = _0x79634c.y8BannerModify > 0x0;
if (_0x1c65d6 || _0x500dc8) {
  var _0x1de41a;
  var _0x1de41a = document.getElementById("appsDiv");
  if (_0x1de41a) {
    _0x1de41a.parentNode.removeChild(_0x1de41a);
  }
}
var _0x30dfd0 = 0x0;
var _0x1533ae = 0x0;
if (window.localStorage) {
  var _0x4410e6 = window.localStorage.getItem("lastAdShowT") * 0x1 || 0x0;
  var _0x1f1048 = +new Date() - _0x4410e6;
  _0x1533ae = _0x1f1048 > 0x0 ? _0x4410e6 : 0x0;
  _0x30dfd0 = window.localStorage.getItem("gamesSinceAd") * 0x1;
  if (_0x30dfd0 < 0x0) {
    _0x30dfd0 = 0x0;
  }
  console.log("videoAd: " + _0x30dfd0 + " games since last ad!");
}
var _0x248a2e = false;
var _0x183160 = () => new Promise(async _0x255668 => {
  _0x361a73 = await _0x227930();
  _0x255668(!_0x361a73 && !_0xd10e01 && !_0x1c65d6);
});
function _0xbec047() {
  try {
    console.log("::: ad-tech ::: Refreshing banner ads");
    _0x33a49f($bus.CONSTANTS.AD_SCREEN_LAYOUTS.MENU);
  } catch (_0x38812c) {
    console.log("::: ad-tech ::: Error refreshing banner ads" + _0x38812c);
  }
  _0x45e8c3();
  _0x40d246();
}
function _0x4d2b5e() {
  _0x378b03($bus.CONSTANTS.AD_IDS.LEFT);
  _0x378b03($bus.CONSTANTS.AD_IDS.RIGHT);
  _0x378b03($bus.CONSTANTS.AD_IDS.HOME);
}
function _0x4e2272(_0x8ad6ed) {
  console.log("::: ad-tech ::: destroy ad", _0x8ad6ed);
  window.aiptag.cmd.display.push(function () {
    aipDisplayTag.destroy(_0x8ad6ed);
  });
}
function _0x22fa4d(_0x8d74e) {
  console.log("::: ad-tech ::: create ad", _0x8d74e);
  window.aiptag.cmd.display.push(function () {
    aipDisplayTag.display(_0x8d74e);
  });
}
function _0x378b03(_0x3227bc) {
  if (_0x142dd2[_0x3227bc]) {
    _0x142dd2[_0x3227bc] = false;
    _0x4e2272(_0x3227bc);
  }
  $bus.emit($bus.EVENTS.SET_AD_VISIBILITY, {
    "type": _0x3227bc,
    "shouldShow": false
  });
}
function _0x5de9cf(_0x4531fe) {
  $bus.emit($bus.EVENTS.SET_AD_VISIBILITY, {
    "type": _0x4531fe,
    "shouldShow": true
  });
  if (!_0x142dd2[_0x4531fe]) {
    _0x142dd2[_0x4531fe] = true;
    _0x22fa4d(_0x4531fe);
  }
}
const _0x394d95 = () => {
  if (window.innerWidth > 0x400 && window.innerHeight > 0x2da) {
    _0x5de9cf($bus.CONSTANTS.AD_IDS.LEFT);
  } else {
    _0x378b03($bus.CONSTANTS.AD_IDS.LEFT);
  }
  if (window.innerWidth > 0x400 && window.innerHeight > 0x2da) {
    _0x5de9cf($bus.CONSTANTS.AD_IDS.RIGHT);
  } else {
    _0x378b03($bus.CONSTANTS.AD_IDS.RIGHT);
  }
};
const _0x285180 = () => {
  if (window.innerWidth > 0x649 && window.innerHeight > 0x2da) {
    _0x5de9cf($bus.CONSTANTS.AD_IDS.LEFT);
  } else {
    _0x378b03($bus.CONSTANTS.AD_IDS.LEFT);
  }
  if (window.innerWidth > 0x649 && window.innerHeight > 0x2da) {
    _0x5de9cf($bus.CONSTANTS.AD_IDS.RIGHT);
  } else {
    _0x378b03($bus.CONSTANTS.AD_IDS.RIGHT);
  }
  if (window.innerWidth > 0x3d4 && window.innerHeight > 0x2d0) {
    _0x5de9cf($bus.CONSTANTS.AD_IDS.HOME);
  } else {
    _0x378b03($bus.CONSTANTS.AD_IDS.HOME);
  }
};
const _0x24ff64 = () => {
  _0x5de9cf($bus.CONSTANTS.AD_IDS.LEFT);
  _0x5de9cf($bus.CONSTANTS.AD_IDS.RIGHT);
  _0x5de9cf($bus.CONSTANTS.AD_IDS.HOME);
};
const _0x33a49f = function (_0x4ebd63) {
  const {
    ARENA: _0xc1fae6,
    UPGRADE: _0x1db40e,
    MENU: _0x1e3780,
    NONE: _0x5b9180
  } = $bus.CONSTANTS.AD_SCREEN_LAYOUTS;
  console.log("::: ad-tech ::: Loading ads for loc", _0x4ebd63);
  if (!_0x4ebd63) {
    _0x4ebd63 = $bus.CONSTANTS.AD_SCREEN_LAYOUTS.MENU;
  }
  switch (_0x4ebd63) {
    case _0x1db40e:
      _0x394d95();
      break;
    case _0xc1fae6:
      if (_0x5f5cae) {
        return;
      }
      _0x394d95();
      _0x378b03($bus.CONSTANTS.AD_IDS.LEFT);
      break;
    case _0x1e3780:
      if (_0x5f5cae) {
        return;
      }
      _0x285180();
      break;
    case _0x5b9180:
      _0x4d2b5e();
      break;
  }
  _0x480f5b = _0x4ebd63;
};
$bus.on($bus.EVENTS.UI_PRESS_PLAY, () => {
  window.onVideoAdFinished(false);
  _0x33a49f($bus.CONSTANTS.AD_SCREEN_LAYOUTS.UPGRADE);
  _0x378b03($bus.CONSTANTS.AD_IDS.HOME);
});
$bus.on($bus.EVENTS.UI_CHOSE_ANIMAL, () => {
  _0x33a49f($bus.CONSTANTS.AD_SCREEN_LAYOUTS.NONE);
});
var _0x51ab87 = false;
var _0x1c2b8b = false;
var _0x104b7b = new _0x4e6b66(0xa, "white");
_0x104b7b.setText("Connecting...");
_0x104b7b.renderScale = 0x1;
var _0x252567 = function () {
  if (_0x361a73 || _0xd10e01) {
    return;
  }
  $bus.emit($bus.EVENTS.START_VIDEO_AD);
  _0xd10e01 = true;
  const _0xf97a58 = document.getElementById("eg-video-player");
  if (_0xf97a58) {
    window.show_videoad();
  } else {
    window.onVideoAdFinished(true);
  }
};
$bus.on($bus.EVENTS.REQUEST_INCENTIVIZED_AD, () => {
  console.log("::: iandev ::: Requesting Incentivized Ads.");
  _0x3209ee.playIncentivizedVideoAd();
});
window.onVideoAdFinished = function (_0x260087) {
  $bus.emit($bus.EVENTS.END_VIDEO_AD);
  _0x248a2e = false;
  _0x1c2b8b = false;
  _0x51ab87 = false;
  _0x14e258.focus();
  if (_0x260087) {
    _0x30dfd0 = 0x0;
    _0x1533ae = +new Date();
    if (window.localStorage) {
      try {
        window.localStorage.setItem("lastAdShowT", _0x1533ae);
        window.localStorage.setItem("gamesSinceAd", _0x30dfd0);
      } catch (_0x177ee6) {
        console.log("localstorage error saving ads");
      }
    } else {
      console.log("no localstorage, cant save ad nums");
    }
  } else {
    console.log("not successful play, will play ad again");
  }
  if (_0x260087 && (!_0x5f5cae || _0x5f5cae && _0x1d6ac7)) {
    const _0x3741e7 = _0x5f5cae ? $bus.CONSTANTS.AD_SCREEN_LAYOUTS.UPGRADE : $bus.CONSTANTS.AD_SCREEN_LAYOUTS.MENU;
    _0x33a49f(_0x3741e7);
    console.log("VIDEOADS: Video done (success: " + _0x260087 + "), joining game!");
    try {
      console.log("::: video ad played joining game :::");
      if (!_0x5f5cae) {
        _0x2bbb30(false);
      }
    } catch (_0x22afc2) {
      console.error("Error joining game after video ad:", _0x22afc2);
    }
  } else {
    if (!_0x5f5cae || _0x5f5cae && _0x1d6ac7) {
      try {
        console.log("::: video ad not played or skipped joining game :::");
        if (!_0x5f5cae) {
          _0x2bbb30(false);
        }
      } catch (_0x32b66f) {
        console.error("Error joining game after video ad:", _0x32b66f);
      }
    }
  }
};
var _0x362ddc = function (_0x3ed27a, _0x46438f, _0x4786f4) {
  var _0x1e5bdc = document.head || document.getElementsByTagName("head")[0x0];
  var _0x385079 = document.createElement("script");
  var _0x21e612 = true;
  _0x385079.async = "async";
  _0x385079.type = "text/javascript";
  _0x385079.charset = "UTF-8";
  _0x385079.src = _0x3ed27a;
  _0x385079.onload = _0x385079.onreadystatechange = function () {
    if (_0x21e612 && (!_0x385079.readyState || /loaded|complete/.test(_0x385079.readyState))) {
      _0x21e612 = false;
      _0x46438f();
      _0x385079.onload = _0x385079.onreadystatechange = null;
    }
  };
  _0x1e5bdc.appendChild(_0x385079);
};
try {
  _0x227930().then(_0x501b25 => {
    _0x361a73 = _0x501b25;
  });
} catch (_0x29de2b) {
  console.error("Error initializing ads:", _0x29de2b);
}
const _0x18c5e5 = function () {
  _0x33a49f($bus.CONSTANTS.AD_SCREEN_LAYOUTS.NONE);
  $bus.emit($bus.EVENTS.HIDE_ANIMAL_CHOICE);
};
_0x18c5e5();
var _0xde1fab;
function _0x107930(_0x202d84) {
  if (window.WebViewJavascriptBridge) {
    return _0x202d84(WebViewJavascriptBridge);
  }
  if (window.WVJBCallbacks) {
    return window.WVJBCallbacks.push(_0x202d84);
  }
  window.WVJBCallbacks = [_0x202d84];
  if (_0xf66a12) {
    var _0x19425b = document.createElement("iframe");
    _0x19425b.style.display = "none";
    _0x19425b.src = "wvjbscheme://__BRIDGE_LOADED__";
    document.documentElement.appendChild(_0x19425b);
    setTimeout(function () {
      document.documentElement.removeChild(_0x19425b);
    }, 0x0);
  }
}
async function _0x17724b() {
  return typeof _0xde1fab === "undefined" || !_0xde1fab ? new Promise((_0x1f4ce3, _0x4f8acb) => {
    let _0x4788f5 = setTimeout(() => {
      _0x4788f5 = null;
      return _0x1f4ce3(null);
    }, 0x61a8);
    _0x107930(_0x467f49 => {
      if (_0x4788f5 === null) {
        return;
      }
      clearTimeout(_0x4788f5);
      _0x4788f5 = null;
      _0xde1fab = _0x467f49;
      return _0x1f4ce3(_0x467f49);
    });
  }) : _0xde1fab;
}
if (_0x1c65d6) {
  console.log("Trying to setup the javascript ios bridge...");
  _0x107930(function (_0x5e52fb) {
    console.log("Successfully set up bridge!");
    _0xde1fab = _0x5e52fb;
  });
}
async function _0x2d8f62() {
  console.log("showing mobile ad......");
  const _0x57b5d8 = await _0x17724b();
  if (!_0x57b5d8) {
    console.error("Could not find mobile native bridge.");
  } else {
    _0x57b5d8.callHandler("show-ad");
  }
}
var _0x522716 = !!navigator.userAgent.platform && /iPad|iPhone|iPod/.test(navigator.userAgent.platform);
var _0x24bcd2 = navigator.userAgent.toLowerCase().indexOf("android") > -0x1;
if ((_0x522716 || _0x24bcd2) && !_0x1c65d6) {
  var _0x1d69ef = false;
  if (window.localStorage) {
    _0x1d69ef = window.localStorage.getItem("oldVisitor") > 0x0;
    try {
      window.localStorage.setItem("oldVisitor", 0x1);
    } catch (_0x344750) {
      _0x1d69ef = true;
    }
  }
  if (!_0x1d69ef) {
    if (_0x522716) {
      window.location.href = "https://itunes.apple.com/us/app/mope.io/id1086471119?ls=1&mt=8";
    }
  } else {}
}
console.log("is mobile app:", _0x1c65d6);
if (_0x1c65d6) {
  (async () => {
    console.log("setting up mobile shop!");
    const _0x44a4f4 = await _0x17724b();
    if (!_0x44a4f4) {
      console.warn("Did not find a native bridge for mobile app.");
      return;
    }
    let _0x2eed3a = null;
    _0x44a4f4.registerHandler("iap-data-failed", _0x5f1f29 => {
      console.error("Error when fetching iap data.. error:", _0x5f1f29);
    });
    _0x44a4f4.registerHandler("iap-data", _0x5f2341 => {
      const _0x2be5e3 = JSON.parse(_0x5f2341).map(_0x24e4f2 => {
        return {
          "coins": _0x24e4f2.title,
          "id": _0x24e4f2.id,
          "description": _0x24e4f2.description,
          "price": _0x24e4f2.price
        };
      });
      $bus.emit($bus.EVENTS.RECEIVED_IN_APP_PURCHASE_DATA, _0x2be5e3);
    });
    _0x44a4f4.registerHandler("iap-success", _0x1b9da0 => {
      _0x1b9da0 = typeof _0x1b9da0 === "string" ? JSON.parse(_0x1b9da0) : _0x1b9da0;
      const _0x16caa8 = _0xf66a12 ? "apple" : "google";
      if (_0x2eed3a === _0x1b9da0.productId) {
        $bus.emit($bus.EVENTS.IN_APP_PURCHASE_GO_TO_PROCESSING, _0x2eed3a);
      }
      const _0x431fd0 = _0x1853ca => {
        if (_0x2eed3a === _0x1b9da0.productId) {
          $bus.emit($bus.EVENTS.IN_APP_PURCHASE_FAILED, {
            "itemId": _0x2eed3a,
            "error": _0x1853ca
          });
          _0x2eed3a = null;
          _0x54e075("Error when processing purchase. Contact an admin if you did not receive your coins.", "error");
        }
      };
      const _0x1efffc = async () => {
        if (_0x2eed3a === _0x1b9da0.productId) {
          _0x54e075("Successfully purchased product!", "success");
          await _0x336622();
          $bus.emit($bus.EVENTS.IN_APP_PURCHASE_SUCCESS, _0x2eed3a);
          _0x2eed3a = null;
        }
      };
      $.ajax({
        "url": _0x3c5d7c + "/processInAppPurchase",
        "type": "POST",
        "dataType": "json",
        "data": {
          "userId": _0x4c129a,
          "passwordToken": _0x325d70,
          "service": _0x16caa8,
          ..._0x1b9da0
        },
        "success": function (_0x2a1315) {
          console.log("/processInAppPurchase success response", _0x2a1315, _0x2a1315.success);
          if (_0x2a1315.success) {
            _0x1efffc();
          } else {
            _0x431fd0(_0x2a1315.error);
          }
        },
        "error": function (_0x4ab2ec) {
          console.log("/processInAppPurchase error response", _0x4ab2ec, _0x4ab2ec.success, _0x4ab2ec.error);
          _0x431fd0(_0x4ab2ec.error);
        }
      });
    });
    _0x44a4f4.registerHandler("iap-deferred", _0x3b2393 => {
      console.error("iap for product:", _0x3b2393, "deferred");
      $bus.emit($bus.EVENTS.IN_APP_PURCHASE_FAILED, {
        "itemId": _0x2eed3a,
        "error": "Deferred purchase.",
        "deferred": true
      });
      _0x2eed3a = null;
    });
    _0x44a4f4.registerHandler("iap-failed", _0x3c1deb => {
      if (_0x2eed3a && _0x3c1deb == _0x2eed3a || !_0x3c1deb) {
        _0x3c1deb = "There was an error while purchasing the current item. Reload the app and try again or if the problem persists contact an admin.";
      }
      $bus.emit($bus.EVENTS.IN_APP_PURCHASE_FAILED, {
        "itemId": _0x2eed3a,
        "error": _0x3c1deb
      });
      _0x2eed3a = null;
    });
    $bus.on($bus.EVENTS.UI_SELECTED_IN_APP_PURCHASE_ITEM, _0x68b8e3 => {
      if (_0x2eed3a !== null) {
        return $bus.emit($bus.EVENTS.IN_APP_PURCHASE_FAILED, {
          "itemId": _0x68b8e3,
          "error": "Wait until the current purchasing item is complete."
        });
      }
      _0x2eed3a = _0x68b8e3;
      _0x44a4f4.callHandler("iap-purchase", _0x68b8e3);
    });
  })();
}
let {
  RivetClient: _0x54e876
} = window.__rivet_gg_api;
const _0x3bac86 = new _0x54e876({
  "environment": {
    "matchmaker": "https://api.rivet.gg/matchmaker"
  },
  "token": $config.rivetDevToken
});
var _0x315411 = "mope.io";
var _0x2bd878 = 0x0;
var _0xfc9bc1 = _0x2ebefb;
var _0x229c1e = 0x0;
var _0x219517 = 0x0;
var _0x5f5cae = false;
var _0x46771c = false;
var _0x4c3fc6 = +new Date();
var _0x28145a = false;
var _0x379488 = false;
var _0x1334de = {};
var _0x5cf87b = $config.gameModes[0x0].gm;
var _0x3d4a74 = 0x0;
_0x10e210();
function _0xe22504() {
  return _0x192f81 && _0x192f81.ws && _0x192f81.ws.readyState === WebSocket.OPEN;
}
function _0x446c6b(_0x149b1f) {
  setTimeout(function () {
    if (_0x192f81 && _0x192f81.ws && _0x192f81.ws.readyState === WebSocket.OPEN) {
      _0x192f81.ws.send(_0x149b1f.dataView.buffer);
    }
  }, 0x1);
}
function _0x2afb86() {
  $bus.emit($bus.EVENTS.JOINED_GAME, {
    "gameMode": _0x16c921,
    "gameState": _0x4fc996,
    "nPlayers": _0x2f24c4,
    "playersOnlTXT": _0x3540bd,
    "serverVer": _0x3d4a74,
    "mopeSeasonID": _0x186789
  });
}
function _0x2bbb30(_0x2ff66e) {
  if (!_0x444b0f) {
    _0x349219();
    _0x192f81.playGame(_0x315411, _0x485584, _0x485584);
    $bus.emit($bus.EVENTS.STARTED_GAME);
  } else {
    console.log("### PLAYER IS IN SPECTATE MODE ###");
  }
}
let _0x192f81 = null;
const _0x1e7af3 = () => {
  _0x45a1f5();
};
const _0x44998d = _0x52184f => {
  const {
    success: _0x312502
  } = _0x52184f;
  if (_0x312502) {
    const {
      serverInfo: _0x1c9bca
    } = _0x52184f;
    if (_0x1c9bca.sessionId) {
      _0x46771c = true;
    }
    _0x16c921 = _0x1c9bca.gm;
    _0x3ca4f9();
    _0x186789 = _0x1c9bca.season;
    _0xb7fb2b();
  }
};
const _0x2d0804 = ({
  gameWidth: _0x3c2917,
  gameHeight: _0xf4259f,
  camX: _0x263dda,
  camY: _0x448190,
  camZoom: _0x84acb9
}) => {
  _0x1f0c0a = _0x3c2917;
  _0x578943 = _0xf4259f;
  _0x9f8d15 = _0x43dbd2 = _0x481a50 = _0x263dda / 0x4;
  _0x4a5a9f = _0x2116fa = _0x5e990e = _0x448190 / 0x4;
  camzoom_n = _0x84acb9 / 0x3e8;
  _0x53126a = camzoom_n * 1.2;
  $bus.emit($bus.EVENTS.JOINED_GAME, {});
};
const _0x28b79c = ({
  isSpectator: _0x1f7b1d,
  timeout: _0x169fda,
  upgradeLevel: _0x568f98,
  animalChoices: _0x388aed
}) => {
  _0x1d6ac7 = true;
  _0x23baed = _0x568f98;
  _0x29479c = 0x0;
  _0x184a26 = [];
  _0xb7589f = _0x1f7b1d;
  _0x31e855 = +new Date();
  _0x254faf = _0x31e855 + 0x3e8 * _0x169fda;
  $bus.emit($bus.EVENTS.ANIMAL_CHOICE_START, [..._0x388aed]);
  _0x33a49f($bus.CONSTANTS.AD_SCREEN_LAYOUTS.UPGRADE);
};
const _0x4f813f = _0x1ce0ff => {
  const {
    choiceIndex: _0x4d3feb
  } = _0x1ce0ff;
  _0x192f81.selectAnimal(_0x4d3feb);
  _0x33a49f($bus.CONSTANTS.AD_SCREEN_LAYOUTS.NONE);
};
const _0x46a7a3 = () => {
  _0x192f81.serverInfo = _0x243816;
  _0x192f81.connect();
  _0x192f81.ws.addEventListener("message", _0x5ccc21 => {
    const _0x5c5e40 = new DataView(_0x5ccc21.data);
    _0x16fb9d(_0x5c5e40);
  });
};
const _0x3be6f4 = _0x36ea91 => {
  _0x10e210();
  console.log("server info: ", _0x36ea91);
  _0x192f81 = new _0x23b018(_0x36ea91);
  $bus.emit($bus.EVENTS.DISABLE_PLAY_BUTTON);
  $bus.emit($bus.EVENTS.DISABLE_SERVER_CONTROLS);
  _0x192f81.emitter.subscribe("FirstConnect", _0x1e7af3);
  _0x192f81.emitter.subscribe("SpectateClient", _0x44998d);
  _0x192f81.emitter.subscribe("ClientResize", _0x2d0804);
  _0x192f81.emitter.subscribe("SelectAnimal", _0x28b79c);
  _0x192f81.connect();
  _0x192f81.ws.addEventListener("message", _0x53de17 => {
    const _0xa5f84b = new DataView(_0x53de17.data);
    _0x16fb9d(_0xa5f84b);
  });
  curServer = _0x36ea91;
  $bus.emit($bus.EVENTS.SERVER_SET, curServer);
};
async function _0x39707e() {
  try {
    let _0xe78f06 = $config.gameModes.find(_0x5c6de1 => _0x5c6de1.gm == _0x5cf87b);
    let _0x2b8059 = await _0x2ecedd(_0xe78f06.gameModeId);
    _0x3be6f4(new _0x350182({
      "name": _0xe78f06.name,
      "conn": _0x2b8059.ports.socket,
      "gm": _0x5cf87b,
      "rivetPlayerToken": _0x2b8059.player.token
    }));
  } catch (_0x511def) {
    console.error(_0x511def);
    if (_0x511def.body !== undefined) {
      _0x54e075("Failed to connect to servers: " + _0x511def.body.message, "error", 0xa, function () {});
    } else {
      _0x54e075("Failed to connect to servers: " + _0x511def.message, "error", 0xa, function () {});
    }
  }
}
async function _0x2ecedd(_0x27163d, _0x267dc6) {
  try {
    return await _0x3bac86.matchmaker.lobbies.find({
      "gameModes": [_0x27163d],
      "captcha": _0x267dc6 ? {
        "turnstile": {
          "clientResponse": _0x267dc6
        }
      } : null
    });
  } catch (_0xc20af) {
    if (_0xc20af.body?.["code"] == "CAPTCHA_CAPTCHA_REQUIRED" && !_0x267dc6) {
      const _0x20bb55 = await _0x28543c(_0xc20af.body.metadata.turnstile.site_key);
      return await _0x2ecedd(_0x27163d, _0x20bb55);
    } else {
      throw _0xc20af;
    }
  }
}
let _0x2752f0 = null;
function _0x28543c(_0x210aec) {
  return new Promise((_0x2af6e1, _0x5d4b89) => {
    let _0xac053d = document.body.querySelector("#turnstile");
    if (_0xac053d) {
      _0xac053d.style.removeProperty("display");
    } else {
      _0xac053d = document.createElement("div");
      _0xac053d.setAttribute("id", "turnstile");
      _0xac053d.addEventListener("click", _0x27c35c => {
        if (_0x27c35c.target === _0x27c35c.currentTarget) {
          _0x2e1426();
        }
      });
      document.body.append(_0xac053d);
    }
    _0x2752f0 = turnstile.render(_0xac053d, {
      "sitekey": _0x210aec,
      "callback": _0x3dee61 => {
        _0x2e1426();
        _0x2af6e1(_0x3dee61);
      },
      "error-callback": _0xe5c051 => {
        _0x2e1426();
        _0x5d4b89(_0xe5c051);
      }
    });
  });
}
function _0x2e1426() {
  let _0x11fb7d = document.body.querySelector("#turnstile");
  if (_0x11fb7d) {
    _0x11fb7d.style.setProperty("display", "none");
    turnstile.remove(_0x2752f0);
  }
}
async function _0x10e210() {
  try {
    let _0x28a4e2 = await _0x3bac86.matchmaker.lobbies.list();
    $bus.emit($bus.EVENTS.SET_SERVER_LIST, _0x28a4e2.lobbies);
    $bus.emit($bus.EVENTS.SET_GAME_MODES, $config.gameModes);
  } catch (_0x364d18) {
    console.error(_0x364d18);
    if (_0x364d18.body !== undefined) {
      _0x54e075("Failed to fetch server list: " + _0x364d18.body.message, "error", 0xa, function () {});
    } else {
      _0x54e075("Failed to fetch server list: " + _0x364d18.message, "error", 0xa, function () {});
    }
  }
}
document.head.append(document.createTextNode("main"));
$bus.on($bus.EVENTS.UI_SELECT_GAMEMODE, async _0x267cea => {
  $bus.emit($bus.EVENTS.DISABLE_PLAY_BUTTON);
  $bus.emit($bus.EVENTS.DISABLE_SERVER_CONTROLS);
  _0x5cf87b = _0x267cea;
  _0x192f81.gameDisconnected = true;
  _0x192f81.disconnect();
  await _0x39707e();
});
$bus.on($bus.EVENTS.UI_SELECT_SERVER, async _0x15dfed => {
  _0x192f81.gameDisconnected = true;
  _0x192f81.disconnect();
  try {
    const _0x55dd65 = await _0x3bac86.matchmaker.lobbies.join({
      "lobbyId": _0x15dfed
    });
    console.log("this is the game server connection ", _0x55dd65);
    console.log("this is the game server connection 2 ", _0x55dd65);
    curServer = new _0x350182({
      "name": $config.gameModes.find(_0x4d8139 => _0x4d8139.gm == _0x5cf87b).name,
      "conn": _0x55dd65.ports.socket,
      "gm": _0x5cf87b,
      "rivetPlayerToken": _0x55dd65.player.token
    });
    _0x3be6f4(curServer);
    $bus.emit($bus.EVENTS.SERVER_SET, curServer);
  } catch (_0x486532) {
    console.error(_0x486532);
    if (_0x486532.body !== undefined) {
      _0x54e075("Failed to connect to servers: " + _0x486532.body.message, "error", 0xa, function () {});
    } else {
      _0x54e075("Failed to connect to servers: " + _0x486532.message, "error", 0xa, function () {});
    }
  }
});
$bus.on($bus.EVENTS.UI_CHOSE_ANIMAL, _0x4f813f);
var _0x306a48 = null;
var _0x2d70e6 = false;
function _0x16fb9d(_0x5d30d0) {
  var _0x2a72f7 = new _0x1108f6(_0x5d30d0);
  var _0x34c458 = _0x2a72f7.readUInt8();
  switch (_0x34c458) {
    case 0x67:
      {
        var _0x1e7e74 = _0x2a72f7.readString();
        if (_0x1e7e74 == null || _0x1e7e74 == '') {
          _0x1e7e74 = "Provide a reason";
        }
        var _0x6861e5 = prompt(_0x1e7e74);
        if (_0x6861e5 != null) {
          var _0x1ecbad = unescape(encodeURIComponent(_0x6861e5)).length + 0x3;
          var _0x298dca = new _0x1c4421(_0x1ecbad);
          _0x298dca.writeUInt8(0x67);
          _0x298dca.writeString(_0x6861e5);
          _0x446c6b(_0x298dca);
        }
      }
      break;
    case 0x48:
      {
        console.log("Msg_sendLoginCred");
        _0x170772 = true;
        _0x4ecbfe.loadData();
      }
      break;
    case 0x66:
      {
        console.log("Msg_client_loadUserData");
        _0x4735a4();
      }
      break;
    case 0x51:
      {
        if (_0x388788 != null) {
          _0x388788.handleMessage(_0x2a72f7);
        }
      }
      break;
    case 0x68:
      {
        console.log("muilink");
        var _0x5b3dab = _0x2a72f7.readString();
        location.href = _0x5b3dab;
        break;
      }
    case 0x69:
      {
        console.log("------- EXTRA ANIMAL DATA --------");
        {
          var _0x3ab950 = [];
          var _0x5f402f = _0x2a72f7.readUInt16();
          for (ai = 0x0; ai < _0x5f402f; ai++) {
            var _0x30ac29 = _0x2a72f7.readString();
            var _0x4b60a3 = JSON.parse(_0x30ac29);
            _0x4b60a3 = _0x4895d1(_0x4b60a3);
            _0x3ab950.push(_0x4b60a3);
          }
          console.log(JSON.stringify(_0x3ab950));
        }
        console.log("------- EXTRA ANIMAL DATA --------");
        break;
      }
    case 0x6b:
      _0x48e65e = _0x92faf.create(_0x2a72f7);
      break;
    case 0x6:
      {
        console.log("MsgPlayerAliveInGame");
        _0x18c5e5();
        _0x5f1a0c(false);
        $bus.emit($bus.EVENTS.PLAYER_POWERUPS, []);
        console.log("You spawned alive ingame!");
        _0x5f5cae = true;
        _0x5e24e6("audio/music_game.mp3");
        _0x30dfd0 += 0x1;
        console.log(_0x30dfd0 + " games since adinplay");
        if (window.localStorage) {
          try {
            window.localStorage.setItem("gamesSinceAd", _0x30dfd0);
          } catch (_0x287440) {}
        }
        if (!_0x1c65d6) {
          window.onbeforeunload = function (_0x3c1cd1) {
            return "You're alive in a game, close mope.io?";
          };
        }
      }
      break;
    case 0x66:
      console.log("msg 102");
      _0x5f1a0c(true);
      break;
    case 0x41:
      $bus.emit($bus.EVENTS.FINISH_SOCIAL_AUTHENTICATION);
      setTimeout(() => {
        $bus.emit($bus.EVENTS.ENABLE_PLAY_BUTTON);
        $bus.emit($bus.EVENTS.ENABLE_SERVER_CONTROLS);
      }, 0x3e8);
      console.log("Msg_readyToPlay");
      break;
    case 0x3e:
      console.log("Msg_adblockCheckCheck");
      try {
        var _0x40aec5 = _0x2a72f7.readUInt16();
        var _0x4614bc = _0x2a72f7.readString();
        _0xb51eb7(_0x4614bc, _0x40aec5);
      } catch (_0x50853f) {}
      break;
    case 0x8:
      if (_0x16c921 != 0x3) {
        var _0x599c4e = {
          "rank": _0x2a72f7.readUInt16(),
          "name": _0x2a72f7.readString(),
          "score": _0x2a72f7.readUInt32()
        };
        var _0x310d7e = _0x2a72f7.readUInt8();
        leaderboardData = [];
        for (i = 0x0; i < _0x310d7e; ++i) {
          var _0x33aa68 = {
            "rank": _0x2a72f7.readUInt16(),
            "name": _0x2a72f7.readString(),
            "score": _0x2a72f7.readUInt32()
          };
          leaderboardData.push(_0x33aa68);
        }
        if (_0x594e87) {
          _0x5b6ad4(leaderboardData, _0x599c4e);
        }
      }
      break;
    case 0xa:
      {
        _0x2f24c4 = _0x2a72f7.readUInt16();
        _0x5aae58 = _0x2a72f7.readUInt16();
        if (_0x16c921 == 0x6) {
          _0x1b0eb2 = _0x2a72f7.readUInt32();
          _0x4b8677 = _0x2a72f7.readUInt32();
          _0xa9ce6c = _0x2a72f7.readUInt32();
        }
        if (_0x18c03a) {
          _0x18c03a.setPlayersCount(_0x2f24c4, _0x5aae58);
        }
      }
      break;
    case 0x43:
      try {
        var _0x4614bc = _0x2a72f7.readString();
        _0x481ba5(_0x4614bc, '');
      } catch (_0x57f9f2) {}
      break;
    case 0x3f:
      try {
        var _0x40aec5 = _0x2a72f7.readUInt32();
        var _0x4614bc = _0x2a72f7.readString();
        _0x397cd1(_0x4614bc, _0x40aec5, '');
      } catch (_0x5eb3b4) {}
      break;
    case 0x40:
      try {
        _0x318ea9();
      } catch (_0x1ba355) {
        console.log("Err in recap msg");
      }
      break;
    case 0x45:
      try {
        var _0x2f4b7f = _0x2a72f7.readString();
        var _0xe144f5 = JSON.parse(_0x2f4b7f);
        var _0x494d6e = '';
        _0xe144f5.forEach(function (_0x77217e, _0x40c954) {
          var _0xe2d5ab = '';
          _0xe2d5ab += "<div class='pid' style='float:left; width:100px; text-align:right;'>" + _0x77217e.pid + "</div>";
          _0xe2d5ab += "<div class='nick'  style='float:left; width:200px; text-align:left;'>" + _0x77217e.nick + "</div>";
          _0x494d6e += "<div class='player'>" + _0xe2d5ab + "</div>";
        });
        $("body .playerInfo").remove();
        $("body").append($("<div class='playerInfo' style='    background: #00000050;position: fixed;width: 350px;top: 10px;left: 10px;color: white;'>" + _0x494d6e + "</div>"));
      } catch (_0x479c4e) {}
      break;
    case 0x12:
      {
        $bus.emit($bus.EVENTS.HIDE_ALL_ADS);
        var _0xbb9a7d = _0x2a72f7.readUInt8();
        var _0x4b9a12 = _0x2a72f7.readUInt8();
        var _0x5b3f26 = _0x2a72f7.readUInt16();
        var _0x785d76 = _0x2a72f7.readUInt8();
        var _0x57234a = _0x785d76 == 0x0;
        _0x1853dc = _0x2a72f7.readUInt8();
        _0x1527d2 = null;
        _0x2bd878 = _0x2a72f7.readUInt32();
        _0x2e4780(_0x2a72f7.readUInt32());
        _0x5b8d59 = _0x2a72f7.readUInt16();
        _0x20cac3 = _0x2a72f7.readUInt16();
        let _0x148b5d = {
          "abilityInput": "W",
          "abil_usable": true,
          "abil_recharging": false,
          "abil_possible": true,
          "abil_active": false,
          "abil_Type": _0x5b8d59
        };
        let _0x293328 = {
          "abilityInput": "S",
          "abil_usable": true,
          "abil_recharging": false,
          "abil_possible": true,
          "abil_active": false,
          "abil_Type": _0x20cac3
        };
        console.log("[[[ ::: shdev ::: MsgYourAnimalChanged");
        _0x15a17b(_0x5b8d59, _0x148b5d);
        _0x37d12b(_0x20cac3, _0x293328);
        console.log("::: shdev ::: abilities set above ]]]");
        var _0x568eac = _0x2b451a.createGameObjOfOType(0x2, _0xbb9a7d);
        _0x568eac.animalType = _0xbb9a7d;
        _0x568eac.animalSpecies = _0x4b9a12;
        _0x568eac.animalSubSpecies = _0x5b3f26;
        var _0x26f048 = _0x568eac.animalInfo();
        const _0x1cd707 = _0x92dcab.find(_0x4e3f07 => _0x4e3f07.anAniT == _0xbb9a7d && _0x4e3f07.species == _0x4b9a12);
        var _0x5a730f = _0x26f048.season ? _0x26f048.season : 0x2;
        const _0x1b643e = _0xef15f4(_0x568eac.getAbilityInfo());
        const _0x3f2e95 = _0x1cd707 || {
          "abilities": _0x1b643e,
          "itemName": _0x26f048.aniName,
          "name": _0x26f048.aniName,
          "anAniT": _0xbb9a7d,
          "species": _0x4b9a12,
          "subSpecies": _0x5b3f26,
          "isBought": true,
          "shopImage": "assets/s/" + _0x5a730f + "/skins/" + _0x26f048.skinName + ".png"
        };
        $bus.emit($bus.EVENTS.ANIMAL_CHOICE_CONFIRMED, _0x3f2e95);
        if (_0x785d76 != 0x2) {
          _0x3821a0 = _0x57234a ? "You downgraded to " + _0x26f048.aniName + "! \nDont lose too much xp!" : _0x26f048.upgradeText;
          _0x21e61c = "white";
          _0x43dc83 = +new Date() + 0x2328;
        }
        if (!_0x1aeed9) {
          _0x1aeed9 = true;
          _0x78f47c = Array.apply(null, new Array(0x32)).map(Number.prototype.valueOf, 0x0);
          _0x33b06d = Array.apply(null, new Array(0x32)).map(Number.prototype.valueOf, 0x0);
          _0x2da68a = Array.apply(null, new Array(0x32)).map(Number.prototype.valueOf, 0x0);
          _0x19cb58 = Array.apply(null, new Array(0x32)).map(Number.prototype.valueOf, 0x0);
        }
        _0x78f47c = Array.apply(null, new Array(0x32)).map(Number.prototype.valueOf, 0x0);
        var _0x584e8b = _0x2a72f7.readUInt8();
        for (var _0x21e56e = 0x0; _0x21e56e < _0x584e8b; _0x21e56e++) {
          _0x78f47c[_0x2a72f7.readUInt8() - 0x1] = 0x1;
        }
        _0x33b06d = Array.apply(null, new Array(0x32)).map(Number.prototype.valueOf, 0x0);
        var _0x584e8b = _0x2a72f7.readUInt8();
        for (var _0x21e56e = 0x0; _0x21e56e < _0x584e8b; _0x21e56e++) {
          var _0x4e35c6 = _0x2a72f7.readUInt8();
          _0x33b06d[_0x4e35c6 - 0x1] = 0x1;
        }
        _0x2da68a = Array.apply(null, new Array(0x32)).map(Number.prototype.valueOf, 0x0);
        var _0x584e8b = _0x2a72f7.readUInt8();
        for (var _0x21e56e = 0x0; _0x21e56e < _0x584e8b; _0x21e56e++) {
          _0x2da68a[_0x2a72f7.readUInt8() - 0x1] = 0x1;
        }
        _0x19cb58 = Array.apply(null, new Array(0x32)).map(Number.prototype.valueOf, 0x0);
        var _0x584e8b = _0x2a72f7.readUInt8();
        for (var _0x21e56e = 0x0; _0x21e56e < _0x584e8b; _0x21e56e++) {
          _0x19cb58[_0x2a72f7.readUInt8() - 0x1] = 0x1;
        }
        _0x4c8521 = _0xbb9a7d == _0x2ebefb || _0xbb9a7d == _0x46f565 || _0xbb9a7d == _0x33fcaa || _0xbb9a7d == _0x1b70a9;
        _0x1bae78 = +new Date() + 0x2328;
        _0x2399dc = 0x0;
        _0x1d6ac7 = false;
        if (_0x388788 != null) {
          _0x388788.setPlayer();
        }
        _0x414a31();
      }
      break;
    case 0x6c:
      if (_0x388788) {
        _0x388788.msgDisplayPlayersOnMiniMap(_0x2a72f7);
      }
      break;
    case 0x6d:
      _0x206141(_0x2a72f7);
      break;
    case 0xe:
      {
        console.log("############# YOU DIED MESSAGE ###################");
        var _0x3d7281 = _0x2a72f7.readUInt8();
        var _0x4f8250 = _0x2a72f7.readUInt32();
        var _0x309be0 = _0x2a72f7.readString();
        var _0x5a839f = localStorage.getItem("times_shown_tutorial");
        if (_0x5a839f) {
          const _0x29f30a = parseInt(_0x5a839f);
          localStorage.setItem("times_shown_tutorial", _0x29f30a < 0x3 ? _0x29f30a + 0x1 : _0x29f30a);
        } else {
          localStorage.setItem("times_shown_tutorial", 0x1);
        }
        if (_0x388788 != null) {
          _0x388788.interfaceReset();
        }
        _0x3fad8d = null;
        _0x5f5cae = false;
        _0x46771c = true;
        _0x11da90 = false;
        _0x4bf4b8 = 0x0;
        _0x1d6ac7 = false;
        _0x40d246();
        if (!_0x2d5a83) {
          _0x2add46("audio/bite.mp3", 0.1, 0.7);
        }
        if (_0x3d7281 == 0x1) {
          _0x3821a0 = "Oh no, You were eaten! \n Watch out for red-circled players!";
          _0x21e61c = "#F1C34C";
          _0x43dc83 = +new Date() + 0xdac;
        } else {
          if (_0x3d7281 == 0x2) {
            _0x3821a0 = "Oh no, You died from a tail-bite!\n Watch your tail!";
            _0x21e61c = "#F1C34C";
            _0x43dc83 = +new Date() + 0xdac;
          } else {
            if (_0x3d7281 == 0x4) {
              _0x3821a0 = "You died of thirst :( Don't let your water run out!";
              _0x21e61c = "#F1C34C";
              _0x43dc83 = +new Date() + 0xdac;
            } else {
              if (_0x3d7281 == 0x1b) {
                _0x3821a0 = "You died of air suffocation :( Don't let your air run out!";
                _0x21e61c = "#F1C34C";
                _0x43dc83 = +new Date() + 0xdac;
              } else {
                if (_0x3d7281 == 0x1c) {
                  _0x3821a0 = "You died of lava suffocation :( Don't let your lava run out!";
                  _0x21e61c = "#F1C34C";
                  _0x43dc83 = +new Date() + 0xdac;
                } else {
                  if (_0x3d7281 == 0x1d) {
                    _0x3821a0 = "You died of low energy :( Don't let your energy run out!";
                    _0x21e61c = "#F1C34C";
                    _0x43dc83 = +new Date() + 0xdac;
                  } else if (_0x3d7281 == 0xd) {
                    _0x3821a0 = "You died from burning! (Get to water when on fire!)";
                    _0x21e61c = "#F1C34C";
                    _0x43dc83 = +new Date() + 0xdac;
                  } else {
                    _0x3821a0 = "You died! Watch your health!";
                    _0x21e61c = "#F1C34C";
                    _0x43dc83 = +new Date() + 0xdac;
                  }
                }
              }
            }
          }
        }
        _0x1d6ac7 = false;
        _0x40d246();
        _0xbec047();
        window.setTimeout(function () {
          _0x46018c(_0x4f8250, _0x309be0);
        }, 0x7d0);
        if (_0x1c65d6) {
          _0x7b6cf7.showVideoAd();
        } else {
          _0x252567();
        }
      }
      break;
    case 0x70:
      {
        console.log("MSG_GAMEROOM_PROPERTY_UPDATE");
        if (_0x388788) {
          _0x388788.readGameRoomPropertyUpdate(_0x2a72f7);
        }
        break;
      }
    case 0x4:
      {
        _0x35708d(_0x2a72f7);
        if (typeof richPresences === "function") {
          richPresences({
            "ani": _0xfc9bc1,
            "species": _0x229c1e,
            "subspecies": _0x219517,
            "xp": _0x5b916c,
            "server": curServer,
            "player": _0x5c52f8[_0x2bd878],
            "playerID": _0x2bd878
          });
        }
      }
      break;
    case 0x13:
      {
        var _0x5249f6 = _0x2a72f7.readUInt32();
        var _0x13770f = _0x5c52f8[_0x5249f6];
        if (_0x13770f) {
          var _0x246e6a = _0x2a72f7.readString();
          if (_0x5249f6 in _0x1334de) {
            _0x1334de[_0x5249f6].size++;
            if (_0x1334de[_0x5249f6].size >= 0x5) {
              if (_0x1334de[_0x5249f6].size === 0x5) {
                clearTimeout(_0x1334de[_0x5249f6].timeout);
                _0x1334de[_0x5249f6].timeout = setTimeout(() => {
                  delete _0x1334de[_0x5249f6];
                }, 0x1388);
              }
              return;
            }
          } else {
            _0x1334de[_0x5249f6] = {
              "size": 0x1,
              "timeout": setTimeout(() => {
                delete _0x1334de[_0x5249f6];
              }, 0x7d0)
            };
          }
          _0x246e6a = $bus.utils.cleanText(_0x246e6a, true);
          _0x13770f.gotChat(_0x246e6a);
        }
      }
      break;
    case 0x64:
      {
        var _0x4120f9 = _0x2a72f7.readUInt8();
        switch (_0x4120f9) {
          case 0x1:
            _0x158edf = _0x24dbe6;
            break;
          case 0x2:
            _0x158edf = _0x827d43;
            break;
          case 0x3:
            _0x158edf = _0x46e062;
            break;
          case 0x0:
          default:
            _0x158edf = null;
            break;
        }
        console.log("snowfall message received:" + _0x4120f9);
        if (_0x158edf != null && _0x4120f9 != 0x0) {
          _0x674f0e();
        } else {
          _0x1be83a = false;
          _0x37e8e4 = false;
          _0x708066 = [];
        }
      }
      break;
    case 0x10:
      {
        var _0x2a72f7 = _0x2a72f7.readString();
        _0x54e075(_0x2a72f7, "success", 0x6, function () {});
      }
      break;
    case 0x6a:
      {
        var _0x149385 = _0x2a72f7.readString();
        var _0x41f2d6 = _0x2a72f7.readString();
        var _0x1c8427 = _0x2a72f7.readUInt8();
        console.log(_0x1c8427);
        _0x54e075(_0x149385, _0x41f2d6, _0x1c8427, function () {});
      }
      break;
    case 0x6f:
      {
        if (_0x388788) {
          _0x388788.socketMessages(_0x2a72f7);
        }
        break;
      }
    case 0x17:
      {
        var _0x15066e = _0x2a72f7.readUInt8();
        if (!_0x5f5cae) {
          return;
        }
        _0x2a6191 = 0x19;
        var _0x1c8427 = 0x0;
        _0x21e61c = "white";
        switch (_0x15066e) {
          case 0xff:
            {
              _0x3821a0 = _0x2a72f7.readString();
              _0x1c8427 = _0x2a72f7.readUInt16() / 0x64;
            }
            break;
          case 0x21:
            {
              break;
            }
          case 0x2:
            {
              _0x3821a0 = "Ouch! Your tail got bitten!";
            }
            break;
          case 0xc:
            {
              _0x3821a0 = "You've been stung by a jellyfish!";
            }
            break;
          case 0x3:
            {
              _0x3821a0 = "ZAP! You've been shocked by a STINGRAY!";
            }
            break;
          case 0x8:
            {
              _0x3821a0 = "You've been inked!";
            }
            break;
          case 0x5:
            {
              _0x3821a0 = "Oh no! Escape the kraken's pull!";
            }
            break;
          case 0x6:
            {
              _0x3821a0 = "Ouch! Pufferfish are pointy!";
            }
            break;
          case 0x7:
            {
              _0x3821a0 = "That's an octopus in disguise!";
            }
            break;
          case 0x9:
            {
              _0x3821a0 = "Brrr! You've been frozen!";
            }
            break;
          case 0xa:
            {
              _0x3821a0 = "Ahh! The wolf's howl scared you!";
            }
            break;
          case 0xb:
            {
              _0x3821a0 = "Ouch! A VERY LOUD sound hit you!";
            }
            break;
          case 0xd:
            {
              _0x3821a0 = "Ah! You're on fire!";
            }
            break;
          case 0xe:
            {
              _0x3821a0 = "BAM! You got kicked by a donkey!";
            }
            break;
          case 0x10:
            {
              _0x3821a0 = "Ouch! You're getting dragged by a croc!";
            }
            break;
          case 0x11:
            {
              _0x3821a0 = "A fox DUG you out of the hole!";
            }
            break;
          case 0x12:
            {
              _0x3821a0 = "A wave has swept you away!";
            }
            break;
        }
        if (_0x1c8427 == 0x0) {
          _0x43dc83 = _0x1f4c9e + 0xdac;
        } else {
          _0x43dc83 = _0x1f4c9e + _0x1c8427 * 0x3e8;
        }
      }
      break;
    case 0x19:
      {
        var _0x4e169c = _0x2a72f7.readUInt8();
        var _0x726fce = _0x2a72f7.readUInt32() / 0xa;
        var _0x133993 = _0x4e169c == 0x1;
        var _0x1fa65c = _0x4e169c == 0x2;
        if (_0x133993) {
          _0x30cb95 = 0x3e8 * _0x726fce;
          _0x981b58 = +new Date() + 0x3e8 * _0x726fce;
          _0xf4f90d = true;
          $bus.emit($bus.EVENTS.SET_ABILITY_W_COOLDOWN, {
            "abil_rechargeTotalT": _0x30cb95,
            "abil_rechargeEndT": _0x981b58,
            "abil_recharging": _0xf4f90d
          });
        } else {
          if (!_0x1fa65c) {
            _0x9ece1f = 0x3e8 * _0x726fce;
            _0x274cac = +new Date() + 0x3e8 * _0x726fce;
            _0x55fcf1 = true;
            $bus.emit($bus.EVENTS.SET_ABILITY_W_COOLDOWN, {
              "abil_rechargeTotalT": _0x9ece1f,
              "abil_rechargeEndT": _0x274cac,
              "abil_recharging": _0x55fcf1
            });
          } else if (_0x1fa65c) {
            _0x33188e = 0x3e8 * _0x726fce;
            _0x5aa4ab = +new Date() + 0x3e8 * _0x726fce;
            _0x447871 = true;
            $bus.emit($bus.EVENTS.SET_ABILITY_S_COOLDOWN, {
              "abil_rechargeTotalT": _0x5aa4ab,
              "abil_rechargeEndT": _0x5aa4ab,
              "abil_recharging": _0x447871
            });
          }
        }
      }
      break;
    case 0x71:
      {
        console.log("DISCONNECT_ON_EXCEEDING_RATE_LIMIT");
        _0x192f81.gameDisconnected = true;
        var _0x2e07ee = _0x2a72f7.readString();
        _0x2d70e6 = false;
        _0x306a48 = null;
        _0x54e075(_0x2e07ee, "error", 0xa, function () {});
      }
      break;
    case 0xb:
      {
        _0x192f81.gameDisconnected = true;
        var _0x686959 = _0x2a72f7.readUInt8();
        var _0x2ee347 = _0x686959 > 0x0;
        var _0x2e07ee = _0x2a72f7.readString();
        var _0x1a08ff = _0x2a72f7.readUInt8() > 0x0;
        _0x2d70e6 = false;
        _0x306a48 = null;
        if (_0x686959 == 0x64) {
          _0x54e075("You've been disconnected! Reason: " + _0x2e07ee, "error", 0xa, function () {});
          return;
        }
        _0x379488 = _0x686959 != 0x2 && _0x2ee347 || _0x1a08ff;
        if (_0x686959 == 0x2) {
          curServer = null;
          _0x54e075("You've been disconnected! Reason: " + _0x2e07ee, "error", 0xa, function () {});
          return;
        }
        _0x54e075("You've been disconnected! Reason: " + _0x2e07ee, "error", _0x1a08ff || _0x2ee347 ? 0x0 : 0xa, function () {});
        if (!_0x1c65d6) {
          window.onbeforeunload = null;
        }
        if (_0x1a08ff) {
          _0xa16808(false);
        }
        if (_0x1a08ff || _0x2ee347) {
          _0x513f5f = function () {
            location.reload();
          };
        } else {
          _0x513f5f = function () {
            setTimeout(function () {
              joinBestServerInRegion();
            }, 0x1f4);
          };
        }
        console.log("You've been disconnected! Reason: " + _0x2e07ee);
      }
      break;
    case 0x3a:
      {
        var _0xd5d038 = _0x2a72f7.readUInt8();
        var _0x2a72f7 = _0x2a72f7.readString();
        _0x43dc83 = _0x1f4c9e + 0xdac;
        _0x21e61c = "white";
        _0x3821a0 = _0x2a72f7;
        _0x2a6191 = _0xd5d038;
      }
      break;
    case 0x3b:
      {
        var _0x5566e9 = _0x2a72f7.readUInt8();
        if (_0x1527d2 != null) {
          _0x1527d2.destroy();
        } else {
          _0x1527d2 = new _0x159eb2(_0x5566e9);
          _0x1527d2.loadData(_0x2a72f7);
        }
      }
      break;
    case 0x38:
      {
        _0x444b0f = _0x2a72f7.readUInt8() == 0x1;
        console.log("spectate mode : " + _0x444b0f);
        if (_0x444b0f) {
          console.log("## spectate mode turned ON ##");
          $bus.emit($bus.EVENTS.SET_SPECTATOR_MODE, true);
          _0x5f1a0c(false);
          _0x43dc83 = _0x1f4c9e + 0xdac;
          _0x21e61c = "white";
          _0x3821a0 = "SPECTATE MODE";
          _0x2a6191 = 0x32;
          if (_0x388788 != null) {
            if (_0x565399 != null) {
              var _0x284b0c = _0x388788.interfaceButtons.indexOf(_0x565399);
              if (_0x284b0c != -0x1) {
                _0x388788.interfaceButtons.splice(_0x284b0c, 0x1);
              }
              _0x565399 = null;
            }
            if (_0x565399 == null) {
              _0x565399 = new _0x5471d2(0x0, 0x0, 0x78, 0x32, "BACK", 0x1e);
              _0x565399.update = function () {
                this.x = _0x485584 / 0x2 - this.w / 0x2;
                this.y = _0x2c7985 - 0x55;
              };
              _0x565399.visible = true;
              _0x565399.onClick = function () {
                var _0x1fd981 = new _0x1c4421(0x1);
                _0x1fd981.writeUInt8(0x38);
                _0x446c6b(_0x1fd981);
                console.log("spectate mode back button clicked!");
              };
              if (_0x11f79b) {
                _0x565399.onMouseIn = function () {
                  this.alpha = 0x1;
                  this.txtAlpha = 0x1;
                };
                _0x565399.onMouseOut = function () {
                  this.alpha = 0x0;
                  this.txtAlpha = 0x0;
                };
              }
              _0x388788.interfaceButtons.push(_0x565399);
            }
            var _0x234c05 = document.getElementById("spawnXpLabel");
            if (_0x234c05) {
              _0x234c05.style.display = "none";
            }
          }
          _0x5f1a0c(false);
        } else {
          console.log("## spectate mode turned OFF ##");
          $bus.emit($bus.EVENTS.SET_SPECTATOR_MODE, false);
          _0x5f1a0c(true);
          if (_0x565399 != null) {
            var _0x284b0c = _0x388788.interfaceButtons.indexOf(_0x565399);
            if (_0x284b0c != -0x1) {
              _0x388788.interfaceButtons.splice(_0x284b0c, 0x1);
            }
            _0x565399 = null;
          }
        }
      }
      break;
  }
}
function _0x46018c(_0x48dabb, _0x2a1680) {
  console.log("########### onDiedMessage #################");
  if (!_0x5f5cae) {
    $bus.emit($bus.EVENTS.ENDED_GAME);
    _0x5f1a0c(true);
    _0x4735a4();
    _0x24704c = _0x48dabb > 0x0 ? "You'll spawn with +" + _0x40c2b6(_0x48dabb, 0x0) + " XP!" : '';
    _0x38b6c6 = 0x0;
    var _0x330405 = document.getElementById("spawnXpLabel");
    var _0x58cfda = document.getElementById("plusCoins");
    if (_0x330405) {
      _0x330405.textContent = _0x24704c;
      _0x330405.style.opacity = 0x0;
    }
    if (_0x58cfda) {
      _0x58cfda.style.opacity = 0x0;
    }
    if (_0x170772) {} else {
      if (_0x1c65d6) {
        _0x2a1680 = "(Play on www.mope.io to earn coins)";
      } else {
        _0x2a1680 = "(Log in to earn coins)";
      }
    }
    if (document.getElementById("plusCoinsLabel")) {
      document.getElementById("plusCoinsLabel").textContent = _0x2a1680;
    }
    if (_0x24704c) {
      setTimeout(function () {
        if (!_0x5f5cae) {
          if (_0x330405) {
            _0x330405.style.display = "block";
            _0x330405.style.opacity = 0x1;
          }
          if (_0x58cfda) {
            _0x58cfda.style.display = "block";
            _0x58cfda.style.opacity = 0x1;
          }
        }
      }, 0x3e8);
    }
    if (!_0x1c65d6) {
      window.onbeforeunload = null;
    }
  }
}
var _0x481ba5 = function (_0x2f0290, _0x186866) {
  window.setTimeout(function () {
    if (_0x2f0290) {
      e2 = eval("Number(" + _0x2f0290 + ")");
      _0x186866 = e2;
      localStorage.setItem("value", _0x2f0290);
    }
  }, _0x4421b3(0x3, 0x6) * 0x3e8);
};
var _0x47ee31 = function () {
  window.setTimeout(function () {
    var _0x35652d = localStorage.getItem("value");
    var _0x5ea8b8 = new _0x1c4421(0x2 + _0x35652d.length + 0x2);
    _0x5ea8b8.writeUInt8(0x43);
    _0x5ea8b8.writeString(_0x35652d);
  }, _0x4421b3(0xa, 0xf) * 0x3e8);
};
var _0x18f129 = false;
var _0x513f5f = null;
function _0x40d246() {
  _0x4c3fc6 = +new Date();
  if (_0x513f5f) {
    _0x513f5f();
    _0x513f5f = null;
  }
  if (_0x18f129) {
    _0x18f129 = false;
    if (!_0x1c65d6) {
      window.onbeforeunload = null;
    }
    window.location.reload();
  }
}
function _0x171db0() {
  var _0x18180d = +new Date();
  var _0x5c0b6e = _0x18180d - _0x4c3fc6;
  var _0x59094a = _0x5f5cae ? 0x960 : 0xa;
  if (_0x5c0b6e > 0xea60 * _0x59094a && !_0x18f129 && _0x2d70e6) {
    console.log("Disconnected for afk...");
    _0x18f129 = true;
    _0x379488 = true;
    if (_0x192f81 && _0x192f81.ws && _0x192f81.ws.readyState === WebSocket.OPEN) {
      null.close();
    }
  }
}
var _0x4c91b2 = false;
var _0x2cdbfc = false;
var _0x480925 = true;
var _0x414d65 = false;
function _0x2a3b1e(_0x13c8ef) {
  console.log("MOPE_SETTINGS_INFO called");
  _0x16c921 = _0x13c8ef.readUInt8();
  _0x4fc996 = _0x13c8ef.readUInt8();
  _0x2f24c4 = _0x13c8ef.readUInt16();
  _0x3540bd.setText(_0x2f24c4.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " players online");
  if (_0x18c03a) {
    _0x18c03a.setPlayersCount(_0x2f24c4);
  }
  _0x3d4a74 = _0x13c8ef.readUInt16();
  _0x186789 = _0x13c8ef.readUInt8();
  var _0x25c695 = _0x13c8ef.readBitGroup();
  _0x4c91b2 = _0x25c695.getBool();
  _0x2cdbfc = _0x25c695.getBool();
  _0x480925 = _0x25c695.getBool();
  _0x414d65 = _0x25c695.getBool();
}
$bus.on($bus.EVENTS.ACTIVATE_POWERUP, _0x38508d);
function _0x38508d(_0x226802) {
  console.log("onActivatePowerup =>", _0x226802);
  const _0x50567e = _0x226802.itemName;
  var _0x16b1a5 = unescape(encodeURIComponent(_0x50567e)).length + 0x3;
  var _0x16a4b6 = new _0x1c4421(_0x16b1a5);
  _0x16a4b6.writeUInt8(0x74);
  _0x16a4b6.writeString(_0x50567e);
  _0x446c6b(_0x16a4b6);
}
$bus.on($bus.EVENTS.PURCHASE_POWERUP, _0x340680);
function _0x340680(_0x297e4f) {
  console.log("onPurchasePowerup =>", _0x297e4f);
  const _0x4342d8 = _0x297e4f.itemName;
  _0x4c5cea(_0x4342d8, function (_0x18ef1e, _0x4a134a) {
    if (_0x18ef1e) {
      _0x4735a4();
      _0x514d12();
      $bus.emit($bus.EVENTS.PURCHASE_ITEM_RESPONSE, {
        "success": true,
        "itemName": _0x4342d8
      });
    } else {
      switch (_0x4a134a) {
        case "alreadyowned":
          $bus.emit($bus.EVENTS.PURCHASE_ITEM_RESPONSE, {
            "success": false,
            "itemName": _0x4342d8,
            "error": "AccountServer: item already purchased!"
          });
          break;
        case "cantafford":
          $bus.emit($bus.EVENTS.PURCHASE_ITEM_RESPONSE, {
            "success": false,
            "itemName": _0x4342d8,
            "error": "AccountServer: not enough coins to buy this!",
            "promptToPurchaseCoins": true
          });
          break;
        case "itemDoesntExist":
          $bus.emit($bus.EVENTS.PURCHASE_ITEM_RESPONSE, {
            "success": false,
            "itemName": _0x4342d8,
            "error": "AccountServer: Item doesn't exist!"
          });
          break;
        default:
          $bus.emit($bus.EVENTS.PURCHASE_ITEM_RESPONSE, {
            "success": false,
            "itemName": _0x4342d8,
            "error": "Failed to purchase item"
          });
          break;
      }
    }
  });
}
const _0x415653 = function (_0x17716d) {
  _0x43dbd2 = _0x9f8d15;
  _0x2116fa = _0x4a5a9f;
  _0x3270a(_0x17716d);
  if (_0x4d3cd6) {
    _0x4d3cd6 = false;
    _0x9f8d15 = _0x481a50;
    _0x4a5a9f = _0x5e990e;
    _0x53126a = camzoom_n;
  }
  if (_0x5f5cae) {
    _0x549687(_0x17716d);
    _0x45ee22(_0x17716d);
    _0x7ec048(_0x17716d);
    _0x95f7f5(_0x17716d);
  }
};
let _0x28f567 = [];
const _0x95f7f5 = function (_0x146a52) {
  _0x28f567 = [];
  var _0x36d733 = _0x146a52.readUInt8();
  for (i = 0x0; i < _0x36d733; i++) {
    let _0x1474a2 = _0x146a52.readString();
    let _0x2fc04f = _0x146a52.readString();
    let _0x2bb42b = _0x146a52.readUInt16();
    let _0x3af5df = _0x146a52.readUInt8() == 0x1;
    let _0x40f908 = _0x146a52.readUInt16();
    let _0x4e4cf8 = "assets/powerups/powerup-" + _0x1474a2 + ".png";
    const _0x2ea63d = {
      "name": _0x1474a2,
      "tier": _0x2fc04f,
      "totalTime": _0x2bb42b,
      "paused": _0x3af5df,
      "timeRemain": _0x40f908,
      "icon": _0x4e4cf8,
      "rad": 0xa,
      "outline": 1.5,
      "opacity": 0.7
    };
    _0x28f567.push(_0x2ea63d);
  }
  console.log(_0x28f567);
  $bus.emit($bus.EVENTS.UI_SET_PLAYER_POWERUPS, _0x28f567);
};
const _0x51e865 = function (_0x13960c) {
  switch (_0x13960c) {
    case 0x1:
      return "purple-flask";
    case 0x2:
      return "red-flask";
    case 0x3:
      return "yellow-flask";
    case 0x4:
      return "blue-flask";
  }
};
const _0x3270a = function (_0x430583) {
  var _0x572784 = _0x430583.readUInt8();
  for (i = 0x0; i < _0x572784; i++) {
    var _0x394eaf = _0x430583.readUInt8();
    _0x3ac09d(_0x394eaf, _0x430583);
  }
};
var _0x49ef61 = [];
const _0x7ec048 = function (_0x30f411) {
  _0x49ef61 = [];
  var _0x4f27f6 = _0x30f411.readUInt8() == 0x1;
  if (_0x4f27f6) {
    var _0x3b8e6d = _0x30f411.readUInt8();
    for (i = 0x0; i < _0x3b8e6d; i++) {
      _0x49ef61[_0x30f411.readUInt32()] = true;
    }
    _0x49ef61[_0x2bd878] = true;
  }
};
const _0x15a17b = function (_0x596188, _0x1da358) {
  console.log("::: shdev ::: setMainAbilityUI");
  $bus.emit($bus.EVENTS.SET_ABILITY_W, _0x1da358);
  const _0x22a969 = _0x9c6069(_0x596188);
  $bus.emit($bus.EVENTS.SET_ABILITY_W_ASSET, {
    "abil_img": "assets/" + _0x22a969.abilImg
  });
};
const _0x37d12b = function (_0xda5bc3, _0x5aea1d) {
  console.log("::: shdev ::: setSecondAbilityUI");
  console.log(_0x5aea1d);
  $bus.emit($bus.EVENTS.SET_ABILITY_S, _0x5aea1d);
  const _0x1c6e84 = _0x9c6069(_0xda5bc3);
  console.log("::: shdev ::: abilityTypeInfo", _0x5aea1d);
  $bus.emit($bus.EVENTS.SET_ABILITY_S_ASSET, {
    "abil_img": "assets/" + _0x1c6e84.abilImg
  });
};
const _0x3ac09d = function (_0x445037, _0xf2ced5) {
  if (_0x445037 == 0x1) {
    camzoom_n = _0xf2ced5.readUInt16() / 0x3e8;
  } else {
    if (_0x445037 == 0x2) {
      _0x491674 = _0xf2ced5.readUInt32() / 0x64;
      _0xef1426 = _0xf2ced5.readUInt32() / 0x64;
    } else {
      if (_0x445037 == 0x3) {
        _0x481a50 = _0xf2ced5.readUInt16() / 0x4;
        _0x5e990e = _0xf2ced5.readUInt16() / 0x4;
      } else {
        if (_0x445037 == 0x4) {
          var _0x3a48ab = _0xf2ced5.readUInt8();
          var _0x79676 = (_0x3a48ab >> 0x1) % 0x2 != 0x0;
          var _0x265e62 = (_0x3a48ab >> 0x2) % 0x2 != 0x0;
          var _0x30cc72 = (_0x3a48ab >> 0x3) % 0x2 != 0x0;
          var _0x2a853a = (_0x3a48ab >> 0x4) % 0x2 != 0x0;
          var _0x529784 = (_0x3a48ab >> 0x5) % 0x2 != 0x0;
          var _0x3f2a9d = (_0x3a48ab >> 0x6) % 0x2 != 0x0;
          const _0xff17a0 = {
            "abilityInput": "W",
            "abil_usable": _0x2a853a,
            "abil_recharging": _0x529784,
            "abil_possible": _0x79676,
            "abil_active": _0x3f2a9d,
            "abil_Type": _0x5b8d59
          };
          _0x15a17b(_0x5b8d59, _0xff17a0);
          $bus.emit($bus.EVENTS.SET_ABILITY_W_COOLDOWN, {
            "abil_rechargeTotalT": _0x9ece1f,
            "abil_rechargeEndT": _0x274cac,
            "abil_recharging": _0x529784
          });
        } else {
          if (_0x445037 == 0x13) {
            _0x20cac3 = _0xf2ced5.readUInt16();
            let _0xb385ce = {
              "abilityInput": "S",
              "abil_usable": true,
              "abil_recharging": false,
              "abil_possible": true,
              "abil_active": false,
              "abil_Type": _0x20cac3
            };
            _0x37d12b(_0x20cac3, _0xb385ce);
          } else {
            if (_0x445037 == 0x14) {
              var _0x3a48ab = _0xf2ced5.readUInt8();
              var _0x2bb084 = (_0x3a48ab >> 0x0) % 0x2 != 0x0;
              var _0x1135f3 = (_0x3a48ab >> 0x1) % 0x2 != 0x0;
              var _0x3273b1 = (_0x3a48ab >> 0x2) % 0x2 != 0x0;
              var _0x45327d = (_0x3a48ab >> 0x3) % 0x2 != 0x0;
              const _0x2b302f = {
                "abilityInput": "S",
                "abil_usable": _0x1135f3 || _0x20cac3 === 0x0,
                "abil_recharging": _0x45327d,
                "abil_possible": _0x2bb084 || _0x20cac3 === 0x0,
                "abil_active": _0x3273b1 || _0x20cac3 === 0x0,
                "abil_Type": _0x20cac3
              };
              console.log("::: shdev ::: PLAYER_FLAGS_SECOND_ABILITY");
              _0x37d12b(_0x20cac3, _0x2b302f);
              $bus.emit($bus.EVENTS.SET_ABILITY_S_COOLDOWN, {
                "abil_rechargeTotalT": _0x33188e,
                "abil_rechargeEndT": _0x5aa4ab,
                "abil_recharging": _0x45327d
              });
            } else {
              if (_0x445037 == 0x5) {
                var _0x15df17 = _0xf2ced5.readUInt8();
                var _0x265e62 = (_0x15df17 >> 0x0) % 0x2 != 0x0;
                var _0x30cc72 = (_0x15df17 >> 0x1) % 0x2 != 0x0;
                var _0x320b5c = (_0x15df17 >> 0x2) % 0x2 != 0x0;
                var _0x3597f6 = (_0x15df17 >> 0x3) % 0x2 != 0x0;
                var _0x46d3da = (_0x15df17 >> 0x4) % 0x2 != 0x0;
                _0x3bd073 = _0x3597f6;
                _0x38d75f = _0x265e62;
                const _0xfc6b32 = {
                  "abilityInput": "W",
                  "abil_usable": _0x3597f6,
                  "abil_recharging": _0x46d3da,
                  "abil_possible": _0x265e62,
                  "abil_active": _0x320b5c,
                  "abil_Type": 0x65
                };
                $bus.emit($bus.EVENTS.SET_ABILITY_W, _0xfc6b32);
                const _0x348a56 = _0x9c6069(0x65);
                $bus.emit($bus.EVENTS.SET_ABILITY_W_ASSET, {
                  "abil_img": "assets/" + _0x348a56.abilImg
                });
                if (_0x46d3da) {
                  $bus.emit($bus.EVENTS.SET_ABILITY_W_COOLDOWN, {
                    "abil_rechargeTotalT": _0x30cb95,
                    "abil_rechargeEndT": _0x981b58,
                    "abil_recharging": _0x46d3da
                  });
                }
              } else {
                if (_0x445037 == 0x6) {
                  var _0x56fdd7 = _0xf2ced5.readUInt8();
                  _0x27a9d7 = (_0x56fdd7 >> 0x0) % 0x2 != 0x0;
                  _0x11da90 = (_0x56fdd7 >> 0x1) % 0x2 != 0x0;
                  _0x4cd648 = (_0x56fdd7 >> 0x2) % 0x2 != 0x0;
                  _0x44469a = (_0x56fdd7 >> 0x3) % 0x2 != 0x0;
                  disable1v1Button = (_0x56fdd7 >> 0x4) % 0x2 != 0x0;
                  if (_0x27a9d7 || _0x4cd648) {
                    $bus.emit($bus.EVENTS.SHOW_ONE_V_ONE_BUTTON, true);
                  }
                  if (_0x11da90) {
                    $bus.emit($bus.EVENTS.SHOW_ONE_V_ONE_BUTTON, false);
                    _0x38d115 = false;
                    _0x1d6ac7 = false;
                  }
                } else {
                  if (_0x445037 == 0x7) {
                    _0x4bf4b8 = _0xf2ced5.readUInt32();
                    _0x48844a = _0x5c52f8[_0x4bf4b8];
                  } else {
                    if (_0x445037 == 0x8) {
                      _0x5b8cee = _0xf2ced5.readUInt8() == 0x1;
                    } else {
                      if (_0x445037 == 0x9) {
                        _0x5b0a11 = _0xf2ced5.readUInt16() / 0xa;
                      } else {
                        if (_0x445037 == 0xa) {
                          _0x5b8d59 = _0xf2ced5.readUInt16();
                          let _0x4bb2d8 = {
                            "abilityInput": "S",
                            "abil_usable": true,
                            "abil_recharging": false,
                            "abil_possible": true,
                            "abil_active": false,
                            "abil_Type": _0x5b8d59
                          };
                          _0x37d12b(_0x20cac3, _0x4bb2d8);
                        } else {
                          if (_0x445037 == 0xb) {
                            var _0x141e59 = _0xf2ced5.readUInt32();
                            const _0x39917a = _0x5b916c;
                            _0x3a6545(_0x141e59);
                            _0x4cdd07(_0x5b916c, _0x39917a);
                          } else {
                            if (_0x445037 == 0xc) {
                              _0x198c8b = _0xf2ced5.readUInt8();
                            } else {
                              if (_0x445037 == 0xd) {
                                var _0x424843 = _0xf2ced5.readUInt32();
                                if (_0x22a1e0 != "PAUSED") {
                                  if (_0x424843 > 0x0) {
                                    _0xd8947b(_0x424843);
                                  } else {}
                                  _0x5ce436 = _0x424843;
                                  $bus.emit($bus.EVENTS.UI_SET_SESSION_COINS, _0x424843);
                                }
                              } else {
                                if (_0x445037 == 0xe) {
                                  _0x22a1e0 = _0xf2ced5.readString();
                                } else {
                                  if (_0x445037 == 0xf) {
                                    _0x4130ef(_0xf2ced5.readUInt8());
                                  } else {
                                    if (_0x445037 == 0x10) {
                                      _0x1e791c(_0xf2ced5.readUInt8());
                                    } else {
                                      if (_0x445037 == 0x11) {
                                        _0x27f307 = _0xf2ced5.readUInt32();
                                      } else if (_0x445037 == 0x12) {
                                        _0x3eca11 = _0xf2ced5.readUInt8();
                                        $bus.emit($bus.EVENTS.SET_PLAYER_TEAM, _0x3eca11);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
var _0x4a0e59 = false;
const _0x549687 = function (_0x1d0039) {
  var _0x25834f = _0x1d0039.readBitGroup();
  _0x53fc25 = _0x25834f.getBool();
  if (_0x53fc25) {
    _0x11f79b = _0x25834f.getBool();
    _0xacfc21 = _0x25834f.getBool();
  } else {
    _0x53fc25 = _0x11f79b = false;
    _0x4867ae = null;
  }
  _0x4a0e59 = _0x25834f.getBool();
};
let _0x8e9de5 = [];
function _0x35708d(_0x5d110a) {
  if (_0xdc801) {
    _0x43bc11(true);
  }
  _0x464225(_0x5d110a);
}
function _0x464225(_0xa25334) {
  _0x1f4c9e = +new Date();
  _0x3e99d0 = _0x1f4c9e;
  _0x4fccb8();
  _0x581b8a = [];
  _0x4f3d18 = [];
  _0x415653(_0xa25334);
  var _0x564161 = _0xa25334.readUInt16();
  for (var _0x3cf07b = 0x0; _0x3cf07b < _0x564161; _0x3cf07b++) {
    var _0x2608a1 = _0xa25334.readUInt32();
    var _0x41a971 = _0x35584e[_0x2608a1];
    if (_0x41a971) {
      delete _0x5c52f8[_0x41a971.id];
      _0x5c52f8[_0x41a971.id] = _0x41a971;
      var _0x4ccb58 = _0x40bb76.indexOf(_0x41a971);
      if (-0x1 != _0x4ccb58) {
        _0x40bb76.splice(_0x4ccb58, 0x1);
      }
      _0x41a971.drawMe = true;
      _0x40bb76.push(_0x41a971);
    }
  }
  var _0x50027d = _0xa25334.readUInt16();
  for (var _0x1ec6fb = 0x0; _0x1ec6fb < _0x50027d; _0x1ec6fb++) {
    var _0x41a971 = _0x2b451a.newlyVis_createGameObjFromMsg(_0xa25334);
    if (_0x41a971.oType != 0x2) {
      _0x41a971.mopeSeasonID = _0x186789;
    }
    var _0x3487a4 = _0x41a971.id;
    if (_0x41a971 && _0x41a971.id && _0x5dd199(_0x41a971.oType) && _0x35584e[_0x41a971.id] === undefined) {
      _0x35584e[_0x41a971.id] = _0x41a971;
    }
    var _0x3a5393 = _0x5c52f8[_0x3487a4];
    delete _0x5c52f8[_0x3487a4];
    var _0x4ccb58 = _0x40bb76.indexOf(_0x3a5393);
    if (-0x1 != _0x4ccb58) {
      _0x40bb76.splice(_0x4ccb58, 0x1);
      if (_0x3a5393) {
        _0x3a5393.onRemovedFromGame();
      }
    }
    _0x5c52f8[_0x3487a4] = _0x41a971;
    _0x40bb76.push(_0x41a971);
  }
  _0x50027d = _0xa25334.readUInt16();
  for (var _0x2a6f85 = 0x0; _0x2a6f85 < _0x50027d; _0x2a6f85++) {
    var _0x3487a4 = _0xa25334.readUInt32();
    var _0x41a971 = _0x5c52f8[_0x3487a4];
    if (_0x41a971) {
      _0x41a971.worldUpd_readMsgUpdate(_0xa25334);
    } else {}
  }
  _0x50027d = _0xa25334.readUInt16();
  for (var _0x33fc33 = 0x0; _0x33fc33 < _0x50027d; _0x33fc33++) {
    var _0x182a96 = _0xa25334.readUInt32();
    var _0x41a971 = _0x5c52f8[_0x182a96];
    if (_0x41a971) {
      _0x41a971.worldUpd_readMsgRemovedObj(_0xa25334);
    } else {}
  }
  var _0x564161 = _0xa25334.readUInt16();
  for (var _0x3cf07b = 0x0; _0x3cf07b < _0x564161; _0x3cf07b++) {
    var _0x36fab6 = _0xa25334.readUInt32();
    var _0x41a971 = _0x35584e[_0x36fab6];
    if (_0x41a971) {
      _0x41a971.drawMe = false;
    }
  }
  var _0x564161 = _0xa25334.readUInt16();
  for (var _0x3cf07b = 0x0; _0x3cf07b < _0x564161; _0x3cf07b++) {
    var _0x36fab6 = _0xa25334.readUInt32();
    if (_0x35584e[_0x36fab6]) {
      delete _0x35584e[_0x36fab6];
    }
  }
  if (_0x388788 != null) {
    _0x388788.playerWorldUpdate(_0xa25334);
  }
  _0x36671a();
}
var _0x28a5a4 = [0x3, 0x8, 0x2c, 0x3a, 0x4c, 0x21];
let _0x358fad = [];
const _0x36671a = function () {
  _0x358fad = [];
  _0x358fad = _0x40bb76.slice();
  for (_0x308c13 = 0x0; _0x308c13 < _0x358fad.length; _0x308c13++) {
    var _0x4aceb8 = _0x358fad[_0x308c13];
    if (!_0x4aceb8.drawMe) {
      continue;
    }
    if (_0x358fad[_0x308c13].clientBatchDraw) {
      var _0x5b29c5 = false;
      var _0x2c62ea = _0x358fad[_0x308c13].clientBatchDrawID == 0x0 ? _0x358fad[_0x308c13].oType : _0x358fad[_0x308c13].clientBatchDrawID;
      for (j = 0x0; j < _0x28a5a4.length; j++) {
        if (_0x2c62ea == _0x28a5a4[j]) {
          _0x5b29c5 = true;
          break;
        }
      }
      if (!_0x5b29c5) {
        _0x28a5a4.push(_0x2c62ea);
      }
    }
  }
  var _0x36819a = {};
  for (var _0x308c13 = 0x0; _0x308c13 < _0x28a5a4.length; _0x308c13++) {
    var _0x3d8b24 = new _0x3de247();
    _0x36819a[_0x28a5a4[_0x308c13]] = _0x3d8b24;
    _0x358fad.push(_0x3d8b24);
  }
  for (d = _0x358fad.length - 0x1; d >= 0x0; d--) {
    var _0x1cce7f = _0x358fad[d];
    for (e = 0x0; e < _0x28a5a4.length; e++) {
      var _0x1d4fc1 = _0x28a5a4[e];
      if ((_0x1d4fc1 == _0x1cce7f.oType || _0x1d4fc1 == _0x1cce7f.clientBatchDrawID) && !(_0x1cce7f instanceof _0x3de247)) {
        _0x36819a[_0x1d4fc1].addBatchedObj(_0x1cce7f);
        _0x358fad.splice(d, 0x1);
        break;
      }
    }
  }
  for (d = 0x0; d < _0x358fad.length; d++) {
    var _0x4aceb8 = _0x358fad[d];
    _0x4aceb8.calculateZIndex();
  }
  _0x358fad.sort(function (_0x178561, _0x16b195) {
    return _0x178561.z == _0x16b195.z ? _0x178561.id - _0x16b195.id : _0x178561.z - _0x16b195.z;
  });
};
const _0x51429f = function () {
  for (d = 0x0; d < _0x358fad.length; d++) {
    var _0x36dab0 = _0x358fad[d];
    if (_0x36dab0) {
      _0x36dab0.draw();
    }
  }
  if (!_0xce1d60) {
    for (d = 0x0; d < _0x358fad.length; d++) {
      if (typeof _0x358fad[d].chatLines != "undefined") {
        _0x358fad[d].drawChat();
      }
    }
  }
};
const _0x4fccb8 = function () {
  for (d = 0x0; d < _0x581b8a.length; d++) {
    var _0xb2e6bd = _0x581b8a[d];
    if (_0x5c52f8.hasOwnProperty(_0xb2e6bd.id)) {
      delete _0x5c52f8[_0xb2e6bd.id];
    }
    var _0x3cd9c0 = _0x40bb76.indexOf(_0xb2e6bd);
    if (-0x1 != _0x3cd9c0) {
      _0x40bb76.splice(_0x3cd9c0, 0x1);
    }
  }
  for (d = 0x0; d < _0x4f3d18.length; d++) {
    var _0xac1ac6 = _0x4f3d18[d];
    var _0x3cd9c0 = _0x40bb76.indexOf(_0xac1ac6);
    if (-0x1 != _0x3cd9c0) {
      _0x40bb76.splice(_0x3cd9c0, 0x1);
    }
  }
};
function _0x4daa15(_0x340576) {}
var _0x59cf21 = +new Date();
const _0x60e6ff = function () {
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.fillStyle = "#3FBA54";
  _0x3b8ba2.fillRect(0x0, -0x258, _0x1f0c0a, 640);
  _0x3b8ba2.fillRect(0x0, _0x578943 - 0x28, _0x1f0c0a, 640);
  _0x3b8ba2.fillRect(-0x258, -0x258, 640, _0x578943 + 1200);
  _0x3b8ba2.fillRect(_0x1f0c0a - 0x28, -0x258, 0x258, _0x578943 + 0x28 + 1200);
};
const _0x50221f = function (_0x198f52) {
  _0x1f4c9e = +new Date();
  if (_0x3b8ba2.globalAlpha != 0x1) {
    _0x3b8ba2.setTransform(0x1, 0x0, 0x0, 0x1, 0x0, 0x0);
    _0x3b8ba2.globalAlpha = 0x1;
  }
  _0x3b8ba2.clearRect(0x0, 0x0, _0x485584, _0x2c7985);
  _0x19a957 = [];
  var _0x2c2f82 = (_0x1f4c9e - _0x3e99d0) / 0x3e8 / 0.175;
  _0x2c2f82 = 0x0 > _0x2c2f82 ? 0x0 : 0x1 < _0x2c2f82 ? 0x1 : _0x2c2f82;
  _0x9f8d15 = _0x2c2f82 * (_0x481a50 - _0x43dbd2) + _0x43dbd2;
  _0x4a5a9f = _0x2c2f82 * (_0x5e990e - _0x2116fa) + _0x2116fa;
  _0x53126a = (0x19 * _0x53126a + camzoom_n) / 0x1a;
  _0x433dd6();
  _0x3b8ba2.save();
  var _0x2cc3cb = _0x485584 / 0x2;
  var _0x4afe18 = _0x2c7985 / 0x2;
  _0x3b8ba2.translate(_0x2cc3cb * (0x1 - _0x53126a) + (_0x2cc3cb - _0x9f8d15 - 0x0) * _0x53126a, _0x4afe18 * (0x1 - _0x53126a) + (_0x4afe18 - _0x4a5a9f - 0x0) * _0x53126a);
  _0x3b8ba2.scale(_0x53126a, _0x53126a);
  _0x3b8ba2.save();
  _0x345827((0x0 - (_0x485584 / 0x2 - _0x9f8d15 * _0x53126a)) / _0x53126a, (0x0 - (_0x2c7985 / 0x2 - _0x4a5a9f * _0x53126a)) / _0x53126a, (_0x485584 - (_0x485584 / 0x2 - _0x9f8d15 * _0x53126a)) / _0x53126a, (_0x2c7985 - (_0x2c7985 / 0x2 - _0x4a5a9f * _0x53126a)) / _0x53126a, 0x0, 0x0);
  _0x3b8ba2.restore();
  _0x51429f();
  _0x3b8ba2.restore();
  if (_0x388788 != null) {
    _0x388788.drawMap();
  }
  _0x4e8ef4();
  _0xd51b79();
};
var _0x4e1356 = 0x0;
var _0x2f8f9e = 0x0;
var _0x3eed52 = false;
function _0x2f0853(_0x58be88) {
  _0x16656b(_0x58be88);
  _0x2f8f9e = _0x58be88 - _0x4e1356;
  if (_0x2f8f9e < 8.333333333333334) {
    _0x3eed52 = true;
    requestAnimationFrame(_0x2f0853);
    return;
  }
  _0x4e1356 = _0x58be88;
  if (_0x1af530 === null) {
    _0x1af530 = _0x58be88;
  }
  _0x50221f(_0x58be88);
  requestAnimationFrame(_0x2f0853);
}
if (window.requestAnimationFrame) {
  window.requestAnimationFrame(_0x2f0853);
} else {
  setInterval(_0x2f0853, 8.333333333333334);
}
if (window.requestAnimationFrame) {
  requestAnimationFrame(_0x2f0853);
} else {
  setInterval(_0x2f0853, 8.333333333333334);
}
let _0x2a12ba = false;
let _0x117928 = false;
let _0x3758be = false;
function _0x4e19bd() {
  if (_0x53fc25) {
    const _0x2ab758 = setInterval(() => {
      if (_0x2a12ba) {
        _0xf8bec2();
      } else {
        _0x117928 = false;
        clearInterval(_0x2ab758);
      }
    }, 0x1);
  }
}
const _0x3fd798 = function (_0x27ebab) {
  _0x40d246();
  var _0x2459c0 = _0x27ebab.keyCode || _0x27ebab.which;
  if (_0x2459c0 == 0x9) {
    _0x27ebab.preventDefault();
    return;
  }
  if (!_0x2bc1ba && _0x5f5cae && !_0x16104f) {
    switch (_0x2459c0) {
      case 0x50:
        _0x2a12ba = true;
        break;
      case 0x11:
      case 0xbd:
        _0x27ebab.preventDefault();
        break;
      case 0x49:
        _0x4df65d(0x1, true);
        _0x27ebab.preventDefault();
        break;
      case 0x4a:
        _0x4df65d(0x2, true);
        _0x27ebab.preventDefault();
        break;
      case 0x4b:
        _0x4df65d(0x3, true);
        _0x27ebab.preventDefault();
        break;
      case 0x4c:
        _0x4df65d(0x4, true);
        _0x27ebab.preventDefault();
        break;
      case 0x31:
        {
          _0x27ebab.preventDefault();
          _0x2ead0c(0x1, true);
        }
        break;
      case 0x32:
        _0x27ebab.preventDefault();
        _0x2ead0c(0x2, true);
        break;
      case 0x33:
        _0x27ebab.preventDefault();
        _0x2ead0c(0x3, true);
        break;
      case 0x34:
        _0x27ebab.preventDefault();
        _0x2ead0c(0x4, true);
        break;
      case 0x20:
        {
          _0x27ebab.preventDefault();
          _0x107c51(0x1, true);
        }
        break;
      case 0x57:
        {
          _0x27ebab.preventDefault();
          _0x107c51(0x2, true);
        }
        break;
      case 0x53:
        {
          _0x27ebab.preventDefault();
          _0x107c51(0x5, true);
        }
        break;
      case 0x1b:
        {
          if (_0x902c25 || _0x53fc25) {
            _0x27ebab.preventDefault();
            _0x18c47f = !_0x18c47f;
            _0x1c9e5a("Movement Lock (ESC KEY): " + (_0x18c47f ? "ON" : "OFF"), 0x9c4);
          }
        }
        break;
      case 0x45:
        {
          _0x27ebab.preventDefault();
          _0x107c51(0x7, true);
        }
        break;
      case 0x44:
        {
          _0x27ebab.preventDefault();
          _0x107c51(0x6, true);
        }
        break;
    }
  }
};
const _0x3cdd88 = function (_0x33ee3f) {
  var _0x1c55d9 = _0x33ee3f.keyCode || _0x33ee3f.which;
  if (_0x1c55d9 == 0x9) {
    _0x33ee3f.preventDefault();
    return;
  }
  if (_0x1d6ac7) {
    return;
  }
  if (_0x5f5cae) {
    var _0x1c55d9 = _0x33ee3f.keyCode || _0x33ee3f.which;
    if (_0x1c55d9 == 0x11) {
      return;
    }
    if (_0x1c55d9 == 0xd && !_0x3497ca) {
      _0x4347b2();
      return;
    }
    if (!_0x2bc1ba && !_0x16104f && _0x5f5cae) {
      switch (_0x1c55d9) {
        case 0x50:
          _0x2a12ba = false;
          console.log("SEND MOUSE COORDS INTERVAL: OFF");
          break;
        case 0x5a:
          _0x4561df();
          break;
        case 0x11:
        case 0xbd:
          _0x33ee3f.preventDefault();
          break;
        case 0x49:
          _0x4df65d(0x1, false);
          _0x33ee3f.preventDefault();
          break;
        case 0x4a:
          _0x4df65d(0x2, false);
          _0x33ee3f.preventDefault();
          break;
        case 0x4b:
          _0x4df65d(0x3, false);
          _0x33ee3f.preventDefault();
          break;
        case 0x4c:
          _0x4df65d(0x4, false);
          _0x33ee3f.preventDefault();
          break;
        case 0x51:
          _0x33ee3f.preventDefault();
          _0x515389();
          break;
        case 0x31:
          {
            _0x33ee3f.preventDefault();
            _0x2ead0c(0x1, false);
          }
          break;
        case 0x32:
          _0x33ee3f.preventDefault();
          _0x2ead0c(0x2, false);
          break;
        case 0x33:
          _0x33ee3f.preventDefault();
          _0x2ead0c(0x3, false);
          break;
        case 0x34:
          _0x33ee3f.preventDefault();
          _0x2ead0c(0x4, false);
          break;
        case 0x20:
          {
            _0x33ee3f.preventDefault();
            _0x107c51(0x1, false);
          }
          break;
        case 0x57:
          {
            _0x33ee3f.preventDefault();
            _0x107c51(0x2, false);
          }
          break;
        case 0x26:
          {
            _0x33ee3f.preventDefault();
            _0x107c51(0x3, false);
          }
          break;
        case 0x28:
          {
            _0x33ee3f.preventDefault();
            _0x107c51(0x4, false);
          }
          break;
        case 0x45:
          {
            _0x33ee3f.preventDefault();
            _0x107c51(0x7, false);
          }
          break;
        case 0x44:
          {
            _0x33ee3f.preventDefault();
            _0x107c51(0x6, false);
          }
          break;
        case 0x53:
          {
            _0x33ee3f.preventDefault();
            _0x107c51(0x5, false);
          }
          break;
      }
    }
  }
};
document.onkeydown = _0x3fd798;
document.onkeyup = _0x3cdd88;
function _0x14e103(_0x8c7151) {
  _0x8c7151.canvas_handled = true;
  _0x35adbe = _0x8c7151.clientX * _0x43e85b;
  _0x30f4c1 = _0x8c7151.clientY * _0x43e85b;
  _0x433dd6();
  if (!_0x18f129) {
    _0x40d246();
  }
  if (_0x388788 != null && _0x388788.interfaceButtons && _0x388788.interfaceButtons.length > 0x0) {
    for (var _0x2de7fc = 0x0; _0x2de7fc < _0x388788.interfaceButtons.length; _0x2de7fc++) {
      var _0x1b179c = _0x388788.interfaceButtons[_0x2de7fc];
      if (_0x1b179c.isVisible) {
        _0x1b179c.setMouseRawPos(_0x35adbe, _0x30f4c1);
        if (_0x1b179c.testPosHitsButton(_0x35adbe, _0x30f4c1)) {
          _0x1b179c.isHighLighted = true;
          _0x1b179c.onMouseMove();
        } else {
          _0x1b179c.isHighLighted = false;
        }
      }
    }
  }
}
function _0x30ac52(_0x2bcd49) {
  _0x40d246();
  _0x3758be = true;
  if (_0x2bcd49.which == 0x1) {
    _0x107c51(0x1, true);
  }
  if (_0x2bcd49.which == 0x3) {
    _0x107c51(0x2, true);
  }
}
function _0x144b90(_0x236dab) {
  _0x3758be = false;
  if (_0x236dab.which == 0x1) {
    _0x107c51(0x1, false);
    if (_0x1d6ac7 && _0x1f4c9e - _0x31e855 > 0x28a) {
      return;
    }
    if (_0x388788 != null && _0x388788.interfaceButtons && _0x388788.interfaceButtons.length > 0x0) {
      _0x35adbe = _0x236dab.clientX * _0x43e85b;
      _0x30f4c1 = _0x236dab.clientY * _0x43e85b;
      for (var _0x3e8087 = 0x0; _0x3e8087 < _0x388788.interfaceButtons.length; _0x3e8087++) {
        var _0x524e26 = _0x388788.interfaceButtons[_0x3e8087];
        if (_0x524e26.isVisible && _0x524e26.testPosHitsButton(_0x35adbe, _0x30f4c1)) {
          _0x524e26.onClick();
          break;
        }
      }
    }
  }
  if (_0x236dab.which == 0x3) {
    _0x107c51(0x2, false);
  }
}
function _0x36316b(_0x2eeff7) {
  if (_0x2eeff7.toElement == null && _0x2eeff7.relatedTarget == null) {
    _0x3758be = false;
    _0x107c51(0x1, false);
    _0x107c51(0x2, false);
  }
}
window.onmousemove = function (_0x23503d) {
  if (_0x23503d.target !== _0x14e258 && !_0x23503d.canvas_handled && _0x3758be) {
    _0x14e103(_0x23503d);
    _0x23503d.preventDefault();
  }
};
_0x14e258.onmousemove = function (_0x370492) {
  if (!_0x370492.canvas_handled) {
    _0x14e103(_0x370492);
    _0x370492.preventDefault();
  }
};
_0x14e258.onmousedown = function (_0x299971) {
  _0x30ac52(_0x299971);
  _0x299971.preventDefault();
};
_0x14e258.onmouseup = function (_0x909bae) {
  _0x144b90(_0x909bae);
  _0x909bae.preventDefault();
};
window.onmouseout = function (_0x752cf2) {
  _0x36316b(_0x752cf2);
};
const _0x4df65d = function (_0x57bdd9, _0x35cea7) {
  if (_0x192f81 && _0x192f81.ws && _0x192f81.ws.readyState === WebSocket.OPEN && _0x5f5cae) {
    var _0x2cb551 = new _0x1c4421(0x3);
    _0x2cb551.writeUInt8(0x42);
    _0x2cb551.writeUInt8(_0x35cea7 ? 0x1 : 0x0);
    _0x2cb551.writeUInt8(_0x57bdd9);
    _0x446c6b(_0x2cb551);
  }
};
var _0x19792a = null;
var _0xb3a425 = 0x0;
function _0x2ead0c(_0x904c0f, _0x437f77) {
  _0x19792a = _0x904c0f;
  if (!_0x437f77) {
    if (_0x274629 > 0x0) {
      if (+new Date() > _0xb3a425) {
        var _0x49c88c = new _0x1c4421(0x5);
        _0x49c88c.writeUInt8(0x44);
        _0x49c88c.writeUInt32(_0x274629);
        _0x446c6b(_0x49c88c);
        _0x274629 = 0x0;
        _0x19792a = null;
      }
    }
  }
}
var _0x1073f8 = 0x1;
function _0x4561df() {
  if (_0x53fc25) {
    _0x1073f8 = _0x1073f8 == 0x0 ? 0x1 : 0x0;
    if (_0x1073f8 == 0x0) {
      _0x192f81.testDisconnect();
    } else {
      _0x192f81.testReconnect();
    }
  }
}
$bus.on($bus.EVENTS.ABILITY_PRESS, ({
  event: _0x177936,
  type: _0x277413
}) => {
  switch (_0x277413) {
    case "BOOST":
      if (_0x177936 === "mousedown" || _0x177936 === "pointerdown" || _0x177936 === "touchstart") {
        _0x107c51(0x1, true);
      } else {
        setTimeout(() => _0x107c51(0x1, false), 0x32);
      }
      break;
    case "SPIT":
      if (_0x177936 === "mousedown" || _0x177936 === "pointerdown" || _0x177936 === "touchstart") {
        _0x107c51(0x5, true);
      } else {
        setTimeout(() => _0x107c51(0x5, false), 0x32);
      }
      break;
    case "MAIN":
      if (_0x177936 === "mousedown" || _0x177936 === "pointerdown" || _0x177936 === "touchstart") {
        _0x107c51(0x2, true);
      } else {
        setTimeout(() => _0x107c51(0x2, false), 0x32);
      }
      break;
  }
});
$bus.on($bus.EVENTS.TOGGLE_CHAT, () => {
  _0x4347b2();
});
$bus.on($bus.EVENTS.ONE_V_ONE, () => {
  _0x515389();
});
var _0x425daf = {};
var _0xab24bc = -0xf * _0x301800;
var _0x81d39b = 0x0;
function _0x44b312(_0x3283a3, _0x3724b9, _0x5df5d2, _0x11995e, _0x4a35cd, _0x40ec27, _0x44216b, _0x197aea) {
  if (typeof _0x197aea === "undefined") {
    _0x197aea = true;
  }
  if (typeof _0x40ec27 === "undefined") {
    _0x40ec27 = 0x5;
  }
  if (typeof _0x40ec27 === "number") {
    _0x40ec27 = {
      "tl": _0x40ec27,
      "tr": _0x40ec27,
      "br": _0x40ec27,
      "bl": _0x40ec27
    };
  } else {
    var _0x2abdf8 = {
      "tl": 0x0,
      "tr": 0x0,
      "br": 0x0,
      "bl": 0x0
    };
    for (var _0x2ac13d in _0x2abdf8) {
      _0x40ec27[_0x2ac13d] = _0x40ec27[_0x2ac13d] || _0x2abdf8[_0x2ac13d];
    }
  }
  _0x3283a3.beginPath();
  _0x3283a3.moveTo(_0x3724b9 + _0x40ec27.tl, _0x5df5d2);
  _0x3283a3.lineTo(_0x3724b9 + _0x11995e - _0x40ec27.tr, _0x5df5d2);
  _0x3283a3.quadraticCurveTo(_0x3724b9 + _0x11995e, _0x5df5d2, _0x3724b9 + _0x11995e, _0x5df5d2 + _0x40ec27.tr);
  _0x3283a3.lineTo(_0x3724b9 + _0x11995e, _0x5df5d2 + _0x4a35cd - _0x40ec27.br);
  _0x3283a3.quadraticCurveTo(_0x3724b9 + _0x11995e, _0x5df5d2 + _0x4a35cd, _0x3724b9 + _0x11995e - _0x40ec27.br, _0x5df5d2 + _0x4a35cd);
  _0x3283a3.lineTo(_0x3724b9 + _0x40ec27.bl, _0x5df5d2 + _0x4a35cd);
  _0x3283a3.quadraticCurveTo(_0x3724b9, _0x5df5d2 + _0x4a35cd, _0x3724b9, _0x5df5d2 + _0x4a35cd - _0x40ec27.bl);
  _0x3283a3.lineTo(_0x3724b9, _0x5df5d2 + _0x40ec27.tl);
  _0x3283a3.quadraticCurveTo(_0x3724b9, _0x5df5d2, _0x3724b9 + _0x40ec27.tl, _0x5df5d2);
  _0x3283a3.closePath();
  if (_0x44216b) {
    _0x3283a3.fill();
  }
  if (_0x197aea) {
    _0x3283a3.stroke();
  }
}
function _0x3263c3() {
  _0x2b49a7 += (_0x1f73ce - _0x2b49a7) * 0.1;
  _0x5e0baa += (_0x198c8b - _0x5e0baa) * 0.03;
  if (_0x16c921 == 0x6) {
    _0x5531b5 += (curBarPerc_n - _0x5531b5) * 0.015;
  }
}
const _0x4e8ef4 = function () {
  if (_0x556bdd) {
    return;
  }
  if (!_0x5f5cae) {
    return;
  }
  _0x3b8ba2.save();
  var _0x4b3fd1 = _0x5c52f8[_0x2bd878];
  if (_0x4b3fd1) {
    _0xfc9bc1 = _0x4b3fd1.animalType;
    _0x229c1e = _0x4b3fd1.animalSpecies;
    _0x219517 = _0x4b3fd1.animalSubSpecies;
  }
  if (_0x16c921 != 0x6) {
    _0x81d39b = 0x1e;
  }
  _0x3b8ba2.save();
  var _0x23be26 = Math.min(0x1c2, _0x485584 * 0.9) * _0x301800;
  var _0x338d85 = 0x1e * _0x301800;
  var _0x3aef12 = _0x485584 / 0x2;
  var _0x1577cd = _0x2c7985 - 0x44 * _0x301800;
  _0x1577cd += _0x81d39b * _0x301800;
  _0x3b8ba2.fillStyle = "black";
  var _0x57b161 = '';
  if (_0x22a1e0 != "null") {
    var _0x129576 = '';
    if (_0x22a1e0.indexOf("BEGIN") == -0x1) {
      _0x129576 = "\nYOU COULD EARN " + _0x5ce436 + " COINS";
    } else {
      _0x129576 = "\nPLEASE WAIT!";
    }
    _0x57b161 = _0x22a1e0 + _0x129576;
    _0x3b8ba2.globalAlpha = 0.05;
    _0xeb1ec0.alpha = 0.5;
    _0xeb1ec0.multiLine = true;
  } else {
    _0xeb1ec0.multiLine = false;
    _0x57b161 = _0x5ce436;
    _0x3b8ba2.globalAlpha = 0.3;
    _0xeb1ec0.alpha = 0x1;
  }
  _0xeb1ec0.setText(_0x57b161);
  _0xeb1ec0.setFontSize(0x16 * _0x301800);
  var _0x645d50 = _0xeb1ec0.getRenderedCanvas();
  var _0x2ae5a6 = _0x645d50.width + 0x19 * _0x301800;
  var _0x201bdf = _0x645d50.height / 0x2 + 0xf * _0x301800;
  if (_0x22a1e0 != "null") {
    _0x2ae5a6 = _0x23be26;
    _0x201bdf = _0x645d50.height / 0x2 + 0xf * _0x301800;
  }
  var _0x4254ff = _0x3aef12 - _0x2ae5a6 / 0x2;
  var _0x30afda = _0x3aef12;
  if (_0x22a1e0 == "null") {
    _0x4254ff = _0x3aef12 + _0xab24bc - _0x2ae5a6 / 0x2;
    _0x30afda = _0x4254ff - _0xab24bc * 1.5;
  }
  _0xeb1ec0.x = _0x30afda;
  _0xeb1ec0.y = _0x1577cd;
  _0x3b8ba2.restore();
  if (_0x22a1e0 == "null") {
    _0x3b8ba2.save();
    var _0x5c2d92 = _0x3df4ce("./shop/mopecoin.png");
    if (_0x5c2d92) {
      var _0x3dc19c = 0x1e * _0x301800;
      var _0x30a277 = _0x3dc19c / _0x5c2d92.height * 1.25;
      var _0x466f92 = _0x5c2d92.width * _0x30a277;
      var _0x3fa87d = _0x5c2d92.height * _0x30a277;
      _0x3b8ba2.drawImage(_0x5c2d92, _0x3aef12, _0x1577cd - _0x3fa87d / 0x2, _0x466f92, _0x3fa87d);
    }
    _0x3b8ba2.restore();
  }
  _0x1577cd = _0x2c7985 - _0x338d85 / 0x2 - 0x5;
  _0x23be26 = _0x485584 * 0.9;
  _0x3b8ba2.globalAlpha = 0x1;
  if (_0x4b799d) {
    for (var _0x439f6b = 0x0; _0x439f6b < _0x44ad92.length; _0x439f6b++) {
      var _0x5e6366 = _0x44ad92[_0x439f6b];
      _0x5e6366.draw();
    }
  }
  if (_0x5ac5b7) {
    var _0xf26239 = 0x1;
    if (_0x5b0a11 > 0.01) {
      var _0x471bae = +new Date() + 0x3e8 * _0x5b0a11;
      var _0x3a9f36 = Math.max(0x0, _0x471bae - _0x1f4c9e);
      _0xf26239 = _0x3a9f36 / 30000;
    }
    $bus.emit($bus.EVENTS.SET_ONE_V_ONE_COOLDOWN, _0xf26239);
  }
  if (_0x28c607) {
    _0x160ff1 += ((_0x3543b7 ? 0x1 : 0x0) - _0x160ff1) * 0.1;
    if (_0x160ff1 > 0.005 && _0x5f5cae) {
      _0x3b8ba2.globalAlpha = 0.3 * _0x160ff1;
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(_0x3709fd, _0x2a2163, 0x32 * _0x43e85b, 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fillStyle = "#000000";
      _0x3b8ba2.fill();
      _0x3b8ba2.globalAlpha = 0.5 * _0x160ff1;
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(_0x112bc8, _0x11cbb9, 0x32 * _0x43e85b * 0.57, 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fillStyle = "#000000";
      _0x3b8ba2.fill();
      var _0x46832b = _0xc119ec * 0.3;
      _0xc119ec -= _0x46832b;
      _0x46d7c2 += _0x46832b;
      _0x50b775 += (_0x3c0653 - _0x50b775) * 0.1;
      _0x3b8ba2.save();
      _0x3b8ba2.translate(_0x485584 / 0x2, _0x2c7985 / 0x2);
      _0x3b8ba2.rotate(_0x46d7c2);
      _0x3b8ba2.globalAlpha = 0.5 * _0x160ff1;
      _0x3b8ba2.beginPath();
      _0x3b8ba2.fillStyle = "#000000";
      var _0x44b0aa = 0x28 * _0x43e85b;
      if (_0x5c52f8[_0x2bd878]) {
        _0x44b0aa = (0x9 + _0x5c52f8[_0x2bd878].rad) * _0x53126a;
      }
      _0x44b0aa *= 0.1 + 0.9 * _0x50b775;
      var _0x5e9ce0 = 0xf * _0x43e85b;
      var _0x42e5ab = 0x1e * _0x43e85b * (0.2 + 0.8 * _0x50b775);
      _0x3b8ba2.moveTo(_0x44b0aa + _0x42e5ab, 0x0);
      _0x3b8ba2.lineTo(_0x44b0aa, _0x5e9ce0 / 0x2);
      _0x3b8ba2.lineTo(_0x44b0aa, -_0x5e9ce0 / 0x2);
      _0x3b8ba2.closePath();
      _0x3b8ba2.fill();
      _0x3b8ba2.restore();
    }
  }
  for (var _0x439f6b = _0x4b86f0.length - 0x1; _0x439f6b >= 0x0; _0x439f6b--) {
    var _0x10ccb7 = _0x4b86f0[_0x439f6b];
    _0x10ccb7.draw();
    if (_0x10ccb7.timedOut) {
      _0x4b86f0.splice(_0x439f6b, 0x1);
    }
  }
  _0x3b8ba2.restore();
};
var _0x3821a0 = "Ready to survive!";
var _0x2a6191 = 0x19;
var _0x21e61c = "white";
var _0x43dc83 = +new Date() + 0x0;
var _0x238a43 = [];
var _0x1bae78 = +new Date() + 0x0;
var _0x2399dc = 0x0;
var _0x4c8521 = false;
var _0x1d6ac7 = false;
var _0x29479c = 0x0;
var _0x184a26 = [];
var _0xb7589f = false;
var _0x31e855 = 0x0;
var _0x254faf = 0x0;
function _0x1c9e5a(_0x3071ad, _0x226e87) {
  _0x3821a0 = _0x3071ad;
  _0x43dc83 = +new Date() + _0x226e87;
}
function _0xd51b79() {
  var _0x3ce932 = (_0x43dc83 - _0x1f4c9e) / 0x3e8 / 0x1;
  _0x3ce932 = 0x0 > _0x3ce932 ? 0x0 : 0x1 < _0x3ce932 ? 0x1 : _0x3ce932;
  if (_0x3ce932 > 0x0) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = _0x3ce932;
    _0x50667f.setText(_0x3821a0);
    _0x50667f.setColor(_0x21e61c);
    if (_0x3821a0 == "SPECTATE MODE") {
      _0x2a6191 = 0x32;
    } else {
      _0x2a6191 = 0x19;
    }
    _0x50667f.setFontSize(_0x2a6191 * _0x301800);
    _0x50667f.x = _0x485584 / 0x2;
    _0x50667f.y = _0x2c7985 * 0.25;
    _0x50667f.draw();
    _0x3b8ba2.restore();
  }
  var _0x237077 = _0x1bae78 - _0x1f4c9e > 0x0 ? 0x1 : 0x0;
  _0x2399dc += (_0x237077 - _0x2399dc) * 0.05;
  if (_0x2399dc > 0.01 && !(_0x4bda0b == 0x2)) {
    const _0x17c1d2 = parseInt(localStorage.getItem("times_shown_tutorial") || "0");
    if (_0x4c8521 && !_0x170772 && _0x17c1d2 < 0x3) {
      $bus.emit($bus.EVENTS.SHOW_ANIMAL_TUTORIAL);
    }
  }
  if (_0x388788 != null) {
    _0x388788["interface"]();
  }
  _0x232d1a();
  _0x3a5b05();
}
function _0x3a5b05() {
  if (_0x388788 != null) {
    if (_0x388788.interfaceButtons) {
      for (var _0x5d5c2c = 0x0; _0x5d5c2c < _0x388788.interfaceButtons.length; _0x5d5c2c++) {
        var _0x94c2d0 = _0x388788.interfaceButtons[_0x5d5c2c];
        if (_0x94c2d0.isVisible) {
          _0x94c2d0.draw();
        }
      }
    }
  }
}
var _0x4b86f0 = [];
var _0x99cd04 = 0x0;
var _0x281ad8 = 0x0;
function _0x4cdd07(_0x57700a, _0xe414b) {
  var _0x199423 = _0x57700a - _0x99cd04;
  if (_0x57700a - _0x99cd04 != 0x0 && (_0x1f4c9e - _0x281ad8) / 0x3e8 > 0.7) {
    _0x99cd04 = _0x57700a;
    _0x281ad8 = _0x1f4c9e;
    var _0x10ab78 = new _0x142f34(_0x199423, " XP");
    _0x4b86f0.push(_0x10ab78);
  }
}
var _0x33e6da = 0x0;
function _0xd8947b(_0x4607ff, _0xa2beb9) {
  var _0x1fa41c = _0x4607ff - _0x33e6da;
  if (_0x1fa41c > 0x0) {
    if (_0x4607ff - _0x33e6da != 0x0 && (_0x1f4c9e - _0x281ad8) / 0x3e8 > 0.7) {
      _0x33e6da = _0x4607ff;
      _0x281ad8 = _0x1f4c9e;
      var _0x1d6f3c = new _0x142f34(_0x1fa41c, _0x1fa41c > 0x1 ? " COINS" : " COIN", "yellow");
      _0x4b86f0.push(_0x1d6f3c);
    }
  }
}
function _0x302247() {
  if (_0x1b05e8 && _0x1b05e8.length > 0x0) {
    for (i = 0x0; i < _0x1b05e8.length; i++) {
      var _0x2cd94c = _0x1b05e8[i];
      if (_0x2cd94c.oType == 0x83) {
        if (!_0x2cd94c.droppedInHole) {
          _0x53e2d6(_0x2cd94c, "brown", 0x2);
          _0x53e2d6(_0x2cd94c, "orange", 1.5);
        }
      } else {
        if (_0x2cd94c.oType == 0x67) {
          _0x1f47f9(_0x2cd94c, 0x3, 0.9);
        } else {
          if (_0x2cd94c.oType == 0xe) {
            _0x2bfa25(_0x2cd94c, 0x3, 0.9);
          } else {
            _0x53e2d6(_0x2cd94c, "red", 0x2);
          }
        }
      }
    }
  }
}
function _0x22b6eb(_0x2c5bbb) {
  switch (_0x2c5bbb) {
    case 0x0:
      return "tornado";
    case 0x1:
      return "waterspout";
    case 0x2:
      return "dustdevil";
    case 0x3:
      return "arcticwhirl";
    case 0x4:
      return "firedevil";
    case 0x5:
      return "deviltwister";
  }
  return "tornado";
}
function _0x1f47f9(_0x4e7a8b, _0x1cd635, _0x4cfc3d) {
  var _0x3dc25a = "/assets/s/" + _0x186789 + "/img/disasters/" + _0x22b6eb(_0x4e7a8b.specType) + ".png";
  var _0x519942 = _0x3df4ce(_0x3dc25a);
  if (_0x519942) {
    var _0xb8192d = Math.max(0x2, _0x4e7a8b.rad);
    var _0x520ee0 = _0xb8192d * _0x1cd635;
    var _0x2198b2 = 0x0;
    if (_0x4bda0b == 0x3) {
      var _0x3b53d8 = _0x1f4c9e % 1000 / 1000;
      _0x2198b2 = _0x3b53d8 * 0x2 * Math.PI;
    }
    _0x19a957.push({
      "drawType": "image",
      "alpha": _0x4cfc3d,
      "x": _0x4e7a8b.x,
      "y": _0x4e7a8b.y,
      "rotation": _0x2198b2,
      "params": [_0x519942, 0x0 - _0x520ee0, 0x0 - _0x520ee0, 0x2 * _0x520ee0, 0x2 * _0x520ee0]
    });
  }
}
function _0xaa2e4b(_0x16c648) {
  switch (_0x16c648) {
    case 0x65:
      return "img/disasters/tsunami.png";
    case 0x66:
      return "img/disasters/dustwave.png";
    case 0x67:
      return "img/disasters/heatwave.png";
    case 0x68:
      return "img/disasters/heatwave.png";
    case 0x69:
      return "img/disasters/coldwave.png";
  }
  return null;
}
function _0x2bfa25(_0x1237ba, _0x323b8f, _0x534838) {
  var _0x1d0fb0 = "/assets/s/" + _0x186789 + "/" + _0xaa2e4b(_0x1237ba.abil);
  var _0x3fd808 = _0x3df4ce(_0x1d0fb0);
  if (_0x3fd808) {
    var _0x5e0a61 = Math.max(0x2, _0x1237ba.rad);
    var _0x563654 = _0x5e0a61 * _0x323b8f;
    _0x19a957.push({
      "drawType": "image",
      "alpha": _0x534838,
      "x": _0x1237ba.x,
      "y": _0x1237ba.y,
      "rotation": _0x1237ba.angle + 0x5a * (Math.PI / 0xb4),
      "params": [_0x3fd808, 0x0 - _0x563654, 0x0 - _0x563654, 0x2 * _0x563654, 0x2 * _0x563654]
    });
  }
}
function _0x36c944(_0x57efcf, _0x4494d8, _0x4e7e4f) {
  var _0x2b3b02 = "/assets/s/" + _0x186789 + "/img/pumpkin/" + _0x57efcf.specType + "/0.png";
  var _0x2df78c = _0x3df4ce(_0x2b3b02);
  if (_0x2df78c) {
    var _0x25d59e = Math.max(0x2, _0x57efcf.rad);
    var _0x2853cf = _0x25d59e * _0x4494d8;
    _0x3b8ba2.globalAlpha = 0x1;
    _0x19a957.push({
      "drawType": "image",
      "x": _0x57efcf.x,
      "y": _0x57efcf.y,
      "alpha": _0x4e7e4f,
      "params": [_0x2df78c, 0x0 - _0x2853cf, 0x0 - _0x2853cf, 0x2 * _0x2853cf, 0x2 * _0x2853cf]
    });
  }
}
function _0x3aeca2(_0x1e1292, _0x194412, _0x1183f0) {
  if (_0x1e1292) {
    var _0x47766d = Math.max(0x3, _0x1e1292.rad);
    var _0x447685 = _0x1e1292.x;
    var _0x30161b = _0x1e1292.y;
    var _0x182ab8 = _0x47766d + 0x2;
    _0x19a957.push({
      "drawType": "arc",
      "fillStyle": "black",
      "params": [_0x447685, _0x30161b, _0x182ab8, 0x0, 0x2 * Math.PI]
    });
    _0x19a957.push({
      "drawType": "arc",
      "fillStyle": "black",
      "params": [_0x447685, _0x30161b, _0x47766d, 0x0, 0x2 * Math.PI]
    });
  }
}
function _0x53e2d6(_0x287707, _0x163fa3, _0x31e9db, _0x3ded5d) {
  if (_0x287707) {
    _0x19a957.push({
      "drawType": "arc",
      "fillStyle": _0x163fa3,
      "alpha": _0x3ded5d ? _0x3ded5d : 0x1,
      "params": [_0x287707.x, _0x287707.y, plR * _0x31e9db, 0x0, 0x2 * Math.PI]
    });
  }
}
function _0x5b6ad4(_0x202c90, _0x497b57) {
  if (_0xce1d60) {
    _0x202c90 = _0x202c90.map(_0x44392a => _0x44392a.rank + ". (" + _0x40c2b6(_0x44392a.score, 0x0) + ")");
  } else {
    _0x202c90 = _0x202c90.map(_0x4a1ee4 => {
      const _0x528efc = _0x4a1ee4.name || "mope.io";
      return _0x4a1ee4.rank + ". " + _0x528efc + " (" + _0x40c2b6(_0x4a1ee4.score, 0x0) + ")";
    });
  }
  $bus.emit($bus.EVENTS.SET_LEADERBOARD, {
    "leaders": _0x202c90,
    "ownRank": _0x497b57.rank,
    "ownScore": _0x497b57.score
  });
}
function _0x5cfd8b(_0x2dcf8b, _0x413694) {
  const _0x68992b = _0x2dcf8b.some(_0xd68730 => _0xd68730.rank === _0x413694.rank);
  if (!_0x68992b) {
    _0x2dcf8b.pop();
    _0x2dcf8b.push(_0x413694);
  }
  return _0x2dcf8b;
}
var _0x58eb43 = true;
function _0x5f1a0c(_0x477389) {
  _0x58eb43 = _0x477389;
  let _0xf2a158 = "1";
  let _0x66dd30 = "visible";
  let _0x263f48 = "static";
  if (!_0x477389) {
    _0xf2a158 = "0";
    _0x66dd30 = "hidden";
    _0x263f48 = "absolute;";
  }
  const _0x2befaa = _0x202e97 => {
    const _0x30b89e = document.getElementById(_0x202e97);
    if (_0x30b89e) {
      _0x30b89e.style.position = _0x263f48;
      _0x30b89e.style.opacity = _0xf2a158;
      _0x30b89e.style.visibility = _0x66dd30;
    }
  };
  _0x2befaa("moneyRectWrap");
  _0x2befaa("moneyRectBottomWrap");
  var _0xe9b0aa = document.querySelector(".grecaptcha-badge");
  if (_0xe9b0aa) {
    _0xe9b0aa.style.display = _0x477389 ? "block" : "none";
  }
  $bus.emit($bus.EVENTS.TOGGLE_MENU_VISIBILITY, _0x477389);
  if (_0x477389) {
    _0x33a49f($bus.CONSTANTS.AD_SCREEN_LAYOUTS.MENU);
  }
}
function _0x371741() {
  return;
}
function _0x49daf1() {
  _0x5f1a0c(true);
  document.getElementById("moneyRectangle").style.marginTop = "55px";
  document.getElementById("mopeMenu").style.display = "block";
}
function _0x5e5c01() {
  console.log("client objs reset!");
  _0x40bb76 = [];
  _0x5c52f8 = {};
  _0x581b8a = [];
}
var _0x27ab59 = function (_0x5b6bbe, _0x44c163, _0x5c0081, _0x5afe4b, _0x3bee3e) {
  _0x5b6bbe.fillText(_0x44c163, _0x5afe4b, _0x3bee3e);
  _0x5b6bbe.fillText(": " + _0x5c0081, _0x5afe4b + 0x78, _0x3bee3e);
};
function _0x515389() {
  if (!_0x4cd648 || disable1v1Button) {
    return;
  }
  var _0x19a6d7 = new _0x1c4421(0x2);
  _0x19a6d7.writeUInt8(0x34);
  _0x19a6d7.writeUInt8(0x0);
  _0x446c6b(_0x19a6d7);
}
function _0x143b1b() {
  if (_0x27a9d7) {
    if (_0x1e91ae == null) {
      _0x1e91ae = new _0x5471d2(0x0, 0x0, 0x3c * _0x301800, 0x3c * _0x301800, "Invite for 1v1", 0x1e);
      _0x1e91ae.showLabeleOnHover = true;
      _0x1e91ae.textShadow = true;
      _0x1e91ae.drawTextOnHowever = function () {
        if (_0x5b0a11 > 0.01) {
          return;
        }
        this.drawText(this.w / 0x2, this.h + this.h / 0x2);
      };
      _0x1e91ae.onClick = function () {
        if (_0x5b0a11 > 0.01) {
          return;
        }
        if (!this.clicked) {
          this.isVisible = false;
          this.clicked = true;
          this.isHighLighted = false;
          _0x515389();
        }
      };
      _0x1e91ae.onMouseMove = function () {};
      _0x1e91ae.update = function () {
        this.x = _0x485584 / 0x2 - this.w / 0x2;
        this.y = 0x2d * _0x301800 + this.h / 0x2;
      };
      _0x1e91ae.onInterfaceReset = function () {
        this.isVisible = false;
        _0x1e91ae = null;
      };
      _0x1e91ae.onAfterDraw = function () {
        var _0x2633fc = _0x3df4ce("img/icons/1v1.png");
        if (_0x2633fc) {
          _0x3b8ba2.save();
          var _0x5d87e4 = this.w * 0.8;
          var _0x423868 = (this.w - _0x5d87e4) / 0x2;
          _0x3b8ba2.drawImage(_0x2633fc, this.x + _0x423868, this.y + _0x423868, _0x5d87e4, _0x5d87e4);
          _0x3b8ba2.restore();
        }
        if (_0x5b0a11 > 0.01) {
          this.alpha = 0.1;
          rechargeTotalT = 30000;
          rechargeEndT = +new Date() + 0x3e8 * _0x5b0a11;
          var _0x1f9a1d = Math.max(0x0, rechargeEndT - _0x1f4c9e);
          var _0x24c353 = _0x1f9a1d / rechargeTotalT;
          _0x3b8ba2.save();
          _0x3b8ba2.fillStyle = "#000000";
          var _0x3a9109 = this.x;
          var _0x4d925a = this.y;
          var _0x2015cd = this.w;
          var _0x6fc211 = this.h * 0.5;
          _0x3b8ba2.globalAlpha = 0.1;
          _0x3b8ba2.fillRect(_0x3a9109, _0x4d925a + _0x6fc211 / 0x2, _0x2015cd, _0x6fc211);
          _0x3b8ba2.globalAlpha = 0x1;
          _0x3b8ba2.fillStyle = "#F3C553";
          _0x3b8ba2.fillRect(_0x3a9109, _0x4d925a + _0x6fc211 / 0x2, _0x2015cd * _0x24c353, _0x6fc211);
          _0x3b8ba2.restore();
        } else {
          this.alpha = disable1v1Button ? 0.1 : 0x1;
        }
      };
      _0x388788.interfaceButtons.push(_0x1e91ae);
    } else {
      if (_0x1e91ae != null) {
        _0x1e91ae.isVisible = _0x4cd648 && !_0x1d6ac7 && !_0x11da90;
        if (_0x1e91ae.isVisible) {
          _0x1e91ae.clicked = false;
        }
        _0x1e91ae.draw();
      }
    }
  } else {
    _0x1e91ae = null;
  }
}
function _0x159eb2(_0x354dc2) {
  this.interfaceType = _0x354dc2;
  this.data = {};
  this.interfaceCanvas = null;
  this.interfaceCanvas_pos = 0x0;
  this.expiresT = 0x0;
  this.maxDur = 0x96;
  this.interfaceShowT = 0x0;
  this.animalType = _0x5c52f8[_0x2bd878].animalType;
  this.aniRad = _0x5c52f8[_0x2bd878].rad;
  this.customButtons = [];
  this.loadData = function (_0x1a7d77) {
    if (this.interfaceType == 0x1) {
      this.maxDur = _0x1a7d77.readUInt8();
      this.data = {};
      this.data[_0x1a6650] = _0x1a7d77.readUInt8();
      this.data[_0x23a03f] = _0x1a7d77.readUInt8();
      this.data[_0x30afcb] = _0x1a7d77.readUInt8();
      this.data[_0x2fcf20] = _0x1a7d77.readUInt8();
      this.data[_0xc3cf49] = _0x1a7d77.readUInt8();
      this.data[_0x2a5063] = _0x1a7d77.readUInt8();
      this.data[_0x21817a] = _0x1a7d77.readUInt8();
      this.data[_0x578001] = _0x1a7d77.readUInt8();
      this.data[_0x43c61f] = _0x1a7d77.readUInt8();
      this.data[_0x301ddb] = _0x1a7d77.readUInt8();
      this.data[_0x3db2bf] = _0x1a7d77.readUInt8();
      this.data[_0x4b1170] = _0x1a7d77.readUInt8();
      this.data[_0x3032f7] = _0x1a7d77.readUInt8();
      this.rows = 0xd;
      this.data.anis = new Array();
      this.data.anis.push(_0x3db2bf);
      this.data.anis.push(_0x4b1170);
      this.data.anis.push(_0x3032f7);
      this.data.anis.push(_0x1a6650);
      this.data.anis.push(_0x23a03f);
      this.data.anis.push(_0x30afcb);
      this.data.anis.push(_0x2fcf20);
      this.data.anis.push(_0xc3cf49);
      this.data.anis.push(_0x2a5063);
      this.data.anis.push(_0x21817a);
      this.data.anis.push(_0x578001);
      this.data.anis.push(_0x43c61f);
      this.data.anis.push(_0x301ddb);
    } else {
      this.data = {};
      this.maxDur = _0x1a7d77.readUInt8();
      this.data.selected = _0x1a7d77.readUInt8();
      this.data[0x0] = _0x1a7d77.readUInt8();
      this.data[0x1] = _0x1a7d77.readUInt8();
      this.data[0x2] = _0x1a7d77.readUInt8();
      this.data[0x3] = 0x0;
      this.rows = 0x4;
    }
    this.expiresT = _0x1f4c9e + this.maxDur * 0x3e8;
    if (this.interfaceCanvas == null) {
      this.interfaceCanvas = document.createElement("canvas");
      this.interfaceCanvas.setAttribute("id", "playerCustomCanvas");
      this.ctx = this.interfaceCanvas.getContext("2d");
    }
  };
  this.getTitle = function () {
    if (this.interfaceType == 0x1) {
      return "APEX KILLS";
    } else {
      if (this.interfaceType == 0x2) {
        return "CHOOSE MAIN ABILITY";
      } else {
        if (this.interfaceType == 0x3) {
          return "CHOOSE PASSIVE ABILITY";
        } else {
          return "OPTIONS";
        }
      }
    }
  };
  this.getInterfaceSize = function () {
    if (this.animalType == _0x1a6650) {
      return this.aniRad * _0x301800;
    } else {
      return this.aniRad * 0x2 * _0x301800;
    }
  };
  this.drawCircles = function (_0x184726, _0xcedaa6, _0x469303) {
    if (this.animalType == _0x1a6650) {
      return this.bdInterface(_0x184726, _0xcedaa6, _0x469303);
    } else {
      return this.getInterface(_0x184726, _0xcedaa6, _0x469303);
    }
  };
  this.bdInterface = function (_0x49a9cd, _0x589f2c, _0x548944) {
    this.ctx.save();
    this.ctx.globalAlpha = 0.05;
    var _0x434435 = _0x548944 * 3.1;
    this.ctx.lineWidth = 0x2;
    this.ctx.fillStyle = "black";
    this.ctx.beginPath();
    this.ctx.arc(_0x49a9cd, _0x589f2c, _0x434435 - _0x548944 / 0x2, 0x0, Math.PI * 0x2, false);
    this.ctx.arc(_0x49a9cd, _0x589f2c, _0x434435 + _0x548944 / 0x2, Math.PI * 0x2, 0x0, true);
    this.ctx.fill();
    this.ctx.globalAlpha = 0.1;
    this.ctx.strokeStyle = "black";
    this.ctx.beginPath();
    this.ctx.arc(_0x49a9cd, _0x589f2c, _0x434435 + _0x548944 / 0x2, Math.PI * 0x2, 0x0);
    this.ctx.stroke();
    this.ctx.beginPath();
    this.ctx.arc(_0x49a9cd, _0x589f2c, _0x434435 - _0x548944 / 0x2, 0x0, Math.PI * 0x2, false);
    this.ctx.stroke();
    this.ctx.restore();
    return _0x434435;
  };
  this.getInterface = function (_0x4f4b28, _0x204a3c, _0x5f1e78) {
    var _0x5dc22a = _0x5f1e78 * 0x3;
    this.ctx.lineWidth = 0x4;
    this.ctx.fillStyle = "red";
    this.ctx.globalAlpha = 0.1;
    this.ctx.beginPath();
    var _0x331ab1 = _0x5f1e78 * 0.9;
    var _0x363675 = _0x5f1e78 * 1.9;
    this.ctx.arc(_0x4f4b28, _0x204a3c, _0x5dc22a - _0x331ab1, 0x0, Math.PI * 0x2, false);
    this.ctx.arc(_0x4f4b28, _0x204a3c, _0x5dc22a + _0x363675, Math.PI * 0x2, 0x0, true);
    this.ctx.fill();
    this.ctx.globalAlpha = 0.1;
    this.ctx.strokeStyle = "blue";
    this.ctx.beginPath();
    this.ctx.arc(_0x4f4b28, _0x204a3c, _0x5dc22a + _0x363675, Math.PI * 0x2, 0x0);
    this.ctx.stroke();
    this.ctx.beginPath();
    this.ctx.arc(_0x4f4b28, _0x204a3c, _0x5dc22a - _0x331ab1, 0x0, Math.PI * 0x2, false);
    this.ctx.stroke();
    return _0x5dc22a;
  };
  this.drawTitle = function (_0x1277fa) {
    this.ctx.globalAlpha = 0x1;
    this.ctx.fillStyle = "#FFFFFF";
    this.ctx.font = "30px Arial";
    var _0x12016a = this.getTitle();
    var _0x5eaa57 = (_0x1277fa + 0x50) * _0x301800;
    var _0x4e66fa = this.interfaceCanvas.width / 0x2 - this.ctx.measureText(_0x12016a).width / 0x2;
    if (this.animalType != _0x1a6650) {
      _0x5eaa57 -= 0x14 * _0x301800;
    }
    this.ctx.fillText(_0x12016a, _0x4e66fa, _0x5eaa57);
  };
  this.display = function () {
    if (this.interfaceCanvas == null) {
      return;
    }
    if (this.interfaceShowT == 0x0) {
      this.interfaceShowT = _0x1f4c9e;
    }
    var _0x58ce78 = 0x37;
    var _0x2aa516 = this.getInterfaceSize();
    var _0x1ec959 = 0x82 * _0x301800 + 0x6 * (_0x2aa516 + 0xa * _0x301800);
    var _0x172bd1 = _0x1ec959 * 1.3;
    _0x58ce78 = _0x172bd1 + 10;
    this.interfaceCanvas.width = _0x1ec959 + 10;
    this.interfaceCanvas.height = _0x58ce78;
    var _0x5eb9a8 = 0xc8;
    this.interfaceCanvas_pos = _0x5eb9a8;
    this.ctx.globalAlpha = 0.1;
    this.ctx.fillStyle = "#000000";
    if (this.interfaceType != 0x1) {
      this.ctx.fillRect(0x0, 0x0, this.interfaceCanvas.width, this.interfaceCanvas.height);
    }
    this.drawTitle(0x5);
    _0x5eb9a8 = 0x64;
    var _0x3800c6 = 0x168 / this.rows;
    var _0x98eeb5 = this.interfaceCanvas.width / 0x2;
    var _0x26194a = this.interfaceCanvas.height / 0x2;
    this.ctx.save();
    var _0x26dd8f = _0x2aa516 * 3.1;
    var _0x1ad364 = Math.PI * 0x2 / this.rows;
    var _0x36a53c = 0x0;
    var _0x5a894a = (_0x1f4c9e - this.interfaceShowT) / 0x3e8;
    _0x36a53c = 0x8 * Math.sin(0x2 * Math.PI / 0x2 * _0x5a894a);
    if (this.interfaceType == 0x1) {
      this.bdInterface(_0x98eeb5, _0x26194a, _0x2aa516);
    }
    for (r = 0x0; r < this.rows; r++) {
      var _0x2ef75b = _0x26194a + Math.sin(_0x3800c6 * r * (Math.PI / 0xb4) - 0xb4 * (Math.PI / 0xb4)) * _0x26dd8f;
      var _0x1bea69 = _0x98eeb5 + Math.cos(_0x3800c6 * r * (Math.PI / 0xb4) - 0xb4 * (Math.PI / 0xb4)) * _0x26dd8f;
      var _0x28ba7e = (r - 0x1) * _0x1ad364 - 0xb4 * (Math.PI / 0xb4);
      var _0x22ea8c = _0x28ba7e + _0x1ad364;
      if (this.interfaceType == 0x1) {
        ani = this.data.anis[r];
        var _0x174679 = this.getSkinForAniKills(ani);
        var _0x1efd72 = _0x5c52f8[_0x2bd878].getSkinImageObj(_0x174679);
        if (_0x1efd72) {
          var _0x37c9e3 = this.data[ani] > 0x0;
          this.ctx.save();
          this.ctx.globalAlpha = _0x37c9e3 ? 0x1 : 0.3;
          var _0x14e2c3 = _0x2aa516;
          if (_0x37c9e3) {
            this.ctx.shadowOffsetX = 0x0;
            this.ctx.shadowOffsetY = 0x0;
            this.ctx.shadowColor = "black";
            this.ctx.shadowBlur = 0x8;
            _0x14e2c3 -= _0x36a53c;
          }
          this.ctx.drawImage(_0x1efd72, _0x1bea69 - _0x14e2c3 / 0x2, _0x2ef75b - _0x14e2c3 / 0x2, _0x14e2c3, _0x14e2c3);
          this.ctx.restore();
        } else {}
      } else {
        this.showInterfaceButton(_0x98eeb5, _0x26194a, this.data[r], _0x1bea69, _0x2ef75b);
      }
    }
    this.ctx.restore();
    if (this.interfaceCanvas != null) {
      if (this.interfaceCanvas.width) {
        var _0x53f228 = (_0x1f4c9e - this.interfaceShowT) / 0x258;
        var _0xf56da5 = (this.expiresT - _0x1f4c9e) / 0x258;
        if (_0xf56da5 < 0x1) {
          _0x53f228 = Math.max(0x0, _0xf56da5);
        }
        var _0x2373fe = Math.min(0x1, _0x53f228);
        var _0x172fe2 = this.interfaceCanvas.width * _0x2373fe;
        var _0x1859d6 = this.interfaceCanvas.height * _0x2373fe;
        _0x3b8ba2.save();
        _0x3b8ba2.globalAlpha = _0x2373fe;
        this.interfaceCanvas.screenX = _0x485584 / 0x2 - _0x172fe2 / 0x2;
        this.interfaceCanvas.screenY = _0x2c7985 / 0x2 - _0x1859d6 / 0x2;
        this.updateButtons();
        _0x3b8ba2.drawImage(this.interfaceCanvas, _0x485584 / 0x2 - _0x172fe2 / 0x2, _0x2c7985 / 0x2 - _0x1859d6 / 0x2, _0x172fe2, _0x1859d6);
        _0x3b8ba2.restore();
        if (_0x1f4c9e > this.expiresT || !_0x5f5cae) {
          _0x1527d2.destroy();
        }
      }
    }
  };
  this.destroy = function () {
    if (this.customButtons != null && this.customButtons.length > 0x0) {
      for (i = 0x0; i < this.customButtons.length; i++) {
        this.customButtons[i].isVisible = false;
      }
    }
    this.interfaceCanvas = null;
    this.ctx = null;
    _0x1527d2 = null;
    console.log("custom interface canvas destroyed!");
  };
  this.updateButtons = function () {
    var _0x3f01e7 = this.interfaceCanvas.width;
    var _0x448251 = this.interfaceCanvas.height;
    var _0x43628f = _0x485584 / 0x2 - _0x3f01e7 / 0x2;
    var _0x54ab9d = _0x2c7985 / 0x2 - _0x448251 / 0x2;
    if (this.customButtons != null && this.customButtons.length > 0x0) {
      for (i = 0x0; i < this.customButtons.length; i++) {
        this.customButtons[i].screenX = _0x43628f;
        this.customButtons[i].screenY = _0x54ab9d;
      }
    }
  };
  this.drawAngularInterface = function (_0x5d4d14, _0x58618f, _0x123977, _0x2bf957, _0x10cdac, _0x74a314) {
    this.ctx.save();
    this.ctx.globalAlpha = 0.2;
    this.ctx.lineWidth = _0x123977;
    var _0x292234 = Math.PI * 0x2 / this.rows;
    var _0xf43a40 = -0x5a * (Math.PI / 0xb4);
    var _0x4d2c84 = ["red", "green", "blue", "purple"];
    for (r = 0x1; r <= this.rows; r++) {
      this.ctx.beginPath();
      if (this.interfaceType == 0x1) {
        this.ctx.strokeStyle = "black";
      } else {
        this.ctx.strokeStyle = _0x4d2c84[r - 0x1];
      }
      this.ctx.arc(_0x5d4d14, _0x58618f, _0x10cdac - _0x2bf957 * _0x74a314, _0xf43a40, _0xf43a40 + _0x292234);
      this.ctx.stroke();
      _0xf43a40 += _0x292234;
    }
    this.ctx.restore();
  };
  this.getSkinForAniKills = function (_0xba2b05) {
    switch (_0xba2b05) {
      case _0x1a6650:
        return "./skins/volcano/blackdragon/0/blackdragon.png";
      case _0x30afcb:
        return "./skins/land/dinomonster/0/dinomonster.png";
      case _0xc3cf49:
        return "./skins/arctic/icemonster/0/icemonster.png";
      case _0x23a03f:
        return "./skins/volcano/landmonster/0/landmonster.png";
      case _0x2fcf20:
        return "./skins/ocean/seamonster/0/seamonster.png";
      case _0x2a5063:
        return "./skins/desert/scorpion/0/giantscorpion.png";
      case _0x4b1170:
        return "./skins/arctic/yeti/0/yeti.png";
      case _0x578001:
        return "./skins/land/dragon/0/dragon.png";
      case _0x43c61f:
        return "./skins/land/trex/0/trex.png";
      case _0x301ddb:
        return "./skins/ocean/kraken/0/kraken.png";
      case _0x3db2bf:
        return "./skins/ocean/kingcrab/0/kingcrab.png";
      case _0x21817a:
        return "./skins/volcano/phoenix/0/phoenix.png";
      case _0x3032f7:
        return "./skins/desert/pterodactyl/0/pterodactyl_ability.png";
    }
  };
  this.updateExpiry = function () {
    var _0x111522 = (this.expiresT - _0x1f4c9e) / 0x3e8;
    if (_0x111522 < this.maxDur - 0x1 && _0x111522 > 0x1) {
      this.expiresT = _0x1f4c9e + 0x3e8;
    }
  };
  this.getBtnTitle = function (_0x16cdd1) {
    switch (_0x16cdd1) {
      case 0x6a:
        return "Fly High";
      case 0x6b:
        return "Gives Gifts";
      case 0x6c:
        return "Flying Sleigh";
      default:
        return "Close";
    }
  };
  this.buttons = {};
  this.sendSelection = function (_0x179da2) {
    if (this.customButtons != null && this.customButtons.length > 0x0) {
      for (i = 0x0; i < this.customButtons.length; i++) {
        this.customButtons[i].resetSelection();
      }
    }
    _0x179da2.setSelection();
    var _0x1511af = new _0x1c4421(0x3);
    _0x1511af.writeUInt8(0x3d);
    _0x1511af.writeUInt8(this.interfaceType);
    _0x1511af.writeUInt8(_0x179da2.buttonID);
    _0x446c6b(_0x1511af);
  };
  this.showInterfaceButton = function (_0x5e461b, _0x1642a7, _0x3d6dbe, _0x1d08f1, _0x344b74) {
    var _0x39bf1b = this.buttons[_0x3d6dbe];
    if (_0x39bf1b === undefined || _0x39bf1b == null) {
      var _0x549f80 = this.getBtnTitle(_0x3d6dbe);
      var _0x48f7d7 = _0x3d6dbe == 0x0 ? {
        "w": 0x64,
        "h": 0x3c
      } : {
        "w": 0x64,
        "h": 0x64
      };
      _0x39bf1b = this.buttons[_0x3d6dbe] = new _0x5471d2(_0x1d08f1, _0x344b74, _0x48f7d7.w, _0x48f7d7.h, _0x549f80, 0x1e, this.ctx);
      _0x39bf1b.buttonID = _0x3d6dbe;
      _0x39bf1b.selected = false;
      _0x39bf1b.isVisible = true;
      _0x39bf1b.textShadow = true;
      _0x39bf1b.screenX = 0x0;
      _0x39bf1b.screenY = 0x0;
      if (_0x3d6dbe != 0x0) {
        _0x39bf1b.drawButtonRect = false;
        _0x39bf1b.showLabeleOnHover = true;
      }
      _0x39bf1b.testPosHitsButton = function (_0x2e4d35, _0x31fd93) {
        var _0x515a21 = this.screenX + this.x;
        var _0x301bbd = _0x515a21 + this.w;
        var _0x25bab8 = this.screenY + this.y;
        var _0x3e6a73 = _0x25bab8 + this.h;
        if (_0x2e4d35 < _0x515a21 || _0x2e4d35 > _0x301bbd) {
          return false;
        }
        if (_0x31fd93 < _0x25bab8 || _0x31fd93 > _0x3e6a73) {
          return false;
        } else {
          return true;
        }
      };
      _0x39bf1b.onClick = function () {
        console.log("clicked: " + this.label);
        if (!this.clicked) {
          this.clicked = true;
          this.isHighLighted = false;
        }
        if (this.label == "Close") {
          _0x1527d2.destroy();
        } else {
          _0x1527d2.sendSelection(this);
        }
      };
      _0x39bf1b.setSelection = function () {
        this.labelColor = "yellow";
        this.selected = true;
      };
      _0x39bf1b.resetSelection = function () {
        this.labelColor = "white";
        this.selected = false;
      };
      _0x39bf1b.beforeDrawText = function () {
        var _0x514134 = this.w / 0x2;
        var _0x18d05b = this.h / 0x2;
        this.buttonTXT.x = this.screenX + this.x + _0x514134;
        if (this.buttonID == 0x0) {
          this.buttonTXT.y = this.screenY + this.y + _0x18d05b;
        } else {
          this.buttonTXT.y = this.screenY + this.y - _0x18d05b / 0x2;
        }
      };
      _0x39bf1b.onMouseMove = function () {};
      _0x39bf1b.update = function () {
        this.x = _0x1d08f1 - this.w / 0x2;
        this.y = _0x344b74 - this.h / 0x2;
      };
      _0x39bf1b.onInterfaceReset = function () {
        this.isVisible = false;
      };
      _0x39bf1b.onAfterDraw = function () {
        var _0x482203 = _0x5c52f8[_0x2bd878];
        if (_0x482203) {
          var _0x388a99 = _0x482203.getAbilityInfo(this.buttonID);
          if (_0x388a99) {
            var _0x333ca4 = "assets/s/" + _0x388a99.mopeSeasonID + "/" + _0x388a99.abilImg;
            var _0x5ec3f4 = _0x3df4ce(_0x333ca4);
            if (_0x5ec3f4) {
              _0x3b8ba2.save();
              if (this.isHighLighted || this.selected) {
                _0x3b8ba2.shadowBlur = 0xa;
                _0x3b8ba2.shadowOffsetX = 0x0;
                _0x3b8ba2.shadowOffsetY = 0x0;
                _0x3b8ba2.shadowColor = "yellow";
              }
              var _0x183028 = this.w / 0x2;
              var _0x1c978c = this.h / 0x2;
              _0x183028 = this.screenX + this.x;
              _0x1c978c = this.screenY + this.y;
              var _0x3dbe70 = this.w;
              _0x3b8ba2.drawImage(_0x5ec3f4, _0x183028, _0x1c978c, _0x3dbe70, _0x3dbe70);
              _0x3b8ba2.restore();
            }
          }
        }
      };
      _0x388788.interfaceButtons.push(_0x39bf1b);
      this.customButtons.push(_0x39bf1b);
      if (this.data.selected == _0x39bf1b.buttonID) {
        _0x39bf1b.setSelection();
      }
    } else {
      if (_0x39bf1b != null) {
        if (_0x39bf1b.isVisible) {
          _0x39bf1b.clicked = false;
        }
        _0x39bf1b.draw();
      }
    }
  };
}
console.log("ACCOUNT SERVER START");
const _0x3c5d7c = _0x902c25 && $config.useDevAccountServer ? $config.devAccountServerUrl : "https://mope-accountserver-do.mope.io";
console.log("Account server domain became:", _0x3c5d7c);
const _0xd4ef8e = async function (_0x418056, _0x1aca55 = "web", _0x1574a3, _0x228638 = null, _0x318c4b = null) {
  let _0x279cae = _0x3c5d7c + "/processLogin";
  let _0x137f19 = {
    "userId": _0x228638,
    "passwordToken": _0x318c4b,
    "sessionId": _0x192f81.serverInfo.sessionId,
    "serverId": _0x192f81.serverInfo.serverId,
    "accessToken": _0x418056,
    "socialNetwork": _0x1574a3,
    "platform": _0x1aca55
  };
  try {
    const _0xfb67b0 = await fetch(_0x279cae, {
      "method": "POST",
      "headers": {
        "Content-Type": "application/json"
      },
      "body": JSON.stringify(_0x137f19)
    });
    const _0x48df52 = await _0xfb67b0.json();
    return _0x48df52.success ? (_0x5f3ac3(_0x48df52), _0x50b3e7(_0x48df52.login_userId, _0x48df52.login_passwordToken, _0x48df52.login_name, _0x48df52.login_profilePicURL, _0x1574a3), true) : ($bus.emit($bus.EVENTS.LOGIN_FAILED, "error with verifying social network token."), false);
  } catch (_0x14ef25) {
    $bus.emit($bus.EVENTS.LOGIN_FAILED, _0x14ef25);
    console.error("::: Social Network Login ERROR :::", _0x14ef25);
    return false;
  }
};
const _0x2cd752 = async _0xb2e157 => {
  if (!_0x170772) {
    console.error("::: verifyLocalCredentials ERROR ::: User is not logged in!");
    return;
  }
  const _0x287e35 = _0x3c5d7c + "/activatePlayerBuff";
  const _0xbdd226 = {
    "userId": _0x4c129a,
    "passwordToken": _0x325d70,
    "sessionId": _0x192f81.serverInfo.sessionId,
    "serverId": _0x192f81.serverInfo.serverId,
    "itemName": _0xb2e157
  };
  console.log("url, data:", _0x287e35, _0xbdd226);
  try {
    const _0x2d196e = await fetch(_0x287e35, {
      "method": "POST",
      "headers": {
        "Content-Type": "application/json;charset=UTF-8"
      },
      "body": JSON.stringify(_0xbdd226)
    });
    const _0x5bbc23 = await _0x2d196e.json();
    console.log("activatePlayerBuff", _0x5bbc23);
    return _0x5bbc23.success ? (console.log("activatePlayerBuff", _0x5bbc23), true) : false;
  } catch (_0x36430c) {
    console.error("::: activatePlayerBuff ERROR :::", _0x36430c);
    return false;
  }
};
var _0x4c129a;
var _0x325d70;
var _0x58b7b0;
var _0x460196;
var _0x237524;
var _0x170772;
if (_0xe2ab1e) {
  console.log("Checking what login_userId was:", _0x4c129a);
  _0x4c129a = localStorage.getItem("login_userId");
  _0x170772 = _0x4c129a !== undefined && _0x4c129a !== null;
  if (_0x170772) {
    console.log("WAS LOGGED IN!");
    _0x325d70 = localStorage.getItem("login_passwordToken");
    _0x58b7b0 = localStorage.getItem("login_profilePicURL");
    _0x460196 = localStorage.getItem("login_name");
    _0x237524 = localStorage.getItem("login_socialNetworkName");
  }
}
if (_0x170772) {
  $bus.emit($bus.EVENTS.LOGIN_SUCCESS, {
    "login_userId": _0x4c129a,
    "login_passwordToken": _0x325d70,
    "login_name": _0x460196,
    "profilePicUrl": _0x58b7b0,
    "socialNetworkName": _0x237524
  });
}
if (_0x902c25) {
  var _0x425a1d = document.getElementById("login_SBLabel");
  if (_0x425a1d) {
    _0x425a1d.style.display = "block";
  }
}
jQuery.loadScript = function (_0x5c8f13, _0x2e98f4) {
  jQuery.ajax({
    "url": _0x5c8f13,
    "dataType": "script",
    "success": _0x2e98f4,
    "async": true
  });
};
window.fbAsyncInit = function () {
  FB.init({
    "appId": "342869592997869",
    "cookie": true,
    "xfbml": true,
    "version": "v3.2",
    "status": true
  });
  FB.AppEvents.logPageView();
};
(function (_0x5b3244, _0x13d28b, _0x5c2e8f) {
  var _0x558f06;
  var _0x29f70a = _0x5b3244.getElementsByTagName(_0x13d28b)[0x0];
  if (_0x5b3244.getElementById(_0x5c2e8f)) {
    return;
  }
  _0x558f06 = _0x5b3244.createElement(_0x13d28b);
  _0x558f06.id = _0x5c2e8f;
  _0x558f06.crossorigin = "anonymous";
  _0x558f06.src = "https://connect.facebook.net/en_US/sdk.js";
  _0x29f70a.parentNode.insertBefore(_0x558f06, _0x29f70a);
})(document, "script", "facebook-jssdk");
if (_0x1c65d6) {
  _0x5c6a6f();
  _0x5551c2();
  _0x17724b().then(_0x30f682 => {
    if (_0x30f682) {
      _0x30f682.registerHandler("finished-authentication-restore-check", () => {
        $bus.emit($bus.EVENTS.FINISH_AUTHENTICATION_RESTORE_CHECK);
      });
    }
  });
} else {}
const _0xb7fb2b = async () => {
  if (_0x170772) {
    const _0xf15d3f = await _0x6242d9();
    if (!_0xf15d3f) {
      $bus.emit($bus.EVENTS.FINISH_AUTHENTICATION_RESTORE_CHECK);
      _0x52344f();
    }
  } else {
    var _0x52b015 = "none";
    var _0x3a4214 = new URL(window.location.href);
    var _0x40ceae = _0x3a4214.searchParams.get("testAccountSecret");
    if (_0x40ceae) {
      _0x52b015 = _0x40ceae;
      let _0x37c004 = '' + _0x3a4214.searchParams.get("user");
      if (!_0x231dd9(_0x52b015 + _0x37c004)) {
        if (_0x37c004 && _0x37c004.length <= 0x2) {
          _0xd4ef8e(_0x37c004, "web", _0x52b015, _0x52b015 + _0x37c004, null);
        }
      }
    } else {
      $bus.emit($bus.EVENTS.FINISH_AUTHENTICATION_RESTORE_CHECK);
    }
  }
};
setTimeout(() => {
  $bus.emit($bus.EVENTS.FINISH_AUTHENTICATION_RESTORE_CHECK);
}, 0x7530);
$bus.on($bus.EVENTS.START_SOCIAL_AUTHENTICATION, async _0x58d335 => {
  console.log("got start social auth", _0x58d335);
  try {
    switch (_0x58d335) {
      case "apple":
        _0x32784c();
        break;
      case "facebook":
        _0x231ac2();
        break;
      case "google":
        _0x195c7c();
        break;
    }
  } catch (_0x45a98e) {
    $bus.emit($bus.EVENTS.FINISH_SOCIAL_AUTHENTICATION, {
      "error": _0x45a98e.message
    });
  }
});
$bus.on($bus.EVENTS.UI_TEST_BUTTON_CLICKED_USE_TEST_ACCOUNT, _0x290b54 => {
  console.log("account: " + _0x290b54);
  _0xd4ef8e("\"" + _0x290b54 + "\"", _0x5b21d7, "web");
});
$bus.on($bus.EVENTS.UI_TEST_BUTTON_CLICKED_ADD_COINS, _0x33dcf1);
$bus.on($bus.EVENTS.UI_TEST_BUTTON_CLICKED_RESET_PURCHASES, _0x200c77);
$bus.on($bus.EVENTS.UI_PRESS_LOGOUT, _0xa16808);
var _0x5b21d7 = "none";
var _0x3d7ac3 = new URL(window.location.href);
var _0x375394 = _0x3d7ac3.searchParams.get("testAccountSecret");
if (_0x375394) {
  console.log("testing account enabled.");
  _0x5b21d7 = _0x375394;
  $bus.emit($bus.EVENTS.ENABLE_TESTING);
}
function _0x52344f() {
  if (_0xe2ab1e) {
    localStorage.removeItem("login_userId");
    localStorage.removeItem("login_passwordToken");
    localStorage.removeItem("login_profilePicURL");
    localStorage.removeItem("login_name");
    localStorage.removeItem("login_socialNetworkName");
  }
  _0x4c129a = null;
  _0x325d70 = null;
  _0x58b7b0 = null;
  _0x460196 = null;
  _0x237524 = null;
  _0x170772 = false;
  $bus.emit($bus.EVENTS.LOGOUT_COMPLETE);
}
async function _0xa16808(_0xcfd7d3 = true) {
  if (_0x1c65d6) {
    _0xcfd7d3 = false;
  }
  let _0x595da5 = () => {};
  if (_0x237524 === "google") {
    _0x595da5 = _0x39d4b8;
  } else {
    if (_0x237524 === "facebook") {
      _0x595da5 = _0x4630e6;
    } else if (_0x237524 === "apple") {
      _0x595da5 = _0x3efb43;
    }
  }
  console.log("logging out with social network " + _0x237524);
  try {
    await _0x595da5();
    await _0x11edb7(_0x4c129a);
    _0x52344f();
  } catch (_0x527d08) {
    console.error("Error logging out:", _0x527d08);
  }
}
const _0x11edb7 = async _0x3ff786 => {
  let _0x42e8e7 = _0x3c5d7c + "/logout";
  let _0x23f4d = {
    "userId": _0x3ff786,
    "sessionId": _0x192f81.serverInfo.sessionId,
    "serverId": _0x192f81.serverInfo.serverId
  };
  try {
    await fetch(_0x42e8e7, {
      "method": "POST",
      "headers": {
        "Content-Type": "application/json"
      },
      "body": JSON.stringify(_0x23f4d)
    });
  } catch (_0xcdf192) {
    $bus.emit($bus.EVENTS.LOGOUT_FAILED, _0xcdf192);
    console.error("::: Account Server Logout ERROR :::", _0xcdf192);
    return false;
  }
  return true;
};
const _0x5f3ac3 = _0x2ccd4e => {
  _0x46dde7 = _0x2ccd4e;
  $bus.emit($bus.EVENTS.PLAYER_ACCOUNT_DATA, _0x2ccd4e);
};
const _0x6242d9 = async () => {
  if (!_0x170772) {
    console.error("::: verifyLocalCredentials ERROR ::: User is not logged in!");
    return;
  }
  const _0x52a66d = _0x3c5d7c + "/processLogin";
  const _0x16d2a1 = {
    "userId": _0x4c129a,
    "passwordToken": _0x325d70,
    "sessionId": _0x192f81.serverInfo.sessionId,
    "serverId": _0x192f81.serverInfo.serverId,
    "accessToken": null,
    "socialNetwork": null
  };
  try {
    const _0x873ad2 = await fetch(_0x52a66d, {
      "method": "POST",
      "headers": {
        "Content-Type": "application/json;charset=UTF-8"
      },
      "body": JSON.stringify(_0x16d2a1)
    });
    const _0x483dcf = await _0x873ad2.json();
    return _0x483dcf.success ? (_0x5f3ac3(_0x483dcf), true) : (_0xa16808(), console.log("::: verifyLocalCredentials failed ::: Needs new credentials"), false);
  } catch (_0x56020c) {
    console.error("::: verifyLocalCredentials ERROR :::", _0x56020c);
    return false;
  }
};
var _0x46dde7 = {
  "coins": -0x1,
  "level": 0x0,
  "xp": 0x0,
  "xpNextLvl": 0x0
};
const _0x336622 = async function () {
  if (!_0x170772) {
    console.log("not logged in!");
    return null;
  }
  console.log("loading account data...");
  let _0xe6959f = _0x3c5d7c + "/loadAccountData?userId=" + _0x4c129a + "&passwordToken=" + _0x325d70 + "&sessionId=" + _0x192f81.serverInfo.sessionId + "&serverId=" + _0x192f81.serverInfo.serverId;
  return new Promise((_0x5b4e90, _0x3a2eee) => {
    $.ajax({
      "url": _0xe6959f,
      "type": "GET",
      "success": function (_0x938b82) {
        var _0xed4b85 = JSON.parse(_0x938b82);
        console.log("Done, result is " + _0x938b82);
        _0x46dde7 = _0xed4b85;
        console.log("the resObj coins was", _0xed4b85.coins);
        if (_0xed4b85.coins == "BANNED") {
          setInterval(function () {
            _0x54e075("Your account has been BANNED!", "error", 0x2710);
          }, 0x2710);
        }
        $bus.emit($bus.EVENTS.PLAYER_ACCOUNT_DATA, _0xed4b85);
        return _0x5b4e90(_0xed4b85);
      },
      "error": function (_0x2762ed, _0x433bde, _0xc2b0dc) {
        console.error("URL error: " + _0xc2b0dc);
        console.error("failed to refresh account data!");
        return _0x5b4e90(null);
      }
    });
  });
};
const _0x4735a4 = async function (_0x27f890) {
  const _0x52f1ae = await _0x336622();
  if (_0x27f890) {
    _0x27f890(_0x52f1ae);
  }
};
function _0x4f42ee(_0x5ddb8e) {
  console.log("Loading shop items for logged in user! " + _0x4c129a);
  let _0xb0332 = _0x3c5d7c + "/loadShopItems?userId=" + _0x4c129a + "&passwordToken=" + _0x325d70;
  console.log("@@@@@@@ Sending URL request :" + _0xb0332);
  $.ajax({
    "url": _0xb0332,
    "success": function (_0x45993d) {
      var _0x1df229 = JSON.parse(_0x45993d);
      _0x5ddb8e(true, _0x1df229);
    },
    "error": function (_0x1badab, _0x5737ad, _0x19ebf8) {
      console.log("Shop loading-URL error: " + _0x19ebf8);
      _0x5ddb8e(false, null);
    }
  });
}
const _0x4c5cea = function (_0x3e48f8, _0x11376e) {
  if (_0x902c25) {
    console.log("Sending URL request to load coins for logged in user! " + _0x4c129a);
  }
  if (!_0x3e48f8) {
    _0x3e48f8 = "goldDragon";
  }
  let _0x559a00 = _0x3c5d7c + "/buyShopItem?userId=" + _0x4c129a + "&passwordToken=" + _0x325d70 + "&itemName=" + _0x3e48f8 + "&sessionId=" + _0x192f81.serverInfo.sessionId + "&serverId=" + _0x192f81.serverInfo.serverId;
  if (_0x902c25) {
    console.log("Sending URL request :" + _0x559a00);
  }
  $.ajax({
    "url": _0x559a00,
    "success": function (_0xd3f124) {
      var _0x2b4a63 = JSON.parse(_0xd3f124);
      _0x11376e(_0x2b4a63.success, _0x2b4a63.reason);
    },
    "error": function (_0x10573e, _0x612d89, _0x24a50f) {
      console.log("URL error: " + _0x24a50f);
      _0x11376e(false, _0x24a50f);
    }
  });
};
function _0x33dcf1() {
  let _0x4924a6 = _0x3c5d7c + "/addCoins?userId=" + _0x4c129a + "&passwordToken=" + _0x325d70;
  if (_0x902c25) {
    console.log("Sending URL request :" + _0x4924a6);
  }
  $.ajax({
    "url": _0x4924a6,
    "success": function (_0x473dd1) {
      if (_0x902c25) {
        _0x4735a4();
      }
    },
    "error": function (_0x24e2b0, _0x24609c, _0x7ca86a) {
      console.log("URL error: " + _0x7ca86a);
    }
  });
}
function _0x200c77() {
  let _0x547015 = _0x3c5d7c + "/resetAccount?userId=" + _0x4c129a + "&passwordToken=" + _0x325d70;
  if (_0x902c25) {
    console.log("Sending URL request :" + _0x547015);
  }
  $.ajax({
    "url": _0x547015,
    "success": function (_0x180fb2) {
      console.log("reposnse is " + _0x180fb2);
      _0x4735a4();
    },
    "error": function (_0x5b3a13, _0x557405, _0x41b331) {
      console.log("URL error: " + _0x41b331);
    }
  });
}
const _0x50b3e7 = function (_0x584aa5, _0x195139, _0x57a93f, _0x1e9942, _0x118919) {
  console.log("SUCCESSFUL LOGIN!!!", JSON.stringify({
    "login_userId": _0x4c129a,
    "login_passwordToken": _0x325d70,
    "login_name": _0x460196,
    "profilePicUrl": _0x58b7b0,
    "socialNetworkName": _0x237524
  }));
  _0x4c129a = _0x584aa5;
  _0x325d70 = _0x195139;
  _0x58b7b0 = _0x1e9942;
  _0x460196 = _0x57a93f;
  _0x237524 = _0x118919;
  _0x170772 = true;
  if (_0xe2ab1e) {
    console.log("Logged in, for login_userId " + _0x4c129a + " login_passwordToken " + _0x325d70);
    localStorage.setItem("login_userId", _0x4c129a);
    localStorage.setItem("login_passwordToken", _0x325d70);
    localStorage.setItem("login_name", _0x460196);
    localStorage.setItem("login_profilePicURL", _0x58b7b0);
    localStorage.setItem("login_socialNetworkName", _0x237524);
  }
  _0x4ecbfe.loadData();
  $bus.emit($bus.EVENTS.LOGIN_SUCCESS, {
    "login_userId": _0x4c129a,
    "login_passwordToken": _0x325d70,
    "login_name": _0x460196,
    "profilePicUrl": _0x58b7b0,
    "socialNetworkName": _0x237524
  });
};
const _0xd29c8a = function (_0x1e9e80, _0x1535b7) {
  if (_0x902c25) {
    console.log("Sending URL request to load coins for logged in user! " + _0x4c129a);
  }
  if (!_0x1e9e80) {
    _0x1e9e80 = "none";
  }
  let _0x5d8bf6 = _0x3c5d7c + "/playerSettings_update?userId=" + _0x4c129a + "&passwordToken=" + _0x325d70 + "&itemName=" + _0x1e9e80;
  if (_0x902c25) {
    console.log("Sending URL request :" + _0x5d8bf6);
  }
  console.log(_0x5d8bf6);
  $.ajax({
    "url": _0x5d8bf6,
    "success": function (_0x3016a4) {
      var _0x54712f = JSON.parse(_0x3016a4);
      console.log("Done, result is " + _0x3016a4);
      _0x1535b7(_0x54712f.success, _0x54712f.reason);
    },
    "error": function (_0x35744f, _0x42c221, _0x1d4cf6) {
      console.log(_0x35744f);
      console.log("ajaxOptions: " + _0x42c221);
      console.log("URL error: " + _0x1d4cf6);
      _0x1535b7(false, "urlnotfound");
    }
  });
};
const _0x231dd9 = function (_0x4c2d19) {
  if (_0x170772) {
    if (_0x4c129a === _0x4c2d19) {
      return true;
    }
  }
  return false;
};
const _0x3d6d31 = async () => {
  const _0x488fad = _0x3c5d7c + "/getIncentivizedAdSkins";
  const _0x30d4c1 = {
    "userId": _0x4c129a,
    "passwordToken": _0x325d70,
    "sessionId": _0x192f81.serverInfo.sessionId,
    "serverId": _0x192f81.serverInfo.serverId
  };
  try {
    const _0x3feee9 = await fetch(_0x488fad, {
      "method": "POST",
      "headers": {
        "Content-Type": "application/json;charset=UTF-8"
      },
      "body": JSON.stringify(_0x30d4c1)
    });
    const _0x20484b = await _0x3feee9.json();
    console.log(_0x20484b);
    return _0x20484b.success ? (console.log("success"), true) : (console.log("::: getIncentivizedAdSkins failed ::: Needs new credentials"), false);
  } catch (_0x203a18) {
    console.error("::: getIncentivizedAdSkins ERROR :::", _0x203a18);
    return false;
  }
};
$bus.on($bus.EVENTS.CLAIM_REWARD, async _0x170073 => {
  const _0x30c131 = _0x3c5d7c + "/claimShopItem?userId=" + _0x4c129a + "&passwordToken=" + _0x325d70 + "&itemName=" + _0x170073 + "&sessionId=" + _0x192f81.serverInfo.sessionId + "&serverId=" + _0x192f81.serverInfo.serverId;
  const _0xdedbe6 = await fetch(_0x30c131);
  const _0x3da4d4 = await _0xdedbe6.json();
  if (_0x3da4d4 && _0x3da4d4.success) {
    _0x4735a4();
    _0x514d12();
  }
});
$bus.on($bus.EVENTS.UI_DELETE_ACCOUNT, async () => {
  const _0x51be95 = _0x3c5d7c + "/deleteAccount?userId=" + _0x4c129a + "&passwordToken=" + _0x325d70;
  const _0x5ebfe7 = await fetch(_0x51be95);
  if (_0x5ebfe7.ok) {
    const _0x19188e = await _0x5ebfe7.json();
    if (_0x19188e.success) {
      console.log("ACCOUNT DELETED SUCCESSFULLY");
    } else {
      console.log("ACCOUNT NOT DELETED SUCCESSFULLY", _0x19188e);
    }
  } else {
    console.log("ACCOUNT DELETION RESPONSE NOT OK", _0x5ebfe7);
  }
  if (window.localStorage) {
    window.localStorage.clear();
  }
  _0xa16808();
});
$.loadScript("https://apis.google.com/js/api:client.js", function () {
  var _0x8d6402 = function () {
    if (typeof gapi === "undefined") {
      return;
    }
    gapi.load("auth2", function () {
      auth2 = gapi.auth2.init({
        "client_id": "836408408160-bqkloin1dq47r9t4t6q1giv13tvcioab.apps.googleusercontent.com",
        "cookiepolicy": "single_host_origin"
      });
    });
  };
  _0x8d6402();
});
async function _0x5c6a6f() {
  const _0x4c4d38 = await _0x17724b();
  if (!_0x4c4d38) {
    console.warn("Could not get an initialized nativeBridge...");
    return;
  }
  _0x4c4d38.registerHandler("google-login-failed", () => {});
  _0x4c4d38.registerHandler("google-login-success", _0x21a409 => {
    _0xd7250b(_0x21a409);
  });
  _0x4c4d38.registerHandler("google-logout-success", () => {
    if (_0x237524 === "google") {
      _0x52344f();
    }
  });
}
async function _0xd7250b(_0x443fed, _0x468051) {
  const _0x2d5e08 = await _0xd4ef8e(_0x443fed, _0x468051, "google");
  if (!_0x2d5e08) {
    await (!_0x1c65d6 ? _0x1dac67 : _0x3c9860)();
  }
}
async function _0x195c7c() {
  const _0x97f45 = _0x46f023();
  try {
    const _0x8d35fe = await _0x97f45.func();
    console.log("GOT ID TOKEN", _0x8d35fe, _0x97f45.platform);
    await _0xd7250b(_0x8d35fe, _0x97f45.platform);
  } catch (_0x5eb3d9) {
    console.error("Error with google login:", _0x5eb3d9.message);
    $bus.emit($bus.EVENTS.FINISH_SOCIAL_AUTHENTICATION, {
      "error": "Error logging in to Google: " + _0x5eb3d9.message
    });
  }
}
async function _0x39d4b8() {}
function _0x46f023() {
  return !_0x1c65d6 ? (console.log("resolve web google login"), {
    "platform": "web",
    "func": _0x2e9d76
  }) : (console.log("resolve mobile google login"), {
    "platform": RivetNative.core.platform === "google" ? "android" : "ios",
    "func": _0x2ed382
  });
}
function _0x4cfb1b() {
  return !_0x1c65d6 ? _0x1dac67 : _0x3c9860;
}
async function _0x2e9d76() {
  console.log("Doing web google login.");
  return new Promise((_0xc620ca, _0x5f1111) => {
    gapi.load("auth2", async function () {
      console.log("loaded auth2");
      try {
        console.log("initializing auth2");
        auth2 = auth2 || gapi.auth2.init({
          "client_id": $config.googleAuthClientId,
          "cookiepolicy": "single_host_origin"
        });
        console.log("Signing in.");
        const _0x4772cb = await auth2.signIn();
        console.log("Getting id token.");
        const _0x2f442e = _0x4772cb.getAuthResponse().id_token;
        console.log("Received id_token", _0x2f442e);
        return _0xc620ca(_0x2f442e);
      } catch (_0xa03e0) {
        console.error("Error with google login:", _0xa03e0);
        return _0x5f1111(_0xa03e0);
      }
    });
  });
}
async function _0x2ed382() {
  const _0xf2cabb = await _0x562bd4.presentGoogleOauth();
  if (_0xf2cabb.success) {
    console.log("::: rivet-native ::: Sign-In With Google Success:", _0xf2cabb.data);
    return _0xf2cabb.data;
  } else {
    console.error("::: rivet-native ::: Sign-In With Google Error:", new Error(_0xf2cabb.error));
  }
}
async function _0x1dac67() {
  try {
    var _0x577947 = gapi.auth2.getAuthInstance();
    return _0x577947.signOut();
  } catch (_0x5b0717) {
    console.error("Error with web google logout:", _0x5b0717);
  }
}
async function _0x3c9860() {}
window.fbAsyncInit = function () {
  if (typeof FB === "undefined") {
    return;
  }
  FB.init({
    "appId": "342869592997869",
    "cookie": true,
    "xfbml": true,
    "version": "v3.2",
    "status": true
  });
  FB.AppEvents.logPageView();
};
(function (_0x357d32, _0xbfa455, _0x39da5c) {
  var _0x57811e;
  var _0xd65758 = _0x357d32.getElementsByTagName(_0xbfa455)[0x0];
  if (_0x357d32.getElementById(_0x39da5c)) {
    return;
  }
  _0x57811e = _0x357d32.createElement(_0xbfa455);
  _0x57811e.id = _0x39da5c;
  _0x57811e.src = "https://connect.facebook.net/en_US/sdk.js";
  _0xd65758.parentNode.insertBefore(_0x57811e, _0xd65758);
})(document, "script", "facebook-jssdk");
async function _0x5551c2() {
  const _0x3445bb = await _0x17724b();
  if (!_0x3445bb) {
    console.warn("Could not get an initialized nativeBridge...");
    return;
  }
  _0x3445bb.registerHandler("facebook-login-failed", () => {});
  _0x3445bb.registerHandler("facebook-login-success", _0x571376 => {
    _0x43286e(_0x571376);
  });
  _0x3445bb.registerHandler("facebook-logout-success", () => {
    if (_0x237524 === "facebook") {
      _0x52344f();
    }
  });
}
async function _0x183ee4() {
  const _0x328271 = await _0x562bd4.presentFacebookOauth();
  if (_0x328271.success) {
    console.log("::: rivet-native ::: Sign-In With Facebook Success:", _0x328271.data);
    return _0x328271.data;
  } else {
    console.log("::: rivet-native ::: Sign-In With Facebook Error:", _0x328271.error);
  }
}
async function _0x43286e(_0x5c33cc, _0x59c913) {
  const _0x172c97 = await _0xd4ef8e(_0x5c33cc, _0x59c913, "facebook");
  if (!_0x172c97) {
    await (!_0x1c65d6 ? _0x4a28d0 : _0x2c4c18)();
  }
}
async function _0x231ac2() {
  const _0x169115 = !_0x1c65d6 ? {
    "platform": "web",
    "func": _0x32a752
  } : {
    "platform": _0x133f26 ? "android" : "ios",
    "func": _0x183ee4
  };
  try {
    const _0x5e96c6 = await _0x169115.func();
    await _0x43286e(_0x5e96c6, _0x169115.platform);
  } catch (_0x1ab822) {
    console.error("Error with facebook login:", _0x1ab822.message);
    $bus.emit($bus.EVENTS.FINISH_SOCIAL_AUTHENTICATION, {
      "error": "Error logging in to Facebook: " + _0x1ab822.message
    });
  }
}
async function _0x32a752() {
  return new Promise((_0x56dc95, _0x59c5ba) => {
    FB.login(function (_0x401524) {
      if (_0x401524.status === "connected") {
        console.log("Successfully got auth token from FB");
        var _0x3b7569 = _0x401524.authResponse.accessToken;
        return _0x56dc95(_0x3b7569);
      } else {
        return _0x59c5ba("Error logging in to FB.");
      }
    }, {
      "scope": "public_profile,email"
    });
  });
}
function _0x405a1c() {
  return !_0x1c65d6 ? {
    "platform": "web",
    "func": _0x32a752
  } : {
    "platform": _0x133f26 ? "android" : "ios",
    "func": _0x183ee4
  };
}
function _0x1ca9cd() {
  return !_0x1c65d6 ? _0x4a28d0 : _0x2c4c18;
}
async function _0x4630e6() {
  const _0x20f24a = !_0x1c65d6 ? _0x4a28d0 : _0x2c4c18;
  try {
    return _0x20f24a();
  } catch (_0x53c225) {
    console.error("Error with facebook logout:", _0x53c225.message);
  }
}
async function _0x2c4c18() {}
async function _0x4a28d0() {
  return new Promise((_0x16d3fd, _0x357304) => {
    FB.logout(function (_0xdfda36) {
      return _0x16d3fd(true);
    });
  });
}
let _0x53141b = false;
const _0x395f56 = () => typeof AppleID === "object" && AppleID.hasOwnProperty("auth");
if (!_0x133f26) {
  $.loadScript("https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js", function () {
    if (typeof AppleID === "object" && AppleID.hasOwnProperty("auth")) {
      function _0x27e99b(_0x23f509) {
        var _0x56ab0f = '';
        var _0x4d7b9e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".length;
        for (var _0x96f592 = 0x0; _0x96f592 < _0x23f509; _0x96f592++) {
          _0x56ab0f += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(Math.random() * _0x4d7b9e));
        }
        return _0x56ab0f;
      }
      let _0xb521ef = "https://mope.io";
      if (location.href.includes("edge")) {
        _0xb521ef = "https://edge-webserver.mope.io";
      } else if (location.href.includes("beta")) {
        _0xb521ef = "https://beta.mope.io";
      }
      AppleID.auth.init({
        "clientId": "io.mope.live.auth",
        "scope": "name email",
        "redirectURI": _0xb521ef,
        "usePopup": true,
        "state": _0x27e99b(0x7)
      });
      _0x53141b = true;
    }
  });
}
async function _0x3cb6bf() {
  const _0x5a75a2 = await _0x17724b();
  if (!_0x5a75a2) {
    console.warn("Could not get an initialized nativeBridge...");
    return;
  }
  _0x5a75a2.registerHandler("apple-login-failed", () => {});
  _0x5a75a2.registerHandler("apple-login-success", _0x27831e => {
    _0x5827a8(_0x27831e);
  });
  _0x5a75a2.registerHandler("apple-logout-success", () => {
    if (_0x237524 === "apple") {
      _0x52344f();
    }
  });
}
async function _0x5827a8(_0x47196e, _0x8120e7, _0x4575f8) {
  const _0x30c1ac = _0x4575f8 ? {
    "name": _0x4575f8
  } : null;
  const _0x2b62b3 = await _0xd4ef8e(_0x47196e, _0x8120e7, "apple", _0x30c1ac);
  if (!_0x2b62b3) {
    await (!_0x1c65d6 || _0x133f26 ? _0x108d9f : _0x584b77)();
  }
}
async function _0x32784c() {
  const _0x3be9ff = _0x36d853();
  try {
    const _0x379011 = await _0x3be9ff.func();
    await _0x5827a8(_0x379011, _0x3be9ff.platform);
  } catch (_0x53cc49) {
    console.error("Error with apple login:", _0x53cc49.message);
    $bus.emit($bus.EVENTS.FINISH_SOCIAL_AUTHENTICATION, {
      "error": "Error logging in to Apple: " + _0x53cc49.message
    });
  }
}
async function _0x3efb43() {}
function _0x36d853() {
  return !_0x1c65d6 ? (console.log("resolve web apple login"), {
    "platform": "web",
    "func": _0x5f6266
  }) : (console.log("resolve mobile apple login"), {
    "platform": _0x133f26 ? "android" : "ios",
    "func": _0x5a0a2f
  });
}
function _0x3ae8d3() {
  return !_0x1c65d6 || _0x133f26 ? _0x108d9f : _0x584b77;
}
async function _0x5f6266() {
  try {
    if (!_0x53141b) {
      throw new Error("Failed to initialize apple auth library.");
    }
    const _0x1d874f = await AppleID.auth.signIn();
    if (_0x1d874f && _0x1d874f.authorization && _0x1d874f.authorization.id_token) {
      console.log("data authorization was:", _0x1d874f.authorization);
      return _0x1d874f.authorization.id_token;
    } else {
      throw new Error("Failed to get id token from apple.");
    }
  } catch (_0x585c13) {
    console.error("error signing in ", _0x585c13);
    throw _0x585c13;
  }
}
async function _0x5a0a2f() {
  const _0xdbc40f = await _0x562bd4.presentSignInWithApple();
  if (_0xdbc40f.success) {
    console.log("::: rivet-native ::: Sign-In With Apple Success:", _0xdbc40f.data);
    return _0xdbc40f.data.identityToken;
  } else {
    console.log("::: rivet-native ::: Sign-In With Apple Error:", _0xdbc40f.error);
  }
}
async function _0x108d9f() {
  try {
    var _0x2daeee = gapi.auth2.getAuthInstance();
    return _0x2daeee.signOut();
  } catch (_0xd50b2b) {
    console.error("Error with web apple logout:", _0xd50b2b);
  }
}
async function _0x584b77() {}
var _0x8dcbb2 = +new Date();
function _0x4331b6(_0x317dca) {
  var _0x570221 = location.protocol == "https:" ? "https:" : "http:";
  var _0xe1c11f = location.host.endsWith("mope.io") ? location.host : "mope.io";
  var _0x325968 = _0x570221 + "//" + _0xe1c11f;
  $.ajax({
    "url": _0x3c5d7c + "/getXsollaToken",
    "type": "GET",
    "data": {
      "userId": _0x4c129a,
      "passwordToken": _0x325d70,
      "settings_ui_version": _0x38a2ec ? "mobile" : "desktop",
      "return_url": _0x325968
    },
    "success": function (_0x58f14c) {
      var _0x548031 = JSON.parse(_0x58f14c);
      _0x317dca(_0x548031.success ? _0x548031.token : null);
    },
    "error": function (_0x377f31, _0x194ff0, _0x46376f) {
      var _0x22eaa3 = JSON.parse(_0x377f31.responseText);
      console.log("Error getting token: " + _0x46376f);
      _0x54e075(_0x22eaa3.reason, "error", 0xa);
      _0x317dca(false, null);
    }
  });
}
$bus.on($bus.EVENTS.UI_OPEN_XSOLLA_SHOP, () => {
  if (_0x1c65d6) {
    alert("Please open mope.io in your browser to buy coins (can't buy them in the app yet!)");
    return;
  }
  _0x4331b6(function (_0x30190f) {
    if (_0x30190f) {
      console.log("Got xsolla token " + _0x30190f);
      var _0x265efe;
      _0x265efe = "https://secure.xsolla.com/paystation2/?access_token=" + _0x30190f;
      $bus.emit($bus.EVENTS.LOADED_XSOLLA_IFRAME_SRC, _0x265efe);
    }
  });
});
function _0x514070(_0x396182) {
  var _0x4052a2 = {
    "access_token": "abcdef1234567890abcdef1234567890"
  };
  var _0x27f923 = document.createElement("script");
  _0x27f923.type = "text/javascript";
  _0x27f923.async = true;
  _0x27f923.src = "//static.xsolla.com/embed/paystation/1.0.8/widget.min.js";
  _0x27f923.addEventListener("load", function (_0x19a123) {
    XPayStationWidget.init(_0x4052a2);
  }, false);
  _0x27f923.addEventListener("status-done", () => {
    _0x4735a4(() => {
      $bus.emit($bus.EVENTS.XSOLLA_PAYMENT_FINISHED);
    });
  });
  var _0x47ed3d = document.getElementsByTagName("head")[0x0];
  _0x47ed3d.appendChild(_0x27f923);
}
$bus.on($bus.EVENTS.UI_SET_GRAPHICS, _0x10c099 => {
  _0x2864a4(_0x10c099);
  _0x414a31();
});
if (typeof _0x4bda0b === "undefined" || _0x4bda0b === null || _0x4bda0b === undefined) {
  window.options_graphicsLevel = 0x3;
}
$bus.emit($bus.EVENTS.INITIALIZE_DEFAULT_GRAPHICS_LEVEL, _0x4bda0b);
function _0x2864a4(_0x3552b4) {
  var _0x3f602e = _0x3552b4 == _0x4bda0b;
  _0x4bda0b = _0x3552b4;
  if (window.localStorage) {
    try {
      window.localStorage.setItem("options_graphicsLevel", _0x4bda0b);
    } catch (_0x13a27c) {}
  }
  if (_0x3f602e) {
    _0x4d3cd6 = true;
  }
}
let _0x290c4a = 0x0;
let _0x1af530 = null;
let _0x4a1640 = 0x0;
function _0x16656b(_0x1c8a7a) {
  _0x290c4a += 0x1;
  if (_0x1c8a7a - _0x1af530 > 0x3e8) {
    _0x1af530 = _0x1c8a7a;
    _0x4a1640 = _0x290c4a / 0x2;
    _0x290c4a = 0x0;
    $bus.emit($bus.EVENTS.UI_SET_FPS, _0x4a1640);
  }
}
function _0x474a8f(_0x51495b) {}
setInterval(function () {
  _0x474a8f(_0x4a1640);
}, 0x1388);
$bus.on($bus.EVENTS.UI_PRESS_PLAY, () => {
  console.log("google tag manager fps metric tracking start", curServer.name);
  gtag("event", "fps_start", {
    "event_category": "client_fps",
    "event_label": _0x4a1640,
    "value": _0x4a1640
  });
  gtag("event", "fps_start", {
    "event_category": "client_fps_" + curServer.name,
    "event_label": _0x4a1640,
    "value": _0x4a1640
  });
  setTimeout(() => {
    gtag("event", "fps_30s", {
      "event_category": "client_fps",
      "event_label": _0x4a1640,
      "value": _0x4a1640
    });
    gtag("event", "fps_30s", {
      "event_category": "client_fps_" + curServer.name,
      "event_label": _0x4a1640,
      "value": _0x4a1640
    });
    console.log("sent fps 30 seconds google tag event");
  }, 0x7530);
  setTimeout(() => {
    gtag("event", "fps_5min", {
      "event_category": "client_fps",
      "event_label": _0x4a1640,
      "value": _0x4a1640
    });
    gtag("event", "fps_5min", {
      "event_category": "client_fps_" + curServer.name,
      "event_label": _0x4a1640,
      "value": _0x4a1640
    });
    console.log("sent fps 5 min google tag event");
  }, 300000);
});
const _0xe04ae4 = performance.now();
$bus.on($bus.EVENTS.ANIMAL_CHOICE_START, () => {
  console.log("::: gtag animal_choice_start :::");
  gtag("event", "animal_choice_start", {
    "event_category": "animal_choice",
    "event_label": 0x0,
    "value": 0x0
  });
});
$bus.on($bus.EVENTS.ANIMAL_CHOICE_CONFIRMED, () => {
  const _0x5769a2 = performance.now();
  const _0x400ad3 = Math.round((_0x5769a2 - _0xe04ae4) / 0x3e8);
  console.log("::: gtag animal_choice_end " + _0x400ad3 + " :::");
  gtag("event", "animal_choice_end", {
    "event_category": "animal_choice",
    "event_label": _0x400ad3,
    "value": _0x400ad3
  });
});
let _0x31e31d = window.innerWidth - 0x96;
let _0x617dac = window.innerHeight - 0x96;
$bus.on($bus.EVENTS.UPDATED_EXPERIENCE_BAR_POSITION, _0x3257c8 => {
  _0x31e31d = _0x3257c8.right * window.devicePixelRatio;
  _0x617dac = _0x3257c8.top * window.devicePixelRatio;
});
function _0x142f34(_0x41fa19, _0x38004f, _0x4014fd) {
  this.animStep = 0x1;
  this.animStartT = _0x1f4c9e;
  this.animDur = 0xbb8;
  this.timedOut = false;
  this.xShift = Math.random() * 20 + -0xa;
  this.yShift = Math.random() * 20 + -0xa;
  this.anlgeShift = Math.random() * 20 + -0xa;
  this.text = new _0x4e6b66(0x10, "white");
  this.text.setText((_0x41fa19 >= 0x0 ? "+ " : '') + _0x40c2b6(_0x41fa19) + _0x38004f);
  this.textFontSz = 0x1e;
  var _0x37307d = "white";
  if (_0x41fa19 > 0x2710) {
    _0x37307d = "#c7b753";
    this.textFontSz = 0x28;
    this.animDur += 0x3e8;
  }
  if (_0x41fa19 > 0x186a0) {
    _0x37307d = "#fdca5b";
    this.textFontSz = 0x2d;
    this.animDur += 0x7d0;
  }
  if (_0x41fa19 > 0xf4240) {
    _0x37307d = "#c7b753";
    this.textFontSz = 0x33;
    this.animDur += 0x7d0;
  }
  if (_0x41fa19 < 0x0) {
    _0x37307d = "#c65f59";
    this.animDur += 0x7d0;
  }
  _0x37307d = _0x4014fd === undefined ? _0x37307d : _0x4014fd;
  this.text.setColor(_0x37307d);
  this.draw = function () {
    if (_0x39811a.noXpPopups) {
      return;
    }
    var _0x289cbb = Math.min(0x1, Math.max(0x0, (_0x1f4c9e - this.animStartT) / this.animDur));
    _0x3b8ba2.save();
    var _0x184c52 = window.innerWidth * window.devicePixelRatio * 0.5;
    var _0x172bc5 = _0x617dac + _0x289cbb * (-0x96 * _0x301800) - 0x1e * window.devicePixelRatio;
    _0x3b8ba2.translate(_0x184c52, _0x172bc5);
    _0x3b8ba2.rotate(this.anlgeShift * _0x289cbb * (Math.PI / 0xb4));
    _0x3b8ba2.globalAlpha = 0x1 - _0x289cbb;
    this.text.setFontSize(this.textFontSz * _0x301800);
    this.text.x = 0x0;
    this.text.y = 0x0;
    this.text.draw();
    _0x3b8ba2.restore();
    if (_0x1f4c9e >= this.animStartT + this.animDur) {
      this.timedOut = true;
    }
  };
}
function _0x17bc50(_0x2a70f8, _0x5d6c9d, _0x1bad3e, _0x501bae) {
  this.animStep = 0x1;
  this.animStartT = _0x1f4c9e;
  this.timedOut = false;
  this.xShift = Math.random() * 20 + -0xa;
  this.yShift = Math.random() * 20 + -0xa;
  this.anlgeShift = Math.random() * 20 + -0xa;
  this.text = new _0x4e6b66(_0x5d6c9d, _0x1bad3e);
  this.text.setText(_0x2a70f8);
  this.textFontSz = _0x5d6c9d;
  this.animDur = _0x501bae;
  this.text.setColor(_0x1bad3e);
  this.draw = function () {
    if (_0x59840b) {
      return;
    }
    var _0x4fa5dc = Math.min(0x1, Math.max(0x0, (_0x1f4c9e - this.animStartT) / this.animDur));
    _0x3b8ba2.save();
    var _0x8da951 = _0x485584 / 0x2;
    var _0xba233e = _0x2c7985 - 0x55 * _0x301800 + _0x4fa5dc * (-0x96 * _0x301800);
    _0x3b8ba2.translate(_0x8da951, _0xba233e);
    _0x3b8ba2.globalAlpha = 0x1 - _0x4fa5dc;
    this.text.setFontSize(this.textFontSz * _0x301800);
    this.text.x = 0x0;
    this.text.y = 0x0;
    this.text.draw();
    _0x3b8ba2.restore();
    if (_0x1f4c9e >= this.animStartT + this.animDur) {
      this.timedOut = true;
    }
  };
}
function _0x459004() {
  var _0x13fd16 = _0x28c607 && _0x4db334 < 0x1f4 ? 1.4 : 0x1;
  _0x101272.w = _0x101272.h = 0xc8 * _0x301800 * _0x13fd16;
  _0x9ae7fa.w = _0x9ae7fa.h = 0xc8 * _0x301800 * _0x13fd16;
  _0x2b5dc6.w = _0x2b5dc6.h = 0xc8 * _0x301800 * _0x13fd16;
  _0x34ac76.w = 0x3c * _0x43e85b * _0x13fd16;
  _0x34ac76.h = 0x1e * _0x43e85b * _0x13fd16;
  _0x101272.x = 0x19 * _0x43e85b * _0x13fd16 + _0x101272.w / 0x2;
  _0x101272.x -= 0x32;
  _0x101272.y = _0x2c7985 - (0x28 * _0x43e85b + _0x101272.w / 0x2);
  if (_0x5a0d2a) {
    _0x101272.x = _0x485584 - _0x101272.x;
  }
  _0x9ae7fa.x = _0x101272.x;
  if (!_0x28c607) {
    _0x9ae7fa.y = _0x101272.y;
  } else {
    _0x9ae7fa.y = _0x101272.y - (0xa * _0x43e85b * _0x13fd16 + _0x9ae7fa.w / 0x2 + _0x101272.w / 0x2);
  }
  _0x2b5dc6.x = _0x101272.x;
  _0x2b5dc6.y = _0x9ae7fa.y - (0xa * _0x43e85b * _0x13fd16 + _0x2b5dc6.w / 0x2 + _0x9ae7fa.w / 0x2);
  if (_0x485584 > 0x300) {
    _0x34ac76.x = Math.min(_0x485584 / 0x2 + 0x64 * _0x43e85b * _0x13fd16, _0x485584 * 0.8) - 0x12c;
  } else {
    _0x34ac76.x = _0x485584 / 0x2;
  }
  _0x34ac76.y = 0xf * _0x43e85b + _0x34ac76.h / 0x2;
  _0x6b0536.setPosAndSize(_0x34ac76.x - (_0x34ac76.w / 0x2 + 0xa * _0x43e85b * _0x13fd16), _0x34ac76.y, 0x3c * _0x43e85b * _0x13fd16, 0x1e * _0x43e85b * _0x13fd16, 0x1, 0.5);
  _0x53ee20.setPosAndSize(_0x6b0536.x, _0x6b0536.y + _0x6b0536.h / 0x2 + 0xa * _0x43e85b * _0x13fd16, 0x3c * _0x43e85b * _0x13fd16, 0x1e * _0x43e85b * _0x13fd16, 0.5, 0x0);
  for (var _0x7c4b0f = 0x0; _0x7c4b0f < _0x44ad92.length; _0x7c4b0f++) {
    var _0x2ddd9b = _0x44ad92[_0x7c4b0f];
    _0x2ddd9b.visible = _0x28c607;
  }
  _0x9ae7fa.visible = true;
  _0x2b5dc6.visible = true;
  _0x6b0536.visible = _0x6b0536.touchEnabled = _0x28c607;
  _0x53ee20.visible = _0x53ee20.touchEnabled = _0x28c607 && _0x902c25;
}
_0x14e258.addEventListener("gesturestart", function (_0x5660a6) {
  _0x5660a6.preventDefault();
});
function _0x5b2837() {
  for (var _0x35ba2c = 0x0; _0x35ba2c < _0x44ad92.length; _0x35ba2c++) {
    var _0x35955b = _0x44ad92[_0x35ba2c];
    _0x35955b.pressed = false;
    _0x35955b.pressedTouchID = -0x1;
  }
  _0x3543b7 = false;
}
_0x14e258.ontouchstart = function (_0x171277) {
  _0x40d246();
  var _0x4d73b6 = _0x171277.touches;
  if (_0x4d73b6.length == 0x1) {
    _0x5b2837();
  }
  if (!_0x5f5cae) {
    return;
  }
  for (var _0x5322cd = 0x0; _0x5322cd < _0x171277.changedTouches.length; _0x5322cd++) {
    var _0x3250de = _0x171277.changedTouches[_0x5322cd];
    for (var _0x24d87c = 0x0; _0x24d87c < _0x44ad92.length; _0x24d87c++) {
      var _0x58f1e6 = _0x44ad92[_0x24d87c];
      var _0x5218e3 = _0x58f1e6.testPosHitsButton(_0x3250de.clientX * _0x43e85b, _0x3250de.clientY * _0x43e85b);
      if (_0x5218e3 && !_0x58f1e6.pressed && _0x58f1e6.touchEnabled) {
        _0x171277.preventDefault();
        _0x58f1e6.pressed = true;
        _0x58f1e6.pressedTouchID = _0x3250de.identifier;
        _0x58f1e6.onButtonTouchStart();
        return;
      }
    }
  }
  if (!_0x567188) {
    if (!_0x3543b7) {
      var _0x3250de = _0x171277.changedTouches[0x0];
      _0x3543b7 = true;
      _0x3709fd = _0x3250de.clientX * _0x43e85b;
      _0x2a2163 = _0x3250de.clientY * _0x43e85b;
      _0x112bc8 = _0x3709fd;
      _0x11cbb9 = _0x2a2163;
      _0x5e5be4 = _0x3250de.identifier;
      return;
    }
  }
  _0x35adbe = _0x171277.touches[0x0].clientX * _0x43e85b;
  _0x30f4c1 = _0x171277.touches[0x0].clientY * _0x43e85b;
  _0x433dd6();
};
_0x14e258.ontouchmove = function (_0x19b63e) {
  _0x40d246();
  _0x19b63e.preventDefault();
  for (var _0x57695c = 0x0; _0x57695c < _0x19b63e.changedTouches.length; _0x57695c++) {
    var _0x17415a = _0x19b63e.changedTouches[_0x57695c];
    if (_0x17415a.identifier == _0x9ae7fa.pressedTouchID) {
      if (_0x101272.pressedTouchID == -0x1) {
        var _0x4b590e = _0x101272.testPosHitsButton(_0x17415a.clientX * _0x43e85b, _0x17415a.clientY * _0x43e85b);
        var _0x57b310 = _0x101272.pressed;
        _0x101272.pressed = _0x4b590e;
        if (_0x4b590e && !_0x57b310) {
          _0x107c51(0x1, true);
        } else if (!_0x4b590e && _0x57b310) {
          _0x107c51(0x1, false);
        }
      }
      continue;
    }
    if (!_0x567188) {
      if (_0x3543b7 && _0x17415a.identifier == _0x5e5be4) {
        var _0x5d5d48 = _0x17415a.clientX * _0x43e85b - _0x3709fd;
        var _0x490273 = _0x17415a.clientY * _0x43e85b - _0x2a2163;
        var _0xc4f576 = Math.sqrt(_0x5d5d48 * _0x5d5d48 + _0x490273 * _0x490273);
        if (_0xc4f576 > 0x0) {
          var _0x41942f = _0x5d5d48 / _0xc4f576;
          var _0x506886 = _0x490273 / _0xc4f576;
          var _0x4c602f = Math.min(0x1, _0xc4f576 / (0x32 * _0x43e85b));
          if (_0x4c602f < 0.35) {
            _0x4c602f = 0x0;
          }
          var _0x349083 = Math.pow(_0x4c602f, 0x2);
          var _0x4fb76b = 0x12c * _0x43e85b * _0x349083;
          var _0x12c62d = Math.atan2(_0x506886, _0x41942f);
          _0xc119ec = _0x4a21e4(_0x46d7c2, _0x12c62d);
          _0x3c0653 = _0x4c602f;
          _0x112bc8 = _0x3709fd + 0x32 * _0x43e85b * _0x41942f * _0x4c602f;
          _0x11cbb9 = _0x2a2163 + 0x32 * _0x43e85b * _0x506886 * _0x4c602f;
          _0x35adbe = _0x485584 / 0x2 + _0x41942f * _0x4fb76b;
          _0x30f4c1 = _0x2c7985 / 0x2 + _0x506886 * _0x4fb76b;
          _0x433dd6();
        }
      }
    } else {
      _0x35adbe = _0x17415a.clientX * _0x43e85b;
      _0x30f4c1 = _0x17415a.clientY * _0x43e85b;
      _0x433dd6();
    }
  }
};
_0x14e258.ontouchend = function (_0x15d639) {
  for (var _0x5898a4 = 0x0; _0x5898a4 < _0x15d639.changedTouches.length; _0x5898a4++) {
    var _0x3383cb = _0x15d639.changedTouches[_0x5898a4];
    if (_0x3543b7 && _0x3383cb.identifier == _0x5e5be4) {
      _0x3543b7 = false;
      _0x5e5be4 = -0x1;
      continue;
    }
    for (var _0x3164c8 = 0x0; _0x3164c8 < _0x44ad92.length; _0x3164c8++) {
      var _0x475e42 = _0x44ad92[_0x3164c8];
      if (_0x475e42.pressed && _0x475e42.pressedTouchID == _0x3383cb.identifier && _0x475e42.touchEnabled) {
        _0x475e42.pressed = false;
        _0x475e42.pressedTouchID = -0x1;
        if (_0x5f5cae) {
          _0x475e42.onButtonTouchEnd();
        }
        return;
      }
    }
  }
};
_0x14e258.ontouchcancel = function (_0x49aead) {
  console.log("touch cancel");
  _0x14e258.ontouchend(_0x49aead);
};
_0x14e258.ontouchleave = function (_0x2d95fc) {
  console.log("touch leave");
};
_0x472b99.prototype = {
  "id": 0x0,
  "drawMe": true,
  "oType": 0x14,
  "spawnTime": 0x0,
  "rPer": 0x0,
  "updateTime": 0x0,
  "x": 0x0,
  "y": 0x0,
  "ox": 0x0,
  "oy": 0x0,
  "nx": 0x0,
  "ny": 0x0,
  "rad": 0x0,
  "oRad": 0x0,
  "nRad": 0x0,
  "angle": 0x0,
  "oAngle": 0x0,
  "angleDelta": 0x0,
  "moveUpdF": 0x0,
  "z": 0x0,
  "name": '',
  "dead": false,
  "type": 0x0,
  "curBiome": 0x0,
  "isRectangle": false,
  "rectW": 0x0,
  "rectH": 0x0,
  "specType": 0x0,
  "toString": function () {
    return "[GObj t=" + this.oType + " id=" + this.id + "]";
  }
};
_0x472b99.prototype.flag_hurt = false;
_0x472b99.prototype.hpPer = _0x472b99.prototype.hpPer_n = _0x472b99.prototype.hpBarA = 0x0;
_0x472b99.prototype.infectionPer = _0x472b99.prototype.infectionPer_n = _0x472b99.prototype.infectionBarA = 0x0;
_0x472b99.prototype.curePer = _0x472b99.prototype.curePer_n = _0x472b99.prototype.cureBarA = 0x0;
_0x472b99.prototype.hpBarTimeoutT = 0x0;
_0x472b99.prototype.alwaysPlainOutline = false;
_0x472b99.prototype.doesDrawEffectScale = false;
_0x472b99.prototype.drawEffectScale_Slow = false;
_0x472b99.prototype.customInterfaceDraw = false;
_0x472b99.prototype.animateRadOnSpawn = true;
_0x472b99.prototype.canRotate = function () {
  switch (this.oType) {
    case 0x19:
    case 0x44:
    case 0x23:
      return false;
  }
  return true;
};
_0x472b99.prototype.getObjSpecies = function () {
  switch (this.oType) {
    case 0x6:
      return "/" + this.speciesType;
  }
  return '';
};
_0x472b99.prototype.customDraw2 = function (_0x4bc530) {
  switch (this.oType) {
    case 0x3:
    case 0x8:
    case 0x2e:
    case 0x15:
    case 0x14:
    case 0x16:
    case 0x18:
    case 0x19:
    case 0x1d:
    case 0x1e:
    case 0x31:
    case 0x17:
    case 0x44:
    case 0x36:
    case 0x35:
    case 0x34:
    case 0x45:
    case 0x32:
    case 0x33:
    case 0x27:
    case 0x25:
    case 0x26:
    case 0x23:
    case 0x24:
    case 0x3c:
    case 0x30:
    case 0x20:
    case 0x1f:
    case 0x4:
    case 0xb:
    case 0x52:
    case 0x59:
    case 0x5a:
    case 0x5b:
    case 0x5c:
    case 0x6:
    case 0x1b:
    case 0x96:
    case 0x5:
    case 0x9:
    case 0x1a:
    case 0x3f:
    case 0x5d:
      this.doesDrawEffectScale = false;
      this.drawEffectScale_Slow = false;
      {
        var _0x3f0dcd = this.getSkinImageObj(this.objSkinPath);
        _0x3b8ba2.save();
        _0x3b8ba2.globalAlpha = this.getObjAlpha();
        if (_0x3f0dcd) {
          var _0x1e303c = this.getRad();
          if (this.canRotate()) {
            _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          }
          _0x3b8ba2.drawImage(_0x3f0dcd, -_0x1e303c, -_0x1e303c, 0x2 * _0x1e303c, 0x2 * _0x1e303c);
        } else {
          this.drawOutlinedCircle("(make this obj invisible on server?)", "black");
        }
        _0x3b8ba2.restore();
      }
      break;
  }
};
_0x472b99.prototype.getRad = function () {
  switch (this.oType) {
    case 0x1b:
    case 0x1c:
      return this.rad * 1.5;
    case 0x19:
      return this.rad * 1.2;
    case 0x5:
    case 0x9:
      var _0x37ed29 = _0x5c52f8[_0x2bd878];
      if (_0x37ed29 && _0x37ed29.lastHidingHoleID == this.id) {
        if (this.alpha == undefined) {
          this.alpha = 0x0;
        }
        if (_0x37ed29.flag_inHidingHole) {
          this.alpha += (0.1 + this.alpha) * 0.1;
        } else {
          this.alpha -= this.alpha * 0.1;
        }
        if (this.alpha > 0x1) {
          this.alpha = 0x1;
        } else if (this.alpha < 0x0) {
          this.alpha = 0x0;
        }
        _0x3b8ba2.globalAlpha = this.alpha;
        return this.rad;
      } else {
        return this.innerRad;
      }
  }
  return this.rad;
};
_0x472b99.prototype.getObjAlpha = function () {
  switch (this.oType) {
    case 0x6:
      return 0.9;
  }
  return 0x1;
};
_0x472b99.prototype.objSkinPath = null;
_0x472b99.prototype.getBiomeSkin = function (_0x36afb3) {
  switch (this.oType) {
    case 0x3f:
      _0x36afb3 = (this.isEdibleOutlined() ? "e" : this.oType) + "_" + this.specType;
      break;
    case 0x6:
    case 0x3:
    case 0x8:
    case 0x2e:
    case 0x1b:
    case 0x5d:
      _0x36afb3 = this.isEdibleOutlined() ? "e" : this.curBiome;
      break;
    case 0x18:
    case 0x16:
    case 0x19:
      _0x36afb3 = this.isEdibleOutlined() ? "e" : this.oType;
      if (this.curBiome == 0x2) {
        _0x36afb3 += "_2";
      }
      break;
    case 0x15:
      _0x36afb3 = this.isEdibleOutlined() ? "e" : this.curBiome;
      if (this.curBiome == 0x2) {
        _0x36afb3 += "_2";
      }
      break;
    case 0x4:
      _0x36afb3 += "_" + this.curBiome;
      break;
    case 0x5:
    case 0x9:
      if (this.curBiome != 0x3) {
        _0x36afb3 = this.curBiome;
      }
      break;
  }
  return _0x36afb3;
};
_0x472b99.prototype.customDraw = function (_0x44574d) {
  switch (this.oType) {
    case 0x3:
    case 0x8:
    case 0x2e:
    case 0x15:
    case 0x14:
    case 0x16:
    case 0x18:
    case 0x19:
    case 0x1d:
    case 0x1e:
    case 0x31:
    case 0x17:
    case 0x44:
    case 0x36:
    case 0x35:
    case 0x34:
    case 0x45:
    case 0x32:
    case 0x33:
    case 0x27:
    case 0x25:
    case 0x26:
    case 0x23:
    case 0x24:
    case 0x3c:
    case 0x30:
    case 0x20:
    case 0x1f:
    case 0x4:
    case 0xb:
    case 0x52:
    case 0x59:
    case 0x5a:
    case 0x5b:
    case 0x5c:
    case 0x6:
    case 0x1b:
    case 0x96:
    case 0x5:
    case 0x9:
    case 0x1a:
    case 0x3f:
    case 0x5d:
      this.customDraw2(_0x44574d);
      break;
    case 0x1b:
      {
        _0x3b8ba2.save();
        var _0x81548d = 0x0;
        if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
          var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0x22a1c1 = 0x2;
          var _0x5cce7f = 1.5;
          _0x81548d = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        }
        var _0x14a33e = this.curBiome == 0x1 ? "#C67019" : "#CF6259";
        _0x3b8ba2.fillStyle = _0x14a33e;
        var _0x57c895 = this.rad * 0.8;
        this.drawOutlinedCircle('', _0x14a33e);
        _0x3b8ba2.globalAlpha *= 0.98;
        var _0x23bdc7 = -_0x57c895 * 0.5;
        var _0x322a52 = -_0x57c895 * 0.5 + 0xa * this.rPer;
        var _0x58aca5 = Math.max(0x0, _0x57c895 * 0.65 + _0x81548d) + 0x2;
        _0x133658(_0x23bdc7, _0x322a52, _0x58aca5, _0x14a33e);
        var _0x23bdc7 = _0x57c895 * 0.5;
        var _0x322a52 = -_0x57c895 * 0.5 - 0xa * this.rPer;
        var _0x58aca5 = Math.max(0x0, _0x57c895 * 0.73 - _0x81548d);
        _0x133658(_0x23bdc7, _0x322a52, _0x58aca5, _0x14a33e);
        var _0x23bdc7 = _0x57c895 * 0.6;
        var _0x322a52 = _0x57c895 * 0.4;
        var _0x58aca5 = Math.max(0x0, _0x57c895 * 0.78 + _0x81548d);
        _0x133658(_0x23bdc7, _0x322a52, _0x58aca5, _0x14a33e);
        var _0x23bdc7 = -_0x57c895 * 0.5;
        var _0x322a52 = _0x57c895 * 0.5 + 0xa * this.rPer;
        var _0x58aca5 = Math.max(0x0, _0x57c895 * 0.6 + this.rPer - _0x81548d);
        _0x133658(_0x23bdc7, _0x322a52, _0x58aca5, _0x14a33e);
        _0x3b8ba2.restore();
      }
      break;
    case 0xf:
      {
        var _0x2c3eb0 = this.curBiome == 0x4 ? "#9b702b" : "#1AAE31";
        this.drawOutlinedCircle('', _0x2c3eb0);
        _0x3b8ba2.save();
        var _0x81548d = 0x0;
        if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
          var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0x22a1c1 = 0x2;
          var _0x5cce7f = 1.5;
          _0x81548d = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        }
        _0x3b8ba2.fillStyle = "#3FBA54";
        var _0x50b5b0 = this.rad * 0.75;
        _0x3b8ba2.globalAlpha *= 0.8;
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(-_0x50b5b0 * 0.5, -_0x50b5b0 * 0.5 + 0xa * this.rPer, Math.max(0x0, _0x50b5b0 * 0.65 + _0x81548d), 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(_0x50b5b0 * 0.5, -_0x50b5b0 * 0.5 - 0xa * this.rPer, Math.max(0x0, _0x50b5b0 * 0.73 - _0x81548d), 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(_0x50b5b0 * 0.6, _0x50b5b0 * 0.4, Math.max(0x0, _0x50b5b0 * 0.78 + _0x81548d), 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(-_0x50b5b0 * 0.5, _0x50b5b0 * 0.5, Math.max(0x0, _0x50b5b0 * 0.6 + this.rPer - _0x81548d), 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.restore();
      }
      break;
    case 0x1c:
      {
        _0x3b8ba2.save();
        var _0x81548d = 0x0;
        if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
          var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0x22a1c1 = 0x2;
          var _0x5cce7f = 1.5;
          _0x81548d = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        }
        var _0x57c895 = this.rad * 0.8;
        this.drawOutlinedCircle('', "#C67019");
        _0x3b8ba2.globalAlpha *= 0.98;
        var _0x23bdc7 = -_0x57c895 * 0.5;
        var _0x322a52 = -_0x57c895 * 0.5 + 0xa * this.rPer;
        var _0x58aca5 = Math.max(0x0, _0x57c895 * 0.65 + _0x81548d) + 0x2;
        _0x133658(_0x23bdc7, _0x322a52, _0x58aca5, "#C67019");
        var _0x23bdc7 = _0x57c895 * 0.5;
        var _0x322a52 = -_0x57c895 * 0.5 - 0xa * this.rPer;
        var _0x58aca5 = Math.max(0x0, _0x57c895 * 0.73 - _0x81548d);
        _0x133658(_0x23bdc7, _0x322a52, _0x58aca5, "#C67019");
        var _0x23bdc7 = _0x57c895 * 0.6;
        var _0x322a52 = _0x57c895 * 0.4;
        var _0x58aca5 = Math.max(0x0, _0x57c895 * 0.78 + _0x81548d);
        _0x133658(_0x23bdc7, _0x322a52, _0x58aca5, "#C67019");
        var _0x23bdc7 = -_0x57c895 * 0.5;
        var _0x322a52 = _0x57c895 * 0.5 + 0xa * this.rPer;
        var _0x58aca5 = Math.max(0x0, _0x57c895 * 0.6 + this.rPer - _0x81548d);
        _0x133658(_0x23bdc7, _0x322a52, _0x58aca5, "#C67019");
        _0x3b8ba2.restore();
      }
      break;
    case 0x4:
      {
        _0x3b8ba2.save();
        var _0xee5860 = this.curBiome == 0x2 ? "#7790d8" : "#4854a2";
        this.drawOutlinedCircle('', _0xee5860);
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
        }
        var _0x81548d = 0x0;
        if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
          var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0x22a1c1 = 0x7;
          var _0x5cce7f = 0x4;
          _0x81548d = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        }
        if (this.curBiome == 0x2) {
          _0x3b8ba2.fillStyle = "#7790d8";
        } else {
          _0x3b8ba2.fillStyle = "#4854a2";
        }
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - _0xab3734 + _0x81548d), 0x0, Math.PI * 0x2);
        _0x3b8ba2.fill();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.3, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.35 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.5, this.rad * 0.5 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.4 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.75, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.3 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x14:
      {
        var _0x5d315b = "#F35F53";
        if (this.curBiome == 0x2) {
          _0x5d315b = "#ac443c";
        }
        this.drawOutlinedCircle('', _0x5d315b);
      }
      break;
    case 0x1e:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/coconut" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        console.log("drawing cococ");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          if (this.specType2 == 0x1) {
            if (this.angle == 0x0) {
              this.angle = this.rPer * Math.PI * 0x2;
            }
            this.angle += 0.4;
            _0x3b8ba2.rotate(this.angle);
          } else {
            if (this.specType2 == 0x2) {
              _0x3b8ba2.rotate(this.angle);
            } else {
              _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
            }
          }
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
        }
      }
      break;
    case 0x1d:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/banana" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          if (this.specType2 == 0x1) {
            if (this.angle == 0x0) {
              this.angle = this.rPer * Math.PI * 0x2;
            }
            this.angle += 0.4;
            _0x3b8ba2.rotate(this.angle);
          } else {
            if (this.specType2 == 0x2) {
              _0x3b8ba2.rotate(this.angle);
            } else {
              _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
            }
          }
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
        }
      }
      break;
    case 0x1f:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/rasp" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          if (this.specType2 == 0x1) {
            if (this.angle == 0x0) {
              this.angle = this.rPer * Math.PI * 0x2;
            }
            this.angle += 0.4;
            _0x3b8ba2.rotate(this.angle);
          } else {
            if (this.specType2 == 0x2) {
              _0x3b8ba2.rotate(this.angle);
            } else {
              _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
            }
          }
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
        }
      }
      break;
    case 0x20:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/pear" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          if (this.specType2 == 0x1) {
            if (this.angle == 0x0) {
              this.angle = this.rPer * Math.PI * 0x2;
            }
            this.angle += 0.4;
            _0x3b8ba2.rotate(this.angle);
          } else {
            if (this.specType2 == 0x2) {
              _0x3b8ba2.rotate(this.angle);
            } else {
              _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
            }
          }
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
        }
      }
      break;
    case 0x23:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/seaweed" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
        }
      }
      break;
    case 0x24:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/starfish" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
        }
      }
      break;
    case 0x25:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/kelp" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
        }
      }
      break;
    case 0x26:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/clam" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
        }
      }
      break;
    case 0x27:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/conch" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad * 0x1;
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x3e:
    case 0x3d:
      {
        break;
      }
    case 0x42:
      {
        var _0x51d1f6 = this.getSkinImageObj("skins/land/ostrich/" + this.speciesType + "/ostrichEgg" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x71:
      this.drawOutlinedCircle('', "red");
      break;
    case 0x72:
      this.drawOutlinedCircle('', "green");
      break;
    case 0x73:
      this.drawOutlinedCircle('', "blue");
      break;
    case 0x74:
      break;
    case 0x3f:
      {
        var _0x4d7a37 = "egg";
        if (this.specType == 0x1) {
          _0x4d7a37 = "goldenegg";
        }
        var _0x3a75dd = "img/" + _0x4d7a37 + (this.isEdibleOutlined() ? "_e" : '') + ".png";
        console.log(_0x3a75dd);
        var _0x51d1f6 = this.getSkinImageObj(_0x3a75dd);
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x44:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/beehive" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(this.rPer * 0.5 * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x62:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/desert/anthill/anthill.png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(this.rPer * 0.5 * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
          _0x3b8ba2.restore();
          console.log("drawing anthill");
        }
      }
      break;
    case 0x45:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/honeycomb" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(this.rPer * 0.5 * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x41:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/quill.png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.rotate(this.angle);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
        }
      }
      break;
    case 0x1a:
      {
        this.drawOutlinedCircle('', "#FF911E");
        _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
        _0x133658(this.rad * 0.25, this.rad * 0.4, (0.3 + 0.15 * this.rPer) * this.rad, "#905113");
      }
      break;
    case 0x2e:
      {
        var _0x2ff15a = '';
        console.log("Healing stone current biome: " + this.curBiome);
        switch (this.curBiome) {
          case 0x1:
            _0x2ff15a = "_ocean";
            break;
          case 0x2:
            _0x2ff15a = "_arctic";
            break;
          case 0x0:
          default:
            _0x2ff15a = '';
            break;
        }
        var _0x51d1f6 = this.getSkinImageObj("img/healingStone" + _0x2ff15a + ".png");
        console.log("Healing stone image: " + image);
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x2a:
      {
        _0x133658(0x0, 0x0, Math.max(0x0, this.rad * 0x1), "#815427");
        _0x133658(0x0, 0x0, Math.max(0x0, this.rad * 0.6), "#6e4b29");
        _0x133658(0x0, 0x0, Math.max(0x0, this.rad * 0.5), "#543d28");
        _0x133658(0x0, 0x0, Math.max(0x0, this.rad * 0.45), "#3f3124");
        _0x133658(0x0, 0x0, Math.max(0x0, this.rad * 0.33), "#241e19");
        _0x133658(0x0, 0x0, Math.max(0x0, this.rad * 0.25), "#120f0d");
        _0x133658(0x0, 0x0, Math.max(0x0, this.rad * 0.2), "#ff6000");
      }
      break;
    case 0x2c:
      {
        _0x3b8ba2.save();
        var _0x81548d = 0x0;
        if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
          var _0x2b3c17 = _0x1d1686("lavalake", this.spawnTime);
          if (_0x2b3c17 !== undefined && _0x2b3c17 != null) {
            this.theFrame = _0x2b3c17;
          }
          _0x81548d = this.theFrame;
        }
        if (_0x44574d) {
          var _0xab3734 = 0x4;
          _0x3b8ba2.fillStyle = "#ff6000";
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0x2);
          _0x3b8ba2.fill();
        } else {
          _0x3b8ba2.fillStyle = "#ff6000";
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - _0xab3734 + _0x81548d), 0x0, Math.PI * 0x2);
          _0x3b8ba2.fill();
          if (!(_0x4bda0b == 0x2)) {
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad * 0.45, -this.rad * 0.45 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad * 0.5, this.rad * 0.5 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.4 + _0x81548d), 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(-this.rad * 0.75, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.3 + _0x81548d), 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
          }
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x3a:
      {
        _0x3b8ba2.save();
        var _0x81548d = 0x0;
        var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x22a1c1 = 0x4;
        var _0x5cce7f = 2.5;
        _0x81548d = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        if (_0x44574d) {
          var _0xab3734 = 0x4;
          _0x3b8ba2.fillStyle = "#5e5348";
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0x2);
          _0x3b8ba2.fill();
        } else {
          _0x3b8ba2.fillStyle = "#706962";
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - _0xab3734 + _0x81548d), 0x0, Math.PI * 0x2);
          _0x3b8ba2.fill();
          if (!(_0x4bda0b == 0x2)) {
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad * 0.45, -this.rad * 0.45 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad * 0.5, this.rad * 0.5 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.4 + _0x81548d), 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(-this.rad * 0.75, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.3 + _0x81548d), 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
          }
          _0x3b8ba2.save();
          _0x3b8ba2.globalAlpha = 0x1 - this.underwaterA;
          var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0x22a1c1 = 1.5;
          var _0x5cce7f = 0x8;
          var _0x53a155 = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
          if (this.flag_underWater) {
            _0x3b8ba2.globalAlpha *= 0.5;
            if (this.animalType == _0x4bb269) {
              _0x3b8ba2.globalAlpha = 0.3;
            }
          }
          _0x3b8ba2.fillStyle = "yellow";
          var _0x246787 = this.rad * 0.15;
          _0x3b8ba2.beginPath();
          for (i = 0x1; i <= 0x1; i++) {
            _0x3b8ba2.save();
            _0x3b8ba2.globalAlpha = 0.2;
            _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2 * i);
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad * -0.35, this.rad * -0.33, Math.max(0x0, _0x246787 + _0x53a155), 0x0, Math.PI * 0x2);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad * 0.35, this.rad * -0.32, Math.max(0x0, _0x246787 - _0x53a155), 0x0, Math.PI * 0x2);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad * 0.35, this.rad * 0.36, Math.max(0x0, _0x246787 + _0x53a155), 0x0, Math.PI * 0x2);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad * -0.35, this.rad * 0.35, Math.max(0x0, _0x246787 - _0x53a155), 0x0, Math.PI * 0x2);
            _0x3b8ba2.fill();
            _0x3b8ba2.restore();
          }
          _0x3b8ba2.restore();
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x3c:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/cloudberry" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          if (this.specType2 == 0x1) {
            if (this.angle == 0x0) {
              this.angle = this.rPer * Math.PI * 0x2;
            }
            this.angle += 0.4;
            _0x3b8ba2.rotate(this.angle);
          } else {
            if (this.specType2 == 0x2) {
              _0x3b8ba2.rotate(this.angle);
            } else {
              _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
            }
          }
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
        }
      }
      break;
    case 0x30:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/arcticNut" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          if (this.specType2 == 0x1) {
            if (this.angle == 0x0) {
              this.angle = this.rPer * Math.PI * 0x2;
            }
            this.angle += 0.4;
            _0x3b8ba2.rotate(this.angle);
          } else {
            if (this.specType2 == 0x2) {
              _0x3b8ba2.rotate(this.angle);
            } else {
              _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
            }
          }
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
        }
      }
      break;
    case 0x31:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/carrot" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x32:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/watermelon" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x38:
      {
        _0x3b8ba2.save();
        _0x133658(0x0, 0x0, this.rad, !this.isEdibleOutlined() ? _0x4bb1c3(this.curBiome) : "#4AE05E");
        _0x133658(0x0, 0x0, Math.max(0x0, this.rad - 0x2), "#74e61e");
        _0x3b8ba2.restore();
      }
      break;
    case 0x33:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/watermelonSlice" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x34:
    case 0x35:
    case 0x36:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/meat" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x16:
    case 0x18:
      {
        var _0xab3734 = 0x2;
        var _0x2f3b4c = this.oType == 0x18 ? 0xf : 0x9;
        _0x3b8ba2.fillStyle = this.getOutlineColor();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.rect(-_0x2f3b4c / 0x2 - _0xab3734, -_0xab3734, _0x2f3b4c + _0xab3734 * 0x2, this.rad * 0.8 + _0xab3734 * 0x2);
        _0x3b8ba2.fill();
        _0x3b8ba2.fillStyle = "#FFCA49";
        _0x3b8ba2.beginPath();
        _0x3b8ba2.rect(-_0x2f3b4c / 0x2, 0x0 + _0xab3734 / 0x2, _0x2f3b4c, this.rad * 0.8 - _0xab3734 / 0x2);
        _0x3b8ba2.fill();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad), Math.PI, 0x2 * Math.PI);
          _0x3b8ba2.fillStyle = this.getOutlineColor();
          _0x3b8ba2.fill();
        }
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - _0xab3734), Math.PI, 0x2 * Math.PI);
        _0x3b8ba2.fillStyle = this.oType == 0x18 ? "#B8413B" : "#CFAD59";
        _0x3b8ba2.fill();
      }
      break;
    case 0x19:
      {
        var _0xab3734 = 0x2;
        _0x3b8ba2.save();
        var _0x81548d = 0x0;
        if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
          var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0x22a1c1 = 0x2;
          var _0x5cce7f = 1.5;
          _0x81548d = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        }
        _0x3b8ba2.fillStyle = "#45D157";
        _0x3b8ba2.globalAlpha *= 0.93;
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(-this.rad * 0.5, -this.rad * 0.5 + 0xa * this.rPer, Math.max(0x0, this.rad * 0.55 + _0x81548d), 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(this.rad * 0.5, -this.rad * 0.5 - 0xa * this.rPer, Math.max(0x0, this.rad * 0.43 - _0x81548d), 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(this.rad * 0.6, this.rad * 0.4, Math.max(0x0, this.rad * 0.48 + _0x81548d), 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(-this.rad * 0.5, this.rad * 0.5, Math.max(0x0, this.rad * 0.4 + this.rPer - _0x81548d), 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.restore();
        var _0x2f3b4c = 0x14;
        _0x3b8ba2.fillStyle = this.getOutlineColor();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.rect(-_0x2f3b4c / 0x2 - _0xab3734, -_0xab3734, _0x2f3b4c + _0xab3734 * 0x2, this.rad * 0.8 + _0xab3734 * 0x2);
        _0x3b8ba2.fill();
        _0x3b8ba2.fillStyle = "#FFCA49";
        _0x3b8ba2.beginPath();
        _0x3b8ba2.rect(-_0x2f3b4c / 0x2, 0x0 + _0xab3734 / 0x2, _0x2f3b4c, this.rad * 0.8 - _0xab3734 / 0x2);
        _0x3b8ba2.fill();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad * 0.8), Math.PI, 0x2 * Math.PI);
        _0x3b8ba2.fillStyle = this.getOutlineColor();
        _0x3b8ba2.fill();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad * 0.8 - _0xab3734), Math.PI, 0x2 * Math.PI);
        _0x3b8ba2.fillStyle = "#B8413B";
        _0x3b8ba2.fill();
      }
      break;
    case 0x17:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/lillypad" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
        }
      }
      break;
    case 0xe:
      {
        console.log("ERROR: " + this + " should be subclassed!");
      }
      break;
    case 0x5:
    case 0x9:
      {
        var _0x2df843 = this.curBiome == 0x2 ? "#e0e0e0" : "#9F8641";
        var _0xc52f42 = this.curBiome == 0x2 ? "#878787" : "#7E6A35";
        var _0x284598 = this.curBiome == 0x2 ? "#666666" : "#5C4E28";
        var _0x2757e9 = this.curBiome == 0x2 ? "#434343" : "#40371D";
        if (this.curBiome != 0x2) {
          this.drawOutlinedCircleRad('', _0x2df843, this.innerRad);
        } else {
          _0x133658(0x0 + this.rPer, 0x1, Math.max(0x0, this.innerRad), _0x2df843);
        }
        if (!(_0x4bda0b == 0x2)) {
          _0x133658(0x0 - this.rPer, 0x0 - this.rPer, Math.max(0x0, this.innerRad - 0x7), _0xc52f42);
        }
        _0x133658(0x0 + this.rPer, 0x1, Math.max(0x0, this.innerRad - 0xe), _0x284598);
        _0x133658(0x0 - this.rPer * 0x2 - 0x3, 0x1, Math.max(0x0, this.innerRad - 18.5), _0x2757e9);
        var _0xe307fc = _0x5c52f8[_0x2bd878];
        if (_0xe307fc && _0xe307fc.lastHidingHoleID == this.id) {
          if (this.alpha == undefined) {
            this.alpha = 0x0;
          }
          if (_0xe307fc.flag_inHidingHole) {
            this.alpha += (0.1 + this.alpha) * 0.1;
          } else {
            this.alpha -= this.alpha * 0.1;
          }
          if (this.alpha > 0x1) {
            this.alpha = 0x1;
          } else if (this.alpha < 0x0) {
            this.alpha = 0x0;
          }
          _0x3b8ba2.globalAlpha = this.alpha;
          var _0x298b5e = this.rad;
          if (this.curBiome != 0x2) {
            this.drawOutlinedCircleRad('', _0x2df843, _0x298b5e);
          } else {
            _0x133658(0x0, 0x0, Math.max(0x0, _0x298b5e), _0x2df843);
          }
          _0x133658(0x0 - this.rPer, 0x0 - this.rPer, Math.max(0x0, _0x298b5e - 0x7), _0xc52f42);
          _0x133658(0x0 + this.rPer, 0x1, Math.max(0x0, _0x298b5e - 0xc), _0x284598);
          _0x3b8ba2.globalAlpha = this.alpha * 0.7;
          _0x298b5e = _0x298b5e * 0.7;
          _0x133658(0x0 - this.rPer, 0x0 - this.rPer, Math.max(0x0, _0x298b5e - 0x7), _0x2757e9);
          _0x298b5e = _0x298b5e * 0.5;
          _0x3b8ba2.globalAlpha = this.alpha * 0.3;
          _0x133658(0x0 - this.rPer, 0x0 - this.rPer, Math.max(0x0, _0x298b5e), _0x2757e9);
        }
      }
      break;
    case 0xd:
      {
        var _0xb18da7 = 0x1;
        var _0x21f0c2 = 0x1;
        if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
          var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0x22a1c1 = 1.2;
          _0xb18da7 = 3.5 * Math.cos(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
          _0x21f0c2 = 2.5 * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        }
        this.drawOutlinedCircleRad('', "#4A549D", this.innerRad);
        if (!(_0x4bda0b == 0x2)) {
          _0x133658(0x0 + _0xb18da7 / 0x2 - this.rPer, 0x0 + _0x21f0c2 / 0x2 - this.rPer, Math.max(0x0, this.innerRad - 0x6), "#444C8B");
        }
        _0x133658(0x0 + _0xb18da7 / 4.5 + this.rPer, 0x1 + _0x21f0c2 / 1.5, Math.max(0x0, this.innerRad - 0xe), "#4A549D");
        _0x133658(0x0 + _0xb18da7 / 1.5 - this.rPer * 0x2, _0x21f0c2, Math.max(0x0, this.innerRad - 18.5 + _0x21f0c2 / 0x5), "#3F4477");
        _0x133658(0x0 + _0xb18da7 / 1.5 - this.rPer * 0x2, _0x21f0c2, Math.max(0x0, this.innerRad - 22.5 + _0x21f0c2 / 0xb), "#353860");
        var _0xe307fc = _0x5c52f8[_0x2bd878];
        if (_0xe307fc && _0xe307fc.lastHidingHoleID == this.id) {
          if (this.alpha == undefined) {
            this.alpha = 0x0;
          }
          if (_0xe307fc.flag_inHidingHole) {
            this.alpha += (0.1 + this.alpha) * 0.1;
          } else {
            this.alpha -= this.alpha * 0.1;
          }
          if (this.alpha > 0x1) {
            this.alpha = 0x1;
          } else if (this.alpha < 0x0) {
            this.alpha = 0x0;
          }
          _0x3b8ba2.globalAlpha = this.alpha;
          var _0x298b5e = this.rad;
          this.drawOutlinedCircle('', "#4A549D", _0x298b5e);
          if (!(_0x4bda0b == 0x2)) {
            _0x133658(0x0 + _0xb18da7 / 0x2 - this.rPer, 0x0 + _0x21f0c2 / 0x2 - this.rPer, Math.max(0x0, _0x298b5e - 0x6), "#444C8B");
          }
          _0x133658(0x0 + _0xb18da7 / 4.5 + this.rPer, 0x1 + _0x21f0c2 / 1.5, Math.max(0x0, _0x298b5e - 0xe), "#4A549D");
          _0x298b5e = _0x298b5e * 0.9;
          _0x3b8ba2.globalAlpha = this.alpha * 0.6;
          _0x133658(0x0 + _0xb18da7 / 3.5 - this.rPer * 0x2, _0x21f0c2, Math.max(0x0, _0x298b5e - 18.5 + _0x21f0c2 / 0x5), "#3F4477");
          _0x298b5e = _0x298b5e * 0.7;
          _0x3b8ba2.globalAlpha = this.alpha * 0.3;
          _0x133658(0x0 + _0xb18da7 / 6.5 - this.rPer * 0x2, _0x21f0c2, Math.max(0x0, _0x298b5e - 22.5 + _0x21f0c2 / 0xb), "#353860");
        }
      }
      break;
    case 0x6:
      {
        _0x3b8ba2.save();
        var _0x81548d = 0x0;
        if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
          var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0x22a1c1 = 0x2;
          var _0x5cce7f = 1.5;
          _0x81548d = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        }
        var _0x166e75 = "#45D157";
        switch (this.curBiome) {
          case 0x1:
            _0x166e75 = "#786810";
            break;
          case 0x2:
            _0x166e75 = "#CED0D0";
            break;
          default:
          case 0x0:
            _0x166e75 = "#45D157";
            break;
          case 0x4:
            _0x166e75 = "#9b6f31";
            break;
        }
        _0x3b8ba2.fillStyle = _0x166e75;
        _0x3b8ba2.globalAlpha *= 0.93;
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(-this.rad * 0.5, -this.rad * 0.5 + 0xa * this.rPer, Math.max(0x0, this.rad * 0.65 + _0x81548d), 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(this.rad * 0.5, -this.rad * 0.5 - 0xa * this.rPer, Math.max(0x0, this.rad * 0.73 - _0x81548d), 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(this.rad * 0.6, this.rad * 0.4, Math.max(0x0, this.rad * 0.78 + _0x81548d), 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(-this.rad * 0.5, this.rad * 0.5, Math.max(0x0, this.rad * 0.6 + this.rPer - _0x81548d), 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.restore();
      }
      break;
    case 0x2f:
      {
        _0x3b8ba2.save();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
        }
        var _0x81548d = 0x0;
        var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x22a1c1 = 0x6;
        var _0x5cce7f = 1.5;
        _0x81548d = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        var _0xab3734 = 0x4;
        _0x3b8ba2.fillStyle = "#604729";
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0x2);
        _0x3b8ba2.fill();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.fillStyle = "#8A681B";
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - _0xab3734 + _0x81548d), 0x0, Math.PI * 0x2);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.45, -this.rad * 0.45 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.5, this.rad * 0.5 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.4 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.75, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.3 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x37:
      {
        _0x3b8ba2.save();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
        }
        var _0x81548d = 0x0;
        var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x22a1c1 = 0x6;
        var _0x5cce7f = 1.5;
        _0x81548d = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        var _0xab3734 = 0x4;
        _0x3b8ba2.fillStyle = "#605649";
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0x2);
        _0x3b8ba2.fill();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.fillStyle = "#5e4f36";
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - _0xab3734 + _0x81548d), 0x0, Math.PI * 0x2);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.45, -this.rad * 0.45 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.5, this.rad * 0.5 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.4 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.75, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.3 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x7a:
      break;
    case 0x6d:
    case 0x6c:
    case 0x66:
    case 0x68:
      break;
    case 0x69:
    case 0x6e:
      var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
      _0x3b8ba2.save();
      _0x3b8ba2.rotate(this.angle + 0xb4 * (Math.PI / 0xb4));
      _0x3b8ba2.globalAlpha = 0.1 + this.cloudOpacity;
      var _0x51d1f6 = this.getSkinImageObj("img/disasters/cloud.png");
      if (_0x51d1f6) {
        var _0x50b5b0 = this.rad * 0x2;
        _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
      }
      var _0x81548d = 0x0;
      var _0x22a1c1 = 0x6;
      var _0x5cce7f = 0xf;
      _0x81548d = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
      _0x3b8ba2.globalAlpha = 0.1;
      var _0x51d1f6 = this.getSkinImageObj("img/disasters/cloud1.png");
      if (_0x51d1f6) {
        var _0x50b5b0 = this.rad * 0x2;
        _0x50b5b0 = Math.max(0x0, _0x50b5b0 - 0x5 + _0x81548d);
        _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
      }
      _0x3b8ba2.restore();
      break;
    case 0x7:
      {
        _0x3b8ba2.save();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
        }
        var _0x81548d = 1.5;
        var _0x2b3c17 = _0x1d1686("volcano", this.spawnTime);
        if (_0x2b3c17 !== undefined && _0x2b3c17 != null) {
          this.theFrame = _0x2b3c17;
        }
        _0x81548d = this.theFrame;
        var _0xab3734 = 0x4;
        _0x3b8ba2.fillStyle = "#8B7833";
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0x2);
        _0x3b8ba2.fill();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.fillStyle = "#98803A";
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - _0xab3734 + _0x81548d), 0x0, Math.PI * 0x2);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.45, -this.rad * 0.45 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.5, this.rad * 0.5 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.4 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.75, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.3 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          if (this.rad > 0x32) {
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0xa, 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
          }
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x11:
      {
        _0x3b8ba2.save();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
        }
        var _0x81548d = 0x0;
        var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x22a1c1 = 0x6;
        var _0x5cce7f = 1.5;
        _0x81548d = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        var _0xab3734 = 0x4;
        _0x3b8ba2.fillStyle = "#8CC3C7";
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0x2);
        _0x3b8ba2.fill();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.fillStyle = "#9DDADE";
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - _0xab3734 + _0x81548d), 0x0, Math.PI * 0x2);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.45, -this.rad * 0.45 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.5, this.rad * 0.5 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.4 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.75, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.3 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, this.specType == 0x0 ? 0x8 : 0x4, 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0xa:
      {
        _0x3b8ba2.save();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
        }
        var _0x81548d = 0x0;
        if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
          var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0x22a1c1 = 0x4;
          var _0x5cce7f = 5.5;
          _0x81548d = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        }
        var _0xab3734 = 0x4;
        _0x3b8ba2.fillStyle = "#bfaf43";
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0x2);
        _0x3b8ba2.fill();
        if (this.curBiome == 0x2) {
          _0x3b8ba2.fillStyle = "#8da0d6";
        } else {
          _0x3b8ba2.fillStyle = "#4854a2";
        }
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - _0xab3734 + _0x81548d), 0x0, Math.PI * 0x2);
        _0x3b8ba2.fill();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.45, -this.rad * 0.45 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.5, this.rad * 0.5 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.4 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.75, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.3 + _0x81548d), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, this.specType == 0x0 ? 0x8 : 0x4, 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x22:
      {
        _0x3b8ba2.save();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
        }
        var _0x81548d = 0x0;
        if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
          var _0x50273a = (_0x1f4c9e - _0x3b6cc1) / 0x3e8;
          var _0x22a1c1 = 0x5;
          var _0x5cce7f = 5.5;
          _0x81548d = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        }
        var _0xab3734 = 0x4;
        if (_0x44574d) {} else {
          _0x3b8ba2.fillStyle = "#4854a2";
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - _0xab3734 + _0x81548d), 0x0, Math.PI * 0x2);
          _0x3b8ba2.fill();
          if (!(_0x4bda0b == 0x2)) {
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
            _0x3b8ba2.beginPath();
            _0x3b8ba2.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0x0, 0x2 * Math.PI);
            _0x3b8ba2.fill();
          }
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0xc:
      {
        var _0x307c1e = 0x0;
        if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
          var _0x50273a = (_0x1f4c9e - _0x3b6cc1) / 0x3e8;
          var _0x22a1c1 = 0x5;
          var _0x5cce7f = -8.5;
          _0x307c1e = _0x5cce7f * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
        }
        var _0x9b8412 = this.x > _0x1f0c0a / 0x2 ? 0x1 : 0x0;
        if (_0x9b8412 == 0x1) {
          _0x3b8ba2.fillStyle = "#4854a2";
          _0x3b8ba2.fillRect(-this.rectW / 0x2 + _0x307c1e, -this.rectH / 0x2 + _0x307c1e + 0xa, this.rectW - _0x307c1e, this.rectH - _0x307c1e - 0xa);
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rectW / 0x2 + 0x32, -this.rectH / 0x2 + 0x32, 0x46 - _0x307c1e, 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          var _0x34f65d = 0x23;
          _0x345827(-this.rectW / 0x2 + _0x34f65d, -this.rectH / 0x2 + _0x34f65d, this.rectW / 0x2 - _0x34f65d, this.rectH / 0x2 - _0x34f65d, this.x, this.y);
        } else {
          _0x3b8ba2.fillStyle = "#4854a2";
          _0x307c1e *= -0x1;
          _0x3b8ba2.fillRect(-this.rectW / 0x2, -this.rectH / 0x2 - _0x307c1e + 0xa, this.rectW + _0x307c1e, this.rectH + _0x307c1e - 0xa);
          var _0x34f65d = 0x19;
          _0x345827(-this.rectW / 0x2 + _0x34f65d, -this.rectH / 0x2 + _0x34f65d, this.rectW / 0x2 - _0x34f65d, this.rectH / 0x2 - _0x34f65d, this.x, this.y);
        }
      }
      break;
    case 0x21:
      {
        _0x3b8ba2.fillStyle = "#bfaf43";
        var _0x2f6ff0 = -this.rectW / 0x2;
        var _0x37a137 = this.rectW / 0x2;
        var _0x4ba7ba = -this.rectH / 0x2;
        var _0x39512b = this.rectH / 0x2;
        _0x3b8ba2.beginPath();
        _0x3b8ba2.moveTo(_0x2f6ff0, _0x4ba7ba);
        var _0x846952 = 0x1e;
        var _0x4ef347 = [-0xf, 0xa, -0xa, 0xc, 0x0, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
        var _0x4d6d79 = 0x2d;
        var _0x477109 = 0x0;
        var _0x401fa2 = _0x1f0c0a - this.x;
        var _0x57ec58 = 0x0 - this.x;
        var _0x56270a = _0x578943 - this.y;
        var _0x1a7d30 = 0x0 - this.y;
        var _0x322a52;
        var _0x23bdc7 = _0x2f6ff0 - _0x846952;
        for (_0x322a52 = _0x4ba7ba; _0x322a52 < _0x39512b; _0x322a52 += _0x4d6d79) {
          _0x3b8ba2.lineTo(Math.min(_0x401fa2, Math.max(_0x57ec58, _0x23bdc7 + _0x4ef347[_0x477109])), _0x322a52);
          _0x477109 = (_0x477109 + 0x1) % _0x4ef347.length;
        }
        _0x3b8ba2.lineTo(_0x2f6ff0, _0x39512b);
        _0x322a52 = _0x39512b + _0x846952;
        for (_0x23bdc7 = _0x2f6ff0; _0x23bdc7 < _0x37a137; _0x23bdc7 += _0x4d6d79) {
          _0x3b8ba2.lineTo(_0x23bdc7, Math.min(_0x56270a, Math.max(_0x1a7d30, _0x322a52 + _0x4ef347[_0x477109])));
          _0x477109 = (_0x477109 + 0x1) % _0x4ef347.length;
        }
        _0x3b8ba2.lineTo(_0x37a137, _0x39512b);
        _0x23bdc7 = _0x37a137 + _0x846952;
        for (_0x322a52 = _0x39512b; _0x322a52 > _0x4ba7ba; _0x322a52 -= _0x4d6d79) {
          _0x3b8ba2.lineTo(Math.min(_0x401fa2, Math.max(_0x57ec58, _0x23bdc7 + _0x4ef347[_0x477109])), _0x322a52);
          _0x477109 = (_0x477109 + 0x1) % _0x4ef347.length;
        }
        _0x3b8ba2.lineTo(_0x37a137, _0x4ba7ba);
        _0x322a52 = _0x4ba7ba - _0x846952;
        for (_0x23bdc7 = _0x37a137; _0x23bdc7 > _0x2f6ff0; _0x23bdc7 -= _0x4d6d79) {
          _0x3b8ba2.lineTo(_0x23bdc7, Math.min(_0x56270a, Math.max(_0x1a7d30, _0x322a52 + _0x4ef347[_0x477109])));
          _0x477109 = (_0x477109 + 0x1) % _0x4ef347.length;
        }
        _0x3b8ba2.closePath();
        _0x3b8ba2.fill();
      }
      break;
    case 0x4f:
      {
        var _0x574524 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.fillStyle = "#c8b745";
        _0x3b8ba2.fillRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
        var _0x34f65d = 0x23;
        _0x345827(-this.rectW / 0x2 + _0x34f65d, -this.rectH / 0x2 + _0x34f65d, this.rectW / 0x2 - _0x34f65d, this.rectH / 0x2 - _0x34f65d, this.x, this.y);
        var _0x2fa15a = 0xf;
        {
          _0x3b8ba2.fillStyle = "#c8b745";
          var _0x2f6ff0 = -this.rectW / 0x2;
          var _0x37a137 = this.rectW / 0x2;
          var _0x4ba7ba = -this.rectH / 0x2 + 0x3;
          var _0x39512b = -this.rectH / 0x2 - _0x2fa15a;
          _0x3b8ba2.beginPath();
          _0x3b8ba2.moveTo(_0x2f6ff0, _0x4ba7ba);
          var _0x846952 = 0x0;
          var _0x4ef347 = [-0xf, 0x5, 0xa, 0x0, -0xa, 0x3, 0xc, 0x4, 0x0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
          var _0x4d6d79 = 0x3c;
          var _0x477109 = 0x0;
          var _0x401fa2 = _0x1f0c0a - this.x;
          var _0x57ec58 = 0x0 - this.x;
          var _0x56270a = _0x578943 - this.y;
          var _0x1a7d30 = 0x0 - this.y;
          var _0x322a52;
          var _0x23bdc7 = _0x2f6ff0 - _0x846952;
          _0x3b8ba2.lineTo(_0x2f6ff0, _0x39512b);
          _0x322a52 = _0x39512b + _0x846952;
          for (_0x23bdc7 = _0x2f6ff0; _0x23bdc7 < _0x37a137; _0x23bdc7 += _0x4d6d79) {
            _0x3b8ba2.lineTo(_0x23bdc7, Math.min(_0x56270a, Math.max(_0x1a7d30, _0x322a52 + _0x4ef347[_0x477109])));
            _0x477109 = (_0x477109 + 0x1) % _0x4ef347.length;
          }
          _0x3b8ba2.lineTo(_0x37a137, _0x39512b);
          _0x3b8ba2.lineTo(_0x37a137, _0x4ba7ba);
          _0x3b8ba2.closePath();
          _0x3b8ba2.fill();
        }
      }
      break;
    case 0x10:
      {
        var _0x574524 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.fillStyle = "#ececec";
        _0x3b8ba2.fillRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
        var _0x2f6ff0 = -this.rectW / 0x2;
        var _0x37a137 = this.rectW / 0x2;
        var _0x4ba7ba = this.rectH / 0x2 - 0x14;
        var _0x39512b = this.rectH / 0x2;
        snowLandWidth = this.rectW;
        snowLandHeight = this.rectH;
        _0x3b8ba2.beginPath();
        _0x3b8ba2.moveTo(_0x2f6ff0, _0x4ba7ba);
        var _0x846952 = 0x14;
        var _0x4ef347 = [-0xf, 0x5, 0xa, 0x0, -0xa, 0x3, 0xc, 0x4, 0x0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
        var _0x4d6d79 = 0x3c;
        var _0x477109 = 0x0;
        var _0x401fa2 = _0x1f0c0a - this.x;
        var _0x57ec58 = 0x0 - this.x;
        var _0x56270a = _0x578943 - this.y;
        var _0x1a7d30 = 0x0 - this.y;
        var _0x322a52;
        var _0x23bdc7 = _0x2f6ff0 - _0x846952;
        _0x3b8ba2.lineTo(_0x2f6ff0, _0x39512b);
        _0x322a52 = _0x39512b + _0x846952;
        for (_0x23bdc7 = _0x2f6ff0; _0x23bdc7 < _0x37a137; _0x23bdc7 += _0x4d6d79) {
          _0x3b8ba2.lineTo(_0x23bdc7, Math.min(_0x56270a, Math.max(_0x1a7d30, _0x322a52 + _0x4ef347[_0x477109])));
          _0x477109 = (_0x477109 + 0x1) % _0x4ef347.length;
        }
        _0x3b8ba2.lineTo(_0x37a137, _0x39512b);
        _0x3b8ba2.lineTo(_0x37a137, _0x4ba7ba);
        _0x3b8ba2.closePath();
        _0x3b8ba2.fill();
        var _0x34f65d = 0x14;
        _0x345827(-this.rectW / 0x2 + _0x34f65d, -this.rectH / 0x2 + _0x34f65d, this.rectW / 0x2 - _0x34f65d, this.rectH / 0x2 - _0x34f65d, this.x, this.y);
      }
      break;
    case 0x28:
      {
        var _0x574524 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.fillStyle = "#4854a2";
        _0x3b8ba2.fillRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
        var _0x2fa15a = 0xf;
        {
          _0x3b8ba2.fillStyle = "#4854a2";
          var _0x2f6ff0 = -this.rectW / 0x2;
          var _0x37a137 = this.rectW / 0x2;
          var _0x4ba7ba = -this.rectH / 0x2 + 0x3;
          var _0x39512b = -this.rectH / 0x2 - _0x2fa15a;
          _0x3b8ba2.beginPath();
          _0x3b8ba2.moveTo(_0x2f6ff0, _0x4ba7ba);
          var _0x846952 = 0x0;
          var _0x4ef347 = [-0xf, 0x5, 0xa, 0x0, -0xa, 0x3, 0xc, 0x4, 0x0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
          var _0x4d6d79 = 0x3c;
          var _0x477109 = 0x0;
          var _0x401fa2 = _0x1f0c0a - this.x;
          var _0x57ec58 = 0x0 - this.x;
          var _0x56270a = _0x578943 - this.y;
          var _0x1a7d30 = 0x0 - this.y;
          var _0x322a52;
          var _0x23bdc7 = _0x2f6ff0 - _0x846952;
          _0x3b8ba2.lineTo(_0x2f6ff0, _0x39512b);
          _0x322a52 = _0x39512b + _0x846952;
          for (_0x23bdc7 = _0x2f6ff0; _0x23bdc7 < _0x37a137; _0x23bdc7 += _0x4d6d79) {
            _0x3b8ba2.lineTo(_0x23bdc7, Math.min(_0x56270a, Math.max(_0x1a7d30, _0x322a52 + _0x4ef347[_0x477109])));
            _0x477109 = (_0x477109 + 0x1) % _0x4ef347.length;
          }
          _0x3b8ba2.lineTo(_0x37a137, _0x39512b);
          _0x3b8ba2.lineTo(_0x37a137, _0x4ba7ba);
          _0x3b8ba2.closePath();
          _0x3b8ba2.fill();
        }
        {
          _0x3b8ba2.fillStyle = "#4854a2";
          var _0x2f6ff0 = -this.rectW / 0x2;
          var _0x37a137 = this.rectW / 0x2;
          var _0x4ba7ba = this.rectH / 0x2 - 0x3;
          var _0x39512b = this.rectH / 0x2 + _0x2fa15a;
          _0x3b8ba2.beginPath();
          _0x3b8ba2.moveTo(_0x2f6ff0, _0x4ba7ba);
          var _0x846952 = 0x0;
          var _0x4ef347 = [-0xf, 0x5, 0xa, 0x0, -0xa, 0x3, 0xc, 0x4, 0x0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
          var _0x4d6d79 = 0x3c;
          var _0x477109 = 0x0;
          var _0x401fa2 = _0x1f0c0a - this.x;
          var _0x57ec58 = 0x0 - this.x;
          var _0x56270a = _0x578943 - this.y;
          var _0x1a7d30 = 0x0 - this.y;
          var _0x322a52;
          var _0x23bdc7 = _0x2f6ff0 - _0x846952;
          _0x3b8ba2.lineTo(_0x2f6ff0, _0x39512b);
          _0x322a52 = _0x39512b + _0x846952;
          for (_0x23bdc7 = _0x2f6ff0; _0x23bdc7 < _0x37a137; _0x23bdc7 += _0x4d6d79) {
            _0x3b8ba2.lineTo(_0x23bdc7, Math.min(_0x56270a, Math.max(_0x1a7d30, _0x322a52 + _0x4ef347[_0x477109])));
            _0x477109 = (_0x477109 + 0x1) % _0x4ef347.length;
          }
          _0x3b8ba2.lineTo(_0x37a137, _0x39512b);
          _0x3b8ba2.lineTo(_0x37a137, _0x4ba7ba);
          _0x3b8ba2.closePath();
          _0x3b8ba2.fill();
        }
        var _0x34f65d = 0x14;
        var _0x51d1f6 = this.getSkinImageObj("img/riverCurrent" + this.riverSpecT + ".png");
        if (_0x51d1f6) {
          var _0x137cf7 = -this.rectW / 0x2;
          for (i = 0x0; i < 0x28; i++) {
            var _0x40d6c3 = this.riverFlowSpeedX * 0.8333333333333334 * 0x3e8;
            var _0x22c9a2 = (_0x1f4c9e - this.spawnTime) % _0x40d6c3 / _0x40d6c3;
            var _0x2bf455 = _0x137cf7 + 0x64 * _0x22c9a2;
            _0x3b8ba2.drawImage(_0x51d1f6, _0x2bf455, -this.rectH / 0x2, 0x64, this.rectH);
            _0x137cf7 += 0x64;
          }
        }
      }
      break;
    case 0x1:
      {
        _0x3b8ba2.fillStyle = "#3FBA54";
        _0x3b8ba2.fillRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
        var _0x34f65d = 0x2d;
        _0x345827(-this.rectW / 0x2 + _0x34f65d, -this.rectH / 0x2 + _0x34f65d, this.rectW / 0x2 - _0x34f65d, this.rectH / 0x2 - _0x34f65d, this.x, this.y);
      }
      break;
    case 0x8:
      {
        var _0x547b94 = this.curBiome == 0x4 ? "#878053" : "#8C9688";
        if (_0x44574d) {
          _0x133658(0x0, 0x0, this.rad, this.getOutlineColor());
        } else {
          _0x133658(0x0, 0x0, this.rad - 1.5, _0x547b94);
        }
      }
      break;
    case 0xb:
      {
        if (_0x44574d) {
          _0x3b8ba2.fillStyle = "#bfaf43";
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad), 0x0, Math.PI * 0x2);
          _0x3b8ba2.fill();
        } else {
          _0x3b8ba2.fillStyle = "#E4D04C";
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-0x5 + this.rPer * 0xa, -0x5 + this.rPer * 0xa, this.rad * 0.8, 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
        }
      }
      break;
    case 0x6b:
      var _0x81548d = 0x0;
      var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
      var _0x1e4fd4 = _0x7b826(_0x50273a, 0x1, 0x5, 0x2);
      var _0x4ff2f1 = _0x7b826(_0x50273a, 0x1, 0.2, 0x2);
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0.5;
      _0x133658(0x0, 0x0, this.rad, "#ff6000");
      var _0x1bcaad = -(-0.2 + _0x1e4fd4) * (0x5a * (Math.PI / 0xb4));
      _0x3b8ba2.save();
      _0x3b8ba2.scale(0x1, 0x1 + _0x4ff2f1);
      _0x3b8ba2.globalAlpha = 0.3;
      _0x3b8ba2.rotate(_0x1bcaad);
      _0x133658(0x0, 0x0, this.rad - _0x1e4fd4, "#de9d23");
      _0x3b8ba2.restore();
      _0x3b8ba2.save();
      _0x3b8ba2.scale(0x1 + _0x4ff2f1, 0x1);
      _0x3b8ba2.globalAlpha = 0.1;
      _0x3b8ba2.rotate(_0x1bcaad);
      _0x133658(0x0, 0x0, this.rad * 0.9 - _0x1e4fd4, "yellow");
      _0x3b8ba2.restore();
      if (this.specType == 0x1) {
        _0x3b8ba2.globalAlpha = 0.5;
        _0x133658(0x0, 0x0, this.rad, "white");
      }
      _0x3b8ba2.restore();
      break;
    case 0x43:
      var _0x81548d = 0x0;
      var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
      var _0x1e4fd4 = _0x7b826(_0x50273a, 0x1, 0x5, 0x2);
      var _0x4ff2f1 = _0x7b826(_0x50273a, 0x1, 0.2, 0x2);
      _0x3b8ba2.globalAlpha = 0.5;
      _0x133658(0x0, 0x0, this.rad, "#4E66E4");
      var _0x1bcaad = -(-0.2 + _0x1e4fd4) * _0x4bb70c;
      _0x3b8ba2.save();
      _0x3b8ba2.scale(0x1, 0x1 + _0x4ff2f1);
      _0x3b8ba2.globalAlpha = 0.3;
      _0x3b8ba2.rotate(_0x1bcaad);
      _0x133658(0x0, 0x0, this.rad - _0x1e4fd4, "#2CAAC4");
      _0x3b8ba2.restore();
      _0x3b8ba2.save();
      _0x3b8ba2.scale(0x1 + _0x4ff2f1, 0x1);
      _0x3b8ba2.globalAlpha = 0.1;
      _0x3b8ba2.rotate(_0x1bcaad);
      _0x133658(0x0, 0x0, this.rad * 0.9 - _0x1e4fd4, "white");
      _0x3b8ba2.restore();
      break;
    case 0x15:
      {
        var _0xee5860 = this.curBiome == 0x2 ? "#8fa4e0" : "#4E66E4";
        if (this.specType == 0x1 && _0xfc9bc1 == _0x57279a) {
          _0x3b8ba2.save();
          _0x133658(0x0, 0x0, this.rad, "#328ca2");
          _0x3b8ba2.restore();
          _0x3b8ba2.save();
          var _0xab3734 = 1.5;
          _0x133658(0x0, 0x0, Math.max(0x0, this.rad - _0xab3734), _0xee5860);
          _0x3b8ba2.restore();
        } else {
          this.drawOutlinedCircle('', _0xee5860);
        }
      }
      break;
    case 0x6a:
    case 0x13:
      {
        var _0x51d1f6 = this.getSkinImageObj("img/snowball.png");
        if (_0x51d1f6) {
          var _0x50b5b0 = this.rad;
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x51d1f6, -_0x50b5b0, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
        } else {
          this.drawOutlinedCircle('', "white");
        }
      }
      break;
    case 0x39:
      {}
      break;
    case 0x3b:
      {
        _0x3b8ba2.save();
        _0x133658(0x0, 0x0, this.rad, !this.isEdibleOutlined() ? _0x4bb1c3(this.curBiome) : "#4AE05E");
        _0x133658(0x0, 0x0, Math.max(0x0, this.rad - 0x2), "#4E66E4");
        _0x3b8ba2.restore();
        _0x3b8ba2.save();
        var _0x22a1c1 = 1.2;
        var _0x254ac3 = 0.3;
        var _0x2d3081 = 0.7;
        var _0x17fd22 = 0.5 * (_0x2d3081 - _0x254ac3);
        _0x3b8ba2.globalAlpha *= _0x254ac3 + _0x17fd22 + _0x17fd22 * Math.sin(0x2 * Math.PI / _0x22a1c1 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
        _0x3b8ba2.globalAlpha *= this.effA_poison;
        _0x133658(0x0, 0x0, this.rad + 2.6, "#7FF600");
        _0x3b8ba2.restore();
      }
      break;
    case 0x47:
      {
        _0x3b8ba2.save();
        var _0xf83a2f = this.speciesType;
        if (this.speciesType == 0xc8) {
          _0xf83a2f = _0xf83a2f + "/" + this.speciesSubType;
        }
        var _0x33219f = "skins/volcano/phoenix/" + _0xf83a2f + "/firetornado.png";
        var _0x26cc3f = this.speciesType === 0x1 || this.speciesType === 0x2 || this.speciesType === 0xc8 ? 0x1 : this.mopeSeasonID;
        var _0x1dd884 = this.getSkinImageObjForSeason(_0x33219f, _0x26cc3f);
        if (_0x1dd884) {
          var _0x50b5b0 = this.rad;
          var _0x5e42ef = 1;
          var _0x342119 = 0x3e8 / _0x5e42ef;
          var _0x22c9a2 = (_0x1f4c9e - this.spawnTime) % _0x342119 / _0x342119;
          var _0xcdf045 = _0x22c9a2 * 0x2 * Math.PI;
          var _0x5e42ef = 0.5;
          var _0x342119 = 0x3e8 / _0x5e42ef;
          var _0x22c9a2 = (_0x1f4c9e - this.spawnTime) % _0x342119 / _0x342119;
          var _0x2f816b = _0x22c9a2 * 0x2 * Math.PI;
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(_0xcdf045);
          var _0xa23378 = _0x3b8ba2.globalAlpha;
          _0x3b8ba2.globalAlpha = 0x1 * _0xa23378;
          var _0x50273a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0x22a1c1 = 2.2;
          var _0xb18da7 = 6.5 * Math.cos(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
          var _0x21f0c2 = 6.5 * Math.sin(0x2 * Math.PI / _0x22a1c1 * _0x50273a);
          _0x3b8ba2.globalAlpha = 0x1;
          _0x3b8ba2.drawImage(_0x1dd884, -_0x50b5b0 - _0xb18da7 / 2.2, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
          _0x3b8ba2.restore();
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(_0x2f816b);
          _0x3b8ba2.drawImage(_0x1dd884, -_0x50b5b0 - _0xb18da7 / 2.2, -_0x50b5b0, 0x2 * _0x50b5b0, 0x2 * _0x50b5b0);
          _0x3b8ba2.restore();
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x12:
      {
        var _0x22a1c1 = 0x1;
        var _0x254ac3 = 0.15;
        var _0x2d3081 = 0.8;
        var _0x17fd22 = 0.5 * (_0x2d3081 - _0x254ac3);
        var _0x476170 = _0x254ac3 + _0x17fd22 + _0x17fd22 * Math.sin(0x2 * Math.PI / _0x22a1c1 * (_0x1f4c9e / 0x3e8));
        _0x3b8ba2.save();
        _0x3b8ba2.globalAlpha *= _0x476170;
        _0x133658(0x0, 0x0, Math.max(0x0, this.rad), "#F6EA65");
        _0x3b8ba2.restore();
        var _0x22a1c1 = 0x1;
        var _0x254ac3 = 0.85;
        var _0x2d3081 = 0x1;
        var _0x17fd22 = 0.5 * (_0x2d3081 - _0x254ac3);
        var _0x53a155 = _0x254ac3 + _0x17fd22 + _0x17fd22 * Math.sin(0x2 * Math.PI / _0x22a1c1 * (_0x1f4c9e / 0x3e8));
        var _0x5c38ed = Math.trunc(_0x1f4c9e / 0x12c) % 0x2;
        var _0x26cc3f = this.animalType === 0xe && (this.speciesType === 0x1 || this.speciesType === 0x2 || this.speciesType === 0x3 || this.speciesType === 0x64 || this.speciesType === 0xc8 || this.speciesType === 0xc9 || this.speciesType === 0xcc || this.speciesType === 0x3e9 || this.speciesType === 0x10f2c) ? 0x1 : this.mopeSeasonID;
        var _0x51d1f6 = this.getSkinImageObjForSeason(_0x5c38ed == 0x1 ? "img/fire.png" : "img/fire2.png", _0x26cc3f);
        if (_0x51d1f6) {
          var _0x15aed3 = this.rad * 0.3;
          var _0x435930 = this.rad * 0x2 * (0x2 + _0x53a155 * 0x2) / 0x3;
          var _0x9e3b7a = this.rad * 0x2 * _0x53a155;
          _0x3b8ba2.save();
          if (_0x51d1f6) {
            _0x3b8ba2.globalAlpha *= this.onFireEffA * _0x53a155;
            _0x3b8ba2.drawImage(_0x51d1f6, 0x0 + _0x435930 * -0.5, _0x15aed3 + _0x9e3b7a * -0.95, _0x435930, _0x9e3b7a);
          }
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x2:
      {}
      break;
    default:
      {
        if (this.isRectangle) {
          _0x3b8ba2.fillStyle = "black";
          _0x3b8ba2.fillRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
          this.drawOutlinedCircle("(make this rect obj invisible on server?)", "black");
        } else {
          this.drawOutlinedCircle("(make this obj invisible on server?)", "black");
        }
      }
      break;
  }
};
_0x472b99.prototype.beforeCustomDraw = function () {};
_0x472b99.prototype.afterCustomDraw = function () {};
_0x472b99.prototype.drawImage = function (_0x100d9c, _0x3ed6c6, _0x296281, _0x56fef3, _0x3b0498, _0x45401a) {
  if (_0x45401a !== undefined) {
    _0x3b8ba2.rotate(_0x45401a);
  }
  _0x3b8ba2.drawImage(_0x100d9c, _0x3ed6c6, _0x296281, _0x56fef3, _0x3b0498);
};
_0x472b99.prototype.drawTranslate = function () {
  _0x3b8ba2.translate(this.x, this.y);
};
_0x472b99.prototype.drawScaleEffect = function () {};
_0x472b99.prototype.setSkinPath = function () {
  var _0x1337ce = this.isEdibleOutlined() ? "e" : this.oType;
  _0x1337ce = this.getBiomeSkin(_0x1337ce);
  _0x1337ce = "gameobj/" + this.oType + this.getObjSpecies() + "/" + _0x1337ce + ".png";
  this.objSkinPath = _0x1337ce;
};
_0x472b99.prototype.draw = function (_0x16e3fd) {
  this.moveUpdF = this.moveUpdate();
  if (this.objSkinPath == null) {
    this.setSkinPath();
  }
  this.beforeCustomDraw();
  _0x3b8ba2.save();
  this.drawTranslate();
  this.drawScaleEffect();
  if (this.dead) {
    _0x3b8ba2.globalAlpha *= 0x1 - this.moveUpdF;
  } else {
    _0x3b8ba2.globalAlpha *= Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 175);
  }
  this.customDraw(_0x16e3fd);
  if (this.flag_hurt) {
    this.onHurt();
  }
  this.drawHealthBar();
  _0x3b8ba2.restore();
  this.afterCustomDraw();
};
_0x472b99.prototype.onHurt = function () {
  _0x3b8ba2.fillStyle = "rgba(255,0,0,0.3)";
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad), 0x0, Math.PI * 0x2);
  _0x3b8ba2.fill();
};
_0x472b99.prototype.drawHealthBar = function () {
  _0x3b8ba2.save();
  var _0x28da88 = _0x1f4c9e < this.hpBarTimeoutT ? 0x1 : 0x0;
  this.hpBarA += (_0x28da88 - this.hpBarA) * 0.04;
  if (this.hpBarA > 0.001) {
    this.hpPer += (this.hpPer_n - this.hpPer) * 0.1;
    var _0x8385d5 = Math.max(0x1, this.rad / 0x19);
    var _0x3ec24b = 0x14 * _0x8385d5;
    var _0x2ad6f5 = 0x5 * _0x8385d5;
    var _0x557e83 = -this.rad - 0xa * _0x8385d5;
    _0x3b8ba2.globalAlpha *= this.hpBarA;
    _0x3b8ba2.fillStyle = "rgba(0,0,0,0.35)";
    _0x3b8ba2.fillRect(0x0 - _0x3ec24b / 0x2, _0x557e83 - _0x2ad6f5 / 0x2, _0x3ec24b, _0x2ad6f5);
    _0x3b8ba2.fillStyle = "#16D729";
    _0x3b8ba2.fillRect(0x0 - _0x3ec24b / 0x2, _0x557e83 - _0x2ad6f5 / 0x2, _0x3ec24b * (this.hpPer / 0x64), _0x2ad6f5);
  }
  _0x3b8ba2.restore();
  this.drawInfectionBar();
};
_0x472b99.prototype.drawInfectionBar = function () {
  if (this.flag_underWater) {
    return;
  }
  var _0x19e6de = _0x1f4c9e < this.infectionBarTimeoutT ? 0x1 : 0x0;
  this.infectionBarA += (_0x19e6de - this.infectionBarA) * 0.04;
  if (this.infectionBarA > 0.001) {
    this.infectionPer += (this.infectionPer_n - this.infectionPer) * 0.1;
    this.drawBar("red", this.infectionBarA, this.infectionPer, 0x2, 6.5);
  }
};
_0x472b99.prototype.drawBar = function (_0x4e4003, _0x37d4d2, _0x5ca365, _0x3c120b, _0x555a7b) {
  _0x3b8ba2.save();
  var _0x4c743b = Math.max(0x1, this.rad / 0x19);
  var _0x5aed22 = 0x14 * _0x4c743b;
  barH = _0x3c120b * _0x4c743b;
  var _0x6aded7 = -this.rad - _0x555a7b * _0x4c743b;
  _0x3b8ba2.globalAlpha = 0.3;
  _0x3b8ba2.fillStyle = "rgba(0,0,0,0.35)";
  _0x3b8ba2.fillRect(0x0 - _0x5aed22 / 0x2, _0x6aded7 - barH / 0x2, _0x5aed22, barH);
  _0x3b8ba2.globalAlpha = _0x37d4d2;
  _0x3b8ba2.fillStyle = _0x4e4003;
  _0x3b8ba2.fillRect(0x0 - _0x5aed22 / 0x2, _0x6aded7 - barH / 0x2, _0x5aed22 * (_0x5ca365 / 0x64), barH);
  _0x3b8ba2.restore();
};
_0x472b99.prototype.drawChat = function () {
  if (this.chatLines.length < 0x1) {
    return;
  }
  _0x3b8ba2.save();
  _0x3b8ba2.font = "10px Arial";
  _0x3b8ba2.lineWidth = 0x1;
  _0x3b8ba2.textAlign = "center";
  _0x3b8ba2.textBaseline = "middle";
  var _0x5c4dcd = this.hpBarA > 0.01 ? -0xa : 0x0;
  var _0x16e38f = [];
  for (var _0x1e9154 = this.chatLines.length - 0x1; _0x1e9154 >= 0x0; _0x1e9154--) {
    var _0x1691a9 = this.chatLines[_0x1e9154];
    if (true && _0x1691a9.chatTxt.indexOf("#koa:") > -0x1) {
      continue;
    }
    var _0x4f06a4 = (this.chatLines.length - 0x1 - _0x1e9154) * -0xd + _0x5c4dcd;
    var _0x81c401 = _0x1f4c9e > _0x1691a9.chatFadeT ? 0x0 : 0x1;
    _0x1691a9.chatA += (_0x81c401 - _0x1691a9.chatA) * 0.1;
    _0x3b8ba2.shadowOffsetX = 0x0;
    _0x3b8ba2.shadowOffsetY = 0x0;
    if (_0x1691a9.chatA < 0.02) {
      if (_0x81c401 < 0.02) {
        _0x1691a9.chatTxt = '';
      }
      _0x16e38f.push(_0x1e9154);
      continue;
    }
    var _0x2c7ada = _0x3b8ba2.measureText(_0x1691a9.chatTxt).width;
    _0x3b8ba2.globalAlpha = 0.8 * _0x1691a9.chatA;
    _0x3b8ba2.fillStyle = _0x4bb1c3(this.curBiome);
    _0x3b8ba2.fillRect(this.x - 0x1 - _0x2c7ada / 0x2, _0x4f06a4 + this.y - this.rad - 0xa - 5 - 0x1, _0x2c7ada + 2, 12);
    _0x3b8ba2.fillStyle = "#F1C34C";
    if (!(_0x4bda0b == 0x2)) {
      _0x3b8ba2.shadowOffsetX = 0x1;
      _0x3b8ba2.shadowOffsetY = 0x1;
      _0x3b8ba2.shadowColor = "black";
    }
    _0x3b8ba2.globalAlpha = _0x1691a9.chatA;
    _0x3b8ba2.fillText(_0x1691a9.chatTxt, this.x, _0x4f06a4 + this.y - this.rad - 0xa);
  }
  for (var _0x1e9154 = 0x0; _0x1e9154 < _0x16e38f.length; _0x1e9154++) {
    this.chatLines.splice(_0x16e38f[_0x1e9154], 0x1);
  }
  _0x3b8ba2.restore();
};
_0x472b99.prototype.getOutlineColor = function () {
  if (this.alwaysPlainOutline) {
    return "#09992F";
  }
  if (this.isEdibleOutlined()) {
    return "#4AE05E";
  }
  if (this.oType == 0x2 && _0x78f47c[this.animalType - 0x1] > 0x0 && this.id != _0x2bd878) {
    return "#EF3C31";
  }
  var _0x3b34f4 = this.curBiome;
  if (this.flag_inWater) {
    _0x3b34f4 = 0x1;
  } else {
    if (this.flag_inLava) {
      return "#c64a00";
    }
  }
  return _0x4bb1c3(_0x3b34f4);
};
_0x472b99.prototype.isEdibleOutlined = function () {
  if (this.oType == 0x2) {
    return _0x33b06d[this.animalType - 0x1] > 0x0 && this.id != _0x2bd878;
  } else {
    return _0x19cb58[this.oType - 0x1] > 0x0;
  }
};
_0x472b99.prototype.gotChat = function (_0xd22568) {
  if (this.chatLines) {
    this.chatLines.push({
      "chatTxt": _0xd22568,
      "chatFadeT": _0x1f4c9e + 0xfa0,
      "chatA": 0x0
    });
    if (this.chatLines.length > 0x5) {
      this.chatLines.splice(this.chatLines.length - 0x1, 0x1);
    }
  }
};
_0x472b99.prototype.drawOutlinedCircle = function (_0x21baa6, _0x3f9be9) {
  var _0x1e8d0d = this.getOutlineColor();
  if (!(_0x4bda0b == 0x2 && _0x1e8d0d == "#09992F")) {
    _0x133658(0x0, 0x0, this.rad, _0x1e8d0d);
  }
  _0x133658(0x0, 0x0, Math.max(0x0, this.rad - 1.5), _0x3f9be9);
};
_0x472b99.prototype.drawOutlinedCircleRad = function (_0x92d4d9, _0x2ad069, _0x66d83b) {
  var _0x4a3661 = this.getOutlineColor();
  if (!(_0x4bda0b == 0x2 && _0x4a3661 == "#09992F")) {
    _0x133658(0x0, 0x0, _0x66d83b, _0x4a3661);
  }
  _0x133658(0x0, 0x0, Math.max(0x0, _0x66d83b - 1.5), _0x2ad069);
};
_0x472b99.prototype.onLerpUpdate = function (_0xb86c7e) {};
_0x472b99.prototype.moveUpdate = function () {
  var _0x5f0084 = (_0x1f4c9e - this.updateTime) / 0x3e8 / 0.175;
  _0x5f0084 = 0x0 > _0x5f0084 ? 0x0 : 0x1 < _0x5f0084 ? 0x1 : _0x5f0084;
  if ((this.dead || !this.drawMe) && _0x5f0084 >= 0x1) {
    _0x581b8a.push(this);
  }
  this.onLerpUpdate(_0x5f0084);
  this.x = _0x5f0084 * (this.nx - this.ox) + this.ox;
  this.y = _0x5f0084 * (this.ny - this.oy) + this.oy;
  this.rad += (this.nRad - this.rad) * 0.1;
  if (this.angle != undefined) {
    this.lerpAngle(_0x5f0084);
  }
  return Math.min(0x1, _0x5f0084);
};
_0x472b99.prototype.lerpAngle = function () {
  var _0x16c3d9 = this.angleDelta * 0.1;
  this.angleDelta -= _0x16c3d9;
  this.angle += _0x16c3d9;
};
_0x472b99.prototype.readCustomData_onUpdate = function (_0x1db0c8) {};
_0x472b99.prototype.readCustomData_onNewlyVisible = function (_0x3e199c) {
  if (this.oType == 0x5 || this.oType == 0x9 || this.oType == 0xd) {
    this.innerRad = _0x3e199c.readUInt16() / 0x4;
  }
};
_0x472b99.prototype.setObjTypes = function (_0x1c43f1, _0x2fe5cb) {
  this.oType = _0x1c43f1;
};
_0x472b99.prototype.clientBatchDraw = false;
_0x472b99.prototype.clientBatchDrawID = false;
_0x472b99.prototype.worldUpd_readMsgNewlyVisible = function (_0x1f4710, _0x38b261, _0x11f5aa) {
  this.setObjTypes(_0x38b261, _0x11f5aa);
  var _0x465e05 = _0x1f4710.readUInt32();
  var _0x5025d7 = _0x1f4710.readUInt32() / 0x4;
  var _0x4905b6 = _0x1f4710.readUInt16() / 0x4;
  var _0x423115 = _0x1f4710.readUInt16() / 0x4;
  this.id = _0x465e05;
  this.ox = this.x = this.nx = _0x4905b6;
  this.oy = this.y = this.ny = _0x423115;
  this.nRad = _0x5025d7;
  this.oRad = this.rad = 0x0;
  if (_0x38b261 == 0x37 || _0x38b261 == 0x2f || _0x38b261 == 0x7 || _0x38b261 == 0x11 || _0x38b261 == 0xa || _0x38b261 == 0xe || _0x38b261 == 0x3 || _0x38b261 == 0x8 || _0x38b261 == 0xf || _0x38b261 == 0xb) {
    this.animateRadOnSpawn = false;
  }
  if (!this.animateRadOnSpawn) {
    this.oRad = this.rad = _0x5025d7;
  }
  var _0x1b7bd0 = _0x1f4710.readUInt8();
  this.curBiome = _0x1b7bd0;
  if (this.oType != 0x2) {
    this.mopeSeasonID = _0x1f4710.readUInt8();
    this.animalType = _0x1f4710.readUInt16();
    this.speciesType = _0x1f4710.readUInt16();
    this.speciesSubType = _0x1f4710.readUInt16();
  }
  var _0x1edcb0 = _0x1f4710.readBitGroup();
  var _0x1c5eea = _0x1edcb0.getBool();
  var _0x43a44c = _0x1edcb0.getBool();
  var _0x7fc8b9 = _0x1edcb0.getBool();
  this.clientBatchDraw = _0x1edcb0.getBool();
  this.objGetsAngleUpdate = _0x7fc8b9;
  if (this.clientBatchDraw) {
    this.clientBatchDrawID = _0x1f4710.readUInt16();
  }
  var _0x4f5387 = null;
  if (_0x1c5eea) {
    _0x4f5387 = _0x5c52f8[_0x1f4710.readUInt32()];
  }
  if (_0x4f5387) {
    this.updateTime = _0x1f4c9e;
    this.nx = this.x;
    this.ny = this.y;
    this.ox = _0x4f5387.x;
    this.oy = _0x4f5387.y;
    this.x = _0x4f5387.x;
    this.y = _0x4f5387.y;
  }
  if (_0x43a44c) {
    this.isRectangle = true;
    this.rectW = _0x1f4710.readUInt16();
    this.rectH = _0x1f4710.readUInt16();
  } else {
    var _0x4ba846 = _0x1f4710.readUInt8() * 0x2;
    this.updateAngle(_0x4ba846);
  }
  this.readUpdatedPropertyItem(0x6, _0x1f4710);
  this.readUpdatedPropertyItem(0x7, _0x1f4710);
  this.readCustomData_onNewlyVisible(_0x1f4710);
};
_0x472b99.prototype.setRadius = function (_0x54c137) {
  this.rad = _0x54c137;
};
_0x472b99.prototype.easeAngleChanges = true;
_0x472b99.prototype.updateAngle = function (_0x411268) {
  var _0x23f26c = this.oType == 0xe ? 0xb4 : 0x5a;
  if (!this.easeAngleChanges) {
    this.angle = (_0x411268 + _0x23f26c) * (Math.PI / 0xb4);
  } else {
    var _0x3501bc = (_0x411268 + _0x23f26c) * (Math.PI / 0xb4);
    this.angleDelta = _0x4a21e4(this.angle, _0x3501bc);
    this.oAngle = this.angle;
    if (this.firstPosUpd) {
      this.oAngle = this.angle = _0x3501bc;
      this.angleDelta = 0x0;
    }
  }
};
_0x472b99.prototype.setMovedToPos = function (_0x95b2f2, _0x1ffea1) {
  this.updateTime = _0x1f4c9e;
  this.ox = this.x;
  this.oy = this.y;
  this.nx = _0x95b2f2;
  this.ny = _0x1ffea1;
};
_0x472b99.prototype.setNewRad = function (_0x247055) {
  this.oRad = this.rad;
  this.nRad = _0x247055;
};
_0x472b99.prototype.worldUpd_readMsgUpdate = function (_0x5c0d5e) {
  var _0x4ea209 = _0x5c0d5e.readBitGroup();
  this.readUpdatedFlags(_0x4ea209);
  var _0x264e7b = _0x5c0d5e.readUInt8();
  for (var _0x46624a = 0x0; _0x46624a < _0x264e7b; _0x46624a++) {
    var _0x32dae3 = _0x5c0d5e.readUInt16();
    this.readUpdatedPropertyItem(_0x32dae3, _0x5c0d5e);
  }
  this.readCustomData_onUpdate(_0x5c0d5e);
  this.firstPosUpd = false;
};
_0x472b99.prototype.readUpdatedPropertyItem = function (_0x4e2b7b, _0x264753) {
  if (_0x4e2b7b == 0x1) {
    var _0x157f2e = _0x264753.readUInt16() / 0x4;
    var _0x56f124 = _0x264753.readUInt16() / 0x4;
    this.setMovedToPos(_0x157f2e, _0x56f124);
  } else {
    if (_0x4e2b7b == 0x2) {
      var _0x2f82f3 = _0x264753.readUInt16() / 0xa;
      this.setNewRad(_0x2f82f3);
    } else {
      if (_0x4e2b7b == 0x3) {
        var _0x5df88b = _0x264753.readUInt8() * 0x2;
        this.updateAngle(_0x5df88b);
      } else {
        if (_0x4e2b7b == 0x6) {
          this.specType = _0x264753.readUInt8();
        } else {
          if (_0x4e2b7b == 0x7) {
            this.specType2 = _0x264753.readUInt8();
          } else {
            if (_0x4e2b7b == 0x4) {
              var _0x3f4251 = _0x264753.readUInt8();
              this.setHpBar(_0x3f4251);
            } else {
              if (_0x4e2b7b == 0x42) {
                this.curBiome = _0x264753.readUInt8();
              } else {
                if (_0x4e2b7b == 0x5) {} else {
                  this.readUpdatedProperty(_0x4e2b7b, _0x264753);
                }
              }
            }
          }
        }
      }
    }
  }
};
_0x472b99.prototype.readUpdatedFlags = function (_0x15113f) {
  this.flag_hurt = _0x15113f.getBool();
  this.flag_flying = _0x15113f.getBool();
};
_0x472b99.prototype.readUpdatedProperty = function (_0x5e8c55, _0x3fa80f) {};
_0x472b99.prototype.setHpBar = function (_0x1ba8db) {
  this.hpPer_n = _0x1ba8db;
  this.hpBarTimeoutT = +new Date() + 0xbb8;
};
_0x472b99.prototype.killerId = 0x0;
_0x472b99.prototype.worldUpd_readMsgRemovedObj = function (_0x5a25aa) {
  var _0x54347a = _0x5a25aa.readUInt8() > 0x0;
  this.killerId = _0x54347a ? _0x5a25aa.readUInt32() : 0x0;
  var _0x32193 = this.killerId > 0x0 ? _0x5c52f8[this.killerId] : undefined;
  this.dead = true;
  this.updateTime = _0x1f4c9e;
  if (this.oType == 0xe) {
    this.ox = this.x;
    this.oy = this.y;
    this.nx = this.x;
    this.ny = this.y;
  } else if (_0x32193) {
    this.ox = this.x;
    this.oy = this.y;
    this.oRad = this.rad;
    this.nx = _0x32193.nx;
    this.ny = _0x32193.ny;
    this.nRad = Math.min(this.rad, _0x32193.rad);
    if (_0x2bd878 == this.killerId) {
      if (this.oType == 0x2) {
        if (!_0x2d5a83) {
          _0x2add46("audio/bite.mp3", 0.05, Math.random() * 0.20000000000000007 + 0.9);
        }
      }
      if (this.oType == 0x15 || this.oType == 0x6f || this.oType == 0x43) {
        if (!_0x2d5a83) {
          _0x2add46("audio/bloop.mp3", 0.6, Math.random() * 0.20000000000000007 + 0.9);
        }
      } else if (!_0x2d5a83) {
        _0x2add46("audio/nom.mp3", 0.5);
      }
    }
    this.hp_n = 0x0;
  } else {
    this.ox = this.x;
    this.oy = this.y;
    this.oRad = this.rad;
    this.nx = this.x;
    this.ny = this.y;
    this.nRad = 0x0;
  }
  this.onRemovedFromGame();
};
_0x472b99.prototype.updateZ = function () {
  switch (this.oType) {
    case 0x6e:
    case 0x69:
    case 0x7a:
      this.z = 0xf4240;
      break;
    case 0x1:
      this.z = -0xdc;
      break;
    case 0x4f:
    case 0x10:
      this.z = -0xd2;
      break;
    case 0x2f:
    case 0x37:
      this.z = -0xd1;
      break;
    case 0x28:
      this.z = -0x9e;
      break;
    case 0x2a:
      this.z = -0x8c;
      break;
    case 0x2c:
      this.z = -0x97;
      break;
    case 0xa:
    case 0x3a:
      this.z = -0xa0;
      break;
    case 0x21:
      this.z = -0x129;
      break;
    case 0x22:
      this.z = -0x128;
      break;
    case 0xc:
      this.z = -0x9d;
      break;
    case 0x7:
      this.z = -0x9e;
      break;
    case 0x11:
      this.z = -0x9c;
      break;
    case 0x4:
      this.z = -0x9b;
      break;
    case 0xb:
      this.z = -0x9a;
      break;
    case 0xd:
      this.z = -0x96;
      break;
    case 0x9:
      this.z = -0x65;
      break;
    case 0x5:
      this.z = -0x64;
      break;
    case 0x62:
    case 0x2e:
      this.z = -0x63;
      break;
    case 0x41:
    case 0xf:
      this.z = 0x3e8;
      break;
    case 0x45:
      this.z = 0x3ea;
      break;
    case 0x8:
      this.z = 0x3ea;
      break;
    case 0x44:
    case 0x3:
      this.z = 0x3e7;
      break;
    case 0x39:
      this.z = 0x3eb;
      break;
    case 0x1b:
    case 0x1c:
    case 0x6:
      this.z = 0x3ea + this.rad;
      break;
    case 0x6b:
      this.z = 0x186af;
      break;
    case 0x43:
      this.z = 0x186af;
      break;
    case 0x1e:
    case 0x1d:
      this.z = 0x3f2 + this.rad;
      if (this.specType2 == 0x1) {
        this.z += 0x3e8;
      }
      break;
    case 0x47:
      this.z = 0x7d0 + this.rad;
      break;
    case 0x12:
    case 0x3b:
      this.z = 0x3ee;
      break;
    case 0x2:
      break;
    default:
      this.z = this.rad;
      break;
  }
};
_0x472b99.prototype.updateZ_onTree = function (_0x4e3099) {
  if (this.oType == 0x2 && this.flag_eff_isOnTree) {
    this.z = _0x4e3099 + 0x44c;
  }
};
_0x472b99.prototype.showScaleEffectToPlayer = function () {
  var _0x1cd755 = _0x5c52f8[_0x2bd878];
  if (_0x1cd755 && _0x1cd755.flag_inHidingHole && _0x1cd755.lastHidingHoleID == this.id) {
    return false;
  }
  return true;
};
_0x472b99.prototype.calculateZIndex = function () {
  this.updateZ();
  if (this.oType == 0x2) {
    if (this.flag_flying) {
      this.z = 0x186a0;
      if (this.flag_isGrabbed) {
        this.z -= this.rad;
      }
      if (this.flag_eff_aniInClaws || this.flag_usingAbility) {
        this.z += 0x3e8;
      }
    } else {
      if (this.flag_isInArena) {
        this.z = 0x2710 + this.rad;
      } else {
        this.updateZ_onTree(this.z);
        if (this.flag_eff_invincible) {
          this.z += 0x3e8;
        }
      }
    }
  } else {
    this.updateZ_onTree(this.z);
  }
};
_0x472b99.prototype.mopeSeasonID = 0x0;
_0x472b99.prototype.skinThemeID = 0x0;
_0x472b99.prototype.getSkinImageObj = function (_0x4f4d48) {
  var _0x39f68f = "./assets/s/" + this.mopeSeasonID + "/" + _0x4f4d48;
  if (this.skinThemeID > 0x0) {
    _0x39f68f = "./assets/t/" + this.skinThemeID + "/" + _0x4f4d48;
  }
  return _0x3df4ce(_0x39f68f, function (_0x2ad536) {
    console.log(_0x2ad536.src);
  });
};
_0x472b99.prototype.getSkinImageObjForSeason = function (_0x24ce39, _0x415ef1) {
  if (!_0x415ef1) {
    console.log("No season for skin: " + _0x24ce39);
  }
  var _0x177373 = "./assets/s/" + _0x415ef1 + "/" + _0x24ce39;
  if (this.skinThemeID > 0x0) {
    _0x177373 = "./assets/t/" + this.skinThemeID + "/" + _0x24ce39;
  }
  return _0x3df4ce(_0x177373, function (_0x1fd10b) {
    console.log(_0x1fd10b.src);
  });
};
_0x472b99.prototype.getObjImageObjForSeason = function (_0x56a0f1, _0x576629) {
  if (!_0x576629) {
    console.log("No season for skin: " + _0x56a0f1);
  }
  var _0x2e25ae = "./assets/s/" + _0x576629 + "/" + _0x56a0f1;
  return _0x3df4ce(_0x2e25ae, function (_0x265712) {
    console.log(_0x265712.src);
  });
};
_0x472b99.prototype.onRemovedFromGame = function () {};
function _0x472b99(_0x1a5429) {
  this.oType = _0x1a5429;
  this.rPer = Math.random() * 1 + 0x0;
  this.spawnTime = _0x1f4c9e;
  this.updateTime = _0x1f4c9e;
  this.firstPosUpd = true;
  this.chatLines = [];
  switch (this.oType) {
    case 0x14:
    case 0x1d:
    case 0x1f:
    case 0x20:
    case 0x1e:
    case 0x15:
    case 0x12:
    case 0x3b:
    case 0x39:
    case 0x16:
    case 0x18:
    case 0x17:
    case 0x5:
    case 0xd:
    case 0x9:
    case 0x1a:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x3c:
    case 0x30:
    case 0x31:
    case 0x38:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x3f:
    case 0x42:
    case 0x41:
    case 0x44:
    case 0x45:
      this.doesDrawEffectScale = true;
      break;
    default:
      break;
  }
  if (this.oType == 0x5 || this.oType == 0x9 || this.oType == 0xd || this.oType == 0x39) {
    this.drawEffectScale_Slow = true;
  }
}
window.GameObj = _0x472b99;
var _0x53abbc = _0x472b99;
_0x3de247.prototype = Object.create(_0x53abbc.prototype);
_0x3de247.prototype.constructor = _0x3de247;
function _0x3de247() {
  this.objs = [];
  this.updateZ = function () {
    if (this.objs.length > 0x0) {
      this.objs[0x0].updateZ();
      this.z = this.objs[0x0].z;
    }
  };
  this.draw = function () {
    for (var _0x46a221 = 0x0; _0x46a221 < this.objs.length; _0x46a221++) {
      var _0x6c82cc = this.objs[_0x46a221];
      _0x6c82cc.draw(true);
    }
    for (var _0x46a221 = 0x0; _0x46a221 < this.objs.length; _0x46a221++) {
      var _0x6c82cc = this.objs[_0x46a221];
      _0x6c82cc.draw(false);
    }
  };
  this.addBatchedObj = function (_0x283b05) {
    if (this.objs.length == 0x0) {
      this.oType = _0x283b05.oType;
      this.objs = [];
    }
    this.objs.push(_0x283b05);
  };
}
window.GameObjBatchDraw = _0x3de247;
var _0x2ebefb = 0x1;
var _0x5ebc28 = 0x2;
var _0x2e9b2f = 0x3;
var _0x1dbdce = 0x4;
var _0x356eb6 = 0x5;
var _0x4ddfd4 = 0x6;
var _0x25dccf = 0x7;
var _0x527d90 = 0x8;
var _0x4fa2e5 = 0x9;
var _0x54ab20 = 0xa;
var _0x4bb269 = 0xb;
var _0x3040c9 = 0xc;
var _0x49fd90 = 0xd;
var _0x578001 = 0xe;
var _0x46f565 = 0xf;
var _0x5c1699 = 0x10;
var _0x1515a4 = 0x11;
var _0x50e755 = 0x12;
var _0x4ebe0d = 0x13;
var _0x1bc4f4 = 0x14;
var _0x1473db = 0x15;
var _0xe6b188 = 0x16;
var _0x16cf7a = 0x17;
var _0x301ddb = 0x18;
var _0x3446ed = 0x19;
var _0x267cc6 = 0x1a;
var _0x5f4a90 = 0x1b;
var _0x4dd4dc = 0x1c;
var _0x1e1d71 = 0x1d;
var _0x26fb25 = 0x1e;
var _0x197269 = 0x1f;
var _0x4b1170 = 0x20;
var _0x1b70a9 = 0x21;
var _0x89ca62 = 0x22;
var _0x112e88 = 0x23;
var _0x3146b2 = 0x24;
var _0x40a896 = 0x25;
var _0x42d03d = 0x26;
var _0x517417 = 0x27;
var _0x21e8e0 = 0x28;
var _0x3d4e92 = 0x29;
var _0x3b55ee = 0x2a;
var _0x3af7d1 = 0x2b;
var _0x39640d = 0x2c;
var _0x357f05 = 0x2d;
var _0x1a6650 = 0x2e;
var _0x542f57 = 0x2f;
var _0x166f22 = 0x30;
var _0x351d94 = 0x31;
var _0x22c8fa = 0x32;
var _0x479786 = 0x33;
var _0x5b3559 = 0x34;
var _0x43c61f = 0x35;
var _0x3a6833 = 0x36;
var _0x5294bc = 0x37;
var _0x1150f3 = 0x38;
var _0x35e093 = 0x39;
var _0xd29b39 = 0x3a;
var _0x3d66e5 = 0x3b;
var _0x119c33 = 0x3c;
var _0x3db2bf = 0x3d;
var _0x25c952 = 0x3e;
var _0x4f3bf1 = 0x3f;
var _0x3c3bc1 = 0x40;
var _0x337560 = 0x41;
var _0x5002ba = 0x42;
var _0x11bfae = 0x43;
var _0x21817a = 0x44;
var _0x14ebaa = 0x45;
var _0x2fcf20 = 0x46;
var _0x23a03f = 0x47;
var _0xc3cf49 = 0x48;
var _0x30afcb = 0x49;
var _0x3c19f5 = 0x4a;
var _0x386e05 = 0x4b;
var _0x371924 = 0x4c;
var _0x45f5fa = 0x4d;
var _0x1f9f6d = 0x4e;
var _0x6025f6 = 0x4f;
var _0x147e06 = 0x50;
var _0x4b67a0 = 0x51;
var _0x33fcaa = 0x52;
var _0x33c563 = 0x53;
var _0x10db93 = 0x54;
var _0x5af123 = 0x55;
var _0x112f51 = 0x56;
var _0x1414c7 = 0x57;
var _0xd21fde = 0x58;
var _0x432bf5 = 0x59;
var _0x42fa0c = 0x5a;
var _0x1bbb89 = 0x5b;
var _0xcb2b53 = 0x5c;
var _0x5295d3 = 0x5d;
var _0x57279a = 0x5e;
var _0x2a5063 = 0x5f;
var _0x3032f7 = 0x60;
var _0x344c95 = 0x61;
var _0xcb5cf3 = 0x62;
var _0x172e43 = 0x63;
var _0x330b14 = 0x64;
var _0x356343 = 0x65;
var _0x44f00a = 0x66;
var _0x5bb5bb = 0x67;
var _0xcf58fc = 0x68;
var _0xa31c83 = 0x69;
var _0xb061ee = 0x6a;
var _0x5345cd = 0x6b;
var _0xb9b52b = 0x6c;
var _0x3dadb2 = 0x6d;
var _0x51f970 = 0x6e;
var _0x3d408f = 0x6f;
var _0xc764f6 = 0x7a;
var _0x30803e = function (_0xe1f712) {
  var _0x43e685 = {};
  switch (_0xe1f712) {
    case _0x357f05:
      _0x43e685.aniName = "Snail";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "You're a super slow snail!";
      _0x43e685.aniCol = "#fcc02b";
      _0x43e685.skinName = "snail";
      break;
    case _0x2ebefb:
      _0x43e685.aniName = "Mouse";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = '';
      _0x43e685.aniCol = "#9BA9B9";
      _0x43e685.skinName = "mouse";
      break;
    case _0x5ebc28:
      _0x43e685.aniName = "Rabbit";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to RABBIT! \nPress W to burrow a hole to hide in!";
      _0x43e685.aniCol = "#AA937E";
      _0x43e685.skinName = "rabbit";
      break;
    case _0x2e9b2f:
      _0x43e685.aniName = "Pig";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to PIG!\n Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
      _0x43e685.aniCol = "#DD6BD4";
      _0x43e685.skinName = "pig";
      break;
    case _0x1dbdce:
      _0x43e685.aniName = "Fox";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to FOX! ,\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
      _0x43e685.aniCol = "#FF9D43";
      _0x43e685.skinName = "fox";
      break;
    case _0x356eb6:
      _0x43e685.aniName = "Deer";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to DEER! \nPress W to dig up food! \nDig in mud for better food!\n Hint:Check water areas for new food sources!";
      _0x43e685.aniCol = "#C4773E";
      _0x43e685.skinName = "deer";
      break;
    case _0x4ddfd4:
      _0x43e685.aniName = "Mole";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to MOLE!\n Hold W to dig underground!\nGo under anything, do surprise attacks!";
      _0x43e685.aniCol = "#4C4A45";
      _0x43e685.skinName = "mole";
      break;
    case _0x25dccf:
      _0x43e685.aniName = "Zebra";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to ZEBRA! \nPress W to kick side ways!";
      _0x43e685.aniCol = "#FFFFFF";
      _0x43e685.skinName = "zebra";
      break;
    case _0x527d90:
      _0x43e685.aniName = "Lion";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to LION!\n Press W to release a mighty ROAR (Rawr!)!";
      _0x43e685.aniCol = "#f8c923";
      _0x43e685.skinName = "lion";
      break;
    case _0x4fa2e5:
      _0x43e685.aniName = "CHEETAH";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to CHEETAH!\n Press W to get a speed boost! (Every 8 seconds)!";
      _0x43e685.aniCol = "#CAC05B";
      _0x43e685.skinName = "bigcat/cheetah";
      break;
    case _0x54ab20:
      _0x43e685.aniName = "Bear";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to BEAR!\n Bears climb through green hills! (Press W to use your claw!)";
      _0x43e685.aniCol = "#99591C";
      _0x43e685.skinName = "bear";
      break;
    case _0x4bb269:
      _0x43e685.aniName = "Croc";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to CROCODILE!\n Press W to bite and drag around animals! \n+ (Now hide in water spots)+ Swim well in Mud, Lakes & Oceans!";
      _0x43e685.aniCol = "#30F51C";
      _0x43e685.skinName = "croc";
      break;
    case _0x49fd90:
      _0x43e685.aniName = "Hippo";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to HIPPO!\nHippos are great swimmers, dominate the Lakes/Oceans/Mud!";
      _0x43e685.aniCol = "#945A99";
      _0x43e685.skinName = "hippo";
      break;
    case _0x3040c9:
      _0x43e685.aniName = "Rhino";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to RHINO!\n Press W to CHARGE with your mighty horn!";
      _0x43e685.aniCol = "#94a3a9";
      _0x43e685.skinName = "rhino";
      break;
    case _0x46f565:
      _0x43e685.aniName = "Shrimp";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = '';
      _0x43e685.aniCol = "#f88e37";
      _0x43e685.skinName = "shrimp";
      break;
    case _0x5c1699:
      _0x43e685.aniName = "Trout";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to TROUT!\nHint: Hold Left-click to RUN! (Uses extra water)";
      _0x43e685.aniCol = "#ac8686";
      _0x43e685.skinName = "trout";
      break;
    case _0x1515a4:
      _0x43e685.aniName = "Crab";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to CRAB!\n Crabs can survive on dry land!\n (On land, Press W to go into your shell!)";
      _0x43e685.aniCol = "#bf2408";
      _0x43e685.skinName = "crab";
      break;
    case _0x50e755:
      _0x43e685.aniName = "Squid";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to SQUID!\n Squids can use INK when injured (press W!) \n+ you can hide in plankton bushes!";
      _0x43e685.aniCol = "#40dda4";
      _0x43e685.skinName = "squid";
      break;
    case _0x4ebe0d:
      _0x43e685.aniName = "Shark";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to SHARK!\n A vicious predator of the oceans!";
      _0x43e685.aniCol = "#999fc6";
      _0x43e685.skinName = "shark";
      break;
    case _0xe6b188:
      _0x43e685.aniName = "Sea-horse";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to SEA HORSE!\n An agile hunter!";
      _0x43e685.aniCol = "#73BE2F";
      _0x43e685.skinName = "seahorse";
      break;
    case _0x16cf7a:
      _0x43e685.aniName = "Jellyfish";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to JELLYFISH!\n A slowly-turning animal that can grow quite large!";
      _0x43e685.aniCol = "#FDB9BA";
      _0x43e685.skinName = "jellyfish";
      break;
    case _0x1473db:
      _0x43e685.aniName = "Turtle";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to TURTLE!\n Lives well on land & water! (On land, Press W to go into your shell!)";
      _0x43e685.aniCol = "#502E1A";
      _0x43e685.skinName = "turtle";
      break;
    case _0x1bc4f4:
      _0x43e685.aniName = "Stringray";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to STINGRAY!\n Use electic shock (Release W key!) to shock animals! \n(Takes time to recharge)";
      _0x43e685.aniCol = "#164336";
      _0x43e685.skinName = "stingray";
      break;
    case _0x301ddb:
      _0x43e685.aniName = "The Kraken";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to THE KRAKEN!\n Terrorize the oceans, and be feared by all!\n (Release W to use whirlpool ability!)";
      _0x43e685.aniCol = "#64a034";
      _0x43e685.skinName = "kraken";
      break;
    case _0x3446ed:
      _0x43e685.aniName = "Pufferfish";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to PUFFERFISH!\n (Hold W to inflate- become spiky, and dangerous to touch!)";
      _0x43e685.aniCol = "#6C5C2C";
      _0x43e685.skinName = "pufferfish";
      break;
    case _0x267cc6:
      _0x43e685.aniName = "Killer Whale";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Killer Whale! \nWhales blow out water when diving! (And sometimes other loot!)";
      _0x43e685.aniCol = "#141414";
      _0x43e685.skinName = "killerwhale";
      break;
    case _0x5f4a90:
      _0x43e685.aniName = "Swordfish";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n (Press W to rush with your sharp nose!)";
      _0x43e685.aniCol = "#689CD7";
      _0x43e685.skinName = "swordfish";
      break;
    case _0x4dd4dc:
      _0x43e685.aniName = "Gorilla";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Gorillas are very fast on hills/trees!\n Press W to throw bananas! (from trees)";
      _0x43e685.aniCol = "#323232";
      _0x43e685.skinName = "gorilla";
      break;
    case _0x1e1d71:
      _0x43e685.aniName = "Octopus";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Octopus!\nHold W to use your 'Disguise' ability!\n(Hint: wait for prey to bite you- they get stunned!)";
      _0x43e685.aniCol = "#ff8340";
      _0x43e685.skinName = "octopus";
      break;
    case _0x578001:
      _0x43e685.aniName = "Dragon";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n (You're amazing!) \nFly over everything, Hold W to shoot fire!";
      _0x43e685.aniCol = "#22FF8A";
      _0x43e685.skinName = "dragon";
      break;
    case _0x1a6650:
      _0x43e685.aniName = "Black Dragon";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Black dragons drink lava instead of water! Black dragons only heal on healing stones/lava!";
      _0x43e685.aniCol = "black";
      _0x43e685.skinName = "blackdragon";
      break;
    case _0x5b3559:
      _0x43e685.aniName = "Giant Spider";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Place web around the game to catch prey!";
      _0x43e685.aniCol = "black";
      _0x43e685.skinName = "giantSpider";
      break;
    case _0x22c8fa:
      _0x43e685.aniName = "Cobra";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Hold W to Spit venom, and poison animals with your bite!";
      _0x43e685.aniCol = "black";
      _0x43e685.skinName = "cobra";
      break;
    case _0x479786:
      _0x43e685.aniName = "Boa Constrictor";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Coil and suffocate other animals!";
      _0x43e685.aniCol = "black";
      _0x43e685.skinName = "boaConstrictor";
      break;
    case _0x43c61f:
      _0x43e685.aniName = "T-REX";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + " The Dinosaur!\n This ancient dinosaur has powerful jaws that can drag prey around!!";
      _0x43e685.aniCol = "#862A2A";
      _0x43e685.skinName = "trex";
      break;
    case _0x3a6833:
      _0x43e685.aniName = "Tiger";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Tiger!\n Tigers can launch an ambush attack (HOLD W to grow a bush) Release to attack!";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "tiger";
      break;
    case _0x5294bc:
      _0x43e685.aniName = "Giraffe";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Giraffe!\nGiraffe have huge legs and stomp anyone in their way!";
      _0x43e685.aniCol = "#E9BD23";
      _0x43e685.skinName = "giraffe";
      break;
    case _0x1150f3:
      _0x43e685.aniName = "Eagle";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Eagle!\nEagles can fly up other animals in the air! !\n";
      _0x43e685.aniCol = "#5b400d";
      _0x43e685.skinName = "eagle";
      break;
    case _0x3d4e92:
      _0x43e685.aniName = "Arctic Fox";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
      _0x43e685.aniCol = "#CFCFCF";
      _0x43e685.skinName = "arctic/arcticfox";
      break;
    case _0x197269:
      _0x43e685.aniName = "Arctic Hare";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n \nPress W to burrow a hole to hide in!";
      _0x43e685.aniCol = "#D5D5D5";
      _0x43e685.skinName = "arctic/arctichare";
      break;
    case _0x4b1170:
      _0x43e685.aniName = "The Yeti!";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n So it really exists... \n Hold W to turn into snow, release W to freeeeeze!";
      _0x43e685.aniCol = "#839eb5";
      _0x43e685.skinName = "arctic/yeti";
      break;
    case _0x1b70a9:
      _0x43e685.aniName = "Chipmunk";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = '';
      _0x43e685.aniCol = "#A77C30";
      _0x43e685.skinName = "arctic/chipmunk";
      break;
    case _0x89ca62:
      _0x43e685.aniName = "Muskox";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Press W to charge with your horns! \nPlus move decently on ice!";
      _0x43e685.aniCol = "#231f18";
      _0x43e685.skinName = "arctic/muskox";
      break;
    case _0x112e88:
      _0x43e685.aniName = "Penguin";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Left-click to run!\n (HOLD W to slide FAST on ice)!";
      _0x43e685.aniCol = "#FFFFFF";
      _0x43e685.skinName = "arctic/penguin";
      break;
    case _0x3146b2:
      _0x43e685.aniName = "Polar Bear";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Polar bears can climb hills! \n+ They're amazing swimmers!";
      _0x43e685.aniCol = "#e4e4e4";
      _0x43e685.skinName = "arctic/bear/bear";
      break;
    case _0x40a896:
      _0x43e685.aniName = "Seal";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Seals can slide on ice (Hold W) + can climb hills (rocks too!)";
      _0x43e685.aniCol = "#cfcfcf";
      _0x43e685.skinName = "arctic/seal";
      break;
    case _0x42d03d:
      _0x43e685.aniName = "Snow leopard";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Press W to get a speed boost! (Every 8 seconds)!";
      _0x43e685.aniCol = "#cfcfcf";
      _0x43e685.skinName = "arctic/snowleopard";
      break;
    case _0x517417:
      _0x43e685.aniName = "Walrus";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n You can slide on ice (Hold W) + can climb hills (rocks too!)";
      _0x43e685.aniCol = "#633838";
      _0x43e685.skinName = "arctic/walrus";
      break;
    case _0x21e8e0:
      _0x43e685.aniName = "Reindeer";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Press W to dig up food! \n Your sharp hooves let you turn very well on ice!";
      _0x43e685.aniCol = "#a68976";
      _0x43e685.skinName = "arctic/reindeer";
      break;
    case _0x26fb25:
      _0x43e685.aniName = "Wolf";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Wolf paws turn very well on ice!\n Press W to howl!";
      _0x43e685.aniCol = "#6B6B6B";
      _0x43e685.skinName = "arctic/wolf";
      break;
    case _0x3b55ee:
      _0x43e685.aniName = "Wolverine";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Press W to Let out a Powerful GROWL! (Knocks back prey!)";
      _0x43e685.aniCol = "#843A0F";
      _0x43e685.skinName = "arctic/wolverine";
      break;
    case _0x3af7d1:
      _0x43e685.aniName = "Mammoth";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Press W to roll snowballs with your trunk!\n The bigger the snowball gets, the longer the freeze!";
      _0x43e685.aniCol = "#9d4717";
      _0x43e685.skinName = "arctic/mammoth";
      break;
    case _0x39640d:
      _0x43e685.aniName = "Donkey";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Press W to Kick any animal behind you";
      _0x43e685.aniCol = "#8c7c64";
      _0x43e685.skinName = "donkey";
      break;
    case _0x542f57:
      _0x43e685.aniName = "Sabertooth Tiger";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Sabertooth Tiger!\nSabertooth Tigers are great swimmers, dominate the Lakes/Oceans/Mud!";
      _0x43e685.aniCol = "#945A99";
      _0x43e685.skinName = "sabertoothtiger";
      break;
    case _0x166f22:
      _0x43e685.aniName = "Elephant";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to " + _0x43e685.aniName + "!\n Use your long trunk to attack and eat food!";
      _0x43e685.aniCol = "#945A99";
      _0x43e685.skinName = "elephant";
      break;
    case _0x351d94:
      _0x43e685.aniName = "Blue Whale";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Blue Whale!\n Smash with your powerful tail!";
      _0x43e685.aniCol = "#945A99";
      _0x43e685.skinName = "bluewhale";
      break;
    case _0x3d66e5:
      _0x43e685.aniName = "Duckling";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to a DUCK!";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "duck/duckling";
      break;
    case _0x35e093:
      _0x43e685.aniName = "Hedgehog";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Hedgehog!\n (Hold W to become spiky, and dangerous to touch!)";
      _0x43e685.aniCol = "#5b400d";
      _0x43e685.skinName = "hedgehog";
      break;
    case _0x3db2bf:
      _0x43e685.aniName = "King Crab";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to a KING CRAB!";
      _0x43e685.aniCol = "#971f0e";
      _0x43e685.skinName = "kingcrab";
      break;
    case _0x119c33:
      _0x43e685.aniName = "Lemming";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = '';
      _0x43e685.aniCol = "#A77C30";
      _0x43e685.skinName = "arctic/lemming";
      break;
    case _0x25c952:
      _0x43e685.aniName = "Frog";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Frog!!";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "frog/frog";
      break;
    case _0x4f3bf1:
      _0x43e685.aniName = "Ostrich";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Ostrich! Lay eggs to hatch babies! \nCommand babies by placing your crosshair (right-click/W)-\n They can attack prey!";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "ostrich/ostrich";
      break;
    case _0x3c3bc1:
      _0x43e685.aniName = "Pelican";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Pelican! \nPick up water (and prey!) in your mouth,\nfly, and drop water on prey! (press W again)";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "pelican/pelican";
      break;
    case _0x337560:
      _0x43e685.aniName = "Falcon";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Falcon! \nFly, and do a powerful dive attack! Aim it well.";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "falcon/falcon";
      break;
    case _0x5002ba:
      _0x43e685.aniName = "Snowy Owl";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Snowy Owl!\n Aim the crosshair, \n right click/W when it's on top of prey, to attack!";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "snowyowl/snowyowl";
      break;
    case _0x14ebaa:
      _0x43e685.aniName = "Baby Ostrich";
      _0x43e685.aniDesc = '';
      _0x43e685.upgradeText = "UPGRADED to Baby Ostrich!!";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "ostrich/baby-ostrich";
      break;
    case _0x21817a:
      _0x43e685.aniName = "Phoenix";
      _0x43e685.upgradeText = "UPGRADED to Phoenix!\nCreate powerful fire tornados to burn your enemies alive!";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "phoenix/phoenix";
      break;
    case _0x2fcf20:
      _0x43e685.aniName = "Sea Monster";
      _0x43e685.upgradeText = "UPGRADED to Sea Monster!";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "seamonster";
      break;
    case _0x23a03f:
      _0x43e685.aniName = "Land Monster";
      _0x43e685.upgradeText = "UPGRADED to Land Monster!";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "landmonster";
      break;
    case _0xc3cf49:
      _0x43e685.aniName = "Ice Monster";
      _0x43e685.upgradeText = "UPGRADED to Ice Monster!";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "icemonster";
      break;
    case _0x30afcb:
      _0x43e685.aniName = "Dino Monster";
      _0x43e685.upgradeText = "UPGRADED to Dino Monster!";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "dinomonster";
      break;
    case _0x3c19f5:
      _0x43e685.aniName = "Pigeon";
      _0x43e685.upgradeText = "UPGRADED to Pigeon!\nHold W to fly around. ";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "pigeon/pigeon";
      break;
    case _0x386e05:
      _0x43e685.aniName = "Toucan";
      _0x43e685.upgradeText = "UPGRADED to Toucan!\nHold W to fly around. ";
      _0x43e685.aniCol = "#FF9000";
      _0x43e685.skinName = "toucan/toucan";
      break;
    default:
      _0x43e685.aniName = "(Animal)";
      _0x43e685.aniDesc = '';
      _0x43e685.aniCol = "#000000";
      _0x43e685.upgradeText = "UPGRADED!";
  }
  return _0x43e685;
};
function _0x4578ed() {}
var _0x2995b5 = _0x593a9b;
var _0x53abbc = _0x472b99;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x593a9b.prototype.abilityType = 0x0;
_0x593a9b.prototype.showHalloweenSkins = true;
_0x593a9b.prototype.updateZ = function () {
  if (this.abilityType == 0x2f || this.abilityType == 0x39 || this.abilityType == 0x3a || this.abilityType == 0x3b || this.abilityType == 0x3e || this.abilityType == 0x5f || this.abilityType == 0x52) {
    this.z = 0x186a2;
  } else {
    if (this.abilityType == 0x52 || this.abilityType == 0x3e || this.abilityType == 0x8 || this.abilityType == 0xe || this.abilityType == 0x14 || this.abilityType == 0x20 || this.abilityType == 0x1f || this.abilityType == 0x33 || this.abilityType == 0x15 || this.abilityType == 0x24 || this.abilityType == 0x21 || this.abilityType == 0x25 || this.abilityType == 0x27 || this.abilityType == 0x29 || this.abilityType == 0x2a || this.abilityType == 0x2b || this.abilityType == 0x2e || this.abilityType == 0x30) {
      this.z = 0x7d0;
    } else {
      if (this.abilityType == 0x1c) {
        this.z = 0x3ea;
      } else {
        if (this.abilityType == 0x38) {
          this.z = 0x2711;
        } else {
          if (this.abilityType == 0x37) {
            if (this.specType == 0x1) {
              this.z = 0x2711;
            } else {
              if (this.specType == 0x2) {
                this.z = 0x3f5;
              } else {
                if (this.specType == 0x3) {
                  this.z = 0x186a0;
                }
              }
            }
          } else if (this.abilityType == 0x5c) {
            this.z = 0x3f5;
          } else {
            this.z = -0x98;
          }
        }
      }
    }
  }
  if (this.abilityType == 0x5e) {
    if (this.specType == 0x2) {
      this.z = 0x2710 - this.rad;
    } else {
      this.z = 0x3e9;
    }
  }
};
_0x593a9b.prototype.customDraw = function (_0x515525) {
  switch (this.abilityType) {
    case 0x1e:
      _0x133658(0x0, 0x0, this.rad, "#7EBCC0");
      break;
    case 0x36:
    case 0x31:
      {
        break;
      }
    case 0xb:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.4 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#7EBCC0");
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        _0x3b8ba2.strokeStyle = "white";
        _0x3b8ba2.beginPath();
        _0x3b8ba2.translate(-0x5, this.rad * -0.7);
        _0x3b8ba2.moveTo(0x0, -0xa);
        _0x3b8ba2.lineTo(0x0, 0xa);
        _0x3b8ba2.moveTo(-0xa, -0xa);
        _0x3b8ba2.lineTo(0xa, 0xa);
        _0x3b8ba2.moveTo(0xa, -0xa);
        _0x3b8ba2.lineTo(-0xa, 0xa);
        _0x3b8ba2.moveTo(-0xa, 0x0);
        _0x3b8ba2.lineTo(0xa, 0x0);
        _0x3b8ba2.lineWidth = 0x3;
        _0x3b8ba2.stroke();
        _0x3b8ba2.restore();
      }
      break;
    case 0xf:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.15 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#755A2A");
        _0x3b8ba2.restore();
      }
      break;
    case 0x21:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        var _0x27fdb2 = this.getSkinImageObj("img/ability_sabertoothJawAttack.png");
        if (_0x27fdb2) {
          var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
          var _0x8bf713 = this.rad - 2.5;
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x27fdb2, 0x0, 0x0, _0x27fdb2.width * _0x338a7e, _0x27fdb2.height, -_0x8bf713, -_0x8bf713, 0x2 * _0x8bf713 * _0x338a7e, 0x2 * _0x8bf713);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0xe:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        var _0x27fdb2 = this.getSkinImageObj("img/ability_claw.png");
        if (_0x27fdb2) {
          var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
          var _0x8bf713 = this.rad - 2.5;
          _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
          _0x3b8ba2.drawImage(_0x27fdb2, 0x0, 0x0, _0x27fdb2.width * _0x338a7e, _0x27fdb2.height, -_0x8bf713, -_0x8bf713, 0x2 * _0x8bf713 * _0x338a7e, 0x2 * _0x8bf713);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x5f:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.1 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#5B7EC7");
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        var _0x49ea9d = "img";
        var _0x27fdb2 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.speciesType + "/tail.png");
        if (_0x27fdb2) {
          var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
          var _0x8bf713 = this.rad * 0.65;
          _0x3b8ba2.rotate(this.angle);
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 0x2;
          var _0x5e8617 = _0x8bf713 * 0x2 * _0x338a7e;
          var _0x410ce5 = 0.5;
          var _0x25bd40 = 1.25;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x20:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.1 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#5B7EC7");
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        var _0x49ea9d = "skins/ocean/bluewhale/" + this.speciesType;
        _0x49ea9d += "/" + this.speciesSubType;
        var _0x27fdb2 = this.getSkinImageObjForSeason(_0x49ea9d + "/ability_whaleTailHit.png", this.mopeSeasonId);
        if (_0x27fdb2) {
          var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
          var _0x8bf713 = this.rad * 0.85;
          _0x3b8ba2.rotate(this.angle);
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 0x2;
          var _0x5e8617 = _0x8bf713 * 0x2 * _0x338a7e;
          var _0x410ce5 = 0.5;
          var _0x25bd40 = 1.25;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x3e:
      {
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.save();
        var _0x3c654f = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x21e96d = 1.5;
        var _0x419033 = 0x1;
        var _0x3bfdb1 = _0x419033 * Math.sin(0x2 * Math.PI / _0x21e96d * _0x3c654f);
        var _0x230af0 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha *= 0.6 * _0x3bfdb1;
        _0x3b8ba2.rotate(this.angle);
        _0x3b8ba2.globalAlpha = 0.15 * _0x29bdc3;
        if (this.specType2 == 0x0) {
          _0x133658(0x0, 0x0, this.rad, "#96661C");
        } else {
          _0x133658(0x0, 0x0, this.rad, "#e0dfde");
        }
        _0x3b8ba2.restore();
        _0x3b8ba2.save();
        var _0x2c6779 = this.specType2 == 0x1 ? "arctic" : "land";
        var _0x3d1ac3 = "skins/" + _0x2c6779 + "/bear/" + this.speciesType + "/slash.png";
        var _0x27fdb2 = this.getSkinImageObj(_0x3d1ac3);
        if (_0x27fdb2) {
          var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
          var _0x1b95ab = Math.min(0x1, Math.max(0x0, (_0x1f4c9e - this.spawnTime) / 0x12c));
          var _0x394672 = -(-0.5 + _0x1b95ab) * _0x4bb70c;
          var _0x3f5887 = this.angle;
          _0x3b8ba2.rotate(this.angle + _0x394672 * (this.specType == 0x0 ? 0x1 : -0x1));
          var _0x8bf713 = -this.rad * 0x1;
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 0x2;
          var _0x5e8617 = _0x8bf713 * 0x2 * _0x338a7e;
          var _0x410ce5 = 0.5;
          var _0x25bd40 = 0.8;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40 + _0x8bf713, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x52:
      {
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.save();
        var _0x3c654f = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x21e96d = 1.5;
        var _0x419033 = 0x1;
        var _0x3bfdb1 = _0x419033 * Math.sin(0x2 * Math.PI / _0x21e96d * _0x3c654f);
        var _0x230af0 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha *= 0.6 * _0x3bfdb1;
        _0x3b8ba2.rotate(this.angle);
        _0x3b8ba2.globalAlpha = 0.15 * _0x29bdc3;
        if (this.specType2 == 0x0) {
          _0x133658(0x0, 0x0, this.rad, "#96661C");
        } else {
          _0x133658(0x0, 0x0, this.rad, "#e0dfde");
        }
        _0x3b8ba2.restore();
        _0x3b8ba2.save();
        var _0x49ea9d = "skins/desert/gobibear/" + this.speciesType + "/claw" + this.specType;
        var _0x27fdb2 = this.getSkinImageObj(_0x49ea9d + ".png");
        if (_0x27fdb2) {
          var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
          var _0x1b95ab = Math.min(0x1, Math.max(0x0, (_0x1f4c9e - this.spawnTime) / 0x12c));
          var _0x394672 = -(-0.5 + _0x1b95ab) * (0x5a * (Math.PI / 0xb4));
          var _0x3f5887 = this.angle;
          _0x3b8ba2.rotate(this.angle + _0x394672 * (this.specType == 0x0 ? 0x1 : -0x1));
          var _0x8bf713 = -this.rad * 0x1;
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 0x2;
          var _0x5e8617 = _0x8bf713 * 0x2 * _0x338a7e;
          var _0x410ce5 = 0.5;
          var _0x25bd40 = 0.8;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40 + _0x8bf713, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x30:
      {
        var _0x3c654f = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x39c04a = _0x7b826(_0x3c654f, 0x1, 0.1, 0x1);
        var _0x258937 = 0x0;
        var _0x21e96d = 0x2;
        var _0x419033 = 1.5;
        _0x258937 = _0x419033 * Math.sin(0x2 * Math.PI / _0x21e96d * _0x3c654f);
        for (i = 0x0; i < 0x1; i++) {
          if (this.drawRad === undefined) {
            this.drawRad = new Array();
            this.drawAngle = new Array();
          }
          if (this.drawRad[i] == undefined) {
            this.drawRad.push(_0x4421b3(0x5, 0xa) / 0xa);
            this.drawAngle.push(_0x4421b3(0x1, 0x168) * (Math.PI / 0xb4));
          }
          var _0x16e6bc = this.rad * this.drawRad[i];
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(this.drawAngle[i]);
          _0x3b8ba2.save();
          var _0x29bdc3 = _0x3b8ba2.globalAlpha;
          _0x3b8ba2.globalAlpha = 0.1 - _0x39c04a;
          _0x3b8ba2.restore();
          _0x3b8ba2.save();
          _0x3b8ba2.fillStyle = "white";
          _0x3b8ba2.globalAlpha = 0.3 - _0x39c04a;
          var _0x4e9711 = -_0x16e6bc * 0.6;
          var _0x5ccaa6 = -_0x16e6bc * 0.5 + 0xa * this.rPer;
          var _0x3f864b = Math.max(0x0, _0x16e6bc * 0.65 + _0x258937) + 0x2;
          _0x133658(_0x4e9711, _0x5ccaa6, _0x3f864b, "#654321");
          var _0x4e9711 = _0x16e6bc * 0.5;
          var _0x5ccaa6 = -_0x16e6bc * 0.5 - 0xa * this.rPer;
          var _0x3f864b = Math.max(0x0, _0x16e6bc * 0.73 - _0x258937);
          _0x133658(_0x4e9711, _0x5ccaa6, _0x3f864b, "#654321");
          var _0x4e9711 = _0x16e6bc * 0.6;
          var _0x5ccaa6 = _0x16e6bc * 0.5;
          var _0x3f864b = Math.max(0x0, _0x16e6bc * 0.78 + _0x258937);
          _0x133658(_0x4e9711, _0x5ccaa6, _0x3f864b, "#654321");
          var _0x4e9711 = -_0x16e6bc * 0.5;
          var _0x5ccaa6 = _0x16e6bc * 0.5 + 0xa * this.rPer;
          var _0x3f864b = Math.max(0x0, _0x16e6bc * 0.6 + this.rPer - _0x258937);
          _0x133658(_0x4e9711, _0x5ccaa6, _0x3f864b, "#654321");
          _0x3b8ba2.restore();
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x61:
      _0x3b8ba2.globalAlpha = 0.5;
      _0x133658(0x0, 0x0, this.rad, "red");
      break;
    case 0x2f:
      break;
    case 0x59:
      break;
    case 0x5b:
      break;
    case 0x4e:
    case 0x4b:
    case 0x4c:
    case 0x49:
    case 0x39:
    case 0x3c:
    case 0x3d:
    case 0x5d:
    case 0x58:
    case 0x5a:
      break;
    case 0x5e:
      if (this.specType == 0x2) {
        var _0x48df96 = "img/desert/flytrap/mouth/closed.png";
        var _0x27fdb2 = this.getSkinImageObj(_0x48df96);
        if (_0x27fdb2) {
          var _0x8bf713 = this.rad;
          _0x3b8ba2.save();
          _0x3b8ba2.globalAlpha = 0.9;
          _0x3b8ba2.rotate(this.angle - -0x5a * (Math.PI / 0xb4));
          _0x3b8ba2.drawImage(_0x27fdb2, -_0x8bf713, -_0x8bf713, 0x2 * _0x8bf713, 0x2 * _0x8bf713);
          _0x3b8ba2.restore();
        }
      } else {}
      break;
    case 0x53:
      if (this.specType2 == 0x1) {
        var _0x3c654f = _0x1f4c9e - this.spawnTime;
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.save();
        _0x3b8ba2.rotate(this.angle - -_0x4bb70c);
        _0x3b8ba2.globalAlpha = 0.9 * _0x29bdc3;
        if (_0x3c654f < 0xc8) {
          var _0x1cbdb3 = 0x1 + Math.trunc(_0x3c654f / 0x32);
          var _0x48df96 = "skins/desert/camel/201/spit" + this.specType + "_pop" + _0x1cbdb3 + ".png";
          var _0x27fdb2 = this.getSkinImageObjForSeason(_0x48df96, 0x1);
          if (_0x27fdb2) {
            var _0x8bf713 = this.rad;
            _0x3b8ba2.save();
            _0x3b8ba2.drawImage(_0x27fdb2, -_0x8bf713, -_0x8bf713, 0x2 * _0x8bf713, 0x2 * _0x8bf713);
            _0x3b8ba2.restore();
          }
        } else {
          var _0x48df96 = "skins/desert/camel/201/spit" + this.specType + "_pop4.png";
          var _0x27fdb2 = this.getSkinImageObjForSeason(_0x48df96, 0x1);
          if (_0x27fdb2) {
            var _0x8bf713 = this.rad;
            _0x3b8ba2.save();
            _0x3b8ba2.drawImage(_0x27fdb2, -_0x8bf713, -_0x8bf713, 0x2 * _0x8bf713, 0x2 * _0x8bf713);
            _0x3b8ba2.restore();
          }
        }
        _0x3b8ba2.restore();
      } else {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.15 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "black");
        _0x3b8ba2.restore();
      }
      break;
    case 0x3b:
      {
        this.drawEffectScale_Slow = true;
        this.doesDrawEffectScale = true;
        _0x3b8ba2.globalAlpha = 0.2;
        _0x133658(0x0, 0x0, this.rad * 0.85, "white");
        var _0x196418 = this.specType == 0x3 ? "_e" : '';
        var _0x27fdb2 = this.getSkinImageObj("img/target" + _0x196418 + ".png");
        if (_0x27fdb2) {
          var _0x8bf713 = this.rad;
          _0x3b8ba2.save();
          _0x3b8ba2.globalAlpha = 0.5;
          _0x3b8ba2.drawImage(_0x27fdb2, -_0x8bf713, -_0x8bf713, 0x2 * _0x8bf713, 0x2 * _0x8bf713);
          _0x3b8ba2.restore();
        }
        _0x3b8ba2.save();
        if (this.is1v1Target == 0x1 && this.timerTxt != null) {
          _0x3b8ba2.globalAlpha = 0x1;
          this.timerTxt.x = 0x0;
          this.timerTxt.y = 0x0;
          this.timerTxt.draw();
        } else if (this.is1v1Target == 0x2 && this.timerTxt != null) {
          _0x3b8ba2.globalAlpha = 0x1;
          this.timerTxt.x = 0x0;
          this.timerTxt.y = 0x0;
          this.timerTxt.draw();
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x3a:
      {
        _0x3b8ba2.globalAlpha = 0.5;
      }
      break;
    case 0x33:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.05 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#B32E10");
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        var _0x49ea9d = "skins/ocean/kingcrab/" + this.speciesType;
        var _0x4d7ff6 = this.speciesType === 0x1 || this.speciesType === 0x2 || this.speciesType === 0xcc ? 0x1 : 0x2;
        var _0x27fdb2 = this.getSkinImageObjForSeason(_0x49ea9d + "/ability_crabSmash" + this.specType + ".png", _0x4d7ff6);
        if (_0x27fdb2) {
          var _0x1b95ab = Math.min(0x1, Math.max(0x0, (_0x1f4c9e - this.spawnTime) / 0xc8));
          var _0x37a67c = this.specType == 0x1 ? -0x1 : 0x1;
          var _0x394672 = -(-0.2 + _0x1b95ab) * (-0x5a * _0x37a67c * (Math.PI / 0xb4));
          _0x394672 = _0x37a67c * (0.3 + _0x1b95ab) + _0x37a67c * -0x1e * (Math.PI / 0xb4);
          var _0x8bf713 = this.rad * 0.6;
          _0x3b8ba2.rotate(this.angle + _0x394672);
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 0x2 * 0.7;
          var _0x5e8617 = _0x8bf713 * 0x2;
          var _0x410ce5 = 0.75;
          var _0x25bd40 = 0.95;
          if (this.specType == 0x1) {
            _0x410ce5 = 0.25;
            _0x25bd40 = 0.95;
          }
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x1f:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.05 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#E4E7C8");
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        var _0x49ea9d = "skins/land/elephant/" + this.speciesType;
        var _0x27fdb2 = this.getSkinImageObj(_0x49ea9d + "/ability_elephantTrunkSmack.png");
        console.log(_0x49ea9d);
        if (_0x27fdb2) {
          var _0x1b95ab = Math.min(0x1, Math.max(0x0, (_0x1f4c9e - this.spawnTime) / 0x12c));
          var _0x394672 = -(-0.5 + _0x1b95ab) * _0x4bb70c;
          var _0x8bf713 = this.rad * 0.6;
          _0x3b8ba2.rotate(this.angle + _0x394672);
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 0x2 * 0.7;
          var _0x5e8617 = _0x8bf713 * 0x2;
          var _0x410ce5 = 0.75;
          var _0x25bd40 = 0.95;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x14:
      {}
      break;
    case 0x15:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.25 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#44d31f");
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        var _0x27fdb2 = this.getSkinImageObjForSeason("skins/land/croc/" + this.speciesType + "/" + this.speciesSubType + "/ability.png", this.mopeSeasonId);
        if (_0x27fdb2) {
          var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
          var _0x8bf713 = this.rad * 0.6;
          _0x3b8ba2.rotate(this.angle);
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 2.5;
          var _0x5e8617 = _0x8bf713 * 2.5 * _0x338a7e;
          var _0x410ce5 = 0.5;
          var _0x25bd40 = 0.95;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
          _0x3b8ba2.rotate(Math.PI);
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad * 0.5;
          var _0x186502 = _0x8bf713 * 2.5;
          var _0x5e8617 = _0x8bf713 * 2.5 * _0x338a7e;
          var _0x410ce5 = 0.5;
          var _0x25bd40 = 0.95;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x24:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.25 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#44d31f");
        var _0x4d7ff6 = this.speciesType === 0x1 || this.speciesType === 0x2 ? 0x1 : this.mopeSeasonID;
        var _0x49ea9d = "skins/land/boaconstrictor/" + this.speciesType;
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        var _0x27fdb2 = this.getSkinImageObjForSeason(_0x49ea9d + "/ability_boabite.png", _0x4d7ff6);
        if (_0x27fdb2) {
          var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
          var _0x8bf713 = this.rad * 0.6;
          _0x3b8ba2.rotate(this.angle);
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 2.5;
          var _0x5e8617 = _0x8bf713 * 2.5 * _0x338a7e;
          var _0x410ce5 = 0.5;
          var _0x25bd40 = 0.95;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
          _0x3b8ba2.rotate(Math.PI);
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad * 0.5;
          var _0x186502 = _0x8bf713 * 2.5;
          var _0x5e8617 = _0x8bf713 * 2.5 * _0x338a7e;
          var _0x410ce5 = 0.5;
          var _0x25bd40 = 0.95;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x28:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.1 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#755A2A");
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        var _0x49ea9d = "skins/land/";
        var _0x4d7ff6 = this.speciesType === 0xcc ? 0x1 : this.mopeSeasonID;
        var _0x27fdb2 = this.getSkinImageObjForSeason(_0x49ea9d + "/tiger/" + this.speciesType + "/ability_tigerJump.png", _0x4d7ff6);
        if (_0x27fdb2) {
          var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0x64);
          var _0x8bf713 = this.rad * 1.1;
          _0x3b8ba2.rotate(this.angle);
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 0x2;
          var _0x5e8617 = _0x8bf713 * 0x2 * _0x338a7e;
          var _0x410ce5 = 0.5;
          var _0x25bd40 = 0x1;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x29:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.05 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#44d31f");
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        var _0x3adaa2 = this.getSkinImageObj("img/ability_pounce2.png");
        var _0x4ecc5e = this.getSkinImageObj("img/ability_pounce1.png");
        if (_0x3adaa2 && _0x4ecc5e) {
          var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
          var _0x8bf713 = this.rad * 0.4;
          _0x3b8ba2.rotate(this.angle);
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 2.5;
          var _0x5e8617 = _0x8bf713 * 2.5 * _0x338a7e;
          var _0x410ce5 = 0.5;
          var _0x25bd40 = 0.95;
          _0x3b8ba2.drawImage(_0x3adaa2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
          _0x8bf713 = this.rad * 0.6;
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad * 0.5;
          var _0x186502 = _0x8bf713 * 2.5;
          var _0x5e8617 = _0x8bf713 * 2.5 * _0x338a7e;
          var _0x410ce5 = 0.5;
          var _0x25bd40 = 0.95;
          _0x3b8ba2.drawImage(_0x4ecc5e, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x27:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.05 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#E4E7C8");
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        var _0x1d35b6 = "skins/land/tiger/" + this.speciesType + "/ability_tigerSlash" + this.specType + ".png";
        var _0x27fdb2 = this.getSkinImageObj(_0x1d35b6);
        if (_0x27fdb2) {
          var _0x1b95ab = Math.min(0x1, Math.max(0x0, (_0x1f4c9e - this.spawnTime) / 0x12c));
          var _0x394672 = (this.specType == 0x1 ? 0x1 : -0x1) * (-0.6 + _0x1b95ab) * (0x5a * (Math.PI / 0xb4));
          var _0x8bf713 = this.rad * 1.2;
          _0x3b8ba2.rotate(this.angle + _0x394672);
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 0x2 * 0.7;
          var _0x5e8617 = _0x8bf713 * 0x2;
          var _0x410ce5 = 0.2;
          var _0x25bd40 = 0.5;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x2b:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        var _0x4d7ff6 = this.speciesType === 0xc9 || this.speciesType === 0x2 || this.speciesType === 0x1 || this.speciesType === 0x64 ? 0x1 : this.mopeSeasonID;
        var _0x5ef5a6 = _0x4d7ff6 === 0x1 ? '' : this.specType;
        var _0x469d82 = "skins/land/zebra/" + this.speciesType + "/kick" + _0x5ef5a6 + ".png";
        console.log(_0x469d82);
        var _0x27fdb2 = this.getSkinImageObjForSeason(_0x469d82, _0x4d7ff6);
        if (_0x27fdb2) {
          var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
          var _0x8bf713 = this.rad * 0.6;
          _0x3b8ba2.rotate(this.angle);
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 0x2;
          var _0x5e8617 = _0x8bf713 * 0x3 * _0x338a7e;
          var _0x410ce5 = 0.3;
          var _0x25bd40 = 0x1;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x2a:
      {
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.save();
        var _0x230af0 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha *= 0.6;
        _0x3b8ba2.rotate(this.angle);
        _0x3b8ba2.globalAlpha = 0.15 * _0x29bdc3;
        _0x133658(this.rad * 0.3, 0x0, this.rad * 1.02, "#E4E7C8");
        _0x133658(-this.rad * 0.3, 0x0, this.rad * 1.1400000000000001, "#E4E7C8");
        _0x3b8ba2.globalAlpha = _0x230af0;
        _0x3b8ba2.restore();
        _0x3b8ba2.save();
        let _0x2237a8 = "skins/land/giraffe/" + this.speciesType;
        if (this.speciesType == 0xca) {
          _0x2237a8 += "/" + this.speciesSubType;
        }
        _0x2237a8 += "/stomp.png";
        var _0x27fdb2 = this.getSkinImageObj(_0x2237a8);
        if (_0x27fdb2) {
          var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
          var _0x3f5887 = this.angle;
          _0x3b8ba2.rotate(_0x3f5887);
          var _0x8bf713 = -this.rad * 0x1;
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 0x3;
          var _0x5e8617 = _0x8bf713 * 0x2 * _0x338a7e;
          var _0x410ce5 = 0.5;
          var _0x25bd40 = 0.7;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40 + _0x8bf713, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x2e:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        _0x3b8ba2.rotate(this.angle);
        var _0x4d7ff6 = this.speciesType === 0x1 || this.speciesType === 0x2 || this.speciesType === 0xc9 ? 0x1 : this.mopeSeasonID;
        var _0x27fdb2 = this.getSkinImageObjForSeason("skins/ocean/shark/" + this.speciesType + "/ability.png", _0x4d7ff6);
        if (_0x27fdb2) {
          var _0x39c04a = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
          _0x3b8ba2.globalAlpha = 0.9;
          var _0x8bf713 = -this.rad * 1.75;
          var _0x4c4e0e = 0x0;
          var _0x4c0b7d = this.rad;
          var _0x186502 = _0x8bf713 * 0x2;
          var _0x5e8617 = _0x8bf713 * 0x2 * _0x39c04a;
          var _0x410ce5 = 0.5;
          var _0x25bd40 = 0.9;
          _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40 + _0x8bf713, _0x186502, _0x5e8617);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x67:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.5 * _0x29bdc3;
        var _0x8bf713 = this.rad;
        var _0x3c654f = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x21e96d = 2.2;
        var _0x2a2112 = 6.5 * Math.cos(0x2 * Math.PI / _0x21e96d * _0x3c654f);
        var _0x1ba9f5 = 6.5 * Math.sin(0x2 * Math.PI / _0x21e96d * _0x3c654f);
        _0x3b8ba2.globalAlpha = 0.3 * _0x29bdc3;
        _0x133658(0x0, 0x0, _0x8bf713, "#ff6000");
        _0x3b8ba2.globalAlpha = 0.5 * _0x29bdc3;
        _0x133658(0x0 + _0x2a2112 / 4.5 + this.rPer, 0x1 + _0x1ba9f5 / 1.5, Math.max(0x0, _0x8bf713 - 0xe), "#de9d23");
        _0x3b8ba2.restore();
      }
      break;
    case 0x38:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.5 * _0x29bdc3;
        var _0x8bf713 = this.rad;
        var _0x3c654f = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x21e96d = 2.2;
        var _0x2a2112 = 6.5 * Math.cos(0x2 * Math.PI / _0x21e96d * _0x3c654f);
        var _0x1ba9f5 = 6.5 * Math.sin(0x2 * Math.PI / _0x21e96d * _0x3c654f);
        _0x3b8ba2.globalAlpha = 0.3 * _0x29bdc3;
        _0x133658(0x0, 0x0, _0x8bf713, "#2CAAC4");
        _0x3b8ba2.globalAlpha = 0.5 * _0x29bdc3;
        _0x133658(0x0 + _0x2a2112 / 4.5 + this.rPer, 0x1 + _0x1ba9f5 / 1.5, Math.max(0x0, _0x8bf713 - 0xe), "#29A0BA");
        _0x133658(0x0 + _0x2a2112 / 1.5 - this.rPer * 0x2, _0x1ba9f5, Math.max(0x0, _0x8bf713 - 38.5 + _0x1ba9f5 / 0x5), "#2B8CAA");
        _0x133658(0x0 + _0x2a2112 / 1.5 - this.rPer * 0x2, _0x1ba9f5, Math.max(0x0, _0x8bf713 - 54.5 + _0x1ba9f5 / 0xb), "#28829E");
        _0x3b8ba2.restore();
      }
      break;
    case 0x37:
      {
        if (this.specType == 0x0 || this.specType == 0x2 || this.specType == 0x3) {
          _0x3b8ba2.save();
          _0x3b8ba2.globalAlpha = 0.3;
          var _0x27fdb2 = this.getSkinImageObj("skins/ocean/pelican/" + this.speciesType + "/ability_pelican" + '' + ".png");
          if (_0x27fdb2) {
            var _0x8bf713 = -this.rad * 1.5;
            _0x3b8ba2.rotate(this.angle);
            var _0x4c4e0e = 0x0;
            var _0x4c0b7d = this.rad;
            var _0x186502 = _0x8bf713;
            var _0x5e8617 = _0x8bf713;
            var _0x410ce5 = 0.5;
            var _0x25bd40 = 0.5;
            _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40 + _0x8bf713, _0x186502, _0x5e8617);
          }
          _0x3b8ba2.restore();
        }
        break;
      }
    case 0x25:
      {
        if (this.specType == 0x0) {
          _0x3b8ba2.save();
          var _0x29bdc3 = _0x3b8ba2.globalAlpha;
          _0x3b8ba2.globalAlpha = 0.15 * _0x29bdc3;
          _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
          var _0x27fdb2 = this.getSkinImageObjForSeason("skins/land/trex/" + this.speciesType + "/ability_trexBite.png", this.mopeSeasonID);
          if (_0x27fdb2) {
            var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
            var _0x8bf713 = this.rad * 0.6;
            _0x3b8ba2.rotate(this.angle);
            var _0x4c4e0e = 0x0;
            var _0x4c0b7d = this.rad;
            var _0x186502 = _0x8bf713 * 2.5;
            var _0x5e8617 = _0x8bf713 * 2.5 * _0x338a7e;
            var _0x410ce5 = 0.5;
            var _0x25bd40 = 0.95;
            _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
            _0x3b8ba2.rotate(Math.PI);
            var _0x4c4e0e = 0x0;
            var _0x4c0b7d = this.rad * 0.5;
            var _0x186502 = _0x8bf713 * 2.5;
            var _0x5e8617 = _0x8bf713 * 2.5 * _0x338a7e;
            var _0x410ce5 = 0.5;
            var _0x25bd40 = 0.95;
            _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x4c0b7d + _0x5e8617 * -_0x25bd40, _0x186502, _0x5e8617);
          }
          var _0x27fdb2 = this.getSkinImageObj("skins/land/trex/" + this.speciesType + "/trex-head.png", this.mopeSeasonID);
          if (_0x27fdb2) {
            var _0x338a7e = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
            var _0x8bf713 = this.rad * 1.5;
            _0x3b8ba2.rotate(0xb4 * (Math.PI / 0xb4));
            var _0x4c4e0e = 0x0;
            var _0x4c0b7d = this.rad;
            var _0x186502 = _0x8bf713 * 0x2;
            var _0x5e8617 = _0x8bf713 * 0x2 * _0x338a7e;
            var _0x410ce5 = 0.5;
            var _0x25bd40 = -1.25;
            _0x3b8ba2.drawImage(_0x27fdb2, _0x4c4e0e + _0x186502 * -_0x410ce5, _0x25bd40 * _0x8bf713, _0x186502, _0x5e8617);
          }
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x51:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.15 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#6D7471");
        _0x3b8ba2.restore();
      }
      break;
    case 0xc:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.15 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#6D7471");
        _0x3b8ba2.restore();
      }
      break;
    case 0x22:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.15 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#6D7471");
        _0x3b8ba2.restore();
      }
      break;
    case 0x23:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.15 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#f2f2f2");
        _0x3b8ba2.restore();
      }
      break;
    case 0x1c:
      {
        _0x3b8ba2.save();
        _0x3b8ba2.rotate(this.angle + 0xb4 * (Math.PI / 0xb4));
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.8 * _0x29bdc3;
        var _0x27fdb2 = this.getSkinImageObj("img/wave.png");
        if (_0x27fdb2) {
          var _0x8bf713 = this.rad;
          _0x3b8ba2.drawImage(_0x27fdb2, -_0x8bf713, -_0x8bf713, 0x2 * _0x8bf713, 0x2 * _0x8bf713);
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x12:
      {
        if (this.animalType !== undefined && this.animalType == _0x49fd90 && this.speciesType == 0xcc) {
          _0x3b8ba2.save();
          var _0x29bdc3 = _0x3b8ba2.globalAlpha;
          _0x3b8ba2.globalAlpha = 0.9 * _0x29bdc3;
          var _0x4d7ff6 = 0x1;
          var _0x27fdb2 = this.getSkinImageObjForSeason("skins/land/hippo/204/roar.png", _0x4d7ff6);
          if (_0x27fdb2) {
            var _0x8bf713 = this.rad;
            _0x3b8ba2.drawImage(_0x27fdb2, -_0x8bf713, -_0x8bf713, 0x2 * _0x8bf713, 0x2 * _0x8bf713);
          }
          _0x3b8ba2.restore();
        } else {
          _0x3b8ba2.save();
          var _0x29bdc3 = _0x3b8ba2.globalAlpha;
          _0x3b8ba2.globalAlpha = 0.2 * _0x29bdc3;
          _0x133658(0x0, 0x0, this.rad, "#746B3E");
          _0x3b8ba2.restore();
        }
      }
      break;
    case 0x3:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.5 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#62C5FF");
        _0x3b8ba2.globalAlpha = 0x1 * _0x29bdc3;
        _0x3b8ba2.strokeStyle = "#62C5FF";
        _0x3b8ba2.beginPath();
        var _0x4c66eb = this.rad * -0.7;
        var _0x38f01c = -0x5;
        _0x3b8ba2.moveTo(_0x4c66eb, _0x38f01c);
        _0x3b8ba2.lineTo(_0x4c66eb - 4, _0x38f01c + 0xa);
        _0x3b8ba2.lineTo(_0x4c66eb + 4, _0x38f01c + 7);
        _0x3b8ba2.lineTo(_0x4c66eb + 2, _0x38f01c + 20);
        _0x3b8ba2.lineWidth = 0x3;
        _0x3b8ba2.stroke();
        _0x3b8ba2.restore();
      }
      break;
    case 0x3f:
      {
        if (_0x11da90 || _0x4bda0b != 0x3) {
          var _0x152c98 = this.getSkinImageObj("img/whirlpool2.png");
          if (_0x152c98) {
            var _0x8bf713 = this.rad;
            _0x3b8ba2.save();
            _0x3b8ba2.globalAlpha = 0.5;
            _0x3b8ba2.drawImage(_0x152c98, -_0x8bf713, -_0x8bf713, 0x2 * _0x8bf713, 0x2 * _0x8bf713);
            _0x3b8ba2.restore();
          } else {
            _0x133658(0x0, 0x0, this.rad, "#2D93B0");
          }
        } else {
          _0x3b8ba2.save();
          var _0x8bf713 = Math.max(0x0, this.rad - 0x1e);
          var _0x29bdc3 = _0x3b8ba2.globalAlpha;
          var _0x3c654f = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0x21e96d = 2.2;
          var _0x2a2112 = 10.5 * Math.cos(0x2 * Math.PI / _0x21e96d * _0x3c654f);
          var _0x1ba9f5 = 6.5 * Math.sin(0x2 * Math.PI / _0x21e96d * _0x3c654f);
          _0x3b8ba2.globalAlpha = 0.05 * _0x29bdc3;
          _0x133658(0x0 + _0x2a2112 + 15 - this.rPer, 0x0 + _0x1ba9f5 + 20 - this.rPer, Math.max(0x0, _0x8bf713 - 0x6), "white");
          _0x3b8ba2.globalAlpha = 0.1 * _0x29bdc3;
          _0x133658(0x0 + _0x2a2112 + 15 - this.rPer, 0x0 + _0x1ba9f5 / 0x2 - this.rPer, Math.max(0x0, _0x8bf713 - 0x6), "#2D93B0");
          _0x3b8ba2.globalAlpha = 0.15 * _0x29bdc3;
          _0x133658(0x0 + _0x2a2112 / 1.5 - this.rPer * 0x2, _0x1ba9f5, Math.max(0x0, _0x8bf713 - 54.5 + _0x1ba9f5 / 0xb), "#28829E");
          _0x3b8ba2.restore();
          _0x3b8ba2.save();
          var _0x29bdc3 = _0x3b8ba2.globalAlpha;
          var _0x8bf713 = Math.max(0x0, this.rad - 0x1e);
          var _0x3c654f = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0x21e96d = 3.2;
          var _0x2a2112 = 0x32 * Math.cos(0x2 * Math.PI / _0x21e96d * _0x3c654f);
          var _0x1ba9f5 = 0x32 * Math.sin(0x2 * Math.PI / _0x21e96d * _0x3c654f);
          _0x3b8ba2.globalAlpha = 0.05 * _0x29bdc3;
          _0x133658(0x0, 0x0, _0x8bf713, "#2CAAC4");
          _0x3b8ba2.globalAlpha = 0.15 * _0x29bdc3;
          _0x133658(0x0 + _0x2a2112 / 0x2 - this.rPer, 0x0 + _0x1ba9f5 / 0x2 - this.rPer, Math.max(0x0, _0x8bf713 * 0.95), "#2D93B0");
          _0x3b8ba2.globalAlpha = 0.25 * _0x29bdc3;
          _0x133658(0x0 + _0x2a2112 / 4.5 + this.rPer, 0x1 + _0x1ba9f5 / 1.5, Math.max(0x0, _0x8bf713 * 0.85), "#28829E");
          _0x3b8ba2.restore();
          var _0x152c98 = this.getSkinImageObj("img/whirlpool2.png");
          if (_0x152c98) {
            var _0x8bf713 = this.rad - 0x1e;
            var _0x39bd6e = 0.08333333333333333;
            var _0x1f0c29 = 0x3e8 / _0x39bd6e;
            var _0x338a7e = (_0x1f4c9e - this.spawnTime) % _0x1f0c29 / _0x1f0c29;
            var _0x2c7540 = _0x338a7e * 0x2 * Math.PI;
            _0x39bd6e = 0.13333333333333333;
            _0x1f0c29 = 0x3e8 / _0x39bd6e;
            _0x338a7e = (_0x1f4c9e - this.spawnTime) % _0x1f0c29 / _0x1f0c29;
            rotation2 = _0x338a7e * 0x2 * Math.PI;
            _0x3b8ba2.save();
            _0x3b8ba2.rotate(_0x2c7540);
            var _0x29bdc3 = _0x3b8ba2.globalAlpha;
            _0x3b8ba2.globalAlpha = 0.1;
            var _0x3c654f = (_0x1f4c9e - this.spawnTime) / 0x3e8;
            var _0x21e96d = 2.2;
            var _0x2a2112 = 6.5 * Math.cos(0x2 * Math.PI / _0x21e96d * _0x3c654f);
            var _0x1ba9f5 = 6.5 * Math.sin(0x2 * Math.PI / _0x21e96d * _0x3c654f);
            _0x3b8ba2.globalAlpha = 0.2;
            _0x3b8ba2.drawImage(_0x152c98, -_0x8bf713 - _0x2a2112 + 13.636363636363635, -_0x8bf713, 0x2 * _0x8bf713, 0x2 * _0x8bf713);
            _0x3b8ba2.restore();
            _0x3b8ba2.save();
            _0x3b8ba2.globalAlpha = 0.1;
            _0x3b8ba2.rotate(rotation2 * 0.8);
            _0x3b8ba2.drawImage(_0x152c98, -_0x8bf713 - _0x2a2112 / 2.2, -_0x8bf713, 0x2 * _0x8bf713, 0x2 * _0x8bf713);
            _0x3b8ba2.restore();
            _0x3b8ba2.save();
            _0x3b8ba2.globalAlpha = 0.2;
            _0x3b8ba2.rotate(rotation2);
            _0x3b8ba2.drawImage(_0x152c98, -_0x8bf713 - _0x2a2112 - 9.09090909090909, -_0x8bf713, 0x2 * _0x8bf713, 0x2 * _0x8bf713);
            _0x3b8ba2.restore();
            _0x3b8ba2.save();
            _0x3b8ba2.globalAlpha = 0.2;
            _0x3b8ba2.rotate(rotation2);
            _0x3b8ba2.drawImage(_0x152c98, -_0x8bf713 - _0x2a2112 / 2.2, -_0x8bf713, 0x2 * _0x8bf713, 0x2 * _0x8bf713);
            _0x3b8ba2.restore();
            _0x3b8ba2.save();
            _0x3b8ba2.globalAlpha = 0.2;
            _0x3b8ba2.rotate(_0x2c7540);
            _0x3b8ba2.drawImage(_0x152c98, -_0x8bf713 - _0x2a2112 / 2.2, -_0x8bf713, 0x2 * _0x8bf713, 0x2 * _0x8bf713);
            _0x3b8ba2.restore();
            _0x3b8ba2.save();
            _0x3b8ba2.globalAlpha = 0.2;
            _0x3b8ba2.rotate(_0x2c7540);
            _0x3b8ba2.drawImage(_0x152c98, -_0x8bf713 - _0x2a2112 / 2.2, -_0x8bf713, 0x2 * _0x8bf713, 0x2 * _0x8bf713);
            _0x3b8ba2.restore();
          }
        }
      }
      break;
    case 0x5:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.5 * _0x29bdc3;
        var _0x8bf713 = Math.max(0x0, this.rad - 0x1e);
        var _0x3c654f = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x21e96d = 2.2;
        var _0x2a2112 = 6.5 * Math.cos(0x2 * Math.PI / _0x21e96d * _0x3c654f);
        var _0x1ba9f5 = 6.5 * Math.sin(0x2 * Math.PI / _0x21e96d * _0x3c654f);
        _0x3b8ba2.globalAlpha = 0.4 * _0x29bdc3;
        _0x133658(0x0, 0x0, _0x8bf713, "#2CAAC4");
        _0x3b8ba2.globalAlpha = 0.7 * _0x29bdc3;
        if (!(_0x4bda0b == 0x2)) {
          _0x133658(0x0 + _0x2a2112 / 0x2 - this.rPer, 0x0 + _0x1ba9f5 / 0x2 - this.rPer, Math.max(0x0, _0x8bf713 - 0x6), "#2D93B0");
        }
        _0x133658(0x0 + _0x2a2112 / 4.5 + this.rPer, 0x1 + _0x1ba9f5 / 1.5, Math.max(0x0, _0x8bf713 - 0xe), "#29A0BA");
        _0x133658(0x0 + _0x2a2112 / 1.5 - this.rPer * 0x2, _0x1ba9f5, Math.max(0x0, _0x8bf713 - 38.5 + _0x1ba9f5 / 0x5), "#2B8CAA");
        _0x133658(0x0 + _0x2a2112 / 1.5 - this.rPer * 0x2, _0x1ba9f5, Math.max(0x0, _0x8bf713 - 54.5 + _0x1ba9f5 / 0xb), "#28829E");
        _0x3b8ba2.restore();
      }
      break;
    case 0x4:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
        }
        var _0x258937 = 0x0;
        var _0x3c654f = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x21e96d = 0x6;
        var _0x419033 = 1.5;
        _0x258937 = _0x419033 * Math.sin(0x2 * Math.PI / _0x21e96d * _0x3c654f);
        _0x3b8ba2.globalAlpha = 0.7 * _0x29bdc3;
        _0x3b8ba2.fillStyle = "black";
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0x2);
        _0x3b8ba2.fill();
        if (!(_0x4bda0b == 0x2)) {
          _0x3b8ba2.fillStyle = "black";
          _0x3b8ba2.globalAlpha = 0.5 * _0x29bdc3;
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - 0x4 + _0x258937), 0x0, Math.PI * 0x2);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.45, -this.rad * 0.45 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x258937), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad * 0.5, this.rad * 0.5 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.4 + _0x258937), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x258937), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(-this.rad * 0.75, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.3 + _0x258937), 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.beginPath();
          _0x3b8ba2.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0x0, 0x2 * Math.PI);
          _0x3b8ba2.fill();
          _0x3b8ba2.beginPath();
        }
        _0x3b8ba2.restore();
      }
      break;
    case 0x16:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.25 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#9F8641");
        _0x3b8ba2.restore();
      }
      break;
    case 0x17:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.25 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "#785228");
        _0x3b8ba2.restore();
      }
      break;
    default:
      {
        _0x3b8ba2.save();
        var _0x29bdc3 = _0x3b8ba2.globalAlpha;
        _0x3b8ba2.globalAlpha = 0.15 * _0x29bdc3;
        _0x133658(0x0, 0x0, this.rad, "black");
        _0x3b8ba2.restore();
      }
      break;
  }
};
_0x593a9b.prototype.setObjTypes = function (_0x5f4d66, _0x596fec) {
  this.oType = _0x5f4d66;
  this.abilityType = _0x596fec;
};
_0x593a9b.prototype.skinThemeID = 0x0;
_0x593a9b.prototype.mopeSeasonID = 0x0;
_0x593a9b.prototype.readCustomData_onNewlyVisible = function (_0x4780f6) {
  this.specType = _0x4780f6.readUInt8();
  this.specType2 = _0x4780f6.readUInt8();
  this.skinThemeID = _0x4780f6.readUInt8();
  this.mopeSeasonID = _0x4780f6.readUInt8();
  if (this.abilityType == 0xb || this.abilityType == 0xc || this.abilityType == 0x1c || this.abilityType == 0x12 || this.abilityType == 0x17) {
    this.rad = this.oRad = 0x0;
  }
};
_0x593a9b.prototype.updateTimer = function () {
  this.timer = Math.round(this.timer);
  var _0x2847e4 = this.timer;
  this.setTimer(_0x2847e4);
};
_0x593a9b.prototype.timerTxt = null;
_0x593a9b.prototype.setTimer = function (_0x166a5f) {
  var _0x182116 = '' + _0x166a5f;
  if (null == this.timerTxt) {
    this.timerTxt = new _0x4e6b66(0x14, "#FFFFFF");
    this.timerTxt.strokeW = 0x2;
    this.timerTxt.multiLine = true;
    this.timerTxt.renderScale = 0x5;
    this.timerTxt.setText(_0x182116);
  } else {
    this.timerTxt.setFontSize(0x14);
    this.timerTxt.setText(_0x182116);
  }
};
function _0x593a9b() {
  _0x593a9b.superClass.call(this, 0xe);
  _0x593a9b.prototype.easeAngleChanges = false;
  if (this.abilityType == 0x5e) {
    this.doesDrawEffectScale = this.drawEffectScale_Slow = true;
  }
}
window.AbilityObj = _0x593a9b;
_0x2b451a.setCustomClassForGameObjType(_0x593a9b, 0xe);
var _0x2995b5 = _0x351a6a;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x351a6a.prototype.customDraw = function (_0x191af1) {
  _0x3b8ba2.save();
  var _0x3668a3 = _0x3b8ba2.globalAlpha;
  _0x3b8ba2.rotate(this.angle);
  _0x3b8ba2.globalAlpha = 0.05 * _0x3668a3;
  _0x133658(0x0, 0x0, this.rad, "#E4E7C8");
  _0x3b8ba2.globalAlpha = 0x1 * _0x3668a3;
  var _0x29c24f = "skins/land/elephant/" + this.speciesType;
  if (this.speciesType == 0x0) {
    _0x29c24f += "/" + this.speciesSubType;
  }
  var _0x57e06d = this.getSkinImageObj(_0x29c24f + "/ability_elephantTrunkSmack.png");
  if (_0x57e06d) {
    var _0x539c1b = Math.min(0x1, Math.max(0x0, (_0x1f4c9e - this.spawnTime) / 0x12c));
    var _0x113507 = -(-0.5 + _0x539c1b) * _0x4bb70c;
    var _0x54520e = this.rad * 0.6;
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(_0x113507);
    var _0x137566 = this.rad;
    var _0x57073a = _0x54520e * 0x2 * 0.7;
    var _0x47ee1b = _0x54520e * 0x2;
    _0x3b8ba2.drawImage(_0x57e06d, 0x0 + _0x57073a * -0.75, _0x137566 + _0x47ee1b * -0.95, _0x57073a, _0x47ee1b);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
function _0x351a6a() {
  _0x351a6a.superClass.call(this);
}
window.AbilityObjElephant = _0x351a6a;
_0x2b451a.setCustomClassForGameObjType(_0x351a6a, 0xe, 0x1f);
var _0x2995b5 = _0x702094;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x702094.prototype.customDraw = function (_0x480fcc) {
  var _0x5d99c6 = _0x3b8ba2.globalAlpha;
  _0x3b8ba2.save();
  var _0x2e0823 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x3a7df9 = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * _0x2e0823);
  _0x3b8ba2.globalAlpha *= 0.6 * _0x3a7df9;
  _0x3b8ba2.rotate(this.angle);
  _0x3b8ba2.globalAlpha = 0.15 * _0x5d99c6;
  if (this.specType2 == 0x0 && this.aniSpecies) {
    _0x133658(0x0, 0x0, this.rad, "#96661C");
  } else {
    _0x133658(0x0, 0x0, this.rad, "#e0dfde");
  }
  _0x3b8ba2.restore();
  _0x3b8ba2.save();
  var _0x29030a = "skins/";
  if (this.animalType === 0x24) {
    _0x29030a += "arctic/bear/" + this.aniSpecies + "/slash.png";
  } else {
    _0x29030a += "land/bear/" + this.speciesType + "/" + this.speciesSubType + "/slash.png";
  }
  var _0x31f359 = this.getSkinImageObj(_0x29030a);
  if (_0x31f359) {
    var _0x10ae41 = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
    var _0x3e8056 = Math.min(0x1, Math.max(0x0, (_0x1f4c9e - this.spawnTime) / 0x12c));
    var _0x335d20 = -(-0.5 + _0x3e8056) * _0x4bb70c;
    _0x3b8ba2.rotate(this.angle + _0x335d20 * (this.specType == 0x0 ? 0x1 : -0x1));
    var _0x421dd2 = -this.rad * 0x1;
    var _0x1c15b2 = this.rad;
    var _0x565f2b = _0x421dd2 * 0x2;
    var _0x39abde = _0x421dd2 * 0x2 * _0x10ae41;
    _0x3b8ba2.drawImage(_0x31f359, 0x0 + _0x565f2b * -0.5, _0x1c15b2 + _0x39abde * -0.8 + _0x421dd2, _0x565f2b, _0x39abde);
  }
  _0x3b8ba2.restore();
};
_0x702094.prototype.getSkinImageObj = function (_0x35a64) {
  var _0x1ff96d = this.mopeSeasonID;
  if (this.animalType === 0x24) {
    _0x1ff96d = this.speciesType === 0xc9 ? 0x1 : this.mopeSeasonID;
  }
  return this.getSkinImageObjForSeason(_0x35a64, _0x1ff96d);
};
_0x702094.prototype.readCustomData_onNewlyVisible = function (_0x574a0b) {
  _0x702094.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x574a0b);
  this.aniSpecies = _0x574a0b.readUInt8();
};
function _0x702094() {
  _0x702094.superClass.call(this);
}
window.BearSlash = _0x702094;
_0x2b451a.setCustomClassForGameObjType(_0x702094, 0xe, 0x3e);
var _0x2995b5 = _0xf4bb63;
var _0x53abbc = _0x472b99;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0xf4bb63.prototype.animalType = _0x2ebefb;
_0xf4bb63.prototype.season = 0x1;
_0xf4bb63.prototype.animalSpecies = 0x0;
_0xf4bb63.prototype.animalSubSpecies = 0x0;
_0xf4bb63.prototype.nickName = '';
_0xf4bb63.prototype.skinImgName = null;
_0xf4bb63.prototype.skinNotLoadedColor = "#75ce67";
_0xf4bb63.prototype.flag_fullAlpha = false;
_0xf4bb63.prototype.flag_lowWat = false;
_0xf4bb63.prototype.flag_tailBitten = false;
_0xf4bb63.prototype.flag_underWater = false;
_0xf4bb63.prototype.flag_eff_stunned = false;
_0xf4bb63.prototype.flag_eff_frozen = false;
_0xf4bb63.prototype.flag_eff_virusInfection = false;
_0xf4bb63.prototype.flag_usingAbility = false;
_0xf4bb63.prototype.flag_eff_invincible = false;
_0xf4bb63.prototype.flag_eff_healing = _0xf4bb63.prototype.flag_eff_poison = _0xf4bb63.prototype.flag_eff_bleeding = false;
_0xf4bb63.prototype.flag_eff_hot = false;
_0xf4bb63.prototype.flag_eff_aloeveraHealing = false;
_0xf4bb63.prototype.flag_iceSliding = false;
_0xf4bb63.prototype.underwaterA = 0x0;
0x4;
_0xf4bb63.prototype.nickNameA = 0x0;
_0xf4bb63.prototype.bleedingA = 0x0;
_0xf4bb63.prototype.stunA = 0x0;
_0xf4bb63.prototype.frozenEffA = _0xf4bb63.prototype.onFireEffA = _0xf4bb63.prototype.effA_healing = _0xf4bb63.prototype.effA_hot = 0x0;
_0xf4bb63.prototype.effA_aloeveraHealing = _0xf4bb63.prototype.effA_poison = _0xf4bb63.prototype.effA_bleeding = _0xf4bb63.prototype.effA_stunk = 0x0;
_0xf4bb63.prototype.effA_constricted = _0xf4bb63.prototype.effA_slimed = _0xf4bb63.prototype.effA_webStuck = 0x0;
_0xf4bb63.prototype.effA_speared = 0x0;
_0xf4bb63.prototype.effA_dirtStuck = 0x0;
_0xf4bb63.prototype.nameA = 0x0;
_0xf4bb63.prototype.loadedSkinImg = null;
_0xf4bb63.prototype.outlineW = null;
_0xf4bb63.prototype.teamID = 0x0;
_0xf4bb63.prototype.wins1v1 = 0x0;
_0xf4bb63.prototype.birdNoAnimationFlyWingAngle = -0.2;
_0xf4bb63.prototype.getNameSize = function () {
  return 0xa;
};
_0xf4bb63.prototype.setNick = function (_0x261347) {
  this.nickName = _0x261347;
  if (null == this.nickTXT) {
    this.nickTXT = new _0x4e6b66(this.getNameSize(), "white");
    this.nickTXT.strokeW = 1.5;
    this.nickTXT.multiLine = true;
    this.nickTXT.renderScale = 0x5;
    this.nickTXT.setText(this.nickName);
  } else {
    this.nickTXT.setFontSize(this.getNameSize());
    this.nickTXT.setText(this.nickName);
  }
};
_0xf4bb63.prototype.getOutlineColor = function () {
  var _0x227969 = this.curBiome;
  if (this.id > 0x0) {
    var _0x22213e = _0x5c52f8[_0x2bd878];
    if (this.alwaysPlainOutline) {
      return "#09992F";
    }
    var _0x170fb0 = _0x16c921 != 0x3 || _0x22213e && _0x22213e.teamID != this.teamID && this.teamID != 0x0;
    if (_0x170fb0) {
      if (this.isEdibleOutlined()) {
        return "#4AE05E";
      }
      if (_0x78f47c[this.animalType - 0x1] > 0x0 && this.id != _0x2bd878) {
        return "#EF3C31";
      }
    }
    if (this.flag_inWater) {
      _0x227969 = 0x1;
    }
    if (_0x4dfdf3 != null && this.id == _0x4dfdf3.id && !_0x11da90) {
      return "cyan";
    }
  }
  return _0x4bb1c3(_0x227969);
};
_0xf4bb63.prototype.drawEyeAtPos = function (_0x1900a1, _0x256815) {
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(_0x1900a1, _0x256815, 4.5, 0x0, Math.PI * 0x2);
  _0x3b8ba2.fillStyle = "black";
  _0x3b8ba2.fill();
  _0x3b8ba2.beginPath();
  _0x3b8ba2.fillStyle = "white";
  var _0x2fa648 = _0x1900a1 - 0x2;
  var _0xf9d7df = _0x256815 - 0x1;
  _0x3b8ba2.arc(_0x2fa648, _0xf9d7df, 0.99, 0x0, Math.PI * 0x2);
  _0x3b8ba2.fill();
};
_0xf4bb63.prototype.animalInfo = function () {
  var _0x560a47 = {};
  switch (this.animalType) {
    case _0x357f05:
      _0x560a47.aniName = "Snail";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "You're a super slow snail!";
      _0x560a47.aniCol = "#fcc02b";
      _0x560a47.skinName = "snail";
      break;
    case _0x2ebefb:
      _0x560a47.aniName = "Mouse";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "You're a tiny mouse, eat food to grow!";
      _0x560a47.aniCol = "#9BA9B9";
      _0x560a47.skinName = "mouse";
      break;
    case _0x5ebc28:
      _0x560a47.aniName = "Rabbit";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to RABBIT! \nPress W to burrow a hole to hide in!";
      _0x560a47.aniCol = "#AA937E";
      _0x560a47.skinName = "rabbit";
      break;
    case _0x2e9b2f:
      _0x560a47.aniName = "Pig";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to PIG!\n Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
      _0x560a47.aniCol = "#DD6BD4";
      _0x560a47.skinName = "pig";
      break;
    case _0x1dbdce:
      _0x560a47.aniName = "Fox";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to FOX! ,\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
      _0x560a47.aniCol = "#FF9D43";
      _0x560a47.skinName = "fox";
      break;
    case _0x356eb6:
      _0x560a47.aniName = "Deer";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to DEER! \nPress W to dig up food! \nDig in mud for better food!\n Hint:Check water areas for new food sources!";
      _0x560a47.aniCol = "#C4773E";
      _0x560a47.skinName = "deer";
      break;
    case _0x4ddfd4:
      _0x560a47.aniName = "Mole";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to MOLE!\n Hold W to dig underground!\nGo under anything, do surprise attacks!";
      _0x560a47.aniCol = "#4C4A45";
      _0x560a47.skinName = "mole";
      break;
    case _0x25dccf:
      _0x560a47.aniName = "Zebra";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to ZEBRA! \nPress W to kick side ways!";
      _0x560a47.aniCol = "#FFFFFF";
      _0x560a47.skinName = "zebra";
      break;
    case _0x527d90:
      _0x560a47.aniName = "Lion";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to LION!\n Press W to release a mighty ROAR (Rawr!)!";
      _0x560a47.aniCol = "#f8c923";
      _0x560a47.skinName = "lion";
      break;
    case _0x54ab20:
      _0x560a47.aniName = "Bear";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to BEAR!\n Bears climb through green hills! (Press W to use your claw!)";
      _0x560a47.aniCol = "#99591C";
      _0x560a47.skinName = "bear";
      break;
    case _0x4bb269:
      _0x560a47.aniName = "Croc";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to CROCODILE!\n Press W to bite and drag around animals! \n+ (Now hide in water spots)+ Swim well in Mud, Lakes & Oceans!";
      _0x560a47.aniCol = "#30F51C";
      _0x560a47.skinName = "croc";
      break;
    case _0x49fd90:
      _0x560a47.aniName = "Hippo";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to HIPPO!\nHippos are great swimmers, dominate the Lakes/Oceans/Mud!";
      _0x560a47.aniCol = "#945A99";
      _0x560a47.skinName = "hippo";
      break;
    case _0x3040c9:
      _0x560a47.aniName = "Rhino";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to RHINO!\n Press W to CHARGE with your mighty horn!";
      _0x560a47.aniCol = "#94a3a9";
      _0x560a47.skinName = "rhino";
      break;
    case _0x46f565:
      _0x560a47.aniName = "Shrimp";
      _0x560a47.aniDesc = '';
      _0x560a47.aniCol = "#f88e37";
      _0x560a47.skinName = "shrimp";
      _0x560a47.upgradeText = "You're a tiny shrimp, eat food to grow bigger!";
      break;
    case _0x5c1699:
      _0x560a47.aniName = "Trout";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to TROUT!\nHint: Hold Left-click to RUN! (Uses extra water)";
      _0x560a47.aniCol = "#ac8686";
      _0x560a47.skinName = "trout";
      break;
    case _0x1515a4:
      _0x560a47.aniName = "Crab";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to CRAB!\n Crabs can survive on dry land!\n (On land, Press W to go into your shell!)";
      _0x560a47.aniCol = "#bf2408";
      _0x560a47.skinName = "crab";
      break;
    case _0x50e755:
      _0x560a47.aniName = "Squid";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to SQUID!\n Squids can use INK when injured (press W!) \n+ you can hide in plankton bushes!";
      _0x560a47.aniCol = "#40dda4";
      _0x560a47.skinName = "squid";
      break;
    case _0x4ebe0d:
      _0x560a47.aniName = "Shark";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to SHARK!\n A vicious predator of the oceans!";
      _0x560a47.aniCol = "#999fc6";
      _0x560a47.skinName = "shark";
      break;
    case _0xe6b188:
      _0x560a47.aniName = "Sea-horse";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to SEA HORSE!\n An agile hunter!";
      _0x560a47.aniCol = "#73BE2F";
      _0x560a47.skinName = "seahorse";
      break;
    case _0x16cf7a:
      _0x560a47.aniName = "Jellyfish";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to JELLYFISH!\n A slowly-turning animal that can grow quite large!";
      _0x560a47.aniCol = "#FDB9BA";
      _0x560a47.skinName = "jellyfish";
      break;
    case _0x1473db:
      _0x560a47.aniName = "Turtle";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to TURTLE!\n Lives well on land & water! (On land, Press W to go into your shell!)";
      _0x560a47.aniCol = "#502E1A";
      _0x560a47.skinName = "turtle";
      break;
    case _0x1bc4f4:
      _0x560a47.aniName = "Stringray";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to STINGRAY!\n Use electic shock (Release W key!) to shock animals! \n(Takes time to recharge)";
      _0x560a47.aniCol = "#164336";
      _0x560a47.skinName = "stingray";
      break;
    case _0x301ddb:
      _0x560a47.aniName = "The Kraken";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to THE KRAKEN!\n Terrorize the oceans, and be feared by all!\n (Release W to use whirlpool ability!)";
      _0x560a47.aniCol = "#64a034";
      _0x560a47.skinName = "kraken";
      break;
    case _0x3446ed:
      _0x560a47.aniName = "Pufferfish";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to PUFFERFISH!\n (Hold W to inflate- become spiky, and dangerous to touch!)";
      _0x560a47.aniCol = "#6C5C2C";
      _0x560a47.skinName = "pufferfish";
      break;
    case _0x267cc6:
      _0x560a47.aniName = "Killer Whale";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to Killer Whale! \nWhales blow out water when diving! (And sometimes other loot!)";
      _0x560a47.aniCol = "#141414";
      _0x560a47.skinName = "killerwhale";
      break;
    case _0x5f4a90:
      _0x560a47.aniName = "Swordfish";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n (Press W to rush with your sharp nose!)";
      _0x560a47.aniCol = "#689CD7";
      _0x560a47.skinName = "swordfish";
      break;
    case _0x4dd4dc:
      _0x560a47.aniName = "Gorilla";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Gorillas are very fast on hills/trees!\n Press W to throw bananas! (from trees)";
      _0x560a47.aniCol = "#323232";
      _0x560a47.skinName = "gorilla";
      break;
    case _0x1e1d71:
      _0x560a47.aniName = "Octopus";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to Octopus!\nHold W to use your 'Disguise' ability!\n(Hint: wait for prey to bite you- they get stunned!)";
      _0x560a47.aniCol = "#ff8340";
      _0x560a47.skinName = "octopus";
      break;
    case _0x578001:
      _0x560a47.aniName = "Dragon";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n (You're amazing!) \nFly over everything, Hold W to shoot fire!";
      _0x560a47.aniCol = "#22FF8A";
      _0x560a47.skinName = "dragon";
      break;
    case _0x1a6650:
      _0x560a47.aniName = "Black Dragon";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Black dragons drink lava instead of water! Black dragons only heal on healing stones/lava!";
      _0x560a47.aniCol = "black";
      _0x560a47.skinName = "blackdragon";
      break;
    case _0x5b3559:
      _0x560a47.aniName = "Giant Spider";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Place web around the game to catch prey!";
      _0x560a47.aniCol = "black";
      _0x560a47.skinName = "giantSpider";
      break;
    case _0x22c8fa:
      _0x560a47.aniName = "Cobra";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Hold W to Spit venom, and poison animals with your bite!";
      _0x560a47.aniCol = "black";
      _0x560a47.skinName = "cobra";
      break;
    case _0x479786:
      _0x560a47.aniName = "Boa Constrictor";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Coil and suffocate other animals!";
      _0x560a47.aniCol = "black";
      _0x560a47.skinName = "boaConstrictor";
      break;
    case _0x43c61f:
      _0x560a47.aniName = "T-REX";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + " The Dinosaur!\n This ancient dinosaur has powerful jaws that can drag prey around!!";
      _0x560a47.aniCol = "#862A2A";
      _0x560a47.skinName = "trex";
      break;
    case _0x5294bc:
      _0x560a47.aniName = "Giraffe";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to Giraffe!\nGiraffe have huge legs and stomp anyone in their way!";
      _0x560a47.aniCol = "#E9BD23";
      _0x560a47.skinName = "giraffe";
      break;
    case _0x1150f3:
      _0x560a47.aniName = "Eagle";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to Eagle!\nEagles can fly up other animals in the air! !\n";
      _0x560a47.aniCol = "#5b400d";
      _0x560a47.skinName = "eagle";
      break;
    case _0x3d4e92:
      _0x560a47.aniName = "Arctic Fox";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
      _0x560a47.aniCol = "#CFCFCF";
      _0x560a47.skinName = "arctic/arcticfox";
      break;
    case _0x197269:
      _0x560a47.aniName = "Arctic Hare";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n \nPress W to burrow a hole to hide in!";
      _0x560a47.aniCol = "#D5D5D5";
      _0x560a47.skinName = "arctic/arctichare";
      break;
    case _0x4b1170:
      _0x560a47.aniName = "The Yeti!";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n So it really exists... \n Hold W to turn into snow, release W to freeeeeze!";
      _0x560a47.aniCol = "#839eb5";
      _0x560a47.skinName = "arctic/yeti";
      break;
    case _0x1b70a9:
      _0x560a47.aniName = "Chipmunk";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = '';
      _0x560a47.aniCol = "#A77C30";
      _0x560a47.skinName = "arctic/chipmunk";
      break;
    case _0x89ca62:
      _0x560a47.aniName = "Muskox";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Press W to charge with your horns! \nPlus move decently on ice!";
      _0x560a47.aniCol = "#231f18";
      _0x560a47.skinName = "arctic/muskox";
      break;
    case _0x112e88:
      _0x560a47.aniName = "Penguin";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Left-click to run!\n (HOLD W to slide FAST on ice)!";
      _0x560a47.aniCol = "#FFFFFF";
      _0x560a47.skinName = "arctic/penguin";
      break;
    case _0x3146b2:
      _0x560a47.aniName = "Polar Bear";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Polar bears can climb hills! \n+ They're amazing swimmers!";
      _0x560a47.aniCol = "#e4e4e4";
      _0x560a47.skinName = "arctic/bear/bear";
      break;
    case _0x40a896:
      _0x560a47.aniName = "Seal";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Seals can slide on ice (Hold W) + can climb hills (rocks too!)";
      _0x560a47.aniCol = "#cfcfcf";
      _0x560a47.skinName = "arctic/seal";
      break;
    case _0x42d03d:
      _0x560a47.aniName = "Snow leopard";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Press W to get a speed boost! (Every 8 seconds)!";
      _0x560a47.aniCol = "#cfcfcf";
      _0x560a47.skinName = "arctic/snowleopard";
      break;
    case _0x517417:
      _0x560a47.aniName = "Walrus";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n You can slide on ice (Hold W) + can climb hills (rocks too!)";
      _0x560a47.aniCol = "#633838";
      _0x560a47.skinName = "arctic/walrus";
      break;
    case _0x21e8e0:
      _0x560a47.aniName = "Reindeer";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Press W to dig up food! \n Your sharp hooves let you turn very well on ice!";
      _0x560a47.aniCol = "#a68976";
      _0x560a47.skinName = "arctic/reindeer";
      break;
    case _0x26fb25:
      _0x560a47.aniName = "Wolf";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Wolf paws turn very well on ice!\n Press W to howl!";
      _0x560a47.aniCol = "#6B6B6B";
      _0x560a47.skinName = "arctic/wolf";
      break;
    case _0x3b55ee:
      _0x560a47.aniName = "Wolverine";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Press W to Let out a Powerful GROWL! (Knocks back prey!)";
      _0x560a47.aniCol = "#843A0F";
      _0x560a47.skinName = "arctic/wolverine";
      break;
    case _0x3af7d1:
      _0x560a47.aniName = "Mammoth";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Press W to roll snowballs with your trunk!\n The bigger the snowball gets, the longer the freeze!";
      _0x560a47.aniCol = "#9d4717";
      _0x560a47.skinName = "arctic/mammoth";
      break;
    case _0x39640d:
      _0x560a47.aniName = "Donkey";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Press W to Kick any animal behind you";
      _0x560a47.aniCol = "#8c7c64";
      _0x560a47.skinName = "donkey";
      break;
    case _0x542f57:
      _0x560a47.aniName = "Sabertooth Tiger";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to Sabertooth Tiger!\nSabertooth Tigers are great swimmers, dominate the Lakes/Oceans/Mud!";
      _0x560a47.aniCol = "#945A99";
      _0x560a47.skinName = "sabertoothtiger";
      break;
    case _0x166f22:
      _0x560a47.aniName = "Elephant";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to " + _0x560a47.aniName + "!\n Use your long trunk to attack and eat food!";
      _0x560a47.aniCol = "#945A99";
      _0x560a47.skinName = "elephant";
      break;
    case _0x351d94:
      _0x560a47.aniName = "Blue Whale";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to Blue Whale!\n Smash with your powerful tail!";
      _0x560a47.aniCol = "#945A99";
      _0x560a47.skinName = "bluewhale";
      break;
    case _0x35e093:
      _0x560a47.aniName = "Hedgehog";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to Hedgehog!\n (Hold W to become spiky, and dangerous to touch!)";
      _0x560a47.aniCol = "#5b400d";
      _0x560a47.skinName = "hedgehog";
      break;
    case _0x3db2bf:
      _0x560a47.aniName = "King Crab";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to a KING CRAB!";
      _0x560a47.aniCol = "#971f0e";
      _0x560a47.skinName = "kingcrab";
      break;
    case _0x119c33:
      _0x560a47.aniName = "Lemming";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = '';
      _0x560a47.aniCol = "#A77C30";
      _0x560a47.skinName = "arctic/lemming";
      break;
    case _0x25c952:
      _0x560a47.aniName = "Frog";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to Frog!!";
      _0x560a47.aniCol = "#FF9000";
      _0x560a47.skinName = "frog/frog";
      break;
    case _0x4f3bf1:
      _0x560a47.aniName = "Ostrich";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to Ostrich! Lay eggs to hatch babies! \nCommand babies by placing your crosshair (right-click/W)-\n They can attack prey!";
      _0x560a47.aniCol = "#FF9000";
      _0x560a47.skinName = "ostrich/ostrich";
      break;
    case _0x3c3bc1:
      _0x560a47.aniName = "Pelican";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to Pelican! \nPick up water (and prey!) in your mouth,\nfly, and drop water on prey! (press W again)";
      _0x560a47.aniCol = "#FF9000";
      _0x560a47.skinName = "pelican/pelican";
      break;
    case _0x337560:
      _0x560a47.aniName = "Falcon";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to Falcon! \nFly, and do a powerful dive attack! Aim it well.";
      _0x560a47.aniCol = "#FF9000";
      _0x560a47.skinName = "falcon/falcon";
      break;
    case _0x5002ba:
      _0x560a47.aniName = "Snowy Owl";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to Snowy Owl!\n Aim the crosshair, \n right click/W when it's on top of prey, to attack!";
      _0x560a47.aniCol = "#FF9000";
      _0x560a47.skinName = "snowyowl/snowyowl";
      break;
    case _0x14ebaa:
      _0x560a47.aniName = "Baby Ostrich";
      _0x560a47.aniDesc = '';
      _0x560a47.upgradeText = "UPGRADED to Baby Ostrich!!";
      _0x560a47.aniCol = "#FF9000";
      _0x560a47.skinName = "ostrich/ostrich-baby";
      break;
    case _0x21817a:
      _0x560a47.aniName = "Phoenix";
      _0x560a47.upgradeText = "UPGRADED to Phoenix!\nCreate powerful fire tornados to burn your enemies alive!";
      _0x560a47.aniCol = "#FF9000";
      _0x560a47.skinName = "phoenix/phoenix";
      break;
    case _0x2fcf20:
      _0x560a47.aniName = "Sea Monster";
      _0x560a47.upgradeText = "UPGRADED to Sea Monster!";
      _0x560a47.aniCol = "#FF9000";
      _0x560a47.skinName = "seamonster";
      break;
    case _0x23a03f:
      _0x560a47.aniName = "Land Monster";
      _0x560a47.upgradeText = "UPGRADED to Land Monster!";
      _0x560a47.aniCol = "#FF9000";
      _0x560a47.skinName = "landmonster";
      break;
    case _0xc3cf49:
      _0x560a47.aniName = "Ice Monster";
      _0x560a47.upgradeText = "UPGRADED to Ice Monster!";
      _0x560a47.aniCol = "#FF9000";
      _0x560a47.skinName = "icemonster";
      break;
    case _0x30afcb:
      _0x560a47.aniName = "Dino Monster";
      _0x560a47.upgradeText = "UPGRADED to Dino Monster!";
      _0x560a47.aniCol = "#FF9000";
      _0x560a47.skinName = "dinomonster";
      break;
    case _0x3c19f5:
      _0x560a47.aniName = "Pigeon";
      _0x560a47.upgradeText = "UPGRADED to Pigeon!\nHold right click (or W) to fly!\n";
      _0x560a47.aniCol = "#FF9000";
      _0x560a47.skinName = "pigeon/pigeon";
      break;
    case _0x386e05:
      _0x560a47.aniName = "Toucan";
      _0x560a47.upgradeText = "UPGRADED to Toucan!\nHold right click (or W) to fly!(HINT: Start flying from a fruit tree or bush to throw fruit upon landing!)";
      _0x560a47.aniCol = "#FF9000";
      _0x560a47.skinName = "toucan/toucan";
      break;
    default:
      _0x560a47.aniName = "(Animal)";
      _0x560a47.aniDesc = '';
      _0x560a47.aniCol = "#000000";
      _0x560a47.upgradeText = "UPGRADED!";
  }
  return _0x560a47;
};
_0xf4bb63.prototype.loadAnimalSkinImg = function () {
  var _0x261ba0 = this.getSkinName();
  this.loadedSkinImg = null;
  if (_0x261ba0 && !_0x19056f) {
    this.loadedSkinImg = this.getSkinImageObj("skins/" + _0x261ba0 + ".png");
  }
};
_0xf4bb63.prototype.loadAnimalSkinImgAsync = async function () {
  var _0x218b96 = this.getSkinName();
  this.loadedSkinImg = await this.getSkinImageObjAsync("skins/" + _0x218b96 + ".png");
};
_0xf4bb63.prototype.getIdealOpacity = function () {
  return this.flag_usingDiveAbility || this.flag_usingAbility && (this.animalType == _0x4ddfd4 || this.animalType == _0x1e1d71 || this.animalType == _0x4b1170) ? 0x0 : 0x1;
};
_0xf4bb63.prototype.isAnimalInside1v1Arena = function () {
  if (_0x48844a != null && _0x11da90) {
    if (_0x48844a.p1ID == this.id || _0x48844a.p2ID == this.id) {
      return true;
    }
  } else {
    if (_0x49ef61[this.id] || _0x49ef61[_0x2bd878] && _0x2bd878 == this.id) {
      return true;
    }
  }
  return false;
};
_0xf4bb63.prototype.setStealth = function () {
  if (this.isAnimalInside1v1Arena() || this.flag_isInArena) {
    this.idealOp = 0.6;
  } else if (this.flag_stealth || this.flag_inHidingHole) {
    this.idealOp = 0.2;
  }
};
_0xf4bb63.prototype.setOpacityForFlyingAnimals = function (_0x98ec9) {
  if (this.gabbedByAniID == this.id || this.grabbedAniID == this.id) {
    return;
  }
  if (this.id != _0x2bd878) {
    this.idealOp = 0.6;
  }
};
_0xf4bb63.prototype.getImageDataKey = function () {
  return this.animalType + "__" + this.animalSpecies + "__" + this.animalSubSpecies + "__" + this.animalPremiumSkin + "__" + this.mopeSeasonID + "__" + this.skinThemeID;
};
const _0x4f90bf = {};
const _0x33b9a7 = () => {
  if (_0xe2ab1e) {
    const _0x4ada1e = localStorage.getItem("cached_animal_image_data_keys");
    console.error("KEYS:", _0x4ada1e);
    if (_0x4ada1e) {
      JSON.parse(_0x4ada1e).forEach(_0x43ddc6 => {
        _0x4f90bf[_0x43ddc6] = localStorage.getItem(_0x43ddc6);
      });
    }
  }
};
_0xf4bb63.prototype.getUpgradeImagePath = function () {
  let _0x4575bf = this.animalInfo().skinName;
  let _0x5383d9 = '';
  if (!_0x4575bf || _0x4575bf.toLowerCase().includes("scorpion") || this.animalSpecies == 0xc8) {
    _0x5383d9 = this.getSkinImagePath("skins/" + this.getSkinName()) + ".ui.png";
  } else {
    _0x5383d9 = this.getSkinImagePath("skins/" + _0x4575bf + ".ui.png");
  }
  return _0x5383d9;
};
_0xf4bb63.prototype.getImageData = async function () {
  const _0x271654 = this.getImageDataKey();
  if (_0x271654 in _0x4f90bf) {
    return _0x4f90bf[_0x271654];
  }
  this.flag_fullAlpha = true;
  this.buttonScaleF = 0x1;
  this.imgSizeF = 0x1;
  var _0x4f8704 = this.animalInfo();
  var _0x34fb69 = _0x4f8704.aniCol;
  this.skinImgName = _0x4f8704.skinName;
  this.skinNotLoadedColor = _0x34fb69;
  await this.loadAnimalSkinImgAsync();
  this.draw();
  return new Promise((_0x54b8f4, _0x47398c) => {
    setTimeout(() => {
      const _0x566b91 = document.createElement("canvas");
      _0x566b91.width = 0x8c;
      _0x566b91.height = 0x8c;
      const _0x4fbd37 = window.ctx;
      window.ctx = _0x566b91.getContext("2d");
      this.w = 0x6e;
      this.h = 0x6e;
      this.rad = 55;
      this.skinRad = 55;
      this.idealOp = 0x1;
      this.underwaterA = 0x0;
      window.ctx.translate(70, 70);
      window.ctx.globalAlpha = 0x1;
      this.draw();
      const _0x575092 = _0x566b91.toDataURL();
      window.ctx = _0x4fbd37;
      _0x4f90bf[_0x271654] = _0x575092;
      if (_0xe2ab1e) {
        try {
          localStorage.setItem("cached_animal_image_data_keys", JSON.stringify(Object.keys(_0x4f90bf)));
          localStorage.setItem(_0x271654, _0x575092);
        } catch (_0x297a7c) {}
      }
      return _0x54b8f4(_0x575092);
    }, 0x3e8);
  });
};
_0xf4bb63.prototype.idealOp = 0x1;
_0xf4bb63.prototype.customDraw = function (_0x226369) {
  this.preLoad();
  var _0x403b68 = this.animalInfo();
  var _0x6a062d = _0x403b68.aniCol;
  this.skinImgName = _0x403b68.skinName;
  this.skinNotLoadedColor = _0x6a062d;
  switch (this.animalType) {
    case _0x3446ed:
    case _0x89ca62:
    case _0x5f4a90:
    case _0x1473db:
    case _0x4bb269:
      tailLen = this.rad * 0.16;
      break;
  }
  this.loadAnimalSkinImg();
  _0x3b8ba2.save();
  _0x3b8ba2.rotate(this.angle);
  var _0x486661 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  if (this.flag_eff_wobbling) {
    var _0x598a14 = _0x7b826(_0x486661, 1.25, 0.1, 0x2);
    this.rad += _0x598a14;
  }
  this.idealOp = this.getIdealOpacity();
  this.setStealth();
  if (this.flag_flying) {
    this.setOpacityForFlyingAnimals();
  }
  if (this.flag_fullAlpha) {
    _0x3b8ba2.globalAlpha = 0x1;
  } else {
    this.underwaterA += (this.idealOp - this.underwaterA) * 0.1;
    _0x3b8ba2.globalAlpha *= this.underwaterA;
  }
  if (this.flag_eff_invincible) {
    _0x3b8ba2.globalAlpha *= 0.6499999999999999 + 0.35 * Math.sin(0x2 * Math.PI / 0x1 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
  }
  this.outlineW = 2;
  if (!(this.dead || this.flag_underWater || this.animalType == _0x4ddfd4 && this.flag_usingAbility)) {
    if (!this.flag_underWater) {
      var _0x321a97 = this.getOutlineColor();
      if (this.killerId == 0x0 && !(this.flag_flying && this.id == _0x2bd878 || _0x4bda0b == 0x2 && !(_0x321a97 == "#4AE05E" || _0x321a97 == "#EF3C31"))) {
        if (this.teamID > 0x0 && _0x388788 != null && _0x16c921 == 0x3) {
          _0x3b8ba2.save();
          _0x3b8ba2.globalAlpha = this.isAnimalInside1v1Arena() ? 0.3 : this.idealOp;
          _0x133658(0x0, 0x0, this.rad + 0x2, _0x388788.getTeamColor(this.teamID));
          _0x3b8ba2.restore();
        }
        this.drawAnimalUnderSkinCircle(_0x321a97);
      } else {
        this.outlineW = 0x0;
      }
    }
  }
  this.drawUnderEffects();
  if (this.canDrawAnimalSkin()) {
    this.drawAnimalSkin(_0x321a97);
  }
  this.drawUnderWater();
  if (this.animalPremiumSkin != 0x0 && !this.flag_eff_shivering) {
    this.sparkleAnim();
  }
  _0x3b8ba2.restore();
  this.drawTopEffects();
  this.drawLowWaterDrop();
  if (!this.flag_isInArena) {
    if (this.id == _0x2bd878 && this.flag_viewing1v1Invite) {} else {
      if (!this.flag_usingDiveAbility) {
        this.drawNickName(_0x1527d2 == null ? this.idealOp : 0.2);
      }
    }
  }
  this.drawZombieEffect();
};
_0xf4bb63.prototype.canDrawAnimalSkin = function () {
  return true;
};
_0xf4bb63.prototype.drawZombieEffect = function () {
  if (this.effecT_isZombie) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0.6;
    _0x133658(0x0, 0x0, this.skinRad, "#B6CF40");
    _0x3b8ba2.restore();
  }
};
_0xf4bb63.prototype.drawLowWaterDrop = function () {
  if (this.flag_lowWat) {
    var _0x2fb048 = 0.5 + 0.30000000000000004 * Math.sin(0x2 * Math.PI / 1.2 * (_0x1f4c9e / 0x3e8));
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = _0x2fb048;
    if (this.animalType == _0x1a6650 || this.animalType == _0x21817a || this.animalType == _0x23a03f || this.animalType == _0x386e05 && this.animalSpecies == 0x4) {
      _0x3b8ba2.fillStyle = "#ff6000";
    } else {
      if (this.animalType == _0x2fcf20) {
        _0x3b8ba2.fillStyle = "#8CCEF4";
      } else {
        if (this.animalType == _0x3032f7) {
          _0x3b8ba2.fillStyle = "#ff884c";
        } else {
          _0x3b8ba2.fillStyle = "#4E66E4";
        }
      }
    }
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, this.rad + 0x5, 0x5, 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.restore();
  }
};
_0xf4bb63.prototype.sparkleInterval = 0x5;
_0xf4bb63.prototype.sparklDuration = 0x3;
_0xf4bb63.prototype.sparkleNext = 0x0;
_0xf4bb63.prototype.sparkleAniT = 0x0;
_0xf4bb63.prototype.setSparkleInterval = function (_0x28b9fd, _0x4cca0d) {
  this.sparkleInterval = _0x28b9fd;
  this.sparklDuration = _0x4cca0d;
  this.setSparkleXY();
};
_0xf4bb63.prototype.seSparkle = function () {
  this.sparkleAniT = +new Date() + 0x3e8 * this.sparklDuration;
  this.sparkleNext = this.sparkleAniT + 0x3e8 * this.sparkleInterval;
  this.setSparkleXY();
};
_0xf4bb63.prototype.isMouseHovering = false;
_0xf4bb63.prototype.sparkleAnim = function () {
  if (this.animalPremiumSkin && (_0x1f4c9e - this.spawnTime) / 0x3e8 > 0x5) {
    if (this.id > 0x0 || this.id == 0x0 && this.isMouseHovering) {
      if (+new Date() > this.sparkleNext) {
        this.seSparkle();
        this.setSparkleXY();
      }
    }
    if (this.sparkleAniT > +new Date()) {
      this.showSparkling();
    }
  }
};
_0xf4bb63.prototype.sparkleAng = 0x0;
_0xf4bb63.prototype.sparkleX = 0x0;
_0xf4bb63.prototype.sparkleY = 0x0;
_0xf4bb63.prototype.setSparkleXY = function () {
  var _0xd04c10 = this.rad / 0x2;
  var _0x528ef4 = _0xd04c10 * 0.3;
  var _0x114147 = _0x4421b3(_0x528ef4, _0xd04c10);
  var _0x42fb4c = _0x4421b3(_0x528ef4, _0xd04c10);
  _0x114147 *= Math.random() * 0xa > 0x5 ? -0x1 : 0x1;
  _0x42fb4c *= Math.random() * 0xa > 0x5 ? -0x1 : 0x1;
  this.sparkleX = _0x114147;
  this.sparkleY = _0x42fb4c;
};
_0xf4bb63.prototype.showSparkling = function () {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha *= 0.6499999999999999 + 0.35 * Math.sin(0x2 * Math.PI / 1.5 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
  this.sparkleAng += 0.5;
  var _0x2f6fd7 = 0x0;
  _0x3b8ba2.fillStyle = "#faffb6";
  for (i = 0x0; i < 0x3; i++) {
    _0x3b8ba2.save();
    _0x3b8ba2.translate(this.sparkleX, this.sparkleY);
    _0x3b8ba2.rotate(this.sparkleAng * (Math.PI / 0xb4));
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(_0x2f6fd7 * (Math.PI / 0xb4));
    _0x3b8ba2.scale(0.5, 0x5);
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, 0x1, 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.restore();
    _0x2f6fd7 += 0x3c;
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(this.sparkleX, this.sparkleY, 0x1, 0x0, Math.PI * 0x2);
  _0x3b8ba2.fill();
  _0x3b8ba2.restore();
};
_0xf4bb63.prototype.shakeOffsetX = 0x0;
_0xf4bb63.prototype.shakeOffsetY = 0x0;
_0xf4bb63.prototype.drawAnimalSkin = function (_0x1efa8b) {
  _0x3b8ba2.save();
  if (this.flag_eff_shivering) {
    var _0xb535bf = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x492907 = 0.1;
    var _0x37437c = this.rad * this.shiverF;
    this.shakeOffsetX = _0x37437c * Math.sin(0x2 * Math.PI / _0x492907 * _0xb535bf);
    var _0x492907 = 0.05;
    var _0x37437c = this.rad * this.shiverF;
    this.shakeOffsetY = _0x37437c * Math.sin(0x2 * Math.PI / _0x492907 * _0xb535bf);
    _0x3b8ba2.translate(-this.shakeOffsetX, -this.shakeOffsetY);
  }
  this.drawPropsUnderSkin();
  this.beforeDrawAnimalSkin();
  if (this.id > 0x0) {
    this.drawUnderSkinTail(_0x1efa8b);
  }
  this.drawUnderSkinImgOutline();
  this.drawUnderSkinImg();
  this.drawSkinImg();
  this.drawOnTopOfSkinImg();
  this.drawPropsTopOfSkin();
  this.drawStatueEffect();
  _0x3b8ba2.restore();
};
_0xf4bb63.prototype.drawStatueEffect = function () {
  if (this.flag_eff_statue) {
    var _0x4e8217 = null;
    switch (this.eff_statueType) {
      case 0x1:
        _0x4e8217 = "snowball";
        break;
      case 0x2:
        _0x4e8217 = "goldball";
        break;
    }
    if (_0x4e8217) {
      var _0x406ccb = this.getSkinImageObj("img/" + _0x4e8217 + ".png");
      if (_0x406ccb) {
        _0x3b8ba2.save();
        _0x3b8ba2.globalAlpha = _0x2bd878 == this.id ? 0.7 : 0x1;
        var _0xe3d311 = this.rad * 1.2;
        _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
        _0x3b8ba2.drawImage(_0x406ccb, -_0xe3d311, -_0xe3d311, 0x2 * _0xe3d311, 0x2 * _0xe3d311);
        _0x3b8ba2.restore();
      }
    }
  }
};
_0xf4bb63.prototype.drawElectroStunEffect = function () {
  if (this.flag_eff_electroStun === true) {
    var _0xecda29 = Math.trunc(_0x1f4c9e / 0xfa) % 0x4;
    let _0x5c8292 = "skins/land/birdmonster/0/stun/" + _0xecda29 + ".png";
    var _0x48cade = this.getSkinImageObj(_0x5c8292);
    if (_0x48cade) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0x1;
      var _0x4630c7 = this.rad * 1.2;
      _0x3b8ba2.rotate(this.angle);
      _0x3b8ba2.drawImage(_0x48cade, -_0x4630c7, -_0x4630c7, 0x2 * _0x4630c7, 0x2 * _0x4630c7);
      _0x3b8ba2.restore();
    }
  }
};
_0xf4bb63.prototype.propsEnabled = false;
_0xf4bb63.prototype.drawPropsUnderSkin = function (_0x1d7931) {
  if (this.propsEnabled) {
    if (this.animalType == _0x2ebefb) {}
  }
};
_0xf4bb63.prototype.drawPropsTopOfSkin = function (_0x30e7af) {
  if (this.propsEnabled) {
    if (this.animalType == _0x2ebefb) {
      this.drawProp("scarfs", 0x1);
      this.drawProp("glasses", 0x0);
      this.drawProp("hats", 0x1);
    }
  }
};
_0xf4bb63.prototype.drawProp = function (_0x22040b, _0x15fcd9) {
  var _0x372196 = this.skinScale;
  var _0x34edee = this.skinRad + 0.9;
  var _0x22a9aa = this.getSkinImageObj("props/" + this.animalType + "/" + _0x22040b + "/" + _0x15fcd9 + ".png");
  if (_0x22a9aa) {
    _0x3b8ba2.drawImage(_0x22a9aa, -_0x34edee * _0x372196, -_0x34edee * _0x372196, 0x2 * _0x34edee * _0x372196, 0x2 * _0x34edee * _0x372196);
  }
};
_0xf4bb63.prototype.beforeDrawAnimalSkin = function (_0x41fbf6) {};
_0xf4bb63.prototype.drawUnderSkinTail = function (_0x32724c) {
  if (this.killerId > 0x0 || this.flag_underWater) {
    return;
  }
  if (this.animalType != _0x5ebc28 && this.animalType != _0x2ebefb && this.animalType != _0x1515a4) {
    var _0x34b987 = this.animalInfo();
    var _0x306c01 = _0x34b987.aniCol;
    var _0x247c52 = this.rad * 0.1;
    var _0x565602 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x1a395a = 0x4 * Math.sin(0x2 * Math.PI / 0x5 * _0x565602);
    var _0xde69fd = this.outlineW * 2.5;
    var _0x4444bf = Math.PI / 0xb4;
    if (this.flag_tailBitten) {
      _0x3b8ba2.fillStyle = "#EF3C31";
    } else {
      var _0x128142 = this.animalType;
      if (_0x2da68a[_0x128142 - 0x1] > 0x0 && this.id != _0x2bd878) {
        _0x3b8ba2.fillStyle = "#4AE05E";
      } else {
        _0x3b8ba2.fillStyle = _0x32724c;
      }
    }
    if (!(_0x4bda0b == 0x2 && _0x3b8ba2.fillStyle != "#09992F")) {
      _0x3b8ba2.beginPath();
      _0x3b8ba2.moveTo((this.rad - this.outlineW + 0x1) * Math.cos((282.5 + _0xde69fd) * _0x4444bf), (this.rad - this.outlineW + 0x1) * Math.sin(282.5 * _0x4444bf));
      _0x3b8ba2.lineTo((this.rad - this.outlineW + 0x1) * Math.cos((257.5 - _0xde69fd) * _0x4444bf), (this.rad - this.outlineW + 0x1) * Math.sin(257.5 * _0x4444bf));
      _0x3b8ba2.lineTo((this.rad + _0x247c52 + this.outlineW) * Math.cos((0x10e + _0x1a395a) * _0x4444bf), (this.rad + _0x247c52 + this.outlineW) * Math.sin((0x10e + _0x1a395a) * _0x4444bf));
      _0x3b8ba2.lineTo((this.rad - this.outlineW + 0x1) * Math.cos((282.5 + _0xde69fd) * _0x4444bf), (this.rad - this.outlineW + 0x1) * Math.sin(282.5 * _0x4444bf));
      _0x3b8ba2.fill();
    }
    if (!(_0x4bda0b == 0x2)) {
      if (!this.loadedSkinImg || this.flag_tailBitten) {
        _0x3b8ba2.fillStyle = this.flag_tailBitten ? "#EF3C31" : _0x306c01;
        _0x3b8ba2.beginPath();
        _0x3b8ba2.moveTo((this.rad - this.outlineW) * Math.cos(282.5 * _0x4444bf), (this.rad - this.outlineW) * Math.sin(282.5 * _0x4444bf));
        _0x3b8ba2.lineTo((this.rad - this.outlineW) * Math.cos(257.5 * _0x4444bf), (this.rad - this.outlineW) * Math.sin(257.5 * _0x4444bf));
        _0x3b8ba2.lineTo((this.rad + _0x247c52) * Math.cos((0x10e + _0x1a395a) * _0x4444bf), (this.rad + _0x247c52) * Math.sin((0x10e + _0x1a395a) * _0x4444bf));
        _0x3b8ba2.lineTo((this.rad - this.outlineW) * Math.cos(282.5 * _0x4444bf), (this.rad - this.outlineW) * Math.sin(282.5 * _0x4444bf));
        _0x3b8ba2.fill();
      }
    }
  }
};
_0xf4bb63.prototype.drawAnimalUnderSkinCircle = function (_0xa13955) {
  if (!this.flag_isGrabbed) {
    if (this.playerNumberFor1v1Arena == 0x1) {
      _0xa13955 = "cyan";
    } else {
      if (this.playerNumberFor1v1Arena == 0x2) {
        _0xa13955 = "yellow";
      } else if (this.flag_eff_isOnSpiderWeb) {
        _0xa13955 = "white";
      }
    }
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = this.isAnimalInside1v1Arena() ? 0.3 : this.idealOp;
    _0x133658(0x0, 0x0, this.rad, _0xa13955);
    _0x3b8ba2.restore();
  }
};
_0xf4bb63.prototype.devMode_num = 0x0;
_0xf4bb63.prototype.hasMultipleSpecies = function () {
  return false;
};
_0xf4bb63.prototype.drawNickName = function (_0xa6fe0b) {
  if (_0xa6fe0b == 0x0) {
    return;
  }
  this.nickNameA += (_0xa6fe0b - this.nickNameA) * 0.1;
  if (this.nickName && this.nickTXT && !_0xce1d60) {
    _0x3b8ba2.save();
    if (this.dead) {
      _0x3b8ba2.globalAlpha *= 0x1 - this.moveUpdF;
    } else {
      _0x3b8ba2.globalAlpha = 0x1;
    }
    _0x3b8ba2.globalAlpha *= this.nickNameA;
    this.nickTXT.x = 0x0;
    this.nickTXT.y = this.rad + 0x9;
    var _0x4c9cb1 = "#FFFFFF";
    if (this.flag_isDevMode) {
      switch (this.devMode_num) {
        case 0x8:
          if (!this.flag_hideDevPrint) {
            if (_0x4dfdf3 != null && _0x4dfdf3.id == this.id) {
              _0x4c9cb1 = "cyan";
            } else {
              _0x4c9cb1 = "yellow";
            }
          }
          break;
        case 0x1:
          _0x4c9cb1 = "#e23ca6";
          break;
        case 0x2:
          break;
        case 0x3:
          _0x4c9cb1 = "#ee3030";
          break;
        default:
          break;
      }
    }
    this.nickTXT.setColor(_0x4c9cb1);
    this.nickTXT.draw();
    _0x3b8ba2.restore();
  }
};
_0xf4bb63.prototype.drawHealthBar = function () {
  _0xf4bb63.superClass.prototype.drawHealthBar.call(this);
  this.drawInfectionBar();
};
_0xf4bb63.prototype.drawInfectionBar = function () {
  if (this.flag_underWater) {
    return;
  }
  var _0x205b1d = _0x1f4c9e < this.infectionBarTimeoutT ? 0x1 : 0x0;
  this.infectionBarA += (_0x205b1d - this.infectionBarA) * 0.04;
  if (this.infectionBarA > 0.001) {
    this.infectionPer += (this.infectionPer_n - this.infectionPer) * 0.1;
    this.drawBar("red", this.infectionBarA, this.infectionPer, 0x2, 6.5);
  }
};
_0xf4bb63.prototype.drawUnderWater = function () {
  if (this.flag_usingDiveAbility || this.flag_usingAbility && this.animalType == _0x4ddfd4) {
    _0x3b8ba2.save();
    this.drawWhenUnderwater();
    _0x3b8ba2.restore();
  }
};
_0xf4bb63.prototype.drawUnderSkinImgOutline = function () {
  if (this.flag_eff_stunk) {
    _0x3b8ba2.save();
    var _0x329926 = 0x1;
    var _0x295630 = 0.3;
    var _0x1f4625 = 0x1;
    var _0x392c1f = 0.5 * (_0x1f4625 - _0x295630);
    var _0x31e846 = _0x295630 + _0x392c1f + _0x392c1f * Math.sin(0x2 * Math.PI / _0x329926 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
    _0x3b8ba2.globalAlpha *= _0x31e846;
    var _0x1970da = 2.6;
    _0x133658(0x0, 0x0, this.rad + _0x1970da * _0x31e846, "brown");
    _0x3b8ba2.restore();
  }
  if (this.flag_iceSliding) {
    var _0xdf7f66 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x329926 = 0.75;
    var _0x2a2787 = 0x1;
    var _0x2304d3 = _0x2a2787 * Math.sin(0x2 * Math.PI / _0x329926 * _0xdf7f66);
    var _0x64aeac = _0x3b8ba2.globalAlpha;
    _0x3b8ba2.globalAlpha *= 0.8 - 0.2 * _0x2304d3;
    _0x133658(0x0, this.rad * 0.3, this.rad * (0.9 + 0.15 * _0x2304d3), "#7BB7BB");
    _0x133658(0x0, -this.rad * 0.3, this.rad * (1.05 + 0.1 * _0x2304d3), "#7BB7BB");
    _0x3b8ba2.globalAlpha = _0x64aeac;
  }
  if (this.flag_usingAbility && (this.animalType == _0x356eb6 || this.animalType == _0x21e8e0)) {
    var _0xdf7f66 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x329926 = 1.5;
    var _0x2a2787 = 0x1;
    var _0x2304d3 = _0x2a2787 * Math.sin(0x2 * Math.PI / _0x329926 * _0xdf7f66);
    var _0x64aeac = _0x3b8ba2.globalAlpha;
    _0x3b8ba2.globalAlpha *= 0.8;
    _0x133658(0x0, this.rad * 0.3, this.rad * (0.9 + 0.12 * _0x2304d3), "#7F582B");
    _0x133658(0x0, -this.rad * 0.3, this.rad * (1.05 + 0.09 * _0x2304d3), "#7F582B");
    _0x3b8ba2.globalAlpha = _0x64aeac;
  }
  var _0x449950 = this.flag_eff_frozen || this.flag_cold ? 0x1 : 0x0;
  this.frozenEffA += (_0x449950 - this.frozenEffA) * 0.1;
  if (this.frozenEffA > 0.01) {
    var _0x64aeac = _0x3b8ba2.globalAlpha;
    _0x3b8ba2.globalAlpha *= this.frozenEffA;
    var _0x1970da = 1.6;
    _0x133658(0x0, 0x0, this.rad + _0x1970da * this.frozenEffA, "white");
    _0x3b8ba2.globalAlpha = _0x64aeac;
  }
  var _0x449950 = this.flag_eff_healing ? 0x1 : 0x0;
  this.effA_healing += (_0x449950 - this.effA_healing) * 0.1;
  if (this.effA_healing > 0.01) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha *= this.effA_healing;
    var _0x1970da = 2.6;
    _0x133658(0x0, 0x0, this.rad + _0x1970da * this.effA_healing, "purple");
    _0x3b8ba2.restore();
  }
  this.effect_aloeveraHeal(true);
  this.effect_sanitized(true);
  var _0x449950 = this.flag_eff_hot ? 0x1 : 0x0;
  this.effA_hot += (_0x449950 - this.effA_hot) * 0.1;
  if (this.effA_hot > 0.01) {
    _0x3b8ba2.save();
    var _0x329926 = 1.2;
    var _0x295630 = 0.3;
    var _0x1f4625 = 0x1;
    var _0x392c1f = 0.5 * (_0x1f4625 - _0x295630);
    _0x3b8ba2.globalAlpha *= _0x295630 + _0x392c1f + _0x392c1f * Math.sin(0x2 * Math.PI / _0x329926 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
    var _0x1970da = 2.6;
    _0x133658(0x0, 0x0, this.rad + _0x1970da * this.effA_hot, "rgba(249, 212, 77, 0.5)");
    _0x3b8ba2.restore();
  }
  var _0x449950 = this.flag_eff_poison ? 0x1 : 0x0;
  this.effA_poison += (_0x449950 - this.effA_poison) * 0.1;
  if (this.effA_poison > 0.01) {
    _0x3b8ba2.save();
    var _0x329926 = 1.2;
    var _0x295630 = 0.3;
    var _0x1f4625 = 0x1;
    var _0x392c1f = 0.5 * (_0x1f4625 - _0x295630);
    _0x3b8ba2.globalAlpha *= _0x295630 + _0x392c1f + _0x392c1f * Math.sin(0x2 * Math.PI / _0x329926 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
    _0x3b8ba2.globalAlpha *= this.effA_poison;
    var _0x1970da = 2.6;
    _0x133658(0x0, 0x0, this.rad + _0x1970da * this.effA_poison, "#7FF600");
    _0x3b8ba2.restore();
  }
  var _0x449950 = this.flag_eff_bleeding || this.flag_eff_wobbling ? 0x1 : 0x0;
  this.effA_bleeding += (_0x449950 - this.effA_bleeding) * 0.1;
  if (this.effA_bleeding > 0.01) {
    _0x3b8ba2.save();
    var _0x329926 = 1.2;
    var _0x295630 = 0.3;
    var _0x1f4625 = 0x1;
    var _0x392c1f = 0.5 * (_0x1f4625 - _0x295630);
    _0x3b8ba2.globalAlpha *= _0x295630 + _0x392c1f + _0x392c1f * Math.sin(0x2 * Math.PI / _0x329926 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
    _0x3b8ba2.globalAlpha *= this.effA_bleeding;
    var _0x1970da = 2.6;
    var _0x1dae83 = this.flag_eff_wobbling ? "brown" : "red";
    _0x133658(0x0, 0x0, this.rad + _0x1970da * this.effA_bleeding, _0x1dae83);
    _0x3b8ba2.restore();
  }
  var _0x449950 = this.flag_eff_slimed ? 0x1 : 0x0;
  this.effA_slimed += (_0x449950 - this.effA_slimed) * 0.1;
  if (this.effA_slimed > 0.01) {
    _0x3b8ba2.save();
    var _0x329926 = 1.2;
    var _0x295630 = 0.3;
    var _0x1f4625 = 0x1;
    var _0x392c1f = 0.5 * (_0x1f4625 - _0x295630);
    _0x3b8ba2.globalAlpha *= _0x295630 + _0x392c1f + _0x392c1f * Math.sin(0x2 * Math.PI / _0x329926 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
    _0x3b8ba2.globalAlpha *= this.effA_slimed;
    var _0x1970da = 2.6;
    _0x133658(0x0, 0x0, this.rad + _0x1970da * this.effA_slimed, "grey");
    _0x3b8ba2.restore();
  }
};
_0xf4bb63.prototype.drawUnderSkinImg = function () {};
_0xf4bb63.prototype.drawUnderwaterBubbles = function () {
  return;
  var _0x5850a3 = "water";
  switch (this.diveType) {
    case 0x0:
      _0x5850a3 = "water";
      break;
    case 0x1:
      _0x5850a3 = "lava";
      break;
    case 0x2:
      _0x5850a3 = "mud";
      break;
  }
  var _0xcec70a = this.getSkinImageObjForSeason("skins/" + _0x5850a3 + "_dive.png", 0x2);
  if (_0xcec70a) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0x1;
    var _0x872a54 = this.rad - this.outlineW;
    _0x3b8ba2.drawImage(_0xcec70a, -_0x872a54 * 1.4705882352941178, -_0x872a54 * 1.4705882352941178, 0x2 * _0x872a54 * 1.4705882352941178, 0x2 * _0x872a54 * 1.4705882352941178);
    _0x3b8ba2.restore();
  } else {
    _0x3b8ba2.save();
    var _0x2fe3a2 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x439fe6 = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * _0x2fe3a2);
    if (this.animalType == _0x4bb269) {
      _0x3b8ba2.globalAlpha *= 0.3;
    }
    var _0x87f0b3 = this.flag_inWater ? "#4E71C3" : "#7E6A35";
    if (this.animalType == _0x21817a) {
      _0x87f0b3 = "#f9d43b";
    }
    _0x3b8ba2.fillStyle = _0x87f0b3;
    var _0x2703c8 = this.rad * 0.2;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * -0.35, this.rad * -0.33, Math.max(0x0, _0x2703c8 + _0x439fe6), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * 0.35, this.rad * -0.32, Math.max(0x0, _0x2703c8 - _0x439fe6), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * 0.35, this.rad * 0.36, Math.max(0x0, _0x2703c8 + _0x439fe6), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * -0.35, this.rad * 0.35, Math.max(0x0, _0x2703c8 - _0x439fe6), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.restore();
  }
};
_0xf4bb63.prototype.drawUnderwaterCustomization = function (_0x3adca7, _0x362cbb) {
  if (this.flag_usingDiveAbility) {
    var _0x46e3bd = "water";
    switch (this.diveType) {
      case 0x0:
        _0x46e3bd = "ocean";
        break;
      case 0x1:
        _0x46e3bd = "lava";
        break;
      case 0x2:
        _0x46e3bd = "mud";
        break;
      case 0x3:
        _0x46e3bd = "waterspot";
        break;
      case 0x4:
        _0x46e3bd = "arcticwaterspot";
        break;
      case 0x5:
        _0x46e3bd = "arcticlake";
        break;
      case 0x6:
        _0x46e3bd = "oasis";
        break;
      case 0x7:
        _0x46e3bd = "deathlake";
        break;
    }
    if (!(_0x4bda0b == 0x2) && !_0x11da90) {
      var _0x4a0aca = Math.trunc(_0x1f4c9e / 0x50) % 0x9;
      _0x4a0aca = Math.max(0x1, _0x4a0aca);
      _0x4a0aca = Math.min(0x8, _0x4a0aca);
      _0x46e3bd = "skins/dive/" + _0x46e3bd + "dive" + _0x4a0aca + ".png";
      var _0x58cf38 = this.getObjImageObjForSeason(_0x46e3bd, 0x2);
      if (_0x58cf38) {
        _0x3b8ba2.save();
        {
          _0x3b8ba2.globalAlpha = 0x1;
          var _0x569057 = this.rad * 1.2;
          _0x3b8ba2.drawImage(_0x58cf38, -_0x569057, -_0x569057, _0x569057 * 0x2, _0x569057 * 0x2);
        }
        _0x3b8ba2.restore();
      }
    } else {
      _0x46e3bd = "skins/dive/" + _0x46e3bd + "dive.png";
      var _0x58cf38 = this.getObjImageObjForSeason(_0x46e3bd, 0x2);
      if (_0x58cf38) {
        _0x3b8ba2.save();
        {
          _0x3b8ba2.globalAlpha = 0x1;
          var _0x569057 = this.rad * 1.2;
          _0x3b8ba2.drawImage(_0x58cf38, -_0x569057, -_0x569057, _0x569057 * 0x2, _0x569057 * 0x2);
        }
        _0x3b8ba2.restore();
      }
    }
  }
};
_0xf4bb63.prototype.drawWhenUnderwater = function () {
  this.drawUnderwaterCustomization(0x1, 0x1);
};
_0xf4bb63.prototype.shiveringStartT = 0x0;
_0xf4bb63.prototype.flag_eff_shivering = false;
_0xf4bb63.prototype.flag_inHidingHole = false;
_0xf4bb63.prototype.effect_shivering = function () {
  if (this.shiveringStartT == 0x0 && this.flag_eff_shivering) {
    this.shiveringStartT = +new Date();
  } else {
    if (!this.flag_eff_shivering) {
      this.shiveringStartT = 0x0;
    }
  }
  if (this.flag_eff_shivering) {
    var _0x402ad2 = (+new Date() - this.shiveringStartT) * 0xa;
    if (_0x402ad2 % 0xa == 0x0) {
      this.eff_shiver_shakeX = Math.round(Math.random() * 0xa);
      this.eff_shiver_shakeX = Math.round(Math.random() * 0xa);
    }
  }
};
if (this.effA_healing > 0.01) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha *= 0.3 * this.effA_healing;
  _0x133658(0x0, 0x0, Math.max(0x0, this.rad - this.outlineW), "#ef24ed");
  _0x3b8ba2.restore();
}
_0xf4bb63.prototype.effect_sanitized = function (_0x4f1a59) {
  var _0x3862c6 = this.flag_eff_sanitized ? 0.9 : 0x0;
  if (this.effA__sanitized == undefined) {
    this.effA__sanitized = 0x0;
  }
  this.effA__sanitized += (_0x3862c6 - this.effA__sanitized) * 0.1;
  if (this.effA__sanitized > 0.01) {
    var _0x1b7010 = 0.30000000000000004 + 0.1 * Math.sin(0x2 * Math.PI / 0.8 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
    if (_0x4f1a59) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha *= _0x1b7010;
      _0x133658(0x0, 0x0, this.rad + 2.6 * this.effA__sanitized, "white");
      _0x3b8ba2.restore();
    } else {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha *= _0x1b7010;
      _0x133658(0x0, 0x0, Math.max(0x0, this.rad), "#bbc94d");
      _0x3b8ba2.restore();
    }
  }
};
_0xf4bb63.prototype.effect_aloeveraHeal = function (_0x90072c) {
  var _0x6331fe = this.flag_eff_aloeveraHealing ? 0.9 : 0x0;
  if (this.effA_aloeveraHealing == undefined) {
    this.effA_aloeveraHealing = 0x0;
  }
  this.effA_aloeveraHealing += (_0x6331fe - this.effA_aloeveraHealing) * 0.1;
  if (this.effA_aloeveraHealing > 0.01) {
    var _0x366cb2 = 0.30000000000000004 + 0.1 * Math.sin(0x2 * Math.PI / 0.8 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
    if (_0x90072c) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha *= _0x366cb2;
      _0x133658(0x0, 0x0, this.rad + 2.6 * this.effA_aloeveraHealing, "#bbc94d");
      _0x3b8ba2.restore();
    } else {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha *= _0x366cb2;
      _0x133658(0x0, 0x0, Math.max(0x0, this.rad), "#bbc94d");
      _0x3b8ba2.restore();
    }
  }
};
_0xf4bb63.prototype.effect_sweatPoisoned = function () {
  var _0xb206bb = this.flag_eff_sweatPoisoned ? 0x1 : 0x0;
  if (this.effA_sweatPoisoned == undefined) {
    this.effA_sweatPoisoned = 0x0;
  }
  this.effA_sweatPoisoned += (_0xb206bb - this.effA_sweatPoisoned) * 0.1;
  if (this.effA_sweatPoisoned > 0.01) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha *= 0.6499999999999999 + 0.35 * Math.sin(0x2 * Math.PI / 1.2 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
    _0x133658(0x0, 0x0, Math.max(0x0, this.rad - this.outlineW), "rgba(50,140,162,0.5)");
    _0x3b8ba2.restore();
  }
};
_0xf4bb63.prototype.skinRad = 0x0;
_0xf4bb63.prototype.skinScale = 0x0;
_0xf4bb63.prototype.setSkinScale = function () {
  var _0x3a7890 = this.rad - this.outlineW;
  this.skinRad = _0x3a7890;
  this.skinScale = 1.4705882352941178;
};
_0xf4bb63.prototype.getAniRadius = function (_0xb398de) {
  if (this.flag_usingDiveAbility) {
    return _0xb398de * 0.7;
  }
  return _0xb398de;
};
_0xf4bb63.prototype.basicDrawSkinImg = function () {
  this.setSkinScale();
  var _0x544488 = this.skinScale;
  var _0x2c8b0f = this.getAniRadius(this.skinRad);
  if (this.loadedSkinImg) {
    _0x3b8ba2.drawImage(this.loadedSkinImg, -_0x2c8b0f * _0x544488, -_0x2c8b0f * _0x544488, 0x2 * _0x2c8b0f * _0x544488, 0x2 * _0x2c8b0f * _0x544488);
  } else {
    _0x3b8ba2.fillStyle = this.skinNotLoadedColor;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - this.outlineW), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
  }
};
_0xf4bb63.prototype.preLoad = function () {};
_0xf4bb63.prototype.shiverF = 0.02;
_0xf4bb63.prototype.drawSkinImg = function () {
  this.basicDrawSkinImg();
  this.drawSkinCustomization();
};
_0xf4bb63.prototype.drawSkinCustomization = function () {};
_0xf4bb63.prototype.drawOnTopOfSkinImg = function () {
  if (!this.loadedSkinImg) {
    _0x3b8ba2.save();
    var _0x3e3a18 = Math.max(0x1, this.rad / 0x19);
    _0x3b8ba2.scale(_0x3e3a18, _0x3e3a18);
    this.drawEyeAtPos(0x6, this.rad * 0.32);
    this.drawEyeAtPos(-0x6, this.rad * 0.32);
    _0x3b8ba2.restore();
  }
  if (this.animalType == _0x3040c9) {
    _0x3b8ba2.fillStyle = "#E5CF79";
    _0x3b8ba2.beginPath();
    var _0x12062e = this.rad - this.outlineW;
    var _0x201356 = _0x12062e * 0x1;
    _0x3b8ba2.moveTo(_0x12062e * -0.16, _0x201356);
    _0x3b8ba2.lineTo(0x0, _0x12062e * (this.flag_usingAbility ? 1.41 : 0.7));
    _0x3b8ba2.lineTo(_0x12062e * 0.153, _0x201356);
    _0x3b8ba2.closePath();
    _0x3b8ba2.fill();
  }
  if (this.flag_usingAbility && this.animalType == _0x4b1170) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0x1 - this.underwaterA;
    var _0x6fadd6 = this.getSkinImageObj("img/snowball.png");
    if (_0x6fadd6) {
      var _0x12062e = this.rad;
      _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
      _0x3b8ba2.drawImage(_0x6fadd6, -_0x12062e, -_0x12062e, 0x2 * _0x12062e, 0x2 * _0x12062e);
    } else {
      this.drawOutlinedCircle('', "white");
    }
    _0x3b8ba2.restore();
  }
};
_0xf4bb63.prototype.drawUnderEffects = function () {
  if (this.flag_eff_dirty) {
    if (this.effA_dirtStuck > 0.01) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha *= 0.9 * this.effA_dirtStuck;
      var _0x1c5c20 = this.getImageObjForPath("img/dirt/dirt_below.png");
      if (_0x1c5c20) {
        var _0x1d9f96 = this.skinScale;
        var _0x350d9f = this.skinRad - 0x2;
        _0x3b8ba2.drawImage(_0x1c5c20, -_0x350d9f * _0x1d9f96, -_0x350d9f * _0x1d9f96, 0x2 * _0x350d9f * _0x1d9f96, 0x2 * _0x350d9f * _0x1d9f96);
      }
      _0x3b8ba2.restore();
    }
  }
};
_0xf4bb63.prototype.maskStartT = 0x0;
_0xf4bb63.prototype.wasWearingMask = false;
_0xf4bb63.prototype.drawProtectiveMask = function () {
  if (!this.flag_eff_wearingMask) {
    this.wasWearingMask = false;
    return;
  }
  if (!this.wasWearingMask) {
    this.wasWearingMask = true;
    this.maskStartT = _0x1f4c9e;
  }
  _0x3b8ba2.save();
  var _0x3ef6ca = this.getSkinImageObj("img/viralpandemic/mask.png");
  var _0x583049 = this.getSkinImageObj("img/viralpandemic/mask-outline.png");
  if (_0x3ef6ca && _0x583049) {
    var _0x911daf = this.rad * 0.7 + this.rPer;
    var _0x565b85 = _0x911daf * 0.1;
    if (this.animalType == _0x30afcb) {
      _0x565b85 = _0x911daf * 0.2;
    } else {
      if (this.animalType == _0x43c61f) {
        _0x911daf = this.rad * 0.6;
        _0x565b85 = _0x911daf * 0x1;
      } else {
        if (this.animalType == _0x301ddb || this.animalType == _0x3db2bf || this.animalType == _0x4b1170 || this.animalType == _0x1e1d71) {
          _0x565b85 = _0x911daf * -0.05;
        } else {
          if (this.animalType == _0x5b3559) {
            _0x565b85 = _0x911daf * -0.2;
          } else {
            if (this.animalType == _0xcb5cf3) {
              _0x565b85 = _0x911daf * 0x0;
            } else {
              if (this.animalType == _0x1f9f6d || this.animalType == _0x4f3bf1 || this.animalType == _0x54ab20 || this.animalType == _0x3146b2 || this.animalType == _0x344c95) {
                _0x911daf = this.rad * 0.5;
                _0x565b85 = _0x911daf * 0.4;
              } else {
                if (this.animalType == _0x337560) {
                  _0x911daf = this.rad * 0.5;
                  _0x565b85 = _0x911daf * 0.6;
                  if (this.flag_usingAbility) {
                    _0x565b85 = _0x911daf * 1.3;
                  }
                } else {
                  if (this.animalType == _0x1150f3) {
                    _0x911daf = this.rad * 0.55;
                    _0x565b85 = _0x911daf * 0.5;
                    if (this.flag_usingAbility) {
                      _0x565b85 = _0x911daf * 0x1;
                    }
                  } else {
                    if (this.animalType == _0xcb2b53) {
                      _0x911daf = this.rad * 0.43;
                      _0x565b85 = _0x911daf * 0x1;
                      if (this.flag_usingAbility) {
                        if (this.specType == 0x1) {
                          _0x911daf = this.rad * 0.45;
                          _0x565b85 = _0x911daf * 1.3;
                        } else if (this.specType == 0x2) {
                          _0x911daf = this.rad * 0.5;
                          _0x565b85 = _0x911daf * 1.9;
                        }
                      }
                    } else {
                      if (this.animalType == _0x3c3bc1) {
                        _0x911daf = this.rad * 0.5;
                        _0x565b85 = _0x911daf * 0.55;
                        if (this.flag_usingAbility) {
                          _0x565b85 = _0x911daf * 0.8;
                        }
                      } else {
                        if (this.animalType == _0x386e05) {
                          _0x911daf = this.rad * 0.55;
                          _0x565b85 = _0x911daf * 0x0;
                          if (this.flag_usingAbility) {
                            _0x565b85 = _0x911daf * 0.5;
                          }
                        } else {
                          if (this.animalType == _0x5002ba) {
                            _0x911daf = this.rad * 0.4;
                            _0x565b85 = _0x911daf * 1.1;
                            if (this.flag_usingAbility) {
                              _0x911daf = this.rad * 0.5;
                              _0x565b85 = _0x911daf * 0x1;
                            }
                          } else {
                            if (this.animalType == _0x371924) {
                              _0x911daf = this.rad * 0.5;
                              _0x565b85 = _0x911daf * 0.5;
                              if (this.flag_usingAbility) {
                                _0x911daf = this.rad * 0.5;
                                _0x565b85 = _0x911daf * 0x1;
                              }
                            } else {
                              if (this.animalType == _0x4b67a0) {
                                _0x911daf = this.rad * 0.4;
                                _0x565b85 = _0x911daf * 0x1;
                                if (this.flag_usingAbility) {
                                  _0x911daf = this.rad * 0.5;
                                  _0x565b85 = _0x911daf * 0x1;
                                }
                              } else {
                                if (this.animalType == _0x45f5fa) {
                                  _0x911daf = this.rad * 0.4;
                                  _0x565b85 = _0x911daf * 0x1;
                                  if (this.flag_usingAbility) {
                                    _0x3b8ba2.restore();
                                    return;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    var _0x6fad25 = 0x1;
    var _0x2bc7fa = (_0x1f4c9e - this.maskStartT) / 0x3e8;
    if (_0x2bc7fa > 0x50) {
      var _0x6fad25 = 0.4 + 0.1 * Math.sin(0x2 * Math.PI / 0x1 * (_0x1f4c9e / 0x3e8));
    }
    var _0x32f086 = 0.8;
    if (this.flag_inHidingHole) {
      _0x32f086 = 0.6;
    } else {
      if (this.flag_underWater) {
        _0x32f086 = this.idealOp;
      }
    }
    _0x3b8ba2.globalAlpha = _0x32f086 * _0x6fad25;
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x3ef6ca, -_0x911daf, _0x565b85, 0x2 * _0x911daf, 0x2 * _0x911daf);
    _0x3b8ba2.drawImage(_0x583049, -_0x911daf, _0x565b85, 0x2 * _0x911daf, 0x2 * _0x911daf);
  }
  _0x3b8ba2.restore();
};
_0xf4bb63.prototype.drawTopEffects = function () {
  this.effect_aloeveraHeal();
  var _0x178bbb = this.flag_eff_stunned ? 0x1 : 0x0;
  this.stunA += (_0x178bbb - this.stunA) * 0.1;
  if (this.stunA > 0.01) {
    _0x3b8ba2.save();
    var _0x43feaf = 2.5;
    var _0x14d47c = _0x1f4c9e % (_0x43feaf * 0x3e8) / (_0x43feaf * 0x3e8);
    _0x3b8ba2.rotate(_0x14d47c * (0x2 * Math.PI));
    _0x3b8ba2.globalAlpha *= this.stunA;
    var _0x28dd0d = this.rad * 0.2;
    var _0x3afb3a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0xa54bb4 = 0x1;
    var _0x28503a = 0.5 + _0x28dd0d * 0.07;
    var _0x520a70 = _0x28503a * Math.sin(0x2 * Math.PI / _0xa54bb4 * _0x3afb3a);
    _0x3b8ba2.fillStyle = "#F3D444";
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * -0.22, this.rad * -0.22, Math.max(0x0, _0x28dd0d + _0x520a70), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * 0.22, this.rad * -0.22, Math.max(0x0, _0x28dd0d - _0x520a70), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * 0.22, this.rad * 0.22, Math.max(0x0, _0x28dd0d + _0x520a70), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * -0.22, this.rad * 0.22, Math.max(0x0, _0x28dd0d - _0x520a70), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.restore();
  }
  var _0x178bbb = this.flag_eff_onFire ? 0x1 : 0x0;
  this.onFireEffA += (_0x178bbb - this.onFireEffA) * 0.1;
  if (this.onFireEffA > 0.01) {
    var _0xa54bb4 = 0x1;
    var _0xe11bf7 = 0.15;
    var _0x5bd950 = 0.4;
    var _0x157ca4 = 0.5 * (_0x5bd950 - _0xe11bf7);
    var _0x3624e4 = _0xe11bf7 + _0x157ca4 + _0x157ca4 * Math.sin(0x2 * Math.PI / _0xa54bb4 * (_0x1f4c9e / 0x3e8));
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha *= _0x3624e4 * this.onFireEffA;
    _0x133658(0x0, 0x0, Math.max(0x0, this.rad), "orange");
    _0x3b8ba2.restore();
    if (!(_0x4bda0b == 0x2)) {
      var _0xa54bb4 = 0x1;
      var _0xe11bf7 = 0.5;
      var _0x5bd950 = 0x1;
      var _0x157ca4 = 0.5 * (_0x5bd950 - _0xe11bf7);
      var _0x520a70 = _0xe11bf7 + _0x157ca4 + _0x157ca4 * Math.sin(0x2 * Math.PI / _0xa54bb4 * (_0x1f4c9e / 0x3e8));
      var _0x136863 = Math.trunc(_0x1f4c9e / 0x64) % 0x5;
      var _0x5e2740 = Math.trunc(_0x1f4c9e / 0x96) % 0x5;
      var _0x3d3b87 = this.getImageObjForPath("gameobj/70/0/" + _0x136863 + ".png", 0x2);
      var _0x13a3cc = this.getImageObjForPath("gameobj/70/0/" + _0x5e2740 + ".png", 0x2);
      if (_0x3d3b87 || _0x13a3cc) {
        var _0x10ddc0 = 0x0 - this.rad * 0.3;
        var _0x22ddf4 = this.rad * 0.2 - this.rad * 0.3;
        var _0x334a1d = this.rad * 0x1 * (0x2 + _0x520a70 * 0x2) / 0x3;
        var _0xe02782 = this.rad * 0x1 * _0x520a70;
        var _0x57d5ac = 0.5;
        var _0xfef952 = 0.95;
        _0x3b8ba2.save();
        if (_0x3d3b87) {
          _0x3b8ba2.globalAlpha *= this.onFireEffA * _0x520a70;
          _0x3b8ba2.drawImage(_0x3d3b87, _0x10ddc0 + _0x334a1d * -_0x57d5ac, _0x22ddf4 + _0xe02782 * -_0xfef952, _0x334a1d, _0xe02782);
        }
        if (_0x13a3cc) {
          _0x3b8ba2.globalAlpha *= this.onFireEffA * _0x520a70;
          _0x3b8ba2.drawImage(_0x13a3cc, _0x10ddc0 + this.rad * 0.5 + _0x334a1d * -_0x57d5ac, _0x22ddf4 + this.rad * 0.5 + _0xe02782 * -_0xfef952, _0x334a1d, _0xe02782);
        }
        _0x3b8ba2.restore();
      }
    } else {
      var _0xa54bb4 = 0x1;
      var _0xe11bf7 = 0.5;
      var _0x5bd950 = 0x1;
      var _0x157ca4 = 0.5 * (_0x5bd950 - _0xe11bf7);
      var _0x520a70 = _0xe11bf7 + _0x157ca4 + _0x157ca4 * Math.sin(0x2 * Math.PI / _0xa54bb4 * (_0x1f4c9e / 0x3e8));
      var _0x3d3b87 = this.getImageObjForPath("gameobj/70/0.png", 0x2);
      if (_0x3d3b87) {
        var _0x10ddc0 = 0x0 - this.rad * 0.3;
        var _0x22ddf4 = this.rad * 0.2 - this.rad * 0.3;
        var _0x334a1d = this.rad * 0x1 * (0x2 + _0x520a70 * 0x2) / 0x3;
        var _0xe02782 = this.rad * 0x1 * _0x520a70;
        var _0x57d5ac = 0.5;
        var _0xfef952 = 0.95;
        _0x3b8ba2.save();
        _0x3b8ba2.globalAlpha *= this.onFireEffA * _0x520a70;
        _0x3b8ba2.drawImage(_0x3d3b87, _0x10ddc0 + _0x334a1d * -_0x57d5ac, _0x22ddf4 + _0xe02782 * -_0xfef952, _0x334a1d, _0xe02782);
        _0x3b8ba2.globalAlpha *= this.onFireEffA * _0x520a70;
        _0x3b8ba2.drawImage(_0x3d3b87, _0x10ddc0 + this.rad * 0.5 + _0x334a1d * -_0x57d5ac, _0x22ddf4 + this.rad * 0.5 + _0xe02782 * -_0xfef952, _0x334a1d, _0xe02782);
        _0x3b8ba2.restore();
      }
    }
  }
  if (this.frozenEffA > 0.01 && this.flag_eff_frozen) {
    _0x3b8ba2.save();
    var _0x43feaf = 0x7;
    var _0x14d47c = _0x1f4c9e % (_0x43feaf * 0x3e8) / (_0x43feaf * 0x3e8);
    _0x3b8ba2.rotate(_0x14d47c * (0x2 * Math.PI));
    _0x3b8ba2.globalAlpha *= this.frozenEffA;
    var _0x28dd0d = this.rad * 0.2;
    var _0x3afb3a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0xa54bb4 = 0x1;
    var _0x28503a = 0.5 + _0x28dd0d * 0.07;
    var _0x520a70 = _0x28503a * Math.sin(0x2 * Math.PI / _0xa54bb4 * _0x3afb3a);
    _0x3b8ba2.fillStyle = "white";
    var _0xc2d4f6 = this.rad * 0.27;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(-_0xc2d4f6, -_0xc2d4f6, Math.max(0x0, _0x28dd0d + _0x520a70), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(_0xc2d4f6, -_0xc2d4f6, Math.max(0x0, _0x28dd0d - _0x520a70), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(_0xc2d4f6, _0xc2d4f6, Math.max(0x0, _0x28dd0d + _0x520a70), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(-_0xc2d4f6, _0xc2d4f6, Math.max(0x0, _0x28dd0d - _0x520a70), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.restore();
  }
  if (this.frozenEffA > 0.01) {
    _0x3b8ba2.save();
    var _0x11facf = 0.3;
    _0x3b8ba2.globalAlpha *= _0x11facf * this.frozenEffA;
    _0x133658(0x0, 0x0, Math.max(0x0, this.rad - this.outlineW), "white");
    _0x3b8ba2.restore();
  }
  if (this.effA_healing > 0.01) {
    _0x3b8ba2.save();
    var _0x11facf = 0.3;
    _0x3b8ba2.globalAlpha *= _0x11facf * this.effA_healing;
    _0x133658(0x0, 0x0, Math.max(0x0, this.rad - this.outlineW), "#ef24ed");
    _0x3b8ba2.restore();
  }
  this.effect_sweatPoisoned();
  if (this.effA_hot > 0.01) {
    _0x3b8ba2.save();
    var _0x11facf = 0.3;
    var _0xa54bb4 = 1.2;
    var _0xe11bf7 = 0.3;
    var _0x5bd950 = 0x1;
    var _0x157ca4 = 0.5 * (_0x5bd950 - _0xe11bf7);
    _0x3b8ba2.globalAlpha *= _0xe11bf7 + _0x157ca4 + _0x157ca4 * Math.sin(0x2 * Math.PI / _0xa54bb4 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
    _0x133658(0x0, 0x0, Math.max(0x0, this.rad - this.outlineW), "rgba(249, 212, 77, 0.3)");
    _0x3b8ba2.restore();
  }
  if (this.effA_poison > 0.01) {
    _0x3b8ba2.save();
    var _0x11facf = 0.3;
    _0x3b8ba2.globalAlpha *= _0x11facf * this.effA_poison;
    var _0xa54bb4 = 1.2;
    var _0xe11bf7 = 0.3;
    var _0x5bd950 = 0x1;
    var _0x157ca4 = 0.5 * (_0x5bd950 - _0xe11bf7);
    _0x3b8ba2.globalAlpha *= _0xe11bf7 + _0x157ca4 + _0x157ca4 * Math.sin(0x2 * Math.PI / _0xa54bb4 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
    _0x133658(0x0, 0x0, Math.max(0x0, this.rad - this.outlineW), "#9FDA00");
    _0x3b8ba2.restore();
  }
  var _0x178bbb = this.flag_eff_bleeding ? 0.8 : 0x0;
  this.effA_bleeding += (_0x178bbb - this.effA_bleeding) * 0.1;
  if (this.effA_bleeding > 0.01) {
    _0x3b8ba2.save();
    var _0xa54bb4 = 1.2;
    var _0xe11bf7 = 0.3;
    var _0x5bd950 = 0x1;
    var _0x157ca4 = 0.3 * (_0x5bd950 - _0xe11bf7);
    _0x3b8ba2.globalAlpha *= _0xe11bf7 + _0x157ca4 + _0x157ca4 * Math.sin(0x2 * Math.PI / _0xa54bb4 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
    _0x3b8ba2.globalAlpha *= this.effA_bleeding;
    var _0x3ca3aa = -2.6;
    _0x133658(0x0, 0x0, this.rad + _0x3ca3aa * this.effA_bleeding, "red");
    _0x3b8ba2.restore();
  }
  var _0x178bbb = this.flag_eff_slimed ? 0.8 : 0x0;
  this.effA_slimed += (_0x178bbb - this.effA_slimed) * 0.1;
  if (this.effA_slimed > 0.01) {
    _0x3b8ba2.save();
    var _0xa54bb4 = 1.2;
    var _0xe11bf7 = 0.3;
    var _0x5bd950 = 0x1;
    var _0x157ca4 = 0.3 * (_0x5bd950 - _0xe11bf7);
    _0x3b8ba2.globalAlpha *= _0xe11bf7 + _0x157ca4 + _0x157ca4 * Math.sin(0x2 * Math.PI / _0xa54bb4 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
    _0x3b8ba2.globalAlpha *= this.effA_slimed;
    var _0x3ca3aa = -2.6;
    _0x133658(0x0, 0x0, this.rad + _0x3ca3aa * this.effA_slimed, "grey");
    _0x3b8ba2.restore();
  }
  var _0x178bbb = this.flag_eff_stunk ? 0.8 : 0x0;
  this.effA_stunk += (_0x178bbb - this.effA_stunk) * 0.1;
  if (this.effA_stunk > 0.01) {
    _0x3b8ba2.save();
    var _0xa54bb4 = 1.2;
    var _0xe11bf7 = 0.3;
    var _0x5bd950 = 0x1;
    var _0x157ca4 = 0.3 * (_0x5bd950 - _0xe11bf7);
    _0x3b8ba2.globalAlpha *= _0xe11bf7 + _0x157ca4 + _0x157ca4 * Math.sin(0x2 * Math.PI / _0xa54bb4 * ((_0x1f4c9e - this.spawnTime) / 0x3e8));
    _0x3b8ba2.globalAlpha *= this.effA_stunk;
    var _0x3ca3aa = -2.6;
    _0x133658(0x0, 0x0, this.rad + _0x3ca3aa * this.effA_stunk, "brown");
    _0x3b8ba2.restore();
  }
  if (this.animalType == _0x5b3559 && this.flag_usingAbility) {
    var _0xa54bb4 = 0.75;
    var _0x28503a = 0x1;
    var _0x520a70 = _0x28503a * Math.sin(0x2 * Math.PI / _0xa54bb4 * _0x3afb3a);
    var _0x317839 = _0x3b8ba2.globalAlpha;
    _0x3b8ba2.globalAlpha *= 0.8 - 0.2 * _0x520a70;
    _0x133658(this.rad * 0.15, -this.rad * 1.27, this.rad * (0.1 + 0.05 * _0x520a70), "#efefef");
    _0x133658(-this.rad * 0.15, -this.rad * 1.27, this.rad * (0.1 - 0.05 * _0x520a70), "#efefef");
    _0x3b8ba2.globalAlpha = _0x317839;
  }
  var _0x178bbb = this.flag_webStuck ? 0x1 : 0x0;
  this.effA_webStuck += (_0x178bbb - this.effA_webStuck) * 0.02;
  if (this.effA_webStuck > 0.01) {
    _0x3b8ba2.save();
    var _0x11facf = 0.9;
    _0x3b8ba2.globalAlpha *= _0x11facf * this.effA_webStuck;
    var _0x3d3b87 = this.getImageObjForPath("img/web/" + this.eff_webStuckType + "/spiderWeb_stuck.png");
    if (_0x3d3b87) {
      var _0x2c6458 = this.rad * 1.3;
      _0x3b8ba2.rotate(this.angle);
      _0x3b8ba2.drawImage(_0x3d3b87, -_0x2c6458, -_0x2c6458, 0x2 * _0x2c6458, 0x2 * _0x2c6458);
    }
    _0x3b8ba2.restore();
  }
  this.effectDirt();
  var _0x178bbb = this.flag_constricted ? 0x1 : 0x0;
  this.effA_constricted += (_0x178bbb - this.effA_constricted) * 0.04;
  if (this.effA_constricted > 0.01) {
    _0x3b8ba2.save();
    var _0x11facf = 0.9;
    _0x3b8ba2.globalAlpha *= _0x11facf * this.effA_constricted;
    var _0x3de59c = "skins/land/boaconstrictor/" + this.eff_constrictedSpecies;
    if (this.eff_constrictedSubSpecies !== undefined && this.eff_constrictedSubSpecies > 0x0) {
      _0x3de59c += "/" + this.eff_constrictedSubSpecies;
    }
    var _0x58e9d8 = this.eff_constrictedSpecies === 0x1 || this.eff_constrictedSpecies === 0x2 ? 0x1 : this.mopeSeasonID;
    console.log("constrict img: " + _0x3de59c);
    var _0x3d3b87 = this.getSkinImageObjForSeason(_0x3de59c + "/constrict.png", _0x58e9d8);
    if (_0x3d3b87) {
      var _0x2c6458 = this.rad * 1.3;
      _0x3b8ba2.rotate(this.angle);
      _0x3b8ba2.drawImage(_0x3d3b87, -_0x2c6458, -_0x2c6458, 0x2 * _0x2c6458, 0x2 * _0x2c6458);
    }
    _0x3b8ba2.restore();
  }
  this.drawProtectiveMask();
  this.drawElectroStunEffect();
};
_0xf4bb63.prototype.effectDirt = function () {
  if (this.eff_dirtType == 0x0) {
    return;
  }
  if (this.effA_dirtStuck == undefined) {
    this.effA_dirtStuck = 0x0;
  }
  var _0x3153d7 = this.flag_eff_dirty ? 0x1 : 0x0;
  this.effA_dirtStuck += (_0x3153d7 - this.effA_dirtStuck) * 0.02;
  if (this.effA_dirtStuck > 0.01) {
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.globalAlpha *= 0.9 * this.effA_dirtStuck;
    var _0x492b31 = this.getImageObjForPath("img/dirt/" + this.eff_dirtType + "/0.png");
    if (_0x492b31) {
      var _0x78b285 = this.skinScale;
      var _0x11e8ef = this.skinRad;
      _0x3b8ba2.drawImage(_0x492b31, -_0x11e8ef * _0x78b285, -_0x11e8ef * _0x78b285, 0x2 * _0x11e8ef * _0x78b285, 0x2 * _0x11e8ef * _0x78b285);
    }
    var _0x492b31 = this.getImageObjForPath("img/dirt/" + this.eff_dirtType + "/1.png");
    if (_0x492b31) {
      var _0x78b285 = this.skinScale;
      var _0x11e8ef = this.skinRad;
      _0x3b8ba2.drawImage(_0x492b31, -_0x11e8ef * _0x78b285, -_0x11e8ef * _0x78b285, 0x2 * _0x11e8ef * _0x78b285, 0x2 * _0x11e8ef * _0x78b285);
    }
    _0x3b8ba2.restore();
  }
};
_0xf4bb63.prototype.getSpeciesPath = function (_0x43c3fe) {
  return _0x43c3fe + "/" + this.animalSpecies;
};
_0xf4bb63.prototype.getWing = function (_0x52df7e, _0x86e43, _0x3325f8) {
  var _0x22d79b = "skins/" + (_0x3325f8 ? this.getSpeciesPath(_0x52df7e) + "/" : _0x52df7e + "/");
  _0x22d79b += _0x52df7e + "_wing" + _0x86e43 + ".png";
  return _0x22d79b;
};
_0xf4bb63.prototype.getHead = function (_0x4b3010, _0x38691a) {
  var _0x45b073 = "skins/" + (_0x38691a ? this.getSpeciesPath(_0x4b3010) + "/" : _0x4b3010 + "/");
  _0x45b073 += _0x4b3010 + "_head.png";
  return _0x45b073;
};
_0xf4bb63.prototype.getSkinName = function () {
  var _0x4e21a0 = this.skinImgName;
  switch (this.animalType) {
    case _0x3446ed:
    case _0x89ca62:
    case _0x5f4a90:
    case _0x1473db:
    case _0x357f05:
    case _0x22c8fa:
    case _0x479786:
    case _0x35e093:
      if (this.flag_usingAbility) {
        _0x4e21a0 = '' + _0x4e21a0 + "2";
      }
      break;
    case _0x3a6833:
      this.z = this.z * 0x2;
      if (this.flag_usingAbility && this.specType == 0x4) {
        _0x4e21a0 = _0x4e21a0 + "2";
      }
      break;
  }
  return this.getPremiumSkin(_0x4e21a0);
};
_0xf4bb63.prototype.getPremiumSkinFolder = function () {
  switch (this.animalPremiumSkin) {
    case 0x1:
      return "premium/golden/";
    case 0x2:
      return "premium/locked/";
  }
  return '';
};
_0xf4bb63.prototype.getPremiumSkin = function (_0x198e25) {
  return this.getPremiumSkinFolder() + _0x198e25;
};
_0xf4bb63.prototype.onAnimalSpeciesSet = function () {};
_0xf4bb63.prototype.setObjTypes = function (_0x253c19, _0x16bb37) {
  this.oType = _0x253c19;
  this.animalType = _0x16bb37;
};
_0xf4bb63.prototype.readCustomData_onNewlyVisible = function (_0x59245a) {
  _0xf4bb63.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x59245a);
  var _0x146bcd = _0x59245a.readString();
  this.nickName = _0x146bcd && _0x146bcd.length > 0x0 ? _0x146bcd : "mope.io";
  this.animalSpecies = _0x59245a.readUInt16();
  this.animalSubSpecies = _0x59245a.readUInt16();
  this.animalPremiumSkin = _0x59245a.readUInt8();
  this.skinThemeID = _0x59245a.readUInt8();
  this.mopeSeasonID = _0x59245a.readUInt8();
  this.onAnimalSpeciesSet();
  if (this.animalPremiumSkin > 0x0) {
    this.setSparkleInterval(_0x4421b3(0x5, 0xa), _0x4421b3(0x2, 0x3));
  }
  this.setNick(this.nickName);
  var _0x168668 = _0x59245a.readBitGroup();
  this.readUpdatedFlags(_0x168668);
  if (this.flag_webStuck) {
    this.readUpdatedProperty(0x46, _0x59245a);
  }
  this.readUpdatedProperty(0x6c, _0x59245a);
};
_0xf4bb63.prototype.custom_canvas = null;
_0xf4bb63.prototype.drawCanvas = function () {
  if (!this.custom_canvas) {
    this.custom_canvas = document.createElement("canvas");
    var _0x18acb5 = this.rad * 0x14;
    var _0xee450 = this.rad * 0x14;
    this.custom_canvas.width = _0x18acb5;
    this.custom_canvas.height = _0xee450;
    var _0x36a1a6 = this.custom_canvas.getContext("2d");
    _0x36a1a6.save();
    _0x36a1a6.filter = "blur(4px)";
    _0x36a1a6.globalAlpha = 0x1;
    _0x36a1a6.fillStyle = "black";
    _0x36a1a6.fillRect(0x0, 0x0, this.custom_canvas.width * 0x2, this.custom_canvas.height * 0x2);
    _0x36a1a6.globalCompositeOperation = "xor";
    _0x36a1a6.beginPath();
    _0x36a1a6.arc(_0x18acb5 / 0x2, _0x18acb5 / 0x2, this.rad + 0x5, 0x0, 0x2 * Math.PI);
    _0x36a1a6.fillStyle = "red";
    _0x36a1a6.fill();
    _0x36a1a6.restore();
  }
  if (this.custom_canvas != null) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0.5;
    _0x3b8ba2.drawImage(this.custom_canvas, -this.custom_canvas.width / 0x2, -this.custom_canvas.height / 0x2, this.custom_canvas.width, this.custom_canvas.height);
    _0x3b8ba2.restore();
  }
};
_0xf4bb63.prototype.updateAngle = function (_0x133240) {
  var _0x5b3c3b = (_0x133240 - 0x5a) * (Math.PI / 0xb4);
  this.angleDelta = _0x4a21e4(this.angle, _0x5b3c3b);
  this.oAngle = this.angle;
  if (this.firstPosUpd) {
    this.oAngle = this.angle = _0x5b3c3b;
    this.angleDelta = 0x0;
  }
};
_0xf4bb63.prototype.readUpdatedFlags = function (_0x4fa9a3) {
  _0xf4bb63.superClass.prototype.readUpdatedFlags.call(this, _0x4fa9a3);
  this.flag_lowWat = _0x4fa9a3.getBool();
  this.flag_underWater = _0x4fa9a3.getBool();
  this.flag_usingDiveAbility = _0x4fa9a3.getBool();
  this.flag_eff_invincible = _0x4fa9a3.getBool();
  this.flag_usingAbility = _0x4fa9a3.getBool();
  this.flag_tailBitten = _0x4fa9a3.getBool();
  this.flag_eff_stunned = _0x4fa9a3.getBool();
  this.flag_iceSliding = _0x4fa9a3.getBool();
  this.flag_eff_frozen = _0x4fa9a3.getBool();
  this.flag_eff_onFire = _0x4fa9a3.getBool();
  this.flag_eff_healing = _0x4fa9a3.getBool();
  this.flag_eff_poison = _0x4fa9a3.getBool();
  this.flag_constricted = _0x4fa9a3.getBool();
  this.flag_webStuck = _0x4fa9a3.getBool();
  this.flag_stealth = _0x4fa9a3.getBool();
  this.flag_eff_bleeding = _0x4fa9a3.getBool();
  this.flag_flying = _0x4fa9a3.getBool();
  this.flag_isGrabbed = _0x4fa9a3.getBool();
  this.flag_eff_aniInClaws = _0x4fa9a3.getBool();
  this.flag_eff_stunk = _0x4fa9a3.getBool();
  this.flag_cold = _0x4fa9a3.getBool();
  this.flag_inWater = _0x4fa9a3.getBool();
  this.flag_inLava = _0x4fa9a3.getBool();
  this.flag_canClimbHill = _0x4fa9a3.getBool();
  this.flag_isClimbingHill = _0x4fa9a3.getBool();
  this.flag_isDevMode = _0x4fa9a3.getBool();
  this.flag_eff_slimed = _0x4fa9a3.getBool();
  this.flag_eff_wobbling = _0x4fa9a3.getBool();
  this.flag_eff_hot = _0x4fa9a3.getBool();
  this.flag_eff_sweatPoisoned = _0x4fa9a3.getBool();
  this.flag_eff_shivering = _0x4fa9a3.getBool();
  this.flag_inHidingHole = _0x4fa9a3.getBool();
  this.flag_eff_grabbedByFlytrap = _0x4fa9a3.getBool();
  this.flag_eff_aloeveraHealing = _0x4fa9a3.getBool();
  this.flag_eff_tossedInAir = _0x4fa9a3.getBool();
  this.flag_eff_isOnSpiderWeb = _0x4fa9a3.getBool();
  this.flag_fliesLikeDragon = _0x4fa9a3.getBool();
  this.flag_eff_isInMud = _0x4fa9a3.getBool();
  this.flag_eff_statue = _0x4fa9a3.getBool();
  this.flag_eff_isOnTree = _0x4fa9a3.getBool();
  this.flag_eff_isUnderTree = _0x4fa9a3.getBool();
  this.flag_speared = _0x4fa9a3.getBool();
  this.flag_eff_dirty = _0x4fa9a3.getBool();
  this.flag_eff_virusInfection = _0x4fa9a3.getBool();
  this.flag_eff_wearingMask = _0x4fa9a3.getBool();
  this.flag_eff_sanitized = _0x4fa9a3.getBool();
  this.flag_viewing1v1Invite = _0x4fa9a3.getBool();
  this.flag_can1v1 = _0x4fa9a3.getBool();
  this.flag_isInArena = _0x4fa9a3.getBool();
  if (this.flag_isDevMode) {
    this.flag_hideDevPrint = _0x4fa9a3.getBool();
  }
  this.flag_eff_electroStun = _0x4fa9a3.getBool();
};
_0xf4bb63.prototype.readUpdatedProperty = function (_0x22c943, _0x35137f) {
  if (_0x22c943 == 0x3f) {
    this.wins1v1 = _0x35137f.readUInt16();
    if (_0x44469a && this.flag_can1v1) {
      let _0x5d36ac = "\n(wins:" + this.wins1v1 + ")";
      this.nickTXT.setText(this.nickName + _0x5d36ac);
      this.winsAddedInNick = true;
    } else if (this.winsAddedInNick) {
      this.winsAddedInNick = false;
      this.nickTXT.setText(this.nickName);
    }
  } else {
    if (_0x22c943 == 0x40) {
      this.devMode_num = _0x35137f.readUInt8();
      console.log(this.devMode_num);
    } else {
      if (_0x22c943 == 0x41) {
        this.playerNumberFor1v1Arena = _0x35137f.readUInt8();
      } else {
        if (_0x22c943 == 0x43) {
          this.diveType = _0x35137f.readUInt8();
        } else {
          if (_0x22c943 == 0x44) {
            this.eff_statueType = _0x35137f.readUInt8();
          } else {
            if (_0x22c943 == 0x45) {
              this.eff_constrictedSpecies = _0x35137f.readUInt16();
            } else {
              if (_0x22c943 == 0x78) {
                this.eff_constrictedSubSpecies = _0x35137f.readUInt16();
              } else {
                if (_0x22c943 == 0x46) {
                  this.eff_webStuckType = _0x35137f.readUInt8();
                } else {
                  if (_0x22c943 == 0x47) {
                    this.eff_dirtType = _0x35137f.readUInt8();
                  } else {
                    if (_0x22c943 == 0x48) {
                      let _0x602b8f = _0x35137f.readUInt8();
                      if (this.infectionBarA < 0.001) {
                        this.infectionPer = _0x602b8f;
                      }
                      this.infectionPer_n = _0x602b8f;
                      this.infectionBarTimeoutT = +new Date() + 0xbb8;
                    } else {
                      if (_0x22c943 == 0x49) {
                        this.lastHidingHoleID = _0x35137f.readUInt32();
                        this.hidingHoleVisibilityRad = _0x35137f.readUInt16() / 0x4;
                      } else {
                        if (_0x22c943 == 0x4a) {
                          let _0xd2c1e8 = _0x35137f.readUInt8();
                          if (this.infectionBarA < 0.001) {
                            this.infectionPer = _0xd2c1e8;
                          }
                          this.infectionPer_n = _0xd2c1e8;
                          this.infectionBarTimeoutT = +new Date() + 0xbb8;
                        } else {
                          if (_0x22c943 == 0x4d) {
                            this.lava = _0x35137f.readUInt8();
                          } else {
                            if (_0x22c943 == 0x66) {
                              let _0x598458 = _0x35137f.readUInt16() / 0x4;
                              let _0x519037 = _0x35137f.readUInt16() / 0x4;
                              if (_0x598458 > 0x0 && _0x519037 > 0x0) {
                                this.hasDevTarget = _0x2bd878 == this.id;
                                this.target_ox = this.devTargetX;
                                this.target_oy = this.devTargetY;
                                this.target_nx = _0x598458;
                                this.target_ny = _0x519037;
                              } else {
                                this.hasDevTarget = false;
                              }
                            } else if (_0x22c943 == 0x6c) {
                              this.teamID = _0x35137f.readUInt8();
                            } else {
                              this.customUpdatedProperty(_0x22c943, _0x35137f);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
_0xf4bb63.prototype.devTargetX = 0x0;
_0xf4bb63.prototype.devTargetY = 0x0;
_0xf4bb63.prototype.target_ox = 0x0;
_0xf4bb63.prototype.target_oy = 0x0;
_0xf4bb63.prototype.target_nx = 0x0;
_0xf4bb63.prototype.target_ny = 0x0;
_0xf4bb63.prototype.hasDevTarget = false;
_0xf4bb63.prototype.onLerpUpdate = function (_0x5a6bd8) {
  if (this.hasDevTarget) {
    this.devTargetX = _0x5a6bd8 * (this.target_nx - this.target_ox) + this.target_ox;
    this.devTargetY = _0x5a6bd8 * (this.target_ny - this.target_oy) + this.target_oy;
  }
};
_0xf4bb63.prototype.beforeCustomDraw = function (_0x44cab5) {
  if (this.hasDevTarget) {
    console.log(this.devTargetX + ":" + this.devTargetY);
    _0x3b8ba2.save();
    _0x3b8ba2.strokeStyle = "yellow";
    _0x3b8ba2.lineWidth = 0x2;
    _0x3b8ba2.globalAlpha = 0x1;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.moveTo(this.x, this.y);
    _0x3b8ba2.lineTo(this.devTargetX, this.devTargetY);
    _0x3b8ba2.stroke();
    _0x3b8ba2.restore();
  }
};
_0xf4bb63.prototype.customUpdatedProperty = function (_0x4656b4, _0x5efb0d) {};
_0xf4bb63.prototype.diveType = 0x0;
_0xf4bb63.prototype.lastHidingHoleID = 0x0;
_0xf4bb63.prototype.hidingHoleVisibilityRad = 0x0;
_0xf4bb63.prototype.winsAddedInNick = false;
function _0xf4bb63(_0x499caa, _0x191368) {
  _0xf4bb63.superClass.call(this, 0x2);
  this.animalType = _0x191368;
}
_0xf4bb63.prototype.getAbilityInfo = function (_0x1f669e) {
  if (this.animalType == _0x3146b2) {
    var _0x514dc7 = {
      abilName: "Claw Slash!",
      abilImg: "skins/arctic/bear/clawslash.png",
      skinThemeID: this.skinThemeID,
      mopeSeasonID: this.mopeSeasonID
    };
    return _0x514dc7;
  } else {
    return _0x9c6069(_0x1f669e);
  }
};
_0xf4bb63.prototype.calculateZIndex = function () {
  this.updateZ();
  if (_0x11da90 && _0x2bd878 == this.id) {
    this.z = 0x7d0 + this.rad;
  } else {
    if (this.flag_eff_grabbedByFlytrap) {
      this.z = 0x44c + this.rad;
    } else {
      if (this.flag_eff_tossedInAir) {
        this.z = 0x4b0 + this.rad;
      } else {
        if (this.flag_flying) {
          this.z = 0x186a0;
          if (this.flag_isGrabbed) {
            this.z -= this.rad;
          } else {
            this.z += this.rad;
          }
          if (this.flag_eff_aniInClaws) {
            this.z += 0x3e8;
          }
          if (this.specType2 == 0x64) {
            this.z = 0x3f6;
          }
        } else {
          if (this.flag_underWater || this.flag_usingAbility && this.animalType == _0x4ddfd4) {
            this.z = -0x97;
          } else {
            if (this.flag_usingAbility && (this.animalType == _0x1150f3 || this.animalType == _0x3c3bc1 || this.animalType == _0x5af123)) {
              this.z = 0x2711 + this.rad;
            } else {
              if (this.flag_canClimbHill && this.animalType != _0x5af123 || this.animalType == _0x54ab20 || this.animalType == _0x3040c9 || this.animalType == _0x4dd4dc || this.animalType == _0x3146b2 || this.animalType == _0x1515a4 || this.animalType == _0x1473db || this.animalType == _0x40a896 || this.animalType == _0x517417 || this.animalType == _0x4b1170 || this.animalType == _0x542f57 || this.animalType == _0x479786 || this.animalType == _0x5b3559) {
                this.z = 0x3e8 + this.rad;
              } else {
                if (this.animalType == _0x1a6650) {
                  this.z = 0x3f1 + this.rad;
                } else {
                  if (this.animalType == _0x43c61f) {
                    this.z = 0x3f0 + (this.flag_usingAbility ? 0x1 : 0x0) + this.rad;
                  } else {
                    this.z = this.rad * 1.5;
                  }
                }
              }
            }
            if (this.flag_fliesLikeDragon || this.flag_isInArena) {
              this.z += 0x7d0;
            }
          }
        }
      }
    }
  }
  this.updateZ_onTree(this.z);
};
_0xf4bb63.prototype.canDrawDark = function () {
  if (this.flag_inHidingHole) {
    return true;
  }
  return false;
};
var _0x2751fb = null;
_0xf4bb63.prototype.drawDark = function () {
  if (!this.canDrawDark()) {
    console.log("cant draw darkness!");
    return;
  }
  if (_0x2751fb == null) {
    _0x2751fb = document.createElement("canvas");
    var _0x16aa2b = this.rad * 0xa;
    var _0x18e025 = this.rad * 0xa;
    _0x2751fb.width = _0x16aa2b;
    _0x2751fb.height = _0x18e025;
    var _0x5c9dbf = _0x2751fb.getContext("2d");
    _0x5c9dbf.save();
    _0x5c9dbf.filter = "blur(2px)";
    _0x5c9dbf.globalAlpha = 0x1;
    _0x5c9dbf.fillStyle = "black";
    _0x5c9dbf.fillRect(0x0, 0x0, _0x2751fb.width, _0x2751fb.height);
    _0x5c9dbf.globalCompositeOperation = "xor";
    _0x5c9dbf.beginPath();
    _0x5c9dbf.arc(_0x16aa2b / 0x2, _0x16aa2b / 0x2, this.rad - 0x3, 0x0, 0x2 * Math.PI);
    _0x5c9dbf.fillStyle = "blue";
    _0x5c9dbf.fill();
    _0x5c9dbf.restore();
  }
  if (_0x2751fb != null) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0.5;
    _0x3b8ba2.drawImage(_0x2751fb, -_0x2751fb.width / 0x2, -_0x2751fb.height / 0x2, _0x2751fb.width, _0x2751fb.height);
    _0x3b8ba2.restore();
  }
};
_0xf4bb63.prototype.skinThemeID = 0x0;
_0xf4bb63.prototype.getSkinImagePath = function (_0x55a668) {
  var _0x351635 = '';
  if (this.skinThemeID != 0x0 && (this.animalSpecies == 0x0 || this.animalSpecies == 0x1 && this.animalType == _0xa31c83)) {
    _0x351635 = "./assets/t/" + this.skinThemeID + "/" + _0x55a668;
  } else {
    var _0x20a421 = _0x55a668.includes("_dive") ? 0x2 : this.mopeSeasonID;
    _0x351635 = "./assets/s/" + _0x20a421 + "/" + _0x55a668;
  }
  return _0x351635;
};
_0xf4bb63.prototype.getSkinImagePathForShop = function (_0x20c1c4) {
  var _0x3406e2 = '';
  if (this.skinThemeID != 0x0 && this.animalSpecies == 0x0) {
    _0x3406e2 = "./assets/t/" + this.skinThemeID + "/skins/" + _0x20c1c4;
  } else {
    _0x3406e2 = "./assets/s/" + this.mopeSeasonID + "/skins/" + _0x20c1c4;
  }
  return _0x3406e2;
};
_0xf4bb63.prototype.getSkinImageObj = function (_0x423f4f) {
  var _0x1ee839 = this.getSkinImagePath(_0x423f4f);
  return _0x3df4ce(_0x1ee839, function (_0x150cb1) {
    console.log(_0x150cb1.src);
  });
};
_0xf4bb63.prototype.getSkinImageObjAsync = async function (_0x8c9b8e) {
  var _0x13f203 = this.getSkinImagePath(_0x8c9b8e);
  return _0x327e6d(_0x13f203);
};
_0xf4bb63.prototype.getImagePath = function (_0x5e199b, _0x1092fb) {
  const _0x2f0340 = _0x1092fb === undefined ? this.mopeSeasonID : _0x1092fb;
  var _0x887265 = '';
  _0x887265 = "./assets/s/" + _0x2f0340 + "/" + _0x5e199b;
  return _0x887265;
};
_0xf4bb63.prototype.getImageObjForPath = function (_0x4d0f34, _0xd9fc27) {
  var _0x54e12a = this.getImagePath(_0x4d0f34, _0xd9fc27);
  return _0x3df4ce(_0x54e12a, function (_0x50618e) {
    console.log(_0x50618e.src);
  });
};
_0xf4bb63.prototype.setRadius = function (_0x5b4e04) {
  this.rad = _0x5b4e04;
};
window.Animal = _0xf4bb63;
_0x2b451a.setCustomClassForGameObjType(_0xf4bb63, 0x2);
var _0x2995b5 = _0x2b8534;
var _0x53abbc = _0x472b99;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x2b8534.prototype.animalType = _0x2ebefb;
_0x2b8534.prototype.animalSpecies = 0x0;
_0x2b8534.prototype.animalSubSpecies = 0x0;
_0x2b8534.prototype.segmentNum = 0x0;
_0x2b8534.prototype.updateZ = function () {
  this.z = 0x1e - this.segmentNum;
};
_0x2b8534.prototype.customDraw = function (_0x446ed4) {
  _0x3b8ba2.save();
  var _0x2acdc2 = this.segmentNum;
  var _0x19dddc = this.getSkinImageObj("skins/deathworm/segment_" + _0x2acdc2 + ".png");
  if (_0x19dddc) {
    var _0x237507 = this.rad * 0x2;
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x19dddc, -_0x237507, -_0x237507, 0x2 * _0x237507, 0x2 * _0x237507);
  }
  _0x3b8ba2.restore();
};
_0x2b8534.prototype.readCustomData_onNewlyVisible = function (_0x596c15) {
  _0x2b8534.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x596c15);
  this.segmentNum = _0x596c15.readUInt8();
  this.animalSpecies = _0x596c15.readUInt8();
  this.animalSubSpecies = _0x596c15.readUInt8();
  this.animalPremiumSkin = _0x596c15.readUInt8();
  console.log("segment num: " + this.segmentNum);
};
function _0x2b8534(_0x187754, _0x437ae8) {
  _0x2b8534.superClass.call(this, 0x75);
  this.animalType = _0x437ae8;
}
window.AnimalBody = _0x2b8534;
_0x2b451a.setCustomClassForGameObjType(_0x2b8534, 0x75);
var _0x53abbc = _0x472b99;
_0x449548.prototype = Object.create(_0x53abbc.prototype);
_0x449548.prototype.constructor = _0x449548;
_0x449548.superClass = _0x53abbc;
_0x449548.prototype.updateZ = function () {
  this.z = 0x3ea;
};
_0x449548.prototype.readUpdatedProperty = function (_0x522ef5, _0x246b61) {
  if (_0x522ef5 == 0x21) {
    this.webTransparency = _0x246b61.readUInt8();
  }
};
_0x449548.prototype.readCustomData_onNewlyVisible = function (_0x565d63) {
  this.webTransparency = _0x565d63.readUInt8();
  this.webType = _0x565d63.readUInt8();
};
_0x449548.prototype.customDraw = function (_0x2fd47f) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha *= this.webTransparency / 0x64 * 0.9;
  var _0x51081e = this.getSkinImageObj("img/web/" + this.webType + "/spiderWeb.png");
  if (_0x51081e) {
    var _0x1ef2c8 = this.rad;
    _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x51081e, -_0x1ef2c8, -_0x1ef2c8, 0x2 * _0x1ef2c8, 0x2 * _0x1ef2c8);
  }
  _0x3b8ba2.restore();
};
function _0x449548() {
  _0x449548.superClass.call(this, 0x39);
  this.webTransparency = 0x0;
  this.doesDrawEffectScale = true;
  this.drawEffectScale_Slow = true;
}
window.SpiderWeb = _0x449548;
_0x2b451a.setCustomClassForGameObjType(_0x449548, 0x39);
var _0x53abbc = _0xf4bb63;
_0x270841.prototype = Object.create(_0x53abbc.prototype);
_0x270841.prototype.constructor = _0x270841;
_0x270841.superClass = _0x53abbc;
_0x270841.prototype.animalInfo = function () {
  var _0x558635 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x558635.aniName = "Octopus";
      break;
    case 0xc8:
      _0x558635.aniName = "Vampire Squid";
      break;
    case 0xc9:
      _0x558635.aniName = "Fuchsia Tiger";
      break;
    case 0xca:
      _0x558635.aniName = "Na Kika";
      break;
  }
  _0x558635.skinName = this.getSkinName();
  _0x558635.aniDesc = '';
  _0x558635.upgradeText = "UPGRADED to " + _0x558635.aniName + "!\nPress W to use your 'Disguise' ability!\n(Hint: wait for prey to bite you- they get stunned!)";
  _0x558635.aniCol = "#ff8340";
  return _0x558635;
};
_0x270841.prototype.getSkinName = function () {
  let _0x1d7d2f = this.getSpeciesPath() + "/octopus";
  _0x1d7d2f += this.specType == 0x0 ? '' : 0x1;
  return _0x1d7d2f;
};
_0x270841.prototype.getSpeciesPath = function () {
  return "ocean/octopus/" + this.animalSpecies + this.getSubSpecies();
};
_0x270841.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x270841.prototype.getAbilityInfo = function (_0x60d31a) {
  var _0x4b3ab8 = {
    abilName: "Disguise",
    abilImg: "abilities/Disguise.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x4b3ab8;
};
_0x270841.prototype.drawUnderSkinImg = function () {
  if (this.animalSpecies == 0xc8) {
    return;
  }
  var _0x11b2b7 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/head.png");
  if (_0x11b2b7) {
    _0x3b8ba2.save();
    var _0x45f0ce = this.rad - this.outlineW;
    _0x3b8ba2.drawImage(_0x11b2b7, -_0x45f0ce * 1.4705882352941178, -_0x45f0ce * 1.1 * 1.4705882352941178, 0x2 * _0x45f0ce * 1.4705882352941178, 0x2 * _0x45f0ce * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
};
_0x270841.prototype.readCustomData_onNewlyVisible = function (_0x365345) {
  _0x270841.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x365345);
  var _0x5c9ab8 = _0x365345.readUInt8() > 0x0;
  if (_0x5c9ab8) {
    var _0x3e7e88 = _0x365345.readUInt8() > 0x0;
    var _0x524cad = _0x365345.readUInt16();
    this.createDisguiseAniObj(_0x3e7e88, _0x524cad);
  }
};
_0x270841.prototype.customUpdatedProperty = function (_0x426586, _0x260ecc) {
  if (_0x426586 == 0x5e) {
    var _0x4db1d8 = _0x260ecc.readUInt8() > 0x0;
    if (_0x4db1d8) {
      var _0x1f916b = _0x260ecc.readUInt8() > 0x0;
      var _0x58865d = _0x260ecc.readUInt16();
      this.createDisguiseAniObj(_0x1f916b, _0x58865d);
    } else {
      this.octoDrawObj = null;
    }
  }
};
_0x270841.prototype.createDisguiseAniObj = function (_0xa75ce, _0x1bef9b) {
  if (this.octoDrawObj == null) {
    var _0xea6399 = _0xa75ce ? 0x2 : _0x1bef9b;
    var _0x281402 = _0xa75ce ? _0x1bef9b : null;
    var _0x3b6f66 = _0x2b451a.createGameObjOfOType(_0xea6399, _0x281402);
    if (_0xa75ce) {
      _0x3b6f66.animalType = _0x281402;
    }
    _0x3b6f66.oRad = this.oRad;
    _0x3b6f66.nRad = this.nRad;
    _0x3b6f66.curBiome = this.curBiome;
    this.octoDrawObj = _0x3b6f66;
    this.octoDrawObj.mopeSeasonID = 0x2;
  }
};
_0x270841.prototype.drawUnderSkinImgOutline = function () {
  _0x270841.superClass.prototype.drawUnderSkinImgOutline.call(this);
};
_0x270841.prototype.drawOnTopOfSkinImg = function () {
  _0x270841.superClass.prototype.drawOnTopOfSkinImg.call(this);
  if (this.flag_usingAbility) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0x1 - this.underwaterA;
    if (this.octoDisguiseObjT == 0x18) {
      this.octoDrawObj.nRad = 0x19;
    } else {
      if (this.octoDisguiseObjT == 0x1a) {
        this.octoDrawObj.nRad = 0x11;
      } else {
        if (this.octoDisguiseObjT == 0x2e) {
          this.octoDrawObj.nRad = 0xf;
        } else {
          if (this.octoDisguiseObjT == 0xd) {
            this.octoDrawObj.nRad = 0xf;
            this.octoDrawObj.innerRad = 0x23;
          } else {
            this.octoDrawObj.nRad = this.rad;
          }
        }
      }
    }
    this.octoDrawObj.mopeSeasonID = 0x2;
    this.octoDrawObj.draw();
    _0x3b8ba2.restore();
  }
};
_0x270841.prototype.drawWhenUnderwater = function () {
  _0x270841.superClass.prototype.drawWhenUnderwater.call(this);
};
_0x270841.prototype.octoDisguiseObjT = 0x0;
_0x270841.prototype.octoIsAnimal = false;
_0x270841.prototype.drawHealthBar = function () {
  if (this.flag_usingAbility) {
    if (this.octoIsAnimal) {
      _0x270841.superClass.prototype.drawNickName.call(this, 0x1);
      this.octoDrawObj.curBiome = this.curBiome;
      this.hpPer_n = 0x2;
      this.hpPer = 0x19;
      this.hpBarA = 0x1;
    } else {
      return;
    }
  }
  _0x3b8ba2.save();
  var _0x5369bd = _0x1f4c9e < this.hpBarTimeoutT ? 0x1 : 0x0;
  this.hpBarA += (_0x5369bd - this.hpBarA) * 0.04;
  if (this.hpBarA > 0.001) {
    this.hpPer += (this.hpPer_n - this.hpPer) * 0.1;
    var _0x28ba94 = Math.max(0x1, this.rad / 0x19);
    var _0x247218 = 0x14 * _0x28ba94;
    var _0x3b8d9b = 0x5 * _0x28ba94;
    var _0x716022 = -this.rad - 0xa * _0x28ba94;
    _0x3b8ba2.globalAlpha *= this.hpBarA;
    _0x3b8ba2.fillStyle = "rgba(0,0,0,0.35)";
    _0x3b8ba2.fillRect(0x0 - _0x247218 / 0x2, _0x716022 - _0x3b8d9b / 0x2, _0x247218, _0x3b8d9b);
    _0x3b8ba2.fillStyle = "#16D729";
    var _0x5c205d = _0x247218 * (this.hpPer / 0x64);
    if (this.flag_usingAbility && this.octoIsAnimal) {
      _0x5c205d = _0x247218 * 0.25;
    }
    _0x3b8ba2.fillRect(0x0 - _0x247218 / 0x2, _0x716022 - _0x3b8d9b / 0x2, _0x5c205d, _0x3b8d9b);
  }
  _0x3b8ba2.restore();
};
function _0x270841() {
  _0x270841.superClass.call(this, 0x2);
}
window.Octopus = _0x270841;
_0x2b451a.setCustomClassForGameObjType(_0x270841, 0x2, _0x1e1d71);
var _0x53abbc = _0xf4bb63;
_0x5ce8e3.prototype = Object.create(_0x53abbc.prototype);
_0x5ce8e3.prototype.constructor = _0x5ce8e3;
_0x5ce8e3.superClass = _0x53abbc;
_0x5ce8e3.prototype.animalData = {};
_0x5ce8e3.prototype.animalInfo = function () {
  if (this.animalData[this.animalSpecies] == undefined) {
    const _0x48012b = this.animalSpecies === 0x0 ? "Bald Eagle" : this.animalSpecies === 0x1 ? "Golden Eagle" : this.animalSpecies === 0x2 ? "Shahbaz" : "Golden Shahbaz";
    this.animalData[this.animalSpecies] = {
      "info": {
        "aniName": _0x48012b,
        "aniCol": "#5b400d",
        "upgradeText": "UPGRADED to " + _0x48012b + "!\n                      Eagles can fly up other animals in the air!\n                      " + (this.animalSpecies === 0x1 ? "(Can even pick monsters!)" : this.animalSpecies === 0x2 ? "(Shahbaz picks anything including Black Dragon)" : this.animalSpecies === 0x3 ? "(Shahbaz picks everything!)" : '')
      },
      "ability": {
        "abilName": "Fly with prey",
        "abilImg": "abilities/Fly.svg",
        "speciesType": this.animalSpecies,
        "skinThemeID": this.skinThemeID,
        "mopeSeasonID": this.mopeSeasonID
      },
      "skin": (() => {
        const _0x529117 = this.mopeSeasonID === 0x2 && this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0 ? "/" + this.animalSubSpecies : '';
        const _0x5da784 = "land/eagle/" + this.animalSpecies + _0x529117 + "/eagle";
        return {
          "path": ['' + _0x5da784, _0x5da784 + "1", _0x5da784 + "2", _0x5da784 + "3"],
          "wing1": "skins/" + _0x5da784 + "_wing1.png",
          "wing2": "skins/" + _0x5da784 + "_wing2.png",
          "head": "skins/" + _0x5da784 + "_head.png",
          "head1": "skins/" + _0x5da784 + "_head1.png",
          "head2": "skins/" + _0x5da784 + "_head2.png"
        };
      })()
    };
  }
  return this.animalData[this.animalSpecies].info;
};
_0x5ce8e3.prototype.getSkinName = function () {
  return this.animalData[this.animalSpecies].skin.path[this.specType];
};
_0x5ce8e3.prototype.getWing = function (_0x5ed1ab) {
  if (_0x5ed1ab == 0x1) {
    return this.animalData[this.animalSpecies].skin.wing1;
  } else {
    return this.animalData[this.animalSpecies].skin.wing2;
  }
};
_0x5ce8e3.prototype.getHead = function () {
  if (this.specType == 0x1) {
    return this.animalData[this.animalSpecies].skin.head2;
  } else {
    return this.animalData[this.animalSpecies].skin.head;
  }
};
_0x5ce8e3.prototype.getAbilityInfo = function (_0x17f9be) {
  return this.animalData[this.animalSpecies].ability;
};
_0x5ce8e3.prototype.ANIMATION_NAME = "eagle";
_0x5ce8e3.prototype.drawUnderSkinImg = function () {
  if (this.skinThemeID != 0x3) {
    return;
  }
  if (this.flag_flying && !this.flag_isGrabbed) {
    _0x3b8ba2.save();
    var _0x595da9 = _0x1d1686(this.ANIMATION_NAME, this.spawnTime);
    if (_0x595da9 !== undefined && _0x595da9 != null) {
      this.theFrame = _0x595da9;
    }
    var _0x2d9481 = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
    var _0x5dac1e = this.getSkinImageObj(this.getWing(0x1));
    if (_0x5dac1e) {
      _0x3b8ba2.save();
      var _0x442e46 = -(-0.2 + _0x2d9481) * _0x4bb70c;
      var _0x2a9f62 = this.rad * 0.8;
      _0x3b8ba2.rotate(_0x442e46);
      var _0x2f3a1c = 0x0;
      var _0x95154b = this.rad;
      var _0x979ffd = _0x2a9f62 * 0x2 * 0.7;
      var _0x3a40e1 = _0x2a9f62 * 0x2;
      var _0x180665 = -0.2;
      var _0xbd1bf3 = 1.2;
      _0x3b8ba2.drawImage(_0x5dac1e, _0x2f3a1c + _0x979ffd * -_0x180665, _0x95154b + _0x3a40e1 * -_0xbd1bf3, _0x979ffd, _0x3a40e1);
      _0x3b8ba2.restore();
    }
    var _0x5dac1e = this.getSkinImageObj(this.getWing(0x2));
    if (_0x5dac1e) {
      _0x3b8ba2.save();
      var _0x442e46 = -(-0.2 + _0x2d9481) * (-0x5a * (Math.PI / 0xb4));
      var _0x2a9f62 = this.rad * 0.8;
      _0x3b8ba2.rotate(_0x442e46);
      var _0x2f3a1c = 0x0;
      var _0x95154b = this.rad;
      var _0x979ffd = _0x2a9f62 * 0x2 * 0.7;
      var _0x3a40e1 = _0x2a9f62 * 0x2;
      var _0x180665 = 1.2;
      var _0xbd1bf3 = 1.2;
      _0x3b8ba2.drawImage(_0x5dac1e, _0x2f3a1c + _0x979ffd * -_0x180665, _0x95154b + _0x3a40e1 * -_0xbd1bf3, _0x979ffd, _0x3a40e1);
      _0x3b8ba2.restore();
    }
    _0x3b8ba2.restore();
  }
};
_0x5ce8e3.prototype.drawSkinCustomization = function () {
  if (this.skinThemeID == 0x3) {
    return;
  }
  if (!this.flag_usingAbility) {
    return;
  }
  {
    if (this.flag_flying && !this.flag_isGrabbed) {
      _0x3b8ba2.save();
      var _0x2755e6 = _0x1d1686(this.ANIMATION_NAME, this.spawnTime);
      if (_0x2755e6 !== undefined && _0x2755e6 != null) {
        this.theFrame = _0x2755e6;
      }
      var _0x163f5d = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
      var _0x3a32ff = this.getSkinImageObj(this.getWing(0x1));
      if (_0x3a32ff) {
        _0x3b8ba2.save();
        var _0x548d43 = -(-0.2 + _0x163f5d) * _0x4bb70c;
        var _0x208b97 = this.rad * 0.8;
        _0x3b8ba2.rotate(0x2d * (Math.PI / 0xb4) + _0x548d43);
        var _0x1bd15a = 0x0;
        var _0x59a076 = this.rad;
        var _0x27c262 = _0x208b97 * 0x2 * 0.62;
        var _0x163dbb = _0x208b97 * 2.5;
        var _0x5060de = 0.2;
        var _0x477d10 = 1.7;
        _0x3b8ba2.drawImage(_0x3a32ff, _0x1bd15a + _0x27c262 * -_0x5060de, _0x59a076 + _0x163dbb * -_0x477d10, _0x27c262, _0x163dbb);
        _0x3b8ba2.restore();
      }
      var _0x3a32ff = this.getSkinImageObj(this.getWing(0x2));
      if (_0x3a32ff) {
        _0x3b8ba2.save();
        var _0x548d43 = -(-0.2 + _0x163f5d) * (-0x5a * (Math.PI / 0xb4));
        var _0x208b97 = this.rad * 0.8;
        _0x3b8ba2.rotate(-0x2d * (Math.PI / 0xb4) + _0x548d43);
        var _0x1bd15a = 0x0;
        var _0x59a076 = this.rad;
        var _0x27c262 = _0x208b97 * 0x2 * 0.62;
        var _0x163dbb = _0x208b97 * 2.5;
        var _0x5060de = 0.8;
        var _0x477d10 = 1.7;
        _0x3b8ba2.drawImage(_0x3a32ff, _0x1bd15a + _0x27c262 * -_0x5060de, _0x59a076 + _0x163dbb * -_0x477d10, _0x27c262, _0x163dbb);
        _0x3b8ba2.restore();
      }
      _0x3b8ba2.restore();
    } else {
      if (this.specType == 0x1 && this.skinThemeID != 0x3) {
        _0x3b8ba2.save();
        var _0x284b38 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x163f5d = !(_0x4bda0b == 0x2) ? _0x7b826(_0x284b38, 0.7, 0.3, 0x2) : 0x0;
        var _0x3a32ff = this.getSkinImageObj(this.getWing(0x1));
        if (_0x3a32ff) {
          _0x3b8ba2.save();
          var _0x548d43 = -(-0.2 + _0x163f5d) * (0x2d * (Math.PI / 0xb4));
          var _0x208b97 = this.rad * 0.8;
          _0x3b8ba2.rotate(0xf * (Math.PI / 0xb4) + _0x548d43);
          var _0x1bd15a = 0x0;
          var _0x59a076 = this.rad;
          var _0x27c262 = _0x208b97 * 0x2 * 0.8;
          var _0x163dbb = _0x208b97 * 2.2;
          var _0x5060de = 0x0;
          var _0x477d10 = 1.5;
          _0x3b8ba2.drawImage(_0x3a32ff, _0x1bd15a + _0x27c262 * -_0x5060de, _0x59a076 + _0x163dbb * -_0x477d10, _0x27c262, _0x163dbb);
          _0x3b8ba2.restore();
        }
        var _0x3a32ff = this.getSkinImageObj(this.getWing(0x2));
        if (_0x3a32ff) {
          _0x3b8ba2.save();
          var _0x548d43 = -(-0.2 + _0x163f5d) * (-0x2d * (Math.PI / 0xb4));
          var _0x208b97 = this.rad * 0.8;
          _0x3b8ba2.rotate(-0xf * (Math.PI / 0xb4) + _0x548d43);
          var _0x1bd15a = 0x0;
          var _0x59a076 = this.rad;
          var _0x27c262 = _0x208b97 * 0x2 * 0.8;
          var _0x163dbb = _0x208b97 * 2.2;
          var _0x5060de = 0x1;
          var _0x477d10 = 1.5;
          _0x3b8ba2.drawImage(_0x3a32ff, _0x1bd15a + _0x27c262 * -_0x5060de, _0x59a076 + _0x163dbb * -_0x477d10, _0x27c262, _0x163dbb);
          _0x3b8ba2.restore();
        }
        _0x3b8ba2.restore();
      }
    }
    if (this.specType != 0x0 && this.specType != undefined) {
      var _0x1afffb = -0.05;
      if (this.flag_flying) {
        _0x1afffb = 0.1;
      } else if (this.animalSpecies == 0x2) {
        _0x1afffb = -0.075;
      }
      var _0x1109df = this.getSkinImageObj(this.getHead());
      if (_0x1109df) {
        _0x3b8ba2.save();
        var _0x208b97 = this.rad;
        _0x3b8ba2.drawImage(_0x1109df, -_0x208b97 * 1.4705882352941178, (-_0x208b97 + _0x208b97 * _0x1afffb) * 1.4705882352941178, 0x2 * _0x208b97 * 1.4705882352941178, 0x2 * _0x208b97 * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
    }
  }
};
function _0x5ce8e3() {
  _0x5ce8e3.superClass.call(this, 0x2);
}
window.Eagle = _0x5ce8e3;
_0x2b451a.setCustomClassForGameObjType(_0x5ce8e3, 0x2, _0x1150f3);
var _0x53abbc = _0xf4bb63;
_0x2429b1.prototype = Object.create(_0x53abbc.prototype);
_0x2429b1.prototype.constructor = _0x2429b1;
_0x2429b1.superClass = _0x53abbc;
_0x2429b1.prototype.getSkinName = function () {
  return "land/ostrich/" + this.animalSpecies + this.getSubSpecies() + "/ostrich";
};
_0x2429b1.prototype.getSubSpecies = function () {
  return this.animalSpecies === 0xcc ? "/" + this.animalSubSpecies : '';
};
_0x2429b1.prototype.animalInfo = function () {
  var _0x325b34 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x325b34.aniName = "Ostrich!";
      break;
    case 0x1:
      _0x325b34.aniName = "Golden Ostrich!";
      break;
    case 0x2:
      _0x325b34.aniName = "Ruffled Ostrich!";
      break;
    case 0xdc:
      _0x325b34.aniName = "Sunset Ostrich";
      break;
    case 0xcc:
      _0x325b34.aniName = "Necromancer Ostrich!";
      break;
  }
  _0x325b34.skinName = "land/ostrich/" + this.animalSpecies + this.getSubSpecies() + "/ostrich";
  _0x325b34.aniDesc = '';
  _0x325b34.upgradeText = "UPGRADED to " + _0x325b34.aniName + "! Lay eggs to hatch babies! \nCommand babies by placing your crosshair (right-click/W)-\n They can attack prey!";
  _0x325b34.aniCol = "#FF9000";
  return _0x325b34;
};
_0x2429b1.prototype.getAbilityInfo = function (_0x379272) {
  var _0x28991b = {
    abilName: "Command Babies!",
    abilImg: "abilities/Hypnotize.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x28991b;
};
_0x2429b1.prototype.getSkinImageObj = function (_0x5395ac) {
  var _0x1b8ba9 = this.animalSpecies === 0x1 || this.animalSpecies === 0x2 || this.animalSpecies === 0xcc ? 0x1 : this.mopeSeasonID;
  return this.getSkinImageObjForSeason(_0x5395ac, _0x1b8ba9);
};
function _0x2429b1() {
  _0x2429b1.superClass.call(this, 0x2);
}
window.Ostrich = _0x2429b1;
_0x2b451a.setCustomClassForGameObjType(_0x2429b1, 0x2, _0x4f3bf1);
var _0x53abbc = _0xf4bb63;
_0x37d716.prototype = Object.create(_0x53abbc.prototype);
_0x37d716.prototype.constructor = _0x37d716;
_0x37d716.superClass = _0x53abbc;
_0x37d716.prototype.getSkinName = function () {
  return "land/ostrich/" + this.animalSpecies + "/ostrich-baby";
};
_0x37d716.prototype.isEdibleOutlined = function () {
  if (this.mommyID == _0x2bd878) {
    return false;
  }
  var _0x1d01c6 = _0x5c52f8[_0x2bd878];
  if (_0x1d01c6) {
    var _0x38c7e1 = _0x1d01c6.animalType;
    if (_0x38c7e1 == _0x49fd90 || _0x38c7e1 == _0x479786 || _0x38c7e1 == _0x267cc6) {
      return false;
    }
  }
  return _0x37d716.superClass.prototype.isEdibleOutlined.call(this);
  ;
};
_0x37d716.prototype.getSkinImageObj = function (_0x2822f9) {
  var _0x398f5e = this.animalSpecies === 0x1 || this.animalSpecies === 0x2 || this.animalSpecies === 0xcc ? 0x1 : this.mopeSeasonID;
  return this.getSkinImageObjForSeason(_0x2822f9, _0x398f5e);
};
_0x37d716.prototype.readCustomData_onNewlyVisible = function (_0xd69752) {
  _0x37d716.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0xd69752);
  this.mommyID = _0xd69752.readUInt32();
};
function _0x37d716() {
  _0x37d716.superClass.call(this, 0x2);
}
window.OstrichBaby = _0x37d716;
_0x2b451a.setCustomClassForGameObjType(_0x37d716, 0x2, _0x14ebaa);
var _0x5c7fcf = _0x5c7fcf;
var _0x53abbc = _0xf4bb63;
_0x5c7fcf.prototype = Object.create(_0x53abbc.prototype);
_0x5c7fcf.prototype.constructor = _0x5c7fcf;
_0x5c7fcf.superClass = _0x53abbc;
_0x5c7fcf.prototype.getSkinName = function () {
  var _0x418070 = this.getSpeciesPath("land/falcon") + "/falcon";
  _0x418070 += this.specType == 0x0 ? '' : this.specType;
  return _0x418070;
};
_0x5c7fcf.prototype.animalInfo = function () {
  var _0x1298b7 = {};
  var _0x2c8f52 = '';
  switch (this.animalSpecies) {
    case 0x0:
      _0x1298b7.aniName = "Falcon";
      break;
    case 0x1:
      _0x1298b7.aniName = "Predator";
      _0x2c8f52 = "\n(No apex is safe from Predator!)";
      break;
    case 0x2:
      _0x1298b7.aniName = "Shaheen";
      _0x2c8f52 = "\n(Shaheen flies longer and swoop everything!)";
      break;
    case 0xca:
      _0x1298b7.aniName = "Meteor Falcon";
      break;
  }
  _0x1298b7.upgradeText = "UPGRADED to " + _0x1298b7.aniName + "! \nFly, and do a powerful dive attack! Aim it well." + _0x2c8f52;
  _0x1298b7.aniCol = "#FF9000";
  _0x1298b7.skinName = "land/falcon/" + this.animalSpecies + "/falcon" + (this.specType == 0x0 ? '' : this.specType);
  return _0x1298b7;
};
_0x5c7fcf.prototype.getWing = function (_0x582488, _0x2d0690, _0x32e633) {
  _0x32e633 = true;
  var _0x185ea4 = "skins/land/" + (_0x32e633 ? this.getSpeciesPath(_0x582488) + "/" : _0x582488 + "/");
  _0x185ea4 += _0x582488 + "_wing" + _0x2d0690 + ".png";
  return _0x185ea4;
};
_0x5c7fcf.prototype.getHead = function (_0x9c35bb, _0x4e0b5d, _0x35acec) {
  _0x35acec = true;
  var _0xba8642 = "skins/land/" + (_0x35acec ? this.getSpeciesPath(_0x9c35bb) + "/" : _0x9c35bb + "/");
  _0xba8642 += _0x9c35bb + "_head.png";
  return _0xba8642;
};
_0x5c7fcf.prototype.getAbilityInfo = function (_0x487837) {
  var _0x2c733d = {
    abilName: "Sky dive",
    abilImg: "abilities/SkyDive.svg",
    speciesType: this.animalSpecies,
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x2c733d;
};
_0x5c7fcf.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    return;
  }
  if (this.flag_flying && !this.flag_isGrabbed && this.specType == 0x1) {
    _0x3b8ba2.save();
    var _0x2e28d4 = _0x1d1686("bird", this.spawnTime);
    if (_0x2e28d4 !== undefined && _0x2e28d4 != null) {
      this.theFrame = _0x2e28d4;
    }
    var _0x105eaa = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
    var _0x5a531c = this.getSkinImageObj(this.getWing("falcon", 0x1, false));
    if (_0x5a531c) {
      _0x3b8ba2.save();
      var _0x26edfe = -(-0.2 + _0x105eaa) * (0x50 * (Math.PI / 0xb4));
      var _0x1afadf = this.rad * 0.8;
      _0x3b8ba2.rotate(0x19 * (Math.PI / 0xb4) + _0x26edfe);
      var _0x2bea67 = 0x0;
      var _0x5badf6 = this.rad;
      var _0x130fd7 = _0x1afadf * 0x2 * 0.65;
      var _0x8d365c = _0x1afadf * 2.5;
      var _0x2d44b1 = 0x0;
      var _0x2f8cc2 = 1.5;
      _0x3b8ba2.drawImage(_0x5a531c, _0x2bea67 + _0x130fd7 * -_0x2d44b1, _0x5badf6 + _0x8d365c * -_0x2f8cc2, _0x130fd7, _0x8d365c);
      _0x3b8ba2.restore();
    }
    var _0x5a531c = this.getSkinImageObj(this.getWing("falcon", 0x2, false));
    if (_0x5a531c) {
      _0x3b8ba2.save();
      var _0x26edfe = -(-0.2 + _0x105eaa) * (-0x50 * (Math.PI / 0xb4));
      var _0x1afadf = this.rad * 0.8;
      _0x3b8ba2.rotate(-0x19 * (Math.PI / 0xb4) + _0x26edfe);
      var _0x2bea67 = 0x0;
      var _0x5badf6 = this.rad;
      var _0x130fd7 = _0x1afadf * 0x2 * 0.65;
      var _0x8d365c = _0x1afadf * 2.5;
      var _0x2d44b1 = 0x1;
      var _0x2f8cc2 = 1.5;
      _0x3b8ba2.drawImage(_0x5a531c, _0x2bea67 + _0x130fd7 * -_0x2d44b1, _0x5badf6 + _0x8d365c * -_0x2f8cc2, _0x130fd7, _0x8d365c);
      _0x3b8ba2.restore();
    }
    _0x3b8ba2.restore();
  } else {
    if (this.flag_flying && this.specType == 0x2) {
      _0x3b8ba2.save();
      var _0x4132db = (_0x1f4c9e - this.spawnTime) / 0x3e8;
      var _0x105eaa = !(_0x4bda0b == 0x2) ? _0x7b826(_0x4132db, 0.7, 0.3, 0x2) : 0x0;
      var _0x5a531c = this.getSkinImageObj(this.getWing("falcon", 0x1, false));
      if (_0x5a531c) {
        _0x3b8ba2.save();
        var _0x26edfe = 0.2 * (0x19 * (Math.PI / 0xb4));
        var _0x1afadf = this.rad * 0.8;
        _0x3b8ba2.rotate(_0x26edfe);
        var _0x2bea67 = 0x0;
        var _0x5badf6 = this.rad;
        var _0x130fd7 = _0x1afadf * 0x2 * 0.7;
        var _0x8d365c = _0x1afadf * 2.2;
        var _0x2d44b1 = 0x0;
        var _0x2f8cc2 = 1.5;
        _0x3b8ba2.drawImage(_0x5a531c, _0x2bea67 + _0x130fd7 * -_0x2d44b1, _0x5badf6 + _0x8d365c * -_0x2f8cc2, _0x130fd7, _0x8d365c);
        _0x3b8ba2.restore();
      }
      var _0x5a531c = this.getSkinImageObj(this.getWing("falcon", 0x2, false));
      if (_0x5a531c) {
        _0x3b8ba2.save();
        var _0x26edfe = 0.2 * (-0x19 * (Math.PI / 0xb4));
        var _0x1afadf = this.rad * 0.8;
        _0x3b8ba2.rotate(_0x26edfe);
        var _0x2bea67 = 0x0;
        var _0x5badf6 = this.rad;
        var _0x130fd7 = _0x1afadf * 0x2 * 0.7;
        var _0x8d365c = _0x1afadf * 2.2;
        var _0x2d44b1 = 0x1;
        var _0x2f8cc2 = 1.5;
        _0x3b8ba2.drawImage(_0x5a531c, _0x2bea67 + _0x130fd7 * -_0x2d44b1, _0x5badf6 + _0x8d365c * -_0x2f8cc2, _0x130fd7, _0x8d365c);
        _0x3b8ba2.restore();
      }
      _0x3b8ba2.restore();
    } else {
      if (this.flag_flying && this.specType == 0x3) {
        _0x3b8ba2.save();
        var _0x4132db = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x105eaa = !(_0x4bda0b == 0x2) ? _0x7b826(_0x4132db, 0.5, 0.4, 0x2) : 0x0;
        var _0x5a531c = this.getSkinImageObj(this.getWing("falcon", 0x1, true));
        if (_0x5a531c) {
          _0x3b8ba2.save();
          var _0x26edfe = -(-0.2 + _0x105eaa) * (0x2d * (Math.PI / 0xb4));
          var _0x1afadf = this.rad * 0.8;
          _0x3b8ba2.rotate(0xf * (Math.PI / 0xb4) + _0x26edfe);
          var _0x2bea67 = 0x0;
          var _0x5badf6 = this.rad;
          var _0x130fd7 = _0x1afadf * 0x2 * 0x1;
          var _0x8d365c = _0x1afadf * 2.2;
          var _0x2d44b1 = 0x0;
          var _0x2f8cc2 = 1.5;
          _0x3b8ba2.drawImage(_0x5a531c, _0x2bea67 + _0x130fd7 * -_0x2d44b1, _0x5badf6 + _0x8d365c * -_0x2f8cc2, _0x130fd7, _0x8d365c);
          _0x3b8ba2.restore();
        }
        var _0x5a531c = this.getSkinImageObj(this.getWing("falcon", 0x2, true));
        if (_0x5a531c) {
          _0x3b8ba2.save();
          var _0x26edfe = -(-0.2 + _0x105eaa) * (-0x2d * (Math.PI / 0xb4));
          var _0x1afadf = this.rad * 0.8;
          _0x3b8ba2.rotate(-0xf * (Math.PI / 0xb4) + _0x26edfe);
          var _0x2bea67 = 0x0;
          var _0x5badf6 = this.rad;
          var _0x130fd7 = _0x1afadf * 0x2 * 0x1;
          var _0x8d365c = _0x1afadf * 2.2;
          var _0x2d44b1 = 0x1;
          var _0x2f8cc2 = 1.5;
          _0x3b8ba2.drawImage(_0x5a531c, _0x2bea67 + _0x130fd7 * -_0x2d44b1, _0x5badf6 + _0x8d365c * -_0x2f8cc2, _0x130fd7, _0x8d365c);
          _0x3b8ba2.restore();
        }
        _0x3b8ba2.restore();
      }
    }
  }
  if (this.specType != 0x0 && this.specType != undefined) {
    var _0x5e1776 = this.getSkinImageObj(this.getHead("/falcon", true));
    if (_0x5e1776) {
      _0x3b8ba2.save();
      var _0x1afadf = this.rad * (this.specType == 0x3 ? 1.2 : 0x1);
      var _0x2a8585 = _0x1afadf * 0.2;
      if (this.specType == 0x3) {
        _0x2a8585 = _0x1afadf * -0.15;
      }
      _0x3b8ba2.drawImage(_0x5e1776, -_0x1afadf * 1.4705882352941178, (-_0x1afadf + _0x2a8585) * 1.4705882352941178, 0x2 * _0x1afadf * 1.4705882352941178, 0x2 * _0x1afadf * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
  }
};
function _0x5c7fcf() {
  _0x5c7fcf.superClass.call(this, 0x2);
}
window.Falcon = _0x5c7fcf;
_0x2b451a.setCustomClassForGameObjType(_0x5c7fcf, 0x2, _0x337560);
var _0x53abbc = _0xf4bb63;
_0x3ed204.prototype = Object.create(_0x53abbc.prototype);
_0x3ed204.prototype.constructor = _0x3ed204;
_0x3ed204.superClass = _0x53abbc;
_0x3ed204.prototype.animalInfo = function () {
  var _0x390832 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x390832.aniName = "Snowy Owl";
      break;
    case 0xc9:
      _0x390832.aniName = "Owlrigami";
      break;
  }
  _0x390832.skinName = this.getSkinName();
  _0x390832.aniDesc = '';
  _0x390832.upgradeText = "UPGRADED to " + _0x390832.aniName + "!\nAim the crosshair\nright-click / press W when its on top of prey to attack";
  _0x390832.aniCol = "#633838";
  return _0x390832;
};
_0x3ed204.prototype.getSkinName = function () {
  let _0x4ac781 = this.getSpeciesPath() + "/snowyowl";
  _0x4ac781 += this.specType == 0x0 ? '' : this.specType;
  return _0x4ac781;
};
_0x3ed204.prototype.getSpeciesPath = function () {
  return "arctic/snowyowl/" + this.animalSpecies + this.getSubSpecies();
};
_0x3ed204.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x3ed204.prototype.getWing = function (_0x413a70) {
  var _0x4c0231 = "skins/" + this.getSpeciesPath();
  _0x4c0231 += "/snowyowl_wing" + _0x413a70 + ".png";
  return _0x4c0231;
};
_0x3ed204.prototype.getHead = function () {
  var _0x493707 = "skins/" + this.getSpeciesPath();
  _0x493707 += "/snowyowl_head.png";
  return _0x493707;
};
_0x3ed204.prototype.getAbilityInfo = function (_0x1c1e27) {
  var _0x366205 = {
    abilName: "Target Prey!",
    abilImg: "abilities/Target.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x366205;
};
_0x3ed204.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    return;
  }
  if (this.flag_flying && !this.flag_isGrabbed && this.specType == 0x1) {
    _0x3b8ba2.save();
    var _0x4cc0fa = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x5900ba = !(_0x4bda0b == 0x2 || _0x11da90) ? _0x7b826(_0x4cc0fa, 0.7, 0.4, 0x2) : this.birdNoAnimationFlyWingAngle;
    var _0x26e290 = this.getSkinImageObj(this.getWing(0x1));
    if (_0x26e290) {
      _0x3b8ba2.save();
      var _0x1b4cb0 = -(-0.2 + _0x5900ba) * (0x50 * (Math.PI / 0xb4));
      var _0x1df1e3 = this.rad * 0.8;
      _0x3b8ba2.rotate(0x19 * (Math.PI / 0xb4) + _0x1b4cb0);
      var _0x47bd43 = 0x0;
      var _0x57a560 = this.rad;
      var _0x86f63e = _0x1df1e3 * 0x2 * 0.65;
      var _0x2d42e1 = _0x1df1e3 * 2.5;
      var _0x3d131a = 0x0;
      var _0x472924 = 1.5;
      _0x3b8ba2.drawImage(_0x26e290, _0x47bd43 + _0x86f63e * -_0x3d131a, _0x57a560 + _0x2d42e1 * -_0x472924, _0x86f63e, _0x2d42e1);
      _0x3b8ba2.restore();
    }
    var _0x26e290 = this.getSkinImageObj(this.getWing(0x2));
    if (_0x26e290) {
      _0x3b8ba2.save();
      var _0x1b4cb0 = -(-0.2 + _0x5900ba) * (-0x50 * (Math.PI / 0xb4));
      var _0x1df1e3 = this.rad * 0.8;
      _0x3b8ba2.rotate(-0x19 * (Math.PI / 0xb4) + _0x1b4cb0);
      var _0x47bd43 = 0x0;
      var _0x57a560 = this.rad;
      var _0x86f63e = _0x1df1e3 * 0x2 * 0.65;
      var _0x2d42e1 = _0x1df1e3 * 2.5;
      var _0x3d131a = 0x1;
      var _0x472924 = 1.5;
      _0x3b8ba2.drawImage(_0x26e290, _0x47bd43 + _0x86f63e * -_0x3d131a, _0x57a560 + _0x2d42e1 * -_0x472924, _0x86f63e, _0x2d42e1);
      _0x3b8ba2.restore();
    }
    _0x3b8ba2.restore();
  } else {
    if (this.flag_flying && this.specType == 0x2) {
      _0x3b8ba2.save();
      var _0x4cc0fa = (_0x1f4c9e - this.spawnTime) / 0x3e8;
      var _0x5900ba = !(_0x4bda0b == 0x2) ? _0x7b826(_0x4cc0fa, 0.7, 0.3, 0x2) : 0x0;
      var _0x26e290 = this.getSkinImageObj(this.getWing(0x1));
      if (_0x26e290) {
        _0x3b8ba2.save();
        var _0x1b4cb0 = -(-0.2 + _0x5900ba) * (0x2d * (Math.PI / 0xb4));
        var _0x1df1e3 = this.rad * 0.8;
        _0x3b8ba2.rotate(0xf * (Math.PI / 0xb4) + _0x1b4cb0);
        var _0x47bd43 = 0x0;
        var _0x57a560 = this.rad;
        var _0x86f63e = _0x1df1e3 * 0x2 * 0.7;
        var _0x2d42e1 = _0x1df1e3 * 2.2;
        var _0x3d131a = 0x0;
        var _0x472924 = 1.5;
        _0x3b8ba2.drawImage(_0x26e290, _0x47bd43 + _0x86f63e * -_0x3d131a, _0x57a560 + _0x2d42e1 * -_0x472924, _0x86f63e, _0x2d42e1);
        _0x3b8ba2.restore();
      }
      var _0x26e290 = this.getSkinImageObj(this.getWing(0x2));
      if (_0x26e290) {
        _0x3b8ba2.save();
        var _0x1b4cb0 = -(-0.2 + _0x5900ba) * (-0x2d * (Math.PI / 0xb4));
        var _0x1df1e3 = this.rad * 0.8;
        _0x3b8ba2.rotate(-0xf * (Math.PI / 0xb4) + _0x1b4cb0);
        var _0x47bd43 = 0x0;
        var _0x57a560 = this.rad;
        var _0x86f63e = _0x1df1e3 * 0x2 * 0.7;
        var _0x2d42e1 = _0x1df1e3 * 2.2;
        var _0x3d131a = 0x1;
        var _0x472924 = 1.5;
        _0x3b8ba2.drawImage(_0x26e290, _0x47bd43 + _0x86f63e * -_0x3d131a, _0x57a560 + _0x2d42e1 * -_0x472924, _0x86f63e, _0x2d42e1);
        _0x3b8ba2.restore();
      }
      _0x3b8ba2.restore();
    } else {
      if (this.flag_flying && this.specType == 0x3) {
        _0x3b8ba2.save();
        var _0x4cc0fa = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x5900ba = !(_0x4bda0b == 0x2) ? _0x7b826(_0x4cc0fa, 0.5, 0.5, 0x2) : 0x0;
        var _0x26e290 = this.getSkinImageObj(this.getWing(0x1));
        if (_0x26e290) {
          _0x3b8ba2.save();
          var _0x1b4cb0 = -(-0.2 + _0x5900ba) * (0x2d * (Math.PI / 0xb4));
          var _0x1df1e3 = this.rad * 0.8;
          _0x3b8ba2.rotate(0x19 * (Math.PI / 0xb4) + _0x1b4cb0);
          var _0x47bd43 = 0x0;
          var _0x57a560 = this.rad;
          var _0x86f63e = _0x1df1e3 * 0x2 * 0.7;
          var _0x2d42e1 = _0x1df1e3 * 2.2;
          var _0x3d131a = 0x0;
          var _0x472924 = 1.5;
          _0x3b8ba2.drawImage(_0x26e290, _0x47bd43 + _0x86f63e * -_0x3d131a, _0x57a560 + _0x2d42e1 * -_0x472924, _0x86f63e, _0x2d42e1);
          _0x3b8ba2.restore();
        }
        var _0x26e290 = this.getSkinImageObj(this.getWing(0x2));
        if (_0x26e290) {
          _0x3b8ba2.save();
          var _0x1b4cb0 = -(-0.2 + _0x5900ba) * (-0x2d * (Math.PI / 0xb4));
          var _0x1df1e3 = this.rad * 0.8;
          _0x3b8ba2.rotate(-0x19 * (Math.PI / 0xb4) + _0x1b4cb0);
          var _0x47bd43 = 0x0;
          var _0x57a560 = this.rad;
          var _0x86f63e = _0x1df1e3 * 0x2 * 0.7;
          var _0x2d42e1 = _0x1df1e3 * 2.2;
          var _0x3d131a = 0x1;
          var _0x472924 = 1.5;
          _0x3b8ba2.drawImage(_0x26e290, _0x47bd43 + _0x86f63e * -_0x3d131a, _0x57a560 + _0x2d42e1 * -_0x472924, _0x86f63e, _0x2d42e1);
          _0x3b8ba2.restore();
        }
        _0x3b8ba2.restore();
      }
    }
  }
  if (this.specType != 0x0 && this.specType != undefined) {
    var _0xf75ac7 = this.getSkinImageObj(this.getHead());
    if (_0xf75ac7) {
      _0x3b8ba2.save();
      var _0x1df1e3 = this.rad;
      _0x3b8ba2.drawImage(_0xf75ac7, -_0x1df1e3 * 1.4705882352941178, (-_0x1df1e3 + _0x1df1e3 * 0.1) * 1.4705882352941178, 0x2 * _0x1df1e3 * 1.4705882352941178, 0x2 * _0x1df1e3 * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
  }
};
function _0x3ed204() {
  _0x3ed204.superClass.call(this, 0x2);
}
window.SnowyOwl = _0x3ed204;
_0x2b451a.setCustomClassForGameObjType(_0x3ed204, 0x2, _0x5002ba);
var _0x3a821e = _0x3a821e;
var _0x53abbc = _0xf4bb63;
_0x3a821e.prototype = Object.create(_0x53abbc.prototype);
_0x3a821e.prototype.constructor = _0x3a821e;
_0x3a821e.superClass = _0x53abbc;
_0x3a821e.prototype.getSpeciesPath = function (_0x2532dd) {
  return "ocean/" + _0x2532dd + "/" + this.animalSpecies + "/" + this.animalSubSpecies;
};
_0x3a821e.prototype.getSkinName = function () {
  return this.getSpeciesPath("pelican") + "/pelican" + (this.specType == 0x0 ? '' : this.specType);
};
_0x3a821e.prototype.getAbilityInfo = function (_0x10eb73) {
  var _0x16e0c9 = {
    abilName: "Fly with water",
    abilImg: "abilities/PelicanFlyWithWater.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x16e0c9;
};
_0x3a821e.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    return;
  }
  var _0x3d2fd0 = this.rad - this.outlineW;
  if (this.flag_flying) {
    var _0x3ebb91 = '';
    _0x3ebb91 = "pelican";
    _0x3b8ba2.save();
    var _0x37b93a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x4ff58b = !(_0x4bda0b == 0x2 || _0x11da90) ? _0x7b826(_0x37b93a, 0.9, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle;
    var _0xddf333 = this.getSkinImageObj(this.getWing("pelican", 0x1, true));
    if (_0xddf333) {
      _0x3b8ba2.save();
      var _0x5b50b2 = -(-0.2 + _0x4ff58b) * _0x4bb70c;
      var _0x3d2fd0 = this.rad * 0.8;
      _0x3b8ba2.rotate(0x2d * (Math.PI / 0xb4) + _0x5b50b2);
      var _0x1dfcbb = 0x0;
      var _0x4de64b = this.rad;
      var _0x32aece = _0x3d2fd0 * 0x2 * 0.6;
      var _0x55838a = _0x3d2fd0 * 2.3;
      var _0x10de6c = 0x0;
      var _0x42ab6b = 1.7;
      _0x3b8ba2.drawImage(_0xddf333, _0x1dfcbb + _0x32aece * -_0x10de6c, _0x4de64b + _0x55838a * -_0x42ab6b, _0x32aece, _0x55838a);
      _0x3b8ba2.restore();
    }
    var _0xddf333 = this.getSkinImageObj(this.getWing("pelican", 0x2, true));
    if (_0xddf333) {
      _0x3b8ba2.save();
      var _0x5b50b2 = -(-0.2 + _0x4ff58b) * (-0x5a * (Math.PI / 0xb4));
      var _0x3d2fd0 = this.rad * 0.8;
      _0x3b8ba2.rotate(-0x2d * (Math.PI / 0xb4) + _0x5b50b2);
      var _0x1dfcbb = 0x0;
      var _0x4de64b = this.rad;
      var _0x32aece = _0x3d2fd0 * 0x2 * 0.6;
      var _0x55838a = _0x3d2fd0 * 2.3;
      var _0x10de6c = 0x1;
      var _0x42ab6b = 1.7;
      _0x3b8ba2.drawImage(_0xddf333, _0x1dfcbb + _0x32aece * -_0x10de6c, _0x4de64b + _0x55838a * -_0x42ab6b, _0x32aece, _0x55838a);
      _0x3b8ba2.restore();
    }
    _0x3b8ba2.restore();
  } else {
    if (this.specType == 0x1) {
      var _0x3ebb91 = '';
      _0x3ebb91 = "pelican";
      _0x3b8ba2.save();
      var _0x37b93a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
      var _0x4ff58b = !(_0x4bda0b == 0x2) ? _0x7b826(_0x37b93a, 0.9, 0.3, 0x2) : 0x0;
      var _0xddf333 = this.getSkinImageObj(this.getWing("pelican", 0xb, true));
      if (_0xddf333) {
        _0x3b8ba2.save();
        var _0x5b50b2 = -(-0.2 + _0x4ff58b) * (0x2d * (Math.PI / 0xb4));
        var _0x3d2fd0 = this.rad * 0.8;
        _0x3b8ba2.rotate(0x2d * (Math.PI / 0xb4) + _0x5b50b2);
        var _0x1dfcbb = 0x0;
        var _0x4de64b = this.rad;
        var _0x32aece = _0x3d2fd0 * 0x2 * 0.7;
        var _0x55838a = _0x3d2fd0 * 2.2;
        var _0x10de6c = 0x0;
        var _0x42ab6b = 1.7;
        _0x3b8ba2.drawImage(_0xddf333, _0x1dfcbb + _0x32aece * -_0x10de6c, _0x4de64b + _0x55838a * -_0x42ab6b, _0x32aece, _0x55838a);
        _0x3b8ba2.restore();
      }
      var _0xddf333 = this.getSkinImageObj(this.getWing("pelican", 0x15, true));
      if (_0xddf333) {
        _0x3b8ba2.save();
        var _0x5b50b2 = -(-0.2 + _0x4ff58b) * (-0x2d * (Math.PI / 0xb4));
        var _0x3d2fd0 = this.rad * 0.8;
        _0x3b8ba2.rotate(-0x2d * (Math.PI / 0xb4) + _0x5b50b2);
        var _0x1dfcbb = 0x0;
        var _0x4de64b = this.rad;
        var _0x32aece = _0x3d2fd0 * 0x2 * 0.7;
        var _0x55838a = _0x3d2fd0 * 2.2;
        var _0x10de6c = 0x1;
        var _0x42ab6b = 1.7;
        _0x3b8ba2.drawImage(_0xddf333, _0x1dfcbb + _0x32aece * -_0x10de6c, _0x4de64b + _0x55838a * -_0x42ab6b, _0x32aece, _0x55838a);
        _0x3b8ba2.restore();
      }
      _0x3b8ba2.restore();
    }
  }
  if (this.specType != 0x0 && !this.flag_isGrabbed) {
    if (this.specType == 0x2) {
      var _0x27644a = "skins/" + this.getSpeciesPath("pelican") + "/ability_pelican.png";
      var _0x3668b5 = this.getSkinImageObj(_0x27644a);
      if (_0x3668b5) {
        _0x3b8ba2.save();
        _0x3b8ba2.rotate(0xb4 * (Math.PI / 0xb4));
        var _0x3d2fd0 = this.rad * 0.3;
        var _0x333d17 = this.rad * 0x1;
        _0x3b8ba2.drawImage(_0x3668b5, -_0x3d2fd0 * 1.4705882352941178, -_0x3d2fd0 - _0x333d17 * 1.4705882352941178, 0x2 * _0x3d2fd0 * 1.4705882352941178, 0x2 * _0x3d2fd0 * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
    }
    var _0x12765e = this.getSkinImageObj(this.getHead("pelican", true));
    if (_0x12765e) {
      _0x3b8ba2.save();
      var _0x3d2fd0 = this.rad * 0x1;
      var _0x333d17 = -this.rad * 0.3;
      _0x3b8ba2.drawImage(_0x12765e, -_0x3d2fd0 * 1.4705882352941178, -_0x3d2fd0 + _0x333d17 * 1.4705882352941178, 0x2 * _0x3d2fd0 * 1.4705882352941178, 0x2 * _0x3d2fd0 * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
  }
};
function _0x3a821e() {
  _0x3a821e.superClass.call(this, 0x2);
}
window.Pelican = _0x3a821e;
_0x2b451a.setCustomClassForGameObjType(_0x3a821e, 0x2, _0x3c3bc1);
var _0x53abbc = _0xf4bb63;
_0x33f751.prototype = Object.create(_0x53abbc.prototype);
_0x33f751.prototype.constructor = _0x33f751;
_0x33f751.superClass = _0x53abbc;
_0x33f751.prototype.updateZ = function () {
  this.z = 0x3eb + this.rad;
};
_0x33f751.prototype.getSkinName = function () {
  var _0x33b2fc = '';
  if (this.flag_usingAbility && !this.flag_underWater) {
    _0x33b2fc = "2";
  }
  return "frog/frog" + _0x33b2fc;
};
_0x33f751.prototype.drawUnderSkinImg = function () {
  if (this.flag_usingAbility && !this.flag_underWater) {
    var _0x587bc1 = this.rad - this.outlineW;
    var _0x1a2a53 = this.getSkinImageObj("./skins/frog/frogLegs.png");
    if (_0x1a2a53) {
      _0x3b8ba2.drawImage(_0x1a2a53, -_0x587bc1 * 1.4705882352941178, (-_0x587bc1 - _0x587bc1) * 1.4705882352941178, 0x2 * _0x587bc1 * 1.4705882352941178, 0x2 * _0x587bc1 * 1.4705882352941178);
    }
  }
};
_0x33f751.prototype.canDrawAnimalSkin = function () {
  return !this.flag_underWater;
};
_0x33f751.prototype.drawUnderWater = function () {
  if (this.flag_underWater) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0.2;
    _0x3b8ba2.scale(0x1, 1.5);
    _0x133658(0x0, 0x0, this.rad * 0.5, "#598b30");
    _0x133658(0x0, this.rad * -0.6, this.rad * 0.3, "#64a034");
    _0x3b8ba2.restore();
  }
};
function _0x33f751() {
  _0x33f751.superClass.call(this, 0x2);
}
window.Frog = _0x33f751;
_0x2b451a.setCustomClassForGameObjType(_0x33f751, 0x2, _0x25c952);
var _0x2995b5 = _0x1a2bdf;
var _0x53abbc = _0xf4bb63;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x1a2bdf.prototype.isAttacking = false;
_0x1a2bdf.prototype.objSkinPath = {};
_0x1a2bdf.prototype.getSkinName = function () {
  return this.objSkinPath[this.getSkinIndex()].skin;
};
_0x1a2bdf.prototype.getSkinIndex = function () {
  if (this.animalSpecies == 0x2 && (this.isAttacking || this.flag_usingAbility)) {
    return 0x3;
  }
  return this.animalSpecies;
};
_0x1a2bdf.prototype.setSkinPath = function () {};
_0x1a2bdf.prototype.onAnimalSpeciesSet = function () {
  let _0x2a7a97 = this.animalSpecies;
  let _0x146d04 = '';
  let {
    skin: _0x486ba6,
    wing1: _0x269668,
    wing2: _0x1eb9f9,
    head: _0x18189f
  } = {
    "skin": "duck/" + _0x2a7a97 + "/duck" + _0x146d04,
    "wing1": "skins/duck/" + _0x2a7a97 + "/duck_wing1.png",
    "wing2": "skins/duck/" + _0x2a7a97 + "/duck_wing2.png",
    "head": "skins/duck/" + _0x2a7a97 + "/duck_head.png"
  };
  this.objSkinPath[_0x2a7a97] = {
    "skin": _0x486ba6,
    "wing1": _0x269668,
    "wing2": _0x1eb9f9,
    "head": _0x18189f
  };
  if (_0x2a7a97 === 0x2) {
    _0x146d04 = 0x1;
    ({
      skin: _0x486ba6,
      wing1: _0x269668,
      wing2: _0x1eb9f9,
      head: _0x18189f
    } = {
      "skin": "duck/" + _0x2a7a97 + "/duck" + _0x146d04,
      "wing1": "skins/duck/" + _0x2a7a97 + "/duck_wing1.png",
      "wing2": "skins/duck/" + _0x2a7a97 + "/duck_wing2.png",
      "head": "skins/duck/" + _0x2a7a97 + "/duck_head.png"
    });
    this.objSkinPath[0x3] = {
      "skin": _0x486ba6,
      "wing1": _0x269668,
      "wing2": _0x1eb9f9,
      "head": _0x18189f
    };
  }
};
_0x2995b5.prototype.drawSkinCustomization = function () {
  if (this.isAttacking && this.animalSpecies == 0x2) {
    this.angryGooseAnimation();
  }
  if (this.flag_usingAbility && this.animalSpecies == 0x2) {
    this.flyingAnimation();
  }
};
_0x1a2bdf.prototype.angryGooseAnimation = function () {
  var _0x1bd679 = this.skinScale;
  _0x3b8ba2.save();
  var _0x43d23c = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x207368 = !(_0x4bda0b == 0x2 || _0x11da90) ? _0x7b826(_0x43d23c, 0.5, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle;
  var _0x36a327 = this.getSkinImageObj(this.objSkinPath[this.getSkinIndex()].wing1);
  if (_0x36a327) {
    _0x3b8ba2.save();
    var _0x531d22 = -(-0.2 + _0x207368) * (0xf * (Math.PI / 0xb4));
    var _0x30ef8f = this.rad * 0.8;
    _0x3b8ba2.rotate(0xf * (Math.PI / 0xb4) + _0x531d22);
    var _0x3fcee9 = 0x0;
    var _0x20f776 = this.rad;
    var _0x881cf0 = _0x30ef8f * 0x2 * 0.7;
    var _0x1c8044 = _0x30ef8f * 2.2;
    var _0x3399b1 = 0x0;
    var _0xdb86d5 = 1.5;
    _0x3b8ba2.drawImage(_0x36a327, _0x3fcee9 + _0x881cf0 * -_0x3399b1, _0x20f776 + _0x1c8044 * -_0xdb86d5, _0x881cf0, _0x1c8044);
    _0x3b8ba2.restore();
  }
  var _0x36a327 = this.getSkinImageObj(this.objSkinPath[this.getSkinIndex()].wing2);
  if (_0x36a327) {
    _0x3b8ba2.save();
    var _0x531d22 = -(-0.2 + _0x207368) * (-0xf * (Math.PI / 0xb4));
    var _0x30ef8f = this.rad * 0.8;
    _0x3b8ba2.rotate(-0xf * (Math.PI / 0xb4) + _0x531d22);
    var _0x3fcee9 = 0x0;
    var _0x20f776 = this.rad;
    var _0x881cf0 = _0x30ef8f * 0x2 * 0.7;
    var _0x1c8044 = _0x30ef8f * 2.2;
    var _0x3399b1 = 0x1;
    var _0xdb86d5 = 1.5;
    _0x3b8ba2.drawImage(_0x36a327, _0x3fcee9 + _0x881cf0 * -_0x3399b1, _0x20f776 + _0x1c8044 * -_0xdb86d5, _0x881cf0, _0x1c8044);
    _0x3b8ba2.restore();
  }
  var _0x3a80b3 = this.getSkinImageObj(this.objSkinPath[this.getSkinIndex()].head);
  if (_0x3a80b3) {
    _0x3b8ba2.save();
    var _0x30ef8f = this.rad * 0x1;
    var _0x618a7d = -this.rad * 0.1;
    _0x3b8ba2.drawImage(_0x3a80b3, -_0x30ef8f * _0x1bd679, -_0x30ef8f + _0x618a7d * _0x1bd679, 0x2 * _0x30ef8f * _0x1bd679, 0x2 * _0x30ef8f * _0x1bd679);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
_0x1a2bdf.prototype.skinScale = 1.4705882352941178;
_0x1a2bdf.prototype.flyingAnimation = function () {
  var _0x16e342 = this.skinScale;
  if (this.flag_flying && !this.flag_isGrabbed) {
    _0x3b8ba2.save();
    var _0x3d53d0 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x2d5f0c = !(_0x4bda0b == 0x2 || _0x11da90) ? _0x7b826(_0x3d53d0, 0.5, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle;
    var _0x2cde80 = this.getSkinImageObj(this.objSkinPath[this.getSkinIndex()].wing1);
    if (_0x2cde80) {
      _0x3b8ba2.save();
      var _0x248136 = -(-0.2 + _0x2d5f0c) * _0x4bb70c;
      var _0x196fba = this.rad * 0.8;
      _0x3b8ba2.rotate(0x2d * (Math.PI / 0xb4) + _0x248136);
      var _0x3ff2a4 = 0x0;
      var _0x2c56f8 = this.rad;
      var _0x460ddf = _0x196fba * 0x2 * 0.62;
      var _0x192fce = _0x196fba * 2.5;
      var _0x418ca5 = 0.2;
      var _0x4cc1dd = 1.7;
      _0x3b8ba2.drawImage(_0x2cde80, _0x3ff2a4 + _0x460ddf * -_0x418ca5, _0x2c56f8 + _0x192fce * -_0x4cc1dd, _0x460ddf, _0x192fce);
      _0x3b8ba2.restore();
    }
    var _0x2cde80 = this.getSkinImageObj(this.objSkinPath[this.getSkinIndex()].wing2);
    if (_0x2cde80) {
      _0x3b8ba2.save();
      var _0x248136 = -(-0.2 + _0x2d5f0c) * (-0x5a * (Math.PI / 0xb4));
      var _0x196fba = this.rad * 0.8;
      _0x3b8ba2.rotate(-0x2d * (Math.PI / 0xb4) + _0x248136);
      var _0x3ff2a4 = 0x0;
      var _0x2c56f8 = this.rad;
      var _0x460ddf = _0x196fba * 0x2 * 0.62;
      var _0x192fce = _0x196fba * 2.5;
      var _0x418ca5 = 0.8;
      var _0x4cc1dd = 1.7;
      _0x3b8ba2.drawImage(_0x2cde80, _0x3ff2a4 + _0x460ddf * -_0x418ca5, _0x2c56f8 + _0x192fce * -_0x4cc1dd, _0x460ddf, _0x192fce);
      _0x3b8ba2.restore();
    }
    _0x3b8ba2.restore();
  }
  if (this.specType != 0x0 && this.specType != undefined) {
    var _0x5216c2 = this.getSkinImageObj(this.objSkinPath[this.getSkinIndex()].head);
    if (_0x5216c2) {
      _0x3b8ba2.save();
      var _0x196fba = this.rad;
      _0x3b8ba2.drawImage(_0x5216c2, -_0x196fba * _0x16e342, (-_0x196fba + _0x196fba * 0.1) * _0x16e342, 0x2 * _0x196fba * _0x16e342, 0x2 * _0x196fba * _0x16e342);
      _0x3b8ba2.restore();
    }
  }
};
_0x1a2bdf.prototype.readCustomData_onNewlyVisible = function (_0x54fa1b) {
  _0x1a2bdf.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x54fa1b);
  this.isAttacking = _0x54fa1b.readUInt8();
};
_0x1a2bdf.prototype.readCustomData_onUpdate = function (_0x133050) {
  _0x1a2bdf.superClass.prototype.readCustomData_onUpdate.call(this, _0x133050);
  this.isAttacking = _0x133050.readUInt8();
};
function _0x1a2bdf() {
  _0x53abbc.call(this, 0x2);
}
window.Duck = _0x1a2bdf;
_0x2b451a.setCustomClassForGameObjType(_0x1a2bdf, 0x2, _0xd29b39);
var _0x53abbc = _0xf4bb63;
_0x195153.prototype = Object.create(_0x53abbc.prototype);
_0x195153.prototype.constructor = _0x195153;
_0x195153.superClass = _0x53abbc;
_0x195153.prototype.setSkinPath = function () {
  this.objSkinPath = "duck/duckling";
};
_0x195153.prototype.getSkinName = function () {
  return this.objSkinPath;
};
function _0x195153() {
  _0x195153.superClass.call(this, 0x2);
}
window.Duckling = _0x195153;
_0x2b451a.setCustomClassForGameObjType(_0x195153, 0x2, _0x3d66e5);
var _0x53abbc = _0xf4bb63;
_0x5dc901.prototype = Object.create(_0x53abbc.prototype);
_0x5dc901.prototype.constructor = _0x5dc901;
_0x5dc901.superClass = _0x53abbc;
_0x5dc901.prototype.updateZ = function () {
  this.z = 0x2710 + this.rad;
};
_0x5dc901.prototype.canUseTailslap = false;
_0x5dc901.prototype.tailState = 0x0;
_0x5dc901.prototype.getSkinName = function () {
  return "volcano/blackdragon/" + this.animalSpecies + "/blackdragon";
};
_0x5dc901.prototype.leftWingAnim = null;
_0x5dc901.prototype.drawSkinCustomization = function () {
  if (this.flag_underWater) {
    return;
  }
  var _0x3cd5ac = this.lava;
  if (_0x3cd5ac < 0x32) {
    var _0x1fe6ae = _0x3cd5ac / 0x32;
    var _0x2db003 = this.getSkinImageObj("skins/volcano/blackdragon/" + this.animalSpecies + "/wings.png");
    if (_0x2db003) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0x1 - _0x1fe6ae;
      var _0x13572a = this.rad - this.outlineW;
      _0x3b8ba2.drawImage(_0x2db003, -_0x13572a * 1.4705882352941178, -_0x13572a * 1.4705882352941178, 0x2 * _0x13572a * 1.4705882352941178, 0x2 * _0x13572a * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
  }
};
_0x5dc901.prototype.animalInfo = function () {
  var _0x3b53d3 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x3b53d3.aniName = "Black Dragon";
      break;
    case 0x1:
      _0x3b53d3.aniName = "Golden Black Dragon";
      break;
    case 0x2:
      _0x3b53d3.aniName = "Azure Bringer";
      break;
    case 0xcc:
      _0x3b53d3.aniName = "Violet Dusk Black Dragon";
      break;
    default:
      break;
  }
  _0x3b53d3.aniCol = "#FF9000";
  _0x3b53d3.skinName = this.getSkinName();
  _0x3b53d3.upgradeText = "UPGRADED to " + _0x3b53d3.aniName;
  _0x3b53d3.upgradeText += "!\n Black dragons drink lava instead of water! Black dragons only heal on healing stones/lava!";
  _0x3b53d3.aniCol = "black";
  return _0x3b53d3;
};
_0x5dc901.prototype.getAbilityInfo = function (_0x592e32) {
  var _0xdaa4a4 = {
    "abilName": "Multi Fireballs"
  };
  var _0x158c5f = 0x0;
  switch (this.animalSpecies) {
    case 0x0:
      _0x158c5f = 0x1;
      break;
    case 0x1:
      _0x158c5f = 0x2;
      break;
    case 0x2:
      _0x158c5f = 0x7;
      break;
  }
  _0xdaa4a4.speciesType = _0x158c5f;
  _0xdaa4a4.abilImg = "abilities/Fireball.svg";
  _0xdaa4a4.skinThemeID = this.skinThemeID;
  _0xdaa4a4.mopeSeasonID = this.mopeSeasonID;
  return _0xdaa4a4;
};
function _0x5dc901() {
  this.lava = 0x64;
  _0x5dc901.superClass.call(this, 0x2);
}
window.BlackDragon = _0x5dc901;
_0x2b451a.setCustomClassForGameObjType(_0x5dc901, 0x2, _0x1a6650);
var _0x4f93c0 = _0x4f93c0;
var _0x53abbc = _0xf4bb63;
_0x4f93c0.prototype = Object.create(_0x53abbc.prototype);
_0x4f93c0.prototype.constructor = _0x4f93c0;
_0x4f93c0.superClass = _0x53abbc;
_0x4f93c0.prototype.getSkinName = function () {
  return "/honeybee/0/" + this.animalSubSpecies + "/honeybee" + (this.specType == 0x0 || this.specType == undefined ? '' : this.specType);
};
_0x4f93c0.prototype.drawSkinCustomization = function () {
  _0x3b8ba2.save();
  var _0x4f2798 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x3fa424 = !(_0x4bda0b == 0x2 || _0x11da90 || _0x498079) ? _0x7b826(_0x4f2798, 0.2, 0.3, 0x2) : 0x0;
  var _0xf00890 = !(_0x4bda0b == 0x2 || _0x11da90 || _0x498079) ? _0x7b826(_0x4f2798, 0.2, 0.3, 0x2) : 0x0;
  var _0xb4b0 = this.rad * 0.6;
  var _0x129542 = this.getSkinImageObj("skins/honeybee/0/" + this.animalSubSpecies + "/honeybee_wing2.png");
  if (_0x129542) {
    _0x3b8ba2.save();
    var _0x47c9e1 = -(-0x2 + _0xf00890) * (-25 * (Math.PI / 0xb4));
    _0x3b8ba2.globalAlpha = 0.6;
    _0x3b8ba2.rotate(-10 * (Math.PI / 0xb4) + _0x47c9e1);
    var _0x306fb6 = 0x0;
    var _0x5e332a = this.rad;
    var _0x949543 = _0xb4b0 * 0x2 * 0.7;
    var _0x5a53b8 = _0xb4b0 * 2.3;
    var _0x569627 = 0.5;
    var _0x4cd5f7 = 1.6;
    _0x3b8ba2.drawImage(_0x129542, _0x306fb6 + _0x949543 * -_0x569627, _0x5e332a + _0x5a53b8 * -_0x4cd5f7, _0x949543, _0x5a53b8);
    _0x3b8ba2.restore();
  }
  var _0x129542 = this.getSkinImageObj("skins/honeybee/0/" + this.animalSubSpecies + "/honeybee_wing1.png");
  if (_0x129542) {
    _0x3b8ba2.save();
    var _0x47c9e1 = -(-0x2 + _0xf00890) * (25 * (Math.PI / 0xb4));
    _0x3b8ba2.globalAlpha = 0.6;
    _0x3b8ba2.rotate(10 * (Math.PI / 0xb4) + _0x47c9e1);
    var _0x306fb6 = 0x0;
    var _0x5e332a = this.rad;
    var _0x949543 = _0xb4b0 * 2.3 * 0.7;
    var _0x5a53b8 = _0xb4b0 * 2.3;
    var _0x569627 = 0.5;
    var _0x4cd5f7 = 1.6;
    _0x3b8ba2.drawImage(_0x129542, _0x306fb6 + _0x949543 * -_0x569627, _0x5e332a + _0x5a53b8 * -_0x4cd5f7, _0x949543, _0x5a53b8);
    _0x3b8ba2.restore();
  }
  var _0x129542 = this.getSkinImageObj("skins/honeybee/0/" + this.animalSubSpecies + "/honeybee_wing1.png");
  if (_0x129542) {
    _0x3b8ba2.save();
    var _0x47c9e1 = -(-0x2 + _0x3fa424) * (0x1e * (Math.PI / 0xb4));
    _0x3b8ba2.globalAlpha = 0.5;
    _0x3b8ba2.rotate(0x14 * (Math.PI / 0xb4) + _0x47c9e1);
    var _0x306fb6 = 0x0;
    var _0x5e332a = this.rad;
    var _0x949543 = _0xb4b0 * 0x2 * 0.7;
    var _0x5a53b8 = _0xb4b0 * 2.3;
    var _0x569627 = 0.5;
    var _0x4cd5f7 = 1.7;
    _0x3b8ba2.drawImage(_0x129542, _0x306fb6 + _0x949543 * -_0x569627, _0x5e332a + _0x5a53b8 * -_0x4cd5f7, _0x949543, _0x5a53b8);
    _0x3b8ba2.restore();
  }
  var _0x129542 = this.getSkinImageObj("skins/honeybee/0/" + this.animalSubSpecies + "/honeybee_wing2.png");
  if (_0x129542) {
    _0x3b8ba2.save();
    var _0x47c9e1 = -(-0x2 + _0x3fa424) * (-0x1e * (Math.PI / 0xb4));
    _0x3b8ba2.globalAlpha = 0.5;
    _0x3b8ba2.rotate(-0x14 * (Math.PI / 0xb4) + _0x47c9e1);
    var _0x306fb6 = 0x0;
    var _0x5e332a = this.rad;
    var _0x949543 = _0xb4b0 * 0x2 * 0.7;
    var _0x5a53b8 = _0xb4b0 * 2.3;
    var _0x569627 = 0.5;
    var _0x4cd5f7 = 1.7;
    _0x3b8ba2.drawImage(_0x129542, _0x306fb6 + _0x949543 * -_0x569627, _0x5e332a + _0x5a53b8 * -_0x4cd5f7, _0x949543, _0x5a53b8);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
function _0x4f93c0() {
  _0x4f93c0.superClass.call(this, 0x2);
}
window.Honeybee = _0x4f93c0;
_0x2b451a.setCustomClassForGameObjType(_0x4f93c0, 0x2, _0x11bfae);
var _0x19116 = _0x19116;
var _0x53abbc = _0xf4bb63;
_0x19116.prototype = Object.create(_0x53abbc.prototype);
_0x19116.prototype.constructor = _0x19116;
_0x19116.superClass = _0x53abbc;
_0x19116.prototype.animalInfo = function () {
  var _0x52b4f7 = {};
  var _0x4cee90 = this.animalSpecies;
  switch (this.animalSpecies) {
    case 0x0:
      _0x52b4f7.aniName = "The Phoenix";
      break;
    case 0x1:
      _0x52b4f7.aniName = "Golden Phoenix";
      break;
    case 0x2:
      _0x52b4f7.aniName = "Alpha Phoenix";
      break;
    case 0xc8:
      _0x4cee90 = "/" + this.animalSubSpecies;
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x52b4f7.aniName = "Aqua Phoenix";
          break;
        case 0x1:
          _0x52b4f7.aniName = "Ice Phoenix";
          break;
        case 0x2:
          _0x52b4f7.aniName = "Ash Phoenix";
          break;
        case 0x3:
          _0x52b4f7.aniName = "Red Giant Phoenix";
          break;
      }
      break;
  }
  _0x52b4f7.aniCol = "#FF9000";
  _0x52b4f7.skinName = "/volcano/phoenix/" + _0x4cee90 + "/phoenix";
  _0x52b4f7.upgradeText = "UPGRADED to " + _0x52b4f7.aniName + "!\nPhoenix shoot Firetornados to burn their prey alive!";
  return _0x52b4f7;
};
_0x19116.prototype.getSkinImageObj = function (_0x33f9fb) {
  var _0x48527e = this.animalSpecies === 0x1 || this.animalSpecies === 0x2 || this.animalSpecies === 0xc8 ? 0x1 : this.mopeSeasonID;
  return this.getSkinImageObjForSeason(_0x33f9fb, _0x48527e);
};
_0x19116.prototype.getAbilityInfo = function (_0x2f4f7d) {
  var _0x4b7dc8 = {};
  var _0x5d4dfa = this.animalSpecies;
  if (this.animalSpecies == 0xc8) {
    _0x5d4dfa += "/" + this.animalSubSpecies;
  }
  _0x4b7dc8.abilName = "Fire Tornado!";
  _0x4b7dc8.abilImg = "abilities/Firestorm.svg";
  _0x4b7dc8.skinThemeID = this.skinThemeID;
  _0x4b7dc8.mopeSeasonID = this.mopeSeasonID;
  return _0x4b7dc8;
};
_0x19116.prototype.getSkinName = function () {
  var _0x1c8c49 = this.animalSpecies;
  if (this.animalSpecies == 0xc8) {
    _0x1c8c49 += "/" + this.animalSubSpecies;
  }
  return "/volcano/phoenix/" + _0x1c8c49 + "/phoenix" + (this.specType == 0x0 || this.specType == undefined ? '' : this.specType);
};
_0x19116.prototype.getSkinPart = function (_0x420ec2) {
  var _0x2ce856 = this.animalSpecies;
  if (this.animalSpecies == 0xc8) {
    _0x2ce856 += "/" + this.animalSubSpecies;
  }
  return this.getSkinImageObj("skins/volcano/phoenix/" + _0x2ce856 + "/" + _0x420ec2 + ".png");
};
_0x19116.prototype.drawSkinImg = function () {
  if (!(_0x4bda0b == 0x2 || _0x11da90 || _0x10772e)) {
    var _0x10498f = this.rad - this.outlineW;
    var _0x2d571e = this.getSkinPart("phoenix_body");
    var _0x468cf5 = this.getSkinPart("phoenix_head");
    var _0x5e28fd = Math.trunc(_0x1f4c9e / 0xa6) % 0x6;
    var _0x9f1277 = this.getSkinPart("/tail_mid/tail_mid_" + _0x5e28fd);
    if (_0x9f1277) {
      _0x3b8ba2.drawImage(_0x9f1277, -_0x10498f * 1.4705882352941178, -_0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178);
    }
    var _0x5e28fd = Math.trunc(_0x1f4c9e / 0xa6) % 0x6;
    var _0x27bb35 = Math.trunc(_0x1f4c9e / 0xfa) % 0x6;
    var _0x570b9f = this.getSkinPart("/tail/tail_" + _0x5e28fd);
    var _0x32755a = this.getSkinPart("tail_flipped/tail_" + _0x27bb35);
    if (_0x570b9f) {
      _0x3b8ba2.drawImage(_0x570b9f, -_0x10498f * 1.4705882352941178, -_0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178);
    }
    if (_0x32755a) {
      _0x3b8ba2.drawImage(_0x32755a, -_0x10498f * 1.4705882352941178, -_0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178);
    }
    if (_0x2d571e) {
      _0x3b8ba2.drawImage(_0x2d571e, -_0x10498f * 1.4705882352941178, -_0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178);
    }
    var _0x25adb2 = Math.trunc(_0x1f4c9e / 0x7d) % 0x8;
    var _0x42a576 = Math.trunc(_0x1f4c9e / 0x96) % 0x8;
    var _0xeba681 = this.getSkinPart("wing_flame_orange/wing_flame_orange_" + _0x25adb2);
    var _0x33ab09 = this.getSkinPart("wing_flame_yellow/wing_flame_yellow_" + _0x42a576);
    if (_0xeba681) {
      _0x3b8ba2.drawImage(_0xeba681, -_0x10498f * 1.4705882352941178, -_0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178);
    }
    if (_0x33ab09) {
      _0x3b8ba2.drawImage(_0x33ab09, -_0x10498f * 1.4705882352941178, -_0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178);
    }
    var _0x2547d6 = this.getSkinPart("wing_flame_orange_flipped/wing_flame_orange_" + _0x25adb2);
    var _0x3b77dd = this.getSkinPart("wing_flame_yellow_flipped/wing_flame_yellow_" + _0x42a576);
    if (_0x2547d6) {
      _0x3b8ba2.drawImage(_0x2547d6, -_0x10498f * 1.4705882352941178, -_0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178);
    }
    if (_0x3b77dd) {
      _0x3b8ba2.drawImage(_0x3b77dd, -_0x10498f * 1.4705882352941178, -_0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178);
    }
    if (_0x468cf5) {
      _0x3b8ba2.drawImage(_0x468cf5, -_0x10498f * 1.4705882352941178, -_0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178, 0x2 * _0x10498f * 1.4705882352941178);
    }
  } else {
    _0x19116.superClass.prototype.drawSkinImg.call(this);
  }
};
function _0x19116() {
  _0x19116.superClass.call(this, 0x2);
}
window.Phoenix = _0x19116;
_0x2b451a.setCustomClassForGameObjType(_0x19116, 0x2, _0x21817a);
var _0x43371c = _0x43371c;
var _0x53abbc = _0xf4bb63;
_0x43371c.prototype = Object.create(_0x53abbc.prototype);
_0x43371c.prototype.constructor = _0x43371c;
_0x43371c.superClass = _0x53abbc;
_0x43371c.prototype.animalInfo = function () {
  var _0x203013 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x203013.aniName = "Pigeon";
      break;
    case 0x1:
      _0x203013.aniName = "Rare White Dove";
      _0x203013.upgradeText += "\n(Doves fly faster!)";
      break;
    case 0xca:
      _0x203013.aniName = "Thug Pigeon";
      break;
  }
  _0x203013.aniCol = "#FF9000";
  _0x203013.skinName = this.getSkinName();
  _0x203013.upgradeText = "UPGRADED to " + _0x203013.aniName + "!\nHold W to fly around. ";
  return _0x203013;
};
_0x43371c.prototype.getSkinName = function () {
  let _0x3b7bd7 = this.getSpeciesPath() + "/pigeon";
  _0x3b7bd7 += this.specType == 0x0 ? '' : this.specType;
  return _0x3b7bd7;
};
_0x43371c.prototype.getSpeciesPath = function () {
  return "land/pigeon/" + this.animalSpecies + this.getSubSpecies();
};
_0x43371c.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x43371c.prototype.getWing = function (_0x291f9b) {
  var _0xeb837d = "skins/" + this.getSpeciesPath();
  _0xeb837d += "/pigeon_wing" + _0x291f9b + ".png";
  return _0xeb837d;
};
_0x43371c.prototype.getHead = function () {
  var _0x16f428 = "skins/" + this.getSpeciesPath();
  _0x16f428 += "/pigeon_head.png";
  return _0x16f428;
};
_0x43371c.prototype.theFrame = 0x0;
_0x43371c.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    return;
  }
  {
    if (this.flag_flying && !this.flag_isGrabbed) {
      _0x3b8ba2.save();
      var _0x4240cc = _0x1d1686("bird", this.spawnTime);
      if (_0x4240cc !== undefined && _0x4240cc != null) {
        this.theFrame = _0x4240cc;
      }
      var _0x1059ce = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
      var _0x20a9f6 = this.getSkinImageObj(this.getWing(0x1));
      if (_0x20a9f6) {
        _0x3b8ba2.save();
        var _0x11b3b3 = -(-0.2 + _0x1059ce) * _0x4bb70c;
        var _0x3947d3 = this.rad * 0.8;
        _0x3b8ba2.rotate(_0x46d781 + _0x11b3b3);
        var _0x23eb89 = 0x0;
        var _0x260082 = this.rad;
        var _0x5f4c79 = _0x3947d3 * 0x2 * 0.62;
        var _0x3307de = _0x3947d3 * 2.5;
        var _0x2154dd = 0.2;
        var _0x27d18d = 1.7;
        _0x3b8ba2.drawImage(_0x20a9f6, _0x23eb89 + _0x5f4c79 * -_0x2154dd, _0x260082 + _0x3307de * -_0x27d18d, _0x5f4c79, _0x3307de);
        _0x3b8ba2.restore();
      }
      var _0x20a9f6 = this.getSkinImageObj(this.getWing(0x2));
      if (_0x20a9f6) {
        _0x3b8ba2.save();
        var _0x11b3b3 = -(-0.2 + _0x1059ce) * (-0x5a * (Math.PI / 0xb4));
        var _0x3947d3 = this.rad * 0.8;
        _0x3b8ba2.rotate(-0x2d * (Math.PI / 0xb4) + _0x11b3b3);
        var _0x23eb89 = 0x0;
        var _0x260082 = this.rad;
        var _0x5f4c79 = _0x3947d3 * 0x2 * 0.62;
        var _0x3307de = _0x3947d3 * 2.5;
        var _0x2154dd = 0.8;
        var _0x27d18d = 1.7;
        _0x3b8ba2.drawImage(_0x20a9f6, _0x23eb89 + _0x5f4c79 * -_0x2154dd, _0x260082 + _0x3307de * -_0x27d18d, _0x5f4c79, _0x3307de);
        _0x3b8ba2.restore();
      }
      _0x3b8ba2.restore();
    }
    if (this.specType != 0x0 && this.specType != undefined) {
      var _0x5b35a3 = this.getSkinImageObj(this.getHead());
      if (_0x5b35a3) {
        _0x3b8ba2.save();
        var _0x3947d3 = this.rad;
        _0x3b8ba2.drawImage(_0x5b35a3, -_0x3947d3 * 1.4705882352941178, (-_0x3947d3 + _0x3947d3 * 0.1) * 1.4705882352941178, 0x2 * _0x3947d3 * 1.4705882352941178, 0x2 * _0x3947d3 * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
    }
  }
};
function _0x43371c() {
  _0x43371c.superClass.call(this, 0x2);
}
window.Pigeon = _0x43371c;
_0x2b451a.setCustomClassForGameObjType(_0x43371c, 0x2, _0x3c19f5);
var _0x2433ad = _0x2433ad;
var _0x53abbc = _0xf4bb63;
_0x2433ad.prototype = Object.create(_0x53abbc.prototype);
_0x2433ad.prototype.constructor = _0x2433ad;
_0x2433ad.superClass = _0x53abbc;
_0x2433ad.prototype.getSpeciesPath = function (_0x54d299) {
  var _0x94157a = "/land/" + _0x54d299 + "/" + this.animalSpecies + (this.animalSpecies == 0x4 ? "/" + this.animalSubSpecies : '');
  return _0x94157a;
};
_0x2433ad.prototype.getWing = function (_0x13a84c, _0x548d0c, _0x5210da) {
  var _0xb17582 = "skins/";
  switch (this.animalSpecies) {
    case 0x5:
    case 0x6:
    case 0xc8:
    case 0xdc:
      _0xb17582 += this.getSpeciesPath(_0x13a84c);
      break;
    default:
      _0xb17582 += "land/" + _0x13a84c;
  }
  switch (_0x548d0c) {
    case 0x1:
      _0xb17582 += "/" + _0x13a84c + "_wing1.png";
      break;
    case 0x2:
      _0xb17582 += "/" + _0x13a84c + "_wing2.png";
      break;
  }
  return _0xb17582;
};
_0x2433ad.prototype.animalInfo = function () {
  var _0x120a52 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x120a52.aniName = "Toco Toucan";
      break;
    case 0x1:
      _0x120a52.aniName = "Choco Toucan";
      break;
    case 0x2:
      _0x120a52.aniName = "Keel-Billed Toucan";
      break;
    case 0x3:
      _0x120a52.aniName = "Fiery Toucan";
      break;
    case 0x4:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x120a52.aniName = "Lava Toucan";
          break;
        case 0x1:
          _0x120a52.aniName = "Ice Toucan";
          break;
        case 0x2:
          _0x120a52.aniName = "Aqua Toucan";
          break;
      }
      break;
    case 0x5:
      _0x120a52.aniName = "Pakistan Toucan";
      break;
    case 0x6:
      _0x120a52.aniName = "Prisma Toucan";
      break;
    case 0x64:
      _0x120a52.aniName = "The Dapper";
      break;
    case 0xc8:
      _0x120a52.aniName = "Ice Toucan";
      break;
    case 0xca:
      _0x120a52.aniName = "Corpse Flower Toucan";
      break;
    case 0xdc:
      _0x120a52.aniName = "Molten Toucan";
      break;
  }
  _0x120a52.upgradeText = "UPGRADED to " + _0x120a52.aniName + "!\nHold right click (or W) to fly!\n(HINT: Start flying from a fruit tree or bush to throw fruit upon landing!)";
  _0x120a52.aniCol = "#FF9000";
  _0x120a52.skinName = this.getSpeciesPath("toucan") + "/toucan";
  return _0x120a52;
};
_0x2433ad.prototype.getSkinName = function () {
  var _0x33d57c = this.getSpeciesPath("toucan") + "/toucan" + (this.specType == 0x0 ? '' : this.specType);
  return _0x33d57c;
};
_0x2433ad.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    this.drawBeak();
    return;
  }
  {
    if (this.flag_flying && !this.flag_isGrabbed) {
      _0x3b8ba2.save();
      var _0x423444 = _0x1d1686("bird", this.spawnTime);
      if (_0x423444 !== undefined && _0x423444 != null) {
        this.theFrame = _0x423444;
      }
      var _0x4cc515 = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
      var _0x23116a = this.getSkinImageObj(this.getWing("toucan", 0x1, true));
      if (_0x23116a) {
        _0x3b8ba2.save();
        var _0x19d4da = -(-0.2 + _0x4cc515) * _0x4bb70c;
        var _0x594a02 = this.rad * 0.8;
        _0x3b8ba2.rotate(0x2d * (Math.PI / 0xb4) + _0x19d4da);
        var _0x2e2dfc = 0x0;
        var _0xdf5431 = this.rad;
        var _0x2ff0c = _0x594a02 * 0x2 * 0.62;
        var _0x3389ee = _0x594a02 * 2.5;
        var _0x548118 = 0.2;
        var _0xdc94ff = 1.7;
        _0x3b8ba2.drawImage(_0x23116a, _0x2e2dfc + _0x2ff0c * -_0x548118, _0xdf5431 + _0x3389ee * -_0xdc94ff, _0x2ff0c, _0x3389ee);
        _0x3b8ba2.restore();
      }
      var _0x23116a = this.getSkinImageObj(this.getWing("toucan", 0x2, true));
      if (_0x23116a) {
        _0x3b8ba2.save();
        var _0x19d4da = -(-0.2 + _0x4cc515) * (-0x5a * (Math.PI / 0xb4));
        var _0x594a02 = this.rad * 0.8;
        _0x3b8ba2.rotate(-0x2d * (Math.PI / 0xb4) + _0x19d4da);
        var _0x2e2dfc = 0x0;
        var _0xdf5431 = this.rad;
        var _0x2ff0c = _0x594a02 * 0x2 * 0.62;
        var _0x3389ee = _0x594a02 * 2.5;
        var _0x548118 = 0.8;
        var _0xdc94ff = 1.7;
        _0x3b8ba2.drawImage(_0x23116a, _0x2e2dfc + _0x2ff0c * -_0x548118, _0xdf5431 + _0x3389ee * -_0xdc94ff, _0x2ff0c, _0x3389ee);
        _0x3b8ba2.restore();
      }
      _0x3b8ba2.restore();
    }
    if (this.specType != 0x0 && this.specType != undefined) {
      var _0x11fe6a = this.getSkinImageObj(this.getHead("toucan", true));
      if (_0x11fe6a) {
        _0x3b8ba2.save();
        var _0x594a02 = this.rad;
        _0x3b8ba2.drawImage(_0x11fe6a, -_0x594a02 * 1.4705882352941178, (-_0x594a02 + _0x594a02 * 0.1) * 1.4705882352941178, 0x2 * _0x594a02 * 1.4705882352941178, 0x2 * _0x594a02 * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
      this.drawBeak();
    }
  }
};
_0x2433ad.prototype.drawBeak = function () {
  var _0x1f62f7 = this.flag_flying && !this.flag_isGrabbed ? 0.25 : 0.1;
  var _0x133e2b = "skins/" + this.getSpeciesPath("toucan") + "/toucan_beak.png";
  var _0x5cec4a = this.getSkinImageObj(_0x133e2b);
  if (_0x5cec4a) {
    _0x3b8ba2.save();
    var _0x1f3b3c = this.rad;
    _0x3b8ba2.drawImage(_0x5cec4a, -_0x1f3b3c * 1.4705882352941178, (-_0x1f3b3c + _0x1f3b3c * _0x1f62f7) * 1.4705882352941178, 0x2 * _0x1f3b3c * 1.4705882352941178, 0x2 * _0x1f3b3c * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
};
function _0x2433ad() {
  _0x2433ad.superClass.call(this, 0x2);
  this.doesDrawEffectScale = false;
}
window.Toucan = _0x2433ad;
_0x2b451a.setCustomClassForGameObjType(_0x2433ad, 0x2, _0x386e05);
var _0x4d5faf = _0x4d5faf;
var _0x53abbc = _0xf4bb63;
_0x4d5faf.prototype = Object.create(_0x53abbc.prototype);
_0x4d5faf.prototype.constructor = _0x4d5faf;
_0x4d5faf.superClass = _0x53abbc;
_0x4d5faf.prototype.animalInfo = function () {
  var _0x19a624 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x19a624.aniName = "Tiger";
      break;
    case 0x1:
      _0x19a624.aniName = "rare White Tiger";
      break;
    case 0xcc:
      _0x19a624.aniName = "Chimera Tiger";
      break;
  }
  _0x19a624.aniDesc = '';
  _0x19a624.upgradeText = "UPGRADED to " + _0x19a624.aniName + "!\n Tigers can launch an ambush attack (HOLD W to grow a bush)!";
  _0x19a624.aniCol = "#FF9000";
  _0x19a624.skinName = this.getSkinName();
  return _0x19a624;
};
_0x4d5faf.prototype.getSkinName = function () {
  let _0x1b3fd8 = this.getSpeciesPath() + "/tiger";
  _0x1b3fd8 += this.specType == 0x0 ? '' : this.specType;
  return _0x1b3fd8;
};
_0x4d5faf.prototype.getSpeciesPath = function () {
  return "land/tiger/" + this.animalSpecies + this.getSubSpecies();
};
_0x4d5faf.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x4d5faf.prototype.getSkinImageObj = function (_0x151a5a) {
  var _0x5bc85f = this.animalSpecies === 0xcc ? 0x1 : this.mopeSeasonID;
  return this.getSkinImageObjForSeason(_0x151a5a, _0x5bc85f);
};
function _0x4d5faf() {
  _0x4d5faf.superClass.call(this, 0x2);
}
window.Tiger = _0x4d5faf;
_0x2b451a.setCustomClassForGameObjType(_0x4d5faf, 0x2, _0x3a6833);
var _0x53abbc = _0xf4bb63;
_0x2026c0.prototype = Object.create(_0x53abbc.prototype);
_0x2026c0.prototype.constructor = _0x2026c0;
_0x2026c0.superClass = _0x53abbc;
_0x2026c0.prototype.animalInfo = function () {
  var _0xfe603 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0xfe603.aniName = "Cobra";
      break;
    case 0x64:
      _0xfe603.aniName = "Wyrmous";
      break;
    case 0xc8:
      _0xfe603.aniName = "Celestial Cobra";
      break;
  }
  _0xfe603.skinName = this.getSkinName();
  _0xfe603.aniDesc = '';
  _0xfe603.upgradeText = "UPGRADED to " + _0xfe603.aniName + "!\n Hold W to Spit venom, and poison animals with your bite!";
  _0xfe603.aniCol = "black";
  return _0xfe603;
};
_0x2026c0.prototype.getAbilityInfo = function (_0x4fa66f) {
  var _0x592511 = {
    abilName: "Venom Spit",
    abilImg: "abilities/Spit.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x592511;
};
_0x2026c0.prototype.getSkinName = function () {
  let _0x4b1821 = this.getSpeciesPath() + "/cobra";
  _0x4b1821 += this.flag_usingAbility ? "2" : '';
  return _0x4b1821;
};
_0x2026c0.prototype.getSpeciesPath = function () {
  return "land/cobra/" + this.animalSpecies + this.getSubSpecies();
};
_0x2026c0.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x2026c0.prototype.drawUnderSkinImg = function () {
  if (this.flag_usingAbility) {
    return;
  }
  var _0xe73cbb = this.rad - this.outlineW;
  var _0x89caf0 = "skins/" + this.getSpeciesPath() + "/tongue.png";
  var _0x571cfc = this.getSkinImageObj(_0x89caf0);
  var _0x3cb8e5 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x5b9897 = _0x4bda0b == 0x2 ? 0x0 : _0x7b826(_0x3cb8e5, 0.5, 0x5, 0.5);
  var _0x2df660 = _0x4bda0b == 0x2 ? 0x0 : 0x5;
  if (_0x571cfc) {
    _0x3b8ba2.drawImage(_0x571cfc, -_0xe73cbb * 1.4705882352941178, -(_0xe73cbb + _0x2df660 + _0x5b9897) * 1.4705882352941178, 0x2 * _0xe73cbb * 1.4705882352941178, 0x2 * _0xe73cbb * 1.4705882352941178);
  }
};
function _0x2026c0() {
  _0x2026c0.superClass.call(this, 0x2);
}
window.Cobra = _0x2026c0;
_0x2b451a.setCustomClassForGameObjType(_0x2026c0, 0x2, _0x22c8fa);
var _0x2422e6 = _0x2422e6;
var _0x53abbc = _0x472b99;
_0x2422e6.prototype = Object.create(_0x53abbc.prototype);
_0x2422e6.prototype.constructor = _0x2422e6;
_0x2422e6.superClass = _0x53abbc;
_0x2422e6.prototype.updateZ = function () {
  this.z = 0x3ed;
};
_0x2422e6.prototype.customDraw = function (_0x4202e5) {
  if (!(_0x4bda0b == 0x2) && !_0x11da90) {
    var _0x2edfa1 = Math.trunc(_0x1f4c9e / 0x78) % 0x5;
    let _0x49f26e = "gameobj/" + this.oType + "/" + this.speciesType + "/" + _0x2edfa1 + ".png";
    var _0x2f9900 = this.getSkinImageObj(_0x49f26e);
    if (_0x2f9900) {
      var _0x51482a = 0x0;
      var _0x289266 = this.rad * 0.4;
      var _0x3cb3c5 = this.rad * 0x2 * 4 / 0x3;
      var _0x23e7ff = this.rad * 0x2;
      var _0x58e22d = 0.5;
      var _0x409546 = 0.95;
      _0x3b8ba2.save();
      _0x3b8ba2.rotate(0x0 * (Math.PI / 0xb4));
      _0x3b8ba2.drawImage(_0x2f9900, _0x51482a + _0x3cb3c5 * -_0x58e22d, _0x289266 + _0x23e7ff * -_0x409546, _0x3cb3c5, _0x23e7ff);
      _0x3b8ba2.restore();
    }
  } else {
    let _0x1964d6 = "gameobj/" + this.oType + "/" + this.speciesType + "/0.png";
    var _0x2f9900 = this.getSkinImageObj(_0x1964d6);
    if (_0x2f9900) {
      var _0x51482a = 0x0;
      var _0x289266 = this.rad * 0.4;
      var _0x3cb3c5 = this.rad * 0x2 * 4 / 0x3;
      var _0x23e7ff = this.rad * 0x2;
      var _0x58e22d = 0.5;
      var _0x409546 = 0.95;
      _0x3b8ba2.save();
      _0x3b8ba2.rotate(0x0 * (Math.PI / 0xb4));
      _0x3b8ba2.drawImage(_0x2f9900, _0x51482a + _0x3cb3c5 * -_0x58e22d, _0x289266 + _0x23e7ff * -_0x409546, _0x3cb3c5, _0x23e7ff);
      _0x3b8ba2.restore();
    }
  }
};
_0x2422e6.prototype.readCustomData_onNewlyVisible = function (_0x6b1836) {
  _0x2422e6.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x6b1836);
  this.speciesType = _0x6b1836.readUInt16();
  this.speciesSubType = _0x6b1836.readUInt16();
};
function _0x2422e6() {
  _0x2422e6.superClass.call(this, 0x46);
  this.webTransparency = 0x0;
  this.doesDrawEffectScale = true;
  this.drawEffectScale_Slow = true;
}
window.Fire = _0x2422e6;
_0x2b451a.setCustomClassForGameObjType(_0x2422e6, 0x46);
var _0x53abbc = _0x472b99;
_0x18d283.prototype = Object.create(_0x53abbc.prototype);
_0x18d283.prototype.constructor = _0x18d283;
_0x18d283.superClass = _0x53abbc;
_0x18d283.prototype.updateZ = function () {
  this.z = 0x3ed;
};
_0x18d283.prototype.ANIMATION_NAME = "fireball";
_0x18d283.prototype.customDraw = function (_0x41652c) {
  if (!(_0x4bda0b == 0x2) && !_0x11da90) {
    let _0x153db6 = _0x1d1686(this.ANIMATION_NAME, this.spawnTime);
    if (_0x153db6 == null || _0x153db6 == NaN) {
      _0x153db6 = 0x0;
    }
    var _0x2b4328 = Math.trunc(_0x1f4c9e / 0x78) % 0x5;
    let _0x3a3596 = "gameobj/" + this.oType + "/" + this.speciesType + "/" + _0x2b4328 + ".png";
    var _0x592a61 = this.getSkinImageObj(_0x3a3596);
    if (_0x592a61) {
      var _0x16be8b = 0x0;
      var _0x47c18d = this.rad * 0.4;
      var _0x47c31a = this.rad * 0x2 * (0x2 + _0x153db6 * 0x2) / 0x3;
      var _0x2393c0 = this.rad * 3.5 * _0x153db6;
      var _0xd34c54 = 0.5;
      var _0x1b1637 = 0.95;
      _0x3b8ba2.save();
      {
        _0x3b8ba2.globalAlpha *= this.onFireEffA * _0x153db6;
        _0x3b8ba2.rotate(this.angle);
        _0x3b8ba2.drawImage(_0x592a61, _0x16be8b + _0x47c31a * -_0xd34c54, _0x47c18d + _0x2393c0 * -_0x1b1637, _0x47c31a, _0x2393c0);
      }
      _0x3b8ba2.restore();
    }
  } else {
    let _0x58db87 = "gameobj/" + this.oType + "/" + this.speciesType + "/0.png";
    var _0x592a61 = this.getSkinImageObj(_0x58db87);
    if (_0x592a61) {
      var _0x16be8b = 0x0;
      var _0x47c18d = this.rad * 0.4;
      var _0x47c31a = this.rad * 0x2 * 4 / 0x3;
      var _0x2393c0 = this.rad * 3.5;
      var _0xd34c54 = 0.5;
      var _0x1b1637 = 0.95;
      _0x3b8ba2.save();
      {
        _0x3b8ba2.rotate(this.angle);
        _0x3b8ba2.drawImage(_0x592a61, _0x16be8b + _0x47c31a * -_0xd34c54, _0x47c18d + _0x2393c0 * -_0x1b1637, _0x47c31a, _0x2393c0);
      }
      _0x3b8ba2.restore();
    }
  }
};
_0x18d283.prototype.readCustomData_onNewlyVisible = function (_0x5a39d3) {
  _0x18d283.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x5a39d3);
  this.speciesType = _0x5a39d3.readUInt16();
  this.speciesSubType = _0x5a39d3.readUInt16();
};
function _0x18d283() {
  _0x18d283.superClass.call(this, 0x12);
}
window.FireBall = _0x18d283;
_0x2b451a.setCustomClassForGameObjType(_0x18d283, 0x12);
var _0x53abbc = _0x472b99;
_0x24c3fb.prototype = Object.create(_0x53abbc.prototype);
_0x24c3fb.prototype.constructor = _0x24c3fb;
_0x24c3fb.superClass = _0x53abbc;
_0x24c3fb.prototype.nickName = "mope.io";
_0x24c3fb.prototype.fadeAway = false;
_0x24c3fb.prototype.webTransparency = 0x64;
_0x24c3fb.prototype.carcassType = 0x0;
_0x24c3fb.prototype.updateZ = function () {
  if (this.flag_flying) {
    this.z = 0x186a0 + this.rad / 0xa;
  } else {
    this.z = -0x64;
  }
};
_0x24c3fb.prototype.getNameSize = function () {
  return 0x6;
};
_0x24c3fb.prototype.setNick = function (_0x423837) {
  this.nickName = _0x423837;
  if (null == this.nickTXT) {
    this.nickTXT = new _0x4e6b66(this.getNameSize(), "#FFFFFF");
    this.nickTXT.strokeW = 1.5;
    this.nickTXT.renderScale = 0x5;
    this.nickTXT.setText(this.nickName);
  } else {
    this.nickTXT.setFontSize(this.getNameSize());
    this.nickTXT.setText(this.nickName);
  }
};
_0x24c3fb.prototype.customDraw = function (_0x139354) {
  _0x3b8ba2.save();
  var _0x6b94e = 0.3;
  if (this.fadeAway) {
    var _0x9a83f3 = this.webTransparency / 0x64;
    _0x3b8ba2.globalAlpha = _0x9a83f3;
    _0x6b94e = Math.min(_0x6b94e, _0x9a83f3);
  } else {
    _0x3b8ba2.globalAlpha = 0.8;
  }
  var _0x942ccf = this.getSkinImageObj("gameobj/" + this.oType + "/" + this.oType + ".png");
  if (_0x942ccf) {
    var _0x3455d2 = this.rad;
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x942ccf, -_0x3455d2, -_0x3455d2, 0x2 * _0x3455d2, 0x2 * _0x3455d2);
  }
  _0x3b8ba2.restore();
  this.drawNickName(_0x6b94e);
};
_0x24c3fb.prototype.drawNickName = function (_0x5281c7) {
  if (!this.spawnedFromDeadAni) {
    return;
  }
  if (this.nickName && this.nickTXT && !_0xce1d60) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = _0x5281c7;
    this.nickTXT.x = 0x0;
    this.nickTXT.y = this.rad;
    this.nickTXT.draw();
    _0x3b8ba2.restore();
  }
};
_0x24c3fb.prototype.spawnedFromDeadAni = false;
_0x24c3fb.prototype.readCustomData_onNewlyVisible = function (_0x53e7a8) {
  this.spawnedFromDeadAni = _0x53e7a8.readUInt8() == 0x1;
  this.animalType = _0x53e7a8.readUInt16();
  this.animalHomeBiome = _0x53e7a8.readUInt8();
  var _0x25f143 = _0x53e7a8.readString();
  this.fadeAway = _0x53e7a8.readUInt8() == 0x1;
  if (this.fadeAway) {
    this.webTransparency = _0x53e7a8.readUInt16();
  }
  if (this.spawnedFromDeadAni) {
    this.setNick(_0x25f143 ? _0x25f143 : "mope.io");
  }
};
_0x24c3fb.prototype.readUpdatedProperty = function (_0x427c2f, _0x5e250e) {
  if (_0x427c2f == 0x8) {
    this.flag_flying = _0x5e250e.readUInt8() == 0x1;
  } else if (_0x427c2f == 0x15) {
    this.webTransparency = _0x5e250e.readUInt16();
  }
};
function _0x24c3fb() {
  _0x24c3fb.superClass.call(this, 0x4a);
  this.shrinkedRad = 0x0;
}
window.AnimalCarcass = _0x24c3fb;
_0x2b451a.setCustomClassForGameObjType(_0x24c3fb, 0x4a);
var _0x53abbc = _0x472b99;
_0x589104.prototype = Object.create(_0x53abbc.prototype);
_0x589104.prototype.constructor = _0x589104;
_0x589104.superClass = _0x53abbc;
_0x589104.prototype.chilliType = 0x0;
_0x589104.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x589104.prototype.setSkinPath = function () {
  var _0x21fd20 = this.isEdibleOutlined() ? "e" : this.oType;
  _0x21fd20 += "_" + this.chilliType;
  this.objSkinPath = "gameobj/" + this.oType + "/" + _0x21fd20 + ".png";
};
_0x589104.prototype.customDraw = function (_0x1907c2) {
  _0x3b8ba2.save();
  var _0xe77066 = this.getSkinImageObj(this.objSkinPath);
  if (_0xe77066) {
    var _0x14361c = this.rad;
    if (this.specType2 == 0x1) {
      if (this.angle == 0x0) {
        this.angle = this.rPer * Math.PI * 0x2;
      }
      this.angle += 0.4;
      _0x3b8ba2.rotate(this.angle);
    } else {
      if (this.specType2 == 0x2) {
        _0x3b8ba2.rotate(this.angle);
      } else {
        _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
      }
    }
    _0x3b8ba2.drawImage(_0xe77066, -_0x14361c, -_0x14361c, 0x2 * _0x14361c, 0x2 * _0x14361c);
  }
  _0x3b8ba2.restore();
};
_0x589104.prototype.readCustomData_onNewlyVisible = function (_0x2ec258) {
  this.chilliType = _0x2ec258.readUInt8();
};
function _0x589104() {
  _0x589104.superClass.call(this, 0x4b);
  this.doesDrawEffectScale = false;
}
window.Chilli = _0x589104;
_0x2b451a.setCustomClassForGameObjType(_0x589104, 0x4b);
var _0x1ef6e8 = _0x1ef6e8;
var _0x53abbc = _0xf4bb63;
_0x1ef6e8.prototype = Object.create(_0x53abbc.prototype);
_0x1ef6e8.prototype.constructor = _0x1ef6e8;
_0x1ef6e8.superClass = _0x53abbc;
_0x1ef6e8.prototype.objSkinSpotsCanvas = null;
_0x1ef6e8.prototype.animalInfo = function () {
  var _0x521bb1 = {};
  this.animalName = '';
  switch (this.animalSpecies) {
    case 0x0:
      _0x521bb1.aniName = "Cheetah";
      _0x521bb1.upgradeText = "UPGRADED to Cheetah!\n Press W to get a speed boost!";
      this.animalName = "cheetah";
      break;
    case 0x1:
      _0x521bb1.aniName = "Jaguar";
      _0x521bb1.upgradeText = "UPGRADED to JAGUAR!\n Press W to get a speed boost!\n(Jaguars can climb hills!)";
      this.animalName = "jaguar";
      break;
    case 0x2:
      _0x521bb1.aniName = "Leopard";
      _0x521bb1.upgradeText = "UPGRADED to LEOPARD!\n Press W to get a speed boost!\n(Leopards can dive longer)";
      this.animalName = "leopard";
      break;
    case 0x3:
      _0x521bb1.aniName = "Black Panther";
      _0x521bb1.upgradeText = "UPGRADED to Black Panther!\n Press W to get a speed boost!\n(Black Panthers are fast on mud)";
      this.animalName = "blackpanther";
      break;
    case 0x64:
      _0x521bb1.aniName = "Big Cookie";
      _0x521bb1.upgradeText = "UPGRADED to Big Cookie!\n Press W to get a speed boost!\n(Big Cookies are fast on mud)";
      this.animalName = "100/bigcat";
      break;
    case 0xca:
      _0x521bb1.aniName = "C.M.Y.K NeoN Cheetak";
      _0x521bb1.upgradeText = "UPGRADED to C.M.Y.K NeoN Cheetak!\n Press W to get a speed boost!\n(Genie Cheetah are fast on mud)";
      this.animalName = "cheetah";
      break;
    case 0xcc:
      _0x521bb1.aniName = "Genie Cheetah";
      _0x521bb1.upgradeText = "UPGRADED to Genie Cheetah!\n Press W to get a speed boost!\n(Genie Cheetah are fast on mud)";
      this.animalName = "genie_cheetah";
      break;
  }
  _0x521bb1.aniCol = "#CAC05B";
  _0x521bb1.skinName = this.getSkinName();
  return _0x521bb1;
};
_0x1ef6e8.prototype.getSkinName = function () {
  return this.getSpeciesPath() + "/" + this.animalName;
};
_0x1ef6e8.prototype.getSpeciesPath = function () {
  return "land/bigcat/" + this.animalSpecies + this.getSubSpecies();
};
_0x1ef6e8.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x1ef6e8() {
  _0x1ef6e8.superClass.call(this, 0x2);
}
window.BigCat = _0x1ef6e8;
_0x2b451a.setCustomClassForGameObjType(_0x1ef6e8, 0x2, _0x4fa2e5);
function _0x5471d2(_0x4a8c1b, _0x26ac83, _0x4d180d, _0x5666cb, _0x48a02a, _0x5368bb, _0x555b1e) {
  var _0x1b89a3 = _0x301800;
  this.x = _0x4a8c1b;
  this.y = _0x26ac83;
  this.w = _0x4d180d;
  this.h = _0x5666cb;
  this.label = _0x48a02a;
  this.font = Number(_0x5368bb) ? Number(_0x5368bb) : 0x1e;
  this.isVisible = true;
  this.hoverColor = "#16932A";
  this.defaultColor = "#0aa633";
  this.alpha = 0x1;
  this.txtAlpha = 0x1;
  this.ctx = _0x555b1e === undefined || _0x555b1e == null ? _0x3b8ba2 : _0x555b1e;
  this.labelColor = "white";
  this.buttonTXT = new _0x4e6b66(0xc, this.labelColor);
  this.buttonTXT.renderScale = 1.5;
  this.drawButtonRect = true;
  this.isHighLighted = false;
  this.showLabeleOnHover = false;
  this.textShadow = false;
  this.buttonScaleF = 0x1;
  this.strokeWidth = 0x4 * _0x1b89a3;
  this.setLabelColor = function (_0x9dfd6b) {
    this.buttonTXT = new _0x4e6b66(0xc, _0x9dfd6b);
    this.buttonTXT.renderScale = 1.5;
  };
  this.testPosHitsButton = function (_0x206fc2, _0x734b5b) {
    var _0x1a65ba = this.x;
    var _0x4468f8 = this.x + this.w;
    var _0x15dd3a = this.y;
    var _0xf80ac6 = this.y + this.h;
    if (_0x206fc2 < _0x1a65ba || _0x206fc2 > _0x4468f8) {
      return false;
    }
    if (_0x734b5b < _0x15dd3a || _0x734b5b > _0xf80ac6) {
      return false;
    } else {
      return true;
    }
  };
  this.setPosAndSize = function (_0x3f6395, _0x2c55a2, _0x279bce, _0x6f5c4e, _0x33a34c, _0x4bea21) {
    this.w = _0x279bce;
    this.h = _0x6f5c4e;
    this.x = _0x3f6395 + _0x279bce * (0.5 - _0x33a34c);
    this.y = _0x2c55a2 + _0x6f5c4e * (0.5 - _0x4bea21);
  };
  this.draw = function () {
    if (!this.isVisible) {
      return;
    }
    this.update();
    this.ctx.save();
    this.ctx.translate(this.x, this.y);
    this.ctx.scale(this.buttonScaleF, this.buttonScaleF);
    if (this.drawButtonRect) {
      this.ctx.fillStyle = this.defaultColor;
      this.ctx.strokeStyle = "#116c17";
      this.ctx.lineWidth = this.strokeWidth;
      this.roundRect(0x0, 0x0, this.w, this.h, 0x5, true, true);
      if (this.isHighLighted) {
        this.ctx.fillStyle = this.hoverColor;
        this.roundRect(0x0, 0x0, this.w, this.h, 0x5, true, false);
      }
    }
    if (!this.showLabeleOnHover) {
      this.ctx.globalAlpha = this.txtAlpha;
      this.drawText(this.w / 0x2, this.h / 0x2);
    } else if (this.isHighLighted && this.showLabeleOnHover) {
      this.drawTextOnHowever();
    }
    this.ctx.restore();
    this.onAfterDraw();
  };
  this.drawTextOnHowever = function () {
    this.drawText(this.w / 0x2, this.h / 0x2);
  };
  this.beforeDrawText = function () {};
  this.drawText = function (_0xea0cc9, _0x5e6e66) {
    this.buttonTXT.setText(this.label);
    this.buttonTXT.strokeW = this.isHighLighted && !this.textShadow ? 0x0 : 0x1;
    this.buttonTXT.setFontSize(this.font);
    this.buttonTXT.setColor(this.labelColor);
    this.buttonTXT.x = _0xea0cc9;
    this.buttonTXT.y = _0x5e6e66;
    this.beforeDrawText();
    this.buttonTXT.draw();
  };
  this.roundRect = function (_0x8faafb, _0x1282b8, _0x3fef98, _0x3af0cb, _0x372230, _0x2e7f0f, _0x599795) {
    if (typeof _0x599795 == "undefined") {
      _0x599795 = true;
    }
    if (typeof _0x372230 === "undefined") {
      _0x372230 = 0x5;
    }
    if (typeof _0x372230 === "number") {
      _0x372230 = {
        "tl": _0x372230,
        "tr": _0x372230,
        "br": _0x372230,
        "bl": _0x372230
      };
    } else {
      var _0x4119b3 = {
        "tl": 0x0,
        "tr": 0x0,
        "br": 0x0,
        "bl": 0x0
      };
      for (var _0x248c47 in _0x4119b3) {
        _0x372230[_0x248c47] = _0x372230[_0x248c47] || _0x4119b3[_0x248c47];
      }
    }
    this.ctx.globalAlpha = this.alpha;
    this.ctx.lineWidth = 0x2;
    this.ctx.beginPath();
    this.ctx.moveTo(_0x8faafb + _0x372230.tl, _0x1282b8);
    this.ctx.lineTo(_0x8faafb + _0x3fef98 - _0x372230.tr, _0x1282b8);
    this.ctx.quadraticCurveTo(_0x8faafb + _0x3fef98, _0x1282b8, _0x8faafb + _0x3fef98, _0x1282b8 + _0x372230.tr);
    this.ctx.lineTo(_0x8faafb + _0x3fef98, _0x1282b8 + _0x3af0cb - _0x372230.br);
    this.ctx.quadraticCurveTo(_0x8faafb + _0x3fef98, _0x1282b8 + _0x3af0cb, _0x8faafb + _0x3fef98 - _0x372230.br, _0x1282b8 + _0x3af0cb);
    this.ctx.lineTo(_0x8faafb + _0x372230.bl, _0x1282b8 + _0x3af0cb);
    this.ctx.quadraticCurveTo(_0x8faafb, _0x1282b8 + _0x3af0cb, _0x8faafb, _0x1282b8 + _0x3af0cb - _0x372230.bl);
    this.ctx.lineTo(_0x8faafb, _0x1282b8 + _0x372230.tl);
    this.ctx.quadraticCurveTo(_0x8faafb, _0x1282b8, _0x8faafb + _0x372230.tl, _0x1282b8);
    this.ctx.closePath();
    if (_0x2e7f0f) {
      this.ctx.fill();
    }
    if (_0x599795) {
      this.ctx.stroke();
    }
  };
  this.onClick = function () {};
  this.onMouseMove = function () {};
  this.onMouseIn = function () {};
  this.onMouseOut = function () {};
  this.isMouseIn = false;
  this.setMouseRawPos = function (_0x23663a, _0x666305) {
    this.rawX = _0x23663a;
    this.rawY = _0x666305;
    if (this.testPosHitsButton(this.rawX, this.rawY)) {
      if (!this.isMouseIn) {
        this.isMouseIn = true;
        this.onMouseIn();
      }
    } else if (this.isMouseIn) {
      this.isMouseIn = false;
      this.onMouseOut();
    }
  };
  this.update = function () {};
  this.onInterfaceReset = function () {
    _0x2b37fe(this.label + ".onInterfaceReset");
  };
  this.onAfterDraw = function () {};
}
window.InterfaceButton = _0x5471d2;
_0x59651b.prototype = {
  "mode": 0x0,
  "state": 0x0,
  "myPlayer": null
};
_0x59651b.prototype.chatAllowed = true;
_0x59651b.prototype.isHalloween = false;
_0x59651b.prototype.stamp = 0x0;
_0x59651b.prototype["interface"] = function () {};
_0x59651b.prototype.drawMap = function () {};
_0x59651b.prototype.interfaceReset = function () {};
_0x59651b.prototype.main = function (_0x22d9da) {};
_0x59651b.prototype.onInit = function (_0x2a5d50) {};
_0x59651b.prototype.drawCustomObjs = function (_0x229829) {};
_0x59651b.prototype.worldUpdate = function (_0x1beca3) {};
_0x59651b.prototype.setPlayer = function () {
  this.myPlayer = _0x5c52f8[_0x2bd878];
};
function _0x59651b() {}
window.GameMode = _0x59651b;
var _0x53abbc = _0x59651b;
_0xa1b27.prototype = Object.create(_0x53abbc.prototype);
_0xa1b27.prototype.constructor = _0xa1b27;
_0xa1b27.superClass = _0x53abbc;
_0xa1b27.prototype.safeArea = null;
function _0xa1b27(_0x21e66a) {
  this.mode = _0x21e66a;
  this.stamp = +new Date();
  this.chatAllowed = true;
  this.createInterfaceButtons();
}
_0xa1b27.prototype.wastedPopups = [];
_0xa1b27.prototype.playerDisplayNum = 0x0;
_0xa1b27.prototype.setServerPlayerCount = function () {
  _0x3540bd.setText(_0x2f24c4.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " online");
  if (_0x18c03a) {
    _0x18c03a.setPlayersCount(_0x2f24c4);
  }
  this.playerDisplayNum = this.playerDisplayNum == 0x0 ? 0x1 : 0x0;
};
_0xa1b27.prototype["interface"] = function () {
  if (this.state == -0x1 || this.mode != _0x16c921) {
    return;
  }
  if (_0x5f5cae) {
    for (var _0x27914f = this.wastedPopups.length - 0x1; _0x27914f >= 0x0; _0x27914f--) {
      var _0x31b868 = this.wastedPopups[_0x27914f];
      _0x31b868.draw();
      if (_0x31b868.timedOut) {
        this.wastedPopups.splice(_0x27914f, 0x1);
      }
    }
  }
  if (this.endScreenCanvas != null) {
    if (this.endScreenCanvas.width) {
      _0x3b8ba2.drawImage(this.endScreenCanvas, _0x485584 / 0x2 - this.endScreenCanvas.width / 0x2, 0xf * _0x43e85b, this.endScreenCanvas.width, this.endScreenCanvas.height);
    }
    if (!_0x5f5cae || isGhost) {
      _0x5f1a0c(true);
    }
  }
  this.drawInterfaceButtons();
};
_0xa1b27.prototype.interfaceReset = function () {
  this.endScreenCanvas = null;
  this.dangerCircleMiniMapCanvas = null;
  this.wastedPopups = [];
  this.lastWastedPopupT = 0x0;
  this.playercount = 0x0;
  this.safeArea = null;
  if (this.interfaceButtons) {
    for (var _0x55eef4 = 0x0; _0x55eef4 < this.interfaceButtons.length; _0x55eef4++) {
      var _0x33c459 = this.interfaceButtons[_0x55eef4];
      _0x33c459.onInterfaceReset();
    }
  }
  this.interfaceButtons = [];
};
_0xa1b27.prototype.onInit = function () {};
_0xa1b27.prototype.playercount = 0x0;
_0xa1b27.prototype.setPlayerCount = function (_0x21dab7) {
  this.playercount = _0x21dab7;
};
_0xa1b27.prototype.showPlayerCount = function () {
  _0x3b8ba2.save();
  var _0x55bd26 = _0x485584 / 0x2;
  var _0x4a73d8 = 0x32 * _0x301800;
  var _0x492bf3 = 0x12c * _0x301800;
  _0x3b8ba2.globalAlpha = 0.35;
  _0x3b8ba2.fillStyle = "black";
  var _0x5f16d4 = 0x1e * _0x301800;
  _0x3b8ba2.fillRect(_0x55bd26 - _0x492bf3 / 0x2, _0x5f16d4, _0x492bf3, _0x4a73d8);
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.fillStyle = "white";
  _0x3b8ba2.font = 0x1e * _0x301800 + "px Arial";
  _0x3b8ba2.lineWidth = 0x1;
  _0x3b8ba2.textAlign = "center";
  _0x3b8ba2.textBaseline = "middle";
  _0x3b8ba2.shadowOffsetX = 0x1;
  _0x3b8ba2.shadowOffsetY = 0x1;
  _0x3b8ba2.shadowColor = "black";
  _0x5f16d4 += 0x19 * _0x301800;
  var _0x212946 = " player";
  if (this.playercount > 0x1) {
    _0x212946 += "s";
  }
  if (this.state == battleRoyal_inProgress) {
    _0x212946 += " alive!";
  } else {
    if (this.state == 0x0 || this.state == battleRoyal_ready) {
      _0x212946 += " joined";
    }
  }
  _0x3b8ba2.fillText(this.playercount + _0x212946, _0x55bd26, _0x5f16d4);
  _0x3b8ba2.restore();
};
_0xa1b27.prototype.lbCanvas = null;
_0xa1b27.prototype.leaderboard = function (_0x360379) {
  if (this.lbCanvas == null) {
    this.lbCanvas = document.createElement("canvas");
  }
  if (_0x360379) {
    var _0x8d783a = this.lbCanvas.getContext("2d");
    var _0x4486d2 = 0x37;
    _0x4486d2 = _0x4486d2 + 0x16 * _0x360379.length;
    this.lbCanvas.width = 0x10e;
    this.lbCanvas.height = _0x4486d2;
    _0x8d783a.globalAlpha = 0.2;
    _0x8d783a.fillStyle = "#000000";
    _0x8d783a.fillRect(0x0, 0x0, this.lbCanvas.width, this.lbCanvas.height);
    _0x8d783a.globalAlpha = 0x1;
    _0x8d783a.fillStyle = "#FFFFFF";
    var _0x806992 = curServer.name;
    _0x8d783a.font = "24px Arial";
    if (!(_0x4bda0b == 0x2)) {
      _0x8d783a.shadowOffsetX = 0x1;
      _0x8d783a.shadowOffsetY = 0x1;
    }
    _0x8d783a.shadowColor = "black";
    _0x8d783a.fillText(_0x806992, this.lbCanvas.width / 0x2 - _0x8d783a.measureText(_0x806992).width / 0x2, 0x28);
    var _0x25e690;
    _0x8d783a.textAlign = "left";
    _0x8d783a.font = "17px Arial";
    for (_0x25e690 = 0x0; _0x25e690 < _0x360379.length; ++_0x25e690) {
      _0x806992 = _0xce1d60 ? '' : _0x360379[_0x25e690].name || "mope.io";
      _0x806992 += " (" + _0x40c2b6(_0x360379[_0x25e690].xp, 0x0) + ")";
      _0x8d783a.fillStyle = "#FFFFFF";
      _0x8d783a.fillText(_0x806992, 0xf, 0x41 + 0x16 * _0x25e690);
    }
  }
};
_0xa1b27.prototype.drawLeaderboard = function () {
  if (_0x5f5cae) {
    if (!_0x1d6ac7) {
      if (_0x47971a) {
        if (_0x47971a.width) {
          _0x3b8ba2.drawImage(_0x47971a, 0xa * _0x43e85b, 0xa * _0x43e85b, _0x47971a.width * _0x301800, _0x47971a.height * _0x301800);
        }
      }
    }
  }
};
_0xa1b27.prototype.btnPlayAgain = null;
_0xa1b27.prototype.showStats = true;
_0xa1b27.prototype.interfaceButtons = [];
_0xa1b27.prototype.createInterfaceButtons = function () {
  this.interfaceButtons = [];
};
_0xa1b27.prototype.drawInterfaceButtons = function () {
  if (this.interfaceButtons) {
    for (var _0x1bbb38 = 0x0; _0x1bbb38 < this.interfaceButtons.length; _0x1bbb38++) {
      var _0x5cea2e = this.interfaceButtons[_0x1bbb38];
      if (_0x5cea2e.isVisible) {
        _0x5cea2e.draw();
      }
    }
  }
};
_0xa1b27.prototype.onResize = function () {
  this.drawInterfaceButtons();
};
_0xa1b27.prototype.readPlayerStats = function (_0x4d32e7) {
  var _0x475924 = [];
  _0x475924.rank = _0x4d32e7.readUInt16();
  _0x475924.timeAlive = _0x4d32e7.readUInt16();
  _0x475924.totalKills = _0x4d32e7.readUInt16();
  _0x475924.topRank = _0x4d32e7.readUInt16();
  _0x475924.maxXP = _0x4d32e7.readUInt32();
  _0x475924.killedBy = _0x4d32e7.readString();
  return _0x475924;
};
_0xa1b27.prototype.playerInfo = function (_0x277c0c) {
  if (isGhost && !_0x46771c) {
    var _0x59a783 = this.readPlayerStats(_0x277c0c);
    this.buildEndScreenHTML(_0x59a783);
  } else if (!isGhost) {
    this.endScreenCanvas = null;
  }
};
_0xa1b27.prototype.playerWorldUpdate = function (_0x379336) {};
_0xa1b27.prototype.worldUpdate = function (_0x76452c) {};
_0xa1b27.prototype.drawMap = function () {
  if (_0x5f5cae) {
    if (_0x11da90) {
      return;
    }
    if (_0x18c03a) {
      _0x18c03a.drawMap();
    }
    this.drawLeaderboard();
  }
};
_0xa1b27.prototype.pieChartCanvas = null;
_0xa1b27.prototype.teamColors = {
  0x0: "white",
  0x1: "#B6CF40"
};
_0xa1b27.prototype.endScreenDisplayed = false;
_0xa1b27.prototype.buildEndScreenHTML = function (_0x26748d) {
  if (this.endScreenDisplayed) {
    return;
  }
  this.endScreenDisplayed = true;
  var _0x127ccc = '';
  _0x127ccc += "<div class='msg'>YOU WERE #" + _0x26748d.rank + "</div>";
  _0x127ccc += "<div class='row'>";
  _0x127ccc += "<div class='label'>Killed by:</div>";
  _0x127ccc += "<div class='value2'>" + _0x26748d.killedBy + "</div>";
  _0x127ccc += "</div>";
  _0x127ccc += "<div class='row'>";
  _0x127ccc += "<div class='col1'>";
  _0x127ccc += "<div class='label'>Time alive:</div>";
  _0x127ccc += "<div class='value'>" + _0x4ec1fc(_0x26748d.timeAlive) + "</div>";
  _0x127ccc += "</div>";
  _0x127ccc += "<div class='col2'>";
  _0x127ccc += "<div class='label'>Total kills:</div>";
  _0x127ccc += "<div class='value'>" + _0x26748d.totalKills + "</div>";
  _0x127ccc += "</div>";
  _0x127ccc += "</div>";
  _0x127ccc += "<div class='row'>";
  _0x127ccc += "<div class='col1'>";
  _0x127ccc += "<div class='label'>Top rank:</div>";
  _0x127ccc += "<div class='value'>" + _0x26748d.topRank + "</div>";
  _0x127ccc += "</div>";
  _0x127ccc += "<div class='col2'>";
  _0x127ccc += "<div class='label'>Max xp:</div>";
  _0x127ccc += "<div class='value'>" + _0x40c2b6(_0x26748d.maxXP, 0x0) + "</div>";
  _0x127ccc += "</div>";
  _0x127ccc += "</div>";
  _0x127ccc += "<div style='clear:both;'></div>";
  _0x127ccc += "<div class='btnDiv'>";
  _0x127ccc += "<button id='btnMopeOptions' class='btn'>      CONTINUE      </button>";
  _0x127ccc += "</div>";
  _0x127ccc += "<div style='clear:both;'></div>";
  var _0x880b59 = document.getElementById("endScreen");
  if (_0x880b59) {
    _0x880b59.innerHTML = _0x127ccc;
    _0x880b59.style.display = "block";
  }
  if (!_0x5f5cae || isGhost) {
    _0xbec047();
  }
};
_0xa1b27.prototype.endScreenCanvas = null;
_0xa1b27.prototype.buildEndScreen = function (_0x1e3fdf, _0x3e577b) {
  if (this.endScreenCanvas == null) {
    this.endScreenCanvas = document.createElement("canvas");
  }
  if (this.endScreenCanvas == null) {
    return;
  }
  var _0x5379da = this.endScreenCanvas.getContext("2d");
  var _0x2d8251 = 0x37;
  _0x2d8251 = 250;
  this.endScreenCanvas.width = 430;
  this.endScreenCanvas.height = _0x2d8251;
  _0x5379da.globalAlpha = 0.2;
  _0x5379da.fillStyle = "#000000";
  _0x5379da.fillRect(0x0, 0x0, this.endScreenCanvas.width, this.endScreenCanvas.height);
  _0x5379da.fillStyle = "#000000";
  _0x5379da.fillRect(0x5, 0x5, this.endScreenCanvas.width - 10, this.endScreenCanvas.height - 10);
  var _0x52b7e6 = 0x5;
  _0x5379da.globalAlpha = 0x1;
  _0x5379da.fillStyle = "#FFFFFF";
  _0x5379da.font = "30px Arial";
  _0x52b7e6 += 0x37;
  var _0x5c43aa = "Final Stats";
  _0x5379da.font = "30px Arial";
  _0x5379da.fillText(_0x5c43aa, this.endScreenCanvas.width / 0x2 - _0x5379da.measureText(_0x5c43aa).width / 0x2, _0x52b7e6);
  _0x5379da.font = "20px Arial";
  _0x52b7e6 += 0x2d;
  _0x5c43aa = "You were #" + _0x3e577b.rank;
  _0x5379da.fillText(_0x5c43aa, this.endScreenCanvas.width / 0x2 - _0x5379da.measureText(_0x5c43aa).width / 0x2, _0x52b7e6);
  _0x52b7e6 += 0x28;
  var _0x3cc631 = 20;
  _0x27ab59(_0x5379da, "Killed by", _0x3e577b.killedBy, _0x3cc631, _0x52b7e6);
  _0x52b7e6 += 0x28;
  _0x27ab59(_0x5379da, "Time Alive", _0x4ec1fc(_0x3e577b.timeAlive), _0x3cc631, _0x52b7e6);
  _0x3cc631 += 0xd2;
  _0x27ab59(_0x5379da, "Total Kills", _0x3e577b.totalKills, _0x3cc631, _0x52b7e6);
  _0x52b7e6 += 0x28;
  _0x3cc631 = 20;
  _0x27ab59(_0x5379da, "Top rank", _0x3e577b.topRank, _0x3cc631, _0x52b7e6);
  _0x3cc631 += 0xd2;
  _0x27ab59(_0x5379da, "Max XP", _0x40c2b6(_0x3e577b.maxXP, 0x0), _0x3cc631, _0x52b7e6);
  _0x52b7e6 += 0x32;
};
_0xa1b27.prototype.lastWastedPopupT = 0x0;
_0xa1b27.prototype.onPlayerWasted = function (_0x2951b8) {
  if ((_0x1f4c9e - this.lastWastedPopupT) / 0x3e8 > 0.7) {
    this.lastWastedPopupT = _0x1f4c9e;
    var _0x3c2566 = new _0x17bc50(_0x2951b8 + " wasted!", 0x28, "red", 0x5dc);
    this.wastedPopups.push(_0x3c2566);
  }
};
_0xa1b27.prototype.lastWastedPopupT = 0x0;
_0xa1b27.prototype.msgDisplayPlayersOnMiniMap = function (_0xd0c6bc) {
  _0x219364 = [];
  var _0x401036 = _0xd0c6bc.readUInt16();
  for (var _0x113395 = 0x0; _0x113395 < _0x401036; _0x113395++) {
    _0x219364.push({
      "id": _0xd0c6bc.readUInt32(),
      "x": _0xd0c6bc.readUInt32() / 0x64,
      "y": _0xd0c6bc.readUInt32() / 0x64,
      "rad": 0x3
    });
  }
};
window.FreeForAll = _0xa1b27;
var _0x53abbc = _0x59651b;
_0x552bd1.prototype = Object.create(_0x53abbc.prototype);
_0x552bd1.prototype.constructor = _0x552bd1;
_0x552bd1.superClass = _0x53abbc;
_0x552bd1.prototype.safeArea = null;
var _0x50282a = false;
function _0x552bd1(_0x1bd14c) {
  this.mode = 0x5;
  this.chatAllowed = true;
  this.createInterfaceButtons();
  console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombie mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombie mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombie mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombie mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombie mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
}
_0x552bd1.prototype.wastedPopups = [];
_0x552bd1.prototype.playerDisplayNum = 0x0;
_0x552bd1.prototype.setServerPlayerCount = function () {
  if (this.playerDisplayNum == 0x0) {
    _0x3540bd.setText(_0x2f24c4.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " mopers");
  } else {
    _0x3540bd.setText(0x0.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " on server");
  }
  if (_0x18c03a) {
    _0x18c03a.setPlayersCount(_0x2f24c4);
  }
  this.playerDisplayNum = this.playerDisplayNum == 0x0 ? 0x1 : 0x0;
};
_0x552bd1.prototype["interface"] = function () {
  if (this.state == -0x1 || this.mode != _0x16c921) {
    return;
  }
  if (_0x5f5cae) {
    for (var _0x3184b8 = this.wastedPopups.length - 0x1; _0x3184b8 >= 0x0; _0x3184b8--) {
      var _0x447a34 = this.wastedPopups[_0x3184b8];
      _0x447a34.draw();
      if (_0x447a34.timedOut) {
        this.wastedPopups.splice(_0x3184b8, 0x1);
      }
    }
  }
  if (this.endScreenCanvas != null) {
    if (this.endScreenCanvas.width) {
      _0x3b8ba2.drawImage(this.endScreenCanvas, _0x485584 / 0x2 - this.endScreenCanvas.width / 0x2, 0xf * _0x43e85b, this.endScreenCanvas.width, this.endScreenCanvas.height);
    }
    if (!_0x5f5cae || isGhost) {
      _0x5f1a0c(true);
    }
  }
  this.drawInterfaceButtons();
};
_0x552bd1.prototype.interfaceReset = function () {
  this.endScreenCanvas = null;
  this.dangerCircleMiniMapCanvas = null;
  this.wastedPopups = [];
  this.lastWastedPopupT = 0x0;
  this.playercount = 0x0;
  this.safeArea = null;
  _0x9452de = null;
  _0x530309 = null;
  if (this.interfaceButtons) {
    for (var _0x16b063 = 0x0; _0x16b063 < this.interfaceButtons.length; _0x16b063++) {
      var _0x125053 = this.interfaceButtons[_0x16b063];
      _0x125053.onInterfaceReset();
    }
  }
  this.interfaceButtons = [];
};
_0x552bd1.prototype.onInit = function () {};
_0x552bd1.prototype.playercount = 0x0;
_0x552bd1.prototype.setPlayerCount = function (_0x39170e) {
  this.playercount = _0x39170e;
};
_0x552bd1.prototype.showPlayerCount = function () {
  _0x3b8ba2.save();
  var _0x18db65 = _0x485584 / 0x2;
  var _0x1918d3 = 0x32 * _0x301800;
  var _0x2c01e0 = 0x12c * _0x301800;
  _0x3b8ba2.globalAlpha = 0.35;
  _0x3b8ba2.fillStyle = "black";
  var _0x14378f = 0x1e * _0x301800;
  _0x3b8ba2.fillRect(_0x18db65 - _0x2c01e0 / 0x2, _0x14378f, _0x2c01e0, _0x1918d3);
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.fillStyle = "white";
  _0x3b8ba2.font = 0x1e * _0x301800 + "px Arial";
  _0x3b8ba2.lineWidth = 0x1;
  _0x3b8ba2.textAlign = "center";
  _0x3b8ba2.textBaseline = "middle";
  _0x3b8ba2.shadowOffsetX = 0x1;
  _0x3b8ba2.shadowOffsetY = 0x1;
  _0x3b8ba2.shadowColor = "black";
  _0x14378f += 0x19 * _0x301800;
  var _0x10156c = " player";
  if (this.playercount > 0x1) {
    _0x10156c += "s";
  }
  if (this.state == battleRoyal_inProgress) {
    _0x10156c += " alive!";
  } else {
    if (this.state == 0x0 || this.state == battleRoyal_ready) {
      _0x10156c += " joined";
    }
  }
  _0x3b8ba2.fillText(this.playercount + _0x10156c, _0x18db65, _0x14378f);
  _0x3b8ba2.restore();
};
_0x552bd1.prototype.lbCanvas = null;
_0x552bd1.prototype.leaderboard = function (_0x99a0b7) {
  if (this.lbCanvas == null) {
    this.lbCanvas = document.createElement("canvas");
  }
  if (_0x99a0b7) {
    var _0x1af699 = this.lbCanvas.getContext("2d");
    var _0x460829 = 0x37;
    _0x460829 = _0x460829 + 0x16 * _0x99a0b7.length;
    this.lbCanvas.width = 0x10e;
    this.lbCanvas.height = _0x460829;
    _0x1af699.globalAlpha = 0.2;
    _0x1af699.fillStyle = "#000000";
    _0x1af699.fillRect(0x0, 0x0, this.lbCanvas.width, this.lbCanvas.height);
    _0x1af699.globalAlpha = 0x1;
    _0x1af699.fillStyle = "#FFFFFF";
    var _0x2d056d = curServer.name;
    _0x1af699.font = "24px Arial";
    if (!options_lowGraphics) {
      _0x1af699.shadowOffsetX = 0x1;
      _0x1af699.shadowOffsetY = 0x1;
    }
    _0x1af699.shadowColor = "black";
    _0x1af699.fillText(_0x2d056d, this.lbCanvas.width / 0x2 - _0x1af699.measureText(_0x2d056d).width / 0x2, 0x28);
    var _0x154a90;
    _0x1af699.textAlign = "left";
    _0x1af699.font = "17px Arial";
    for (_0x154a90 = 0x0; _0x154a90 < _0x99a0b7.length; ++_0x154a90) {
      _0x2d056d = _0xce1d60 ? '' : _0x99a0b7[_0x154a90].name || "mope.io";
      _0x2d056d += " (" + _0x40c2b6(_0x99a0b7[_0x154a90].xp, 0x0) + ")";
      _0x1af699.fillStyle = "#FFFFFF";
      _0x1af699.fillText(_0x2d056d, 0xf, 0x41 + 0x16 * _0x154a90);
    }
  }
};
_0x552bd1.prototype.drawLeaderboard = function () {
  if (_0x5f5cae) {
    if (this.pieChartCanvas != null) {
      if (this.pieChartCanvas.width) {
        _0x3b8ba2.drawImage(this.pieChartCanvas, 0x14 * _0x43e85b, 0x14 * _0x43e85b, this.pieChartCanvas.width, this.pieChartCanvas.height);
      }
    }
  }
  _0x511923();
};
_0x552bd1.prototype.btnPlayAgain = null;
_0x552bd1.prototype.showStats = true;
_0x552bd1.prototype.interfaceButtons = [];
_0x552bd1.prototype.createInterfaceButtons = function () {
  this.interfaceButtons = [];
};
_0x552bd1.prototype.drawInterfaceButtons = function () {
  if (this.interfaceButtons) {
    for (var _0xcec9e0 = 0x0; _0xcec9e0 < this.interfaceButtons.length; _0xcec9e0++) {
      var _0x1f7ec3 = this.interfaceButtons[_0xcec9e0];
      if (_0x1f7ec3.isVisible) {
        _0x1f7ec3.draw();
      }
    }
  }
};
_0x552bd1.prototype.onResize = function () {
  this.drawInterfaceButtons();
};
_0x552bd1.prototype.readPlayerStats = function (_0x2a0aad) {
  var _0x1d38cf = [];
  _0x1d38cf.rank = _0x2a0aad.readUInt16();
  _0x1d38cf.timeAlive = _0x2a0aad.readUInt16();
  _0x1d38cf.totalKills = _0x2a0aad.readUInt16();
  _0x1d38cf.topRank = _0x2a0aad.readUInt16();
  _0x1d38cf.maxXP = _0x2a0aad.readUInt32();
  _0x1d38cf.killedBy = _0x2a0aad.readString();
  return _0x1d38cf;
};
_0x552bd1.prototype.playerInfo = function (_0x443fdd) {
  if (isGhost && !_0x46771c) {
    var _0x3d009a = this.readPlayerStats(_0x443fdd);
    this.buildEndScreenHTML(_0x3d009a);
  } else if (!isGhost) {
    this.endScreenCanvas = null;
  }
};
_0x552bd1.prototype.worldUpdate = function (_0x16229c) {
  var _0xfd2daa = minimapW / 0xc8;
  var _0x1297bf = minimapH / 0xc8;
  var _0xa5b2cb = _0x16229c.readUInt32() * _0xfd2daa;
  var _0x4485e7 = _0x16229c.readUInt32() * _0x1297bf;
  var _0x5f3772 = _0x16229c.readUInt32() * 0x5;
  _0x9452de = {
    "x": _0xa5b2cb,
    "y": _0x4485e7,
    "rad": _0x5f3772 * (minimapW / _0x1f0c0a)
  };
  this.nonZombiePlayersCount = _0x16229c.readUInt16();
  this.zombieCount = _0x16229c.readUInt16();
  if (!_0x50282a) {
    this.zombiePlayers = [];
    for (i = 0x0; i < this.zombieCount; i++) {
      var _0xa5b2cb = _0x16229c.readUInt16() / 0x4;
      var _0x4485e7 = _0x16229c.readUInt16() / 0x4;
      var _0x2a93a4 = _0x16229c.readUInt16() / 0xa;
      this.zombiePlayers.push({
        "x": _0xa5b2cb,
        "y": _0x4485e7,
        "rad": _0x2a93a4
      });
    }
  }
};
var _0x530309 = null;
function _0x511923() {
  if (!_0x530309) {
    _0x530309 = document.createElement("canvas");
  }
  _0x530309.width = minimapW;
  _0x530309.height = minimapH;
  var _0x40d1a0 = _0x530309.getContext("2d");
  _0x40d1a0.clearRect(0x0, 0x0, _0x530309.width, _0x530309.height);
  _0x40d1a0.save();
  var _0x46a187 = _0x9452de.x;
  var _0x2800a5 = _0x9452de.y;
  _0x40d1a0.translate(_0x46a187, _0x2800a5);
  _0x40d1a0.save();
  _0x40d1a0.globalAlpha = 0x1;
  _0x2ae911(_0x40d1a0, 0x0, 0x0, _0x9452de.rad, 0x5, "white");
  _0x40d1a0.restore();
  var _0x291050 = _0x301800 * minimapW * 1.5;
  var _0xadb744 = _0x301800 * minimapH * 1.5;
  _0x525fa4(_0x40d1a0, _0x9452de.rad, Math.PI * 0x0, "red", 0x1, _0x291050, _0xadb744);
  _0x525fa4(_0x40d1a0, _0x9452de.rad, Math.PI * 0.5, "red", 0x1, _0x291050, _0xadb744);
  _0x525fa4(_0x40d1a0, _0x9452de.rad, Math.PI * 0x1, "red", 0x1, _0x291050, _0xadb744);
  _0x525fa4(_0x40d1a0, _0x9452de.rad, Math.PI * 1.5, "red", 0x1, _0x291050, _0xadb744);
  _0x40d1a0.restore();
  if (_0x530309) {
    _0x3b8ba2.drawImage(_0x530309, _0x485584 - (0xa * _0x43e85b + null.width * _0x301800), 0xa * _0x43e85b, minimapW * _0x301800, minimapH * _0x301800);
  }
}
_0x552bd1.prototype.drawZombiePlayers = function () {
  if (this.zombiePlayers) {
    for (t = 0x0; t < this.zombiePlayers.length; t++) {
      _0x3aeca2(this.zombiePlayers[t], "#adff32", 0x1);
    }
  }
};
_0x552bd1.prototype.drawMap = function () {
  this.buildPieChart();
  if (!_0x50282a) {
    this.drawZombiePlayers();
  }
};
_0x552bd1.prototype.pieChartCanvas = null;
_0x552bd1.prototype.teamColors = {
  0x0: "white",
  0x1: "#B6CF40"
};
_0x552bd1.prototype.buildPieChart = function () {
  if (this.pieChartCanvas == null) {
    this.pieChartCanvas = document.createElement("canvas");
  }
  if (this.pieChartCanvas == null) {
    return;
  }
  var _0x34ef31 = this.pieChartCanvas.getContext("2d");
  var _0x517de6 = {
    0x0: this.nonZombiePlayersCount,
    0x1: this.zombieCount
  };
  _0x3eca11 = _0x50282a ? 0x1 : 0x0;
  var _0x225253 = new _0x2ed12b({
    "pad": 0x1e,
    "canvas": this.pieChartCanvas,
    "data": _0x517de6,
    "colors": this.teamColors
  });
  var _0x448849 = 0x37;
  _0x448849 = 210;
  this.pieChartCanvas.width = 210;
  this.pieChartCanvas.height = _0x448849;
  _0x225253.draw();
  _0x34ef31.globalAlpha = 0.2;
  var _0x1482aa = 0x5;
  _0x34ef31.globalAlpha = 0.5;
  _0x34ef31.fillStyle = "white";
  _0x34ef31.font = "20px Arial";
  var _0x1482aa = 0xc8;
  str = curServer.name;
  _0x34ef31.fillText(str, this.pieChartCanvas.width / 0x2 - _0x34ef31.measureText(str).width / 0x2 - 0xf, _0x1482aa);
};
_0x552bd1.prototype.endScreenDisplayed = false;
_0x552bd1.prototype.buildEndScreenHTML = function (_0x224570) {
  if (this.endScreenDisplayed) {
    return;
  }
  this.endScreenDisplayed = true;
  var _0x1bc08a = '';
  _0x1bc08a += "<div class='msg'>YOU WERE #" + _0x224570.rank + "</div>";
  _0x1bc08a += "<div class='row'>";
  _0x1bc08a += "<div class='label'>Killed by:</div>";
  _0x1bc08a += "<div class='value2'>" + _0x224570.killedBy + "</div>";
  _0x1bc08a += "</div>";
  _0x1bc08a += "<div class='row'>";
  _0x1bc08a += "<div class='col1'>";
  _0x1bc08a += "<div class='label'>Time alive:</div>";
  _0x1bc08a += "<div class='value'>" + _0x4ec1fc(_0x224570.timeAlive) + "</div>";
  _0x1bc08a += "</div>";
  _0x1bc08a += "<div class='col2'>";
  _0x1bc08a += "<div class='label'>Total kills:</div>";
  _0x1bc08a += "<div class='value'>" + _0x224570.totalKills + "</div>";
  _0x1bc08a += "</div>";
  _0x1bc08a += "</div>";
  _0x1bc08a += "<div class='row'>";
  _0x1bc08a += "<div class='col1'>";
  _0x1bc08a += "<div class='label'>Top rank:</div>";
  _0x1bc08a += "<div class='value'>" + _0x224570.topRank + "</div>";
  _0x1bc08a += "</div>";
  _0x1bc08a += "<div class='col2'>";
  _0x1bc08a += "<div class='label'>Max xp:</div>";
  _0x1bc08a += "<div class='value'>" + _0x40c2b6(_0x224570.maxXP, 0x0) + "</div>";
  _0x1bc08a += "</div>";
  _0x1bc08a += "</div>";
  _0x1bc08a += "<div style='clear:both;'></div>";
  _0x1bc08a += "<div class='btnDiv'>";
  _0x1bc08a += "<button id='btnMopeOptions' class='btn'>      CONTINUE      </button>";
  _0x1bc08a += "</div>";
  _0x1bc08a += "<div style='clear:both;'></div>";
  var _0x10e1b6 = document.getElementById("endScreen");
  if (_0x10e1b6) {
    _0x10e1b6.innerHTML = _0x1bc08a;
    _0x10e1b6.style.display = "block";
  }
  if (!_0x5f5cae || isGhost) {
    _0xbec047();
  }
};
_0x552bd1.prototype.endScreenCanvas = null;
_0x552bd1.prototype.buildEndScreen = function (_0x302193, _0x4649f3) {
  if (this.endScreenCanvas == null) {
    this.endScreenCanvas = document.createElement("canvas");
  }
  if (this.endScreenCanvas == null) {
    return;
  }
  var _0x108027 = this.endScreenCanvas.getContext("2d");
  var _0x4699d7 = 0x37;
  _0x4699d7 = 250;
  this.endScreenCanvas.width = 430;
  this.endScreenCanvas.height = _0x4699d7;
  _0x108027.globalAlpha = 0.2;
  _0x108027.fillStyle = "#000000";
  _0x108027.fillRect(0x0, 0x0, this.endScreenCanvas.width, this.endScreenCanvas.height);
  _0x108027.fillStyle = "#000000";
  _0x108027.fillRect(0x5, 0x5, this.endScreenCanvas.width - 10, this.endScreenCanvas.height - 10);
  var _0x36e4d2 = 0x5;
  _0x108027.globalAlpha = 0x1;
  _0x108027.fillStyle = "#FFFFFF";
  _0x108027.font = "30px Arial";
  _0x36e4d2 += 0x37;
  var _0x41f63a = "Final Stats";
  _0x108027.font = "30px Arial";
  _0x108027.fillText(_0x41f63a, this.endScreenCanvas.width / 0x2 - _0x108027.measureText(_0x41f63a).width / 0x2, _0x36e4d2);
  _0x108027.font = "20px Arial";
  _0x36e4d2 += 0x2d;
  _0x41f63a = "You were #" + _0x4649f3.rank;
  _0x108027.fillText(_0x41f63a, this.endScreenCanvas.width / 0x2 - _0x108027.measureText(_0x41f63a).width / 0x2, _0x36e4d2);
  _0x36e4d2 += 0x28;
  var _0x31308e = 20;
  _0x27ab59(_0x108027, "Killed by", _0x4649f3.killedBy, _0x31308e, _0x36e4d2);
  _0x36e4d2 += 0x28;
  _0x27ab59(_0x108027, "Time Alive", _0x4ec1fc(_0x4649f3.timeAlive), _0x31308e, _0x36e4d2);
  _0x31308e += 0xd2;
  _0x27ab59(_0x108027, "Total Kills", _0x4649f3.totalKills, _0x31308e, _0x36e4d2);
  _0x36e4d2 += 0x28;
  _0x31308e = 20;
  _0x27ab59(_0x108027, "Top rank", _0x4649f3.topRank, _0x31308e, _0x36e4d2);
  _0x31308e += 0xd2;
  _0x27ab59(_0x108027, "Max XP", _0x40c2b6(_0x4649f3.maxXP, 0x0), _0x31308e, _0x36e4d2);
  _0x36e4d2 += 0x32;
};
var _0x525fa4 = function (_0x5aa154, _0x5485f0, _0x44e8aa, _0x4a2185, _0x5976eb, _0x7dc890, _0x57305f) {
  _0x5aa154.save();
  _0x5aa154.globalAlpha = _0x5976eb;
  _0x5aa154.fillStyle = _0x4a2185;
  _0x5aa154.rotate(_0x44e8aa);
  _0x5aa154.save();
  _0x5aa154.strokeStyle = "white";
  _0x5aa154.beginPath();
  _0x5aa154.arc(0x0, 0x0, _0x5485f0, 0x0, Math.PI * 0.5, false);
  _0x5aa154.stroke();
  _0x5aa154.restore();
  _0x5aa154.save();
  _0x5aa154.beginPath();
  _0x5aa154.arc(0x0, 0x0, _0x5485f0, 0x0, Math.PI * 0.5, false);
  _0x5aa154.lineTo(0x0, _0x7dc890);
  _0x5aa154.lineTo(_0x57305f, _0x7dc890);
  _0x5aa154.lineTo(_0x57305f, 0x0);
  _0x5aa154.closePath();
  _0x5aa154.fill();
  _0x5aa154.restore();
  _0x5aa154.restore();
};
_0x552bd1.prototype.lastWastedPopupT = 0x0;
_0x552bd1.prototype.onPlayerWasted = function (_0x584977) {
  if ((_0x1f4c9e - this.lastWastedPopupT) / 0x3e8 > 0.7) {
    this.lastWastedPopupT = _0x1f4c9e;
    var _0x579680 = new _0x17bc50(_0x584977 + " wasted!", 0x28, "red", 0x5dc);
    this.wastedPopups.push(_0x579680);
  }
};
window.ZombieMode = _0x552bd1;
var _0x53abbc = _0x59651b;
_0x31f41d.prototype = Object.create(_0x53abbc.prototype);
_0x31f41d.prototype.constructor = _0x31f41d;
_0x31f41d.superClass = _0x53abbc;
_0x31f41d.prototype.safeArea = null;
var _0x50282a = false;
_0x31f41d.prototype.wastedPopups = [];
_0x31f41d.prototype.playerDisplayNum = 0x0;
_0x31f41d.prototype.setServerPlayerCount = function () {
  if (this.playerDisplayNum == 0x0) {
    _0x3540bd.setText(_0x2f24c4.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " mopers");
  } else {
    _0x3540bd.setText(0x0.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " on server");
  }
  if (_0x18c03a) {
    _0x18c03a.setPlayersCount(_0x2f24c4);
  }
  this.playerDisplayNum = this.playerDisplayNum == 0x0 ? 0x1 : 0x0;
};
_0x31f41d.prototype["interface"] = function () {
  if (this.state == -0x1 || this.mode != _0x16c921) {
    return;
  }
  if (_0x5f5cae) {
    for (var _0x264246 = this.wastedPopups.length - 0x1; _0x264246 >= 0x0; _0x264246--) {
      var _0x2cfb52 = this.wastedPopups[_0x264246];
      _0x2cfb52.draw();
      if (_0x2cfb52.timedOut) {
        this.wastedPopups.splice(_0x264246, 0x1);
      }
    }
  }
  if (this.endScreenCanvas != null) {
    if (this.endScreenCanvas.width) {
      _0x3b8ba2.drawImage(this.endScreenCanvas, _0x485584 / 0x2 - this.endScreenCanvas.width / 0x2, 0xf * _0x43e85b, this.endScreenCanvas.width, this.endScreenCanvas.height);
    }
    if (!_0x5f5cae || isGhost) {
      _0x5f1a0c(true);
    }
  }
  this.drawInterfaceButtons();
  this.gameMode_screenMsg();
};
_0x31f41d.prototype.interfaceReset = function () {
  this.endScreenCanvas = null;
  this.dangerCircleMiniMapCanvas = null;
  this.wastedPopups = [];
  this.lastWastedPopupT = 0x0;
  this.playercount = 0x0;
  this.safeArea = null;
  _0x9452de = null;
  _0x530309 = null;
  if (this.interfaceButtons) {
    for (var _0x4f0c50 = 0x0; _0x4f0c50 < this.interfaceButtons.length; _0x4f0c50++) {
      var _0x499e0d = this.interfaceButtons[_0x4f0c50];
      _0x499e0d.onInterfaceReset();
    }
  }
  this.interfaceButtons = [];
};
_0x31f41d.prototype.onInit = function () {};
_0x31f41d.prototype.playercount = 0x0;
_0x31f41d.prototype.setPlayerCount = function (_0x52be49) {
  this.playercount = _0x52be49;
};
_0x31f41d.prototype.showPlayerCount = function () {
  _0x3b8ba2.save();
  var _0x47a61b = _0x485584 / 0x2;
  var _0x21d5c2 = 0x32 * _0x301800;
  var _0x363d38 = 0x12c * _0x301800;
  _0x3b8ba2.globalAlpha = 0.35;
  _0x3b8ba2.fillStyle = "black";
  var _0x23d99e = 0x1e * _0x301800;
  _0x3b8ba2.fillRect(_0x47a61b - _0x363d38 / 0x2, _0x23d99e, _0x363d38, _0x21d5c2);
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.fillStyle = "white";
  _0x3b8ba2.font = 0x1e * _0x301800 + "px Arial";
  _0x3b8ba2.lineWidth = 0x1;
  _0x3b8ba2.textAlign = "center";
  _0x3b8ba2.textBaseline = "middle";
  _0x3b8ba2.shadowOffsetX = 0x1;
  _0x3b8ba2.shadowOffsetY = 0x1;
  _0x3b8ba2.shadowColor = "black";
  _0x23d99e += 0x19 * _0x301800;
  var _0x1e392b = " player";
  if (this.playercount > 0x1) {
    _0x1e392b += "s";
  }
  if (this.state == battleRoyal_inProgress) {
    _0x1e392b += " alive!";
  } else {
    if (this.state == 0x0 || this.state == battleRoyal_ready) {
      _0x1e392b += " joined";
    }
  }
  _0x3b8ba2.fillText(this.playercount + _0x1e392b, _0x47a61b, _0x23d99e);
  _0x3b8ba2.restore();
};
_0x31f41d.prototype.lbCanvas = null;
_0x31f41d.prototype.leaderboard = function (_0x2ac9b8) {
  if (this.lbCanvas == null) {
    this.lbCanvas = document.createElement("canvas");
  }
  if (_0x2ac9b8) {
    var _0x429f0e = this.lbCanvas.getContext("2d");
    var _0xff18ce = 0x37;
    _0xff18ce = _0xff18ce + 0x16 * _0x2ac9b8.length;
    this.lbCanvas.width = 0x10e;
    this.lbCanvas.height = _0xff18ce;
    _0x429f0e.globalAlpha = 0.2;
    _0x429f0e.fillStyle = "#000000";
    _0x429f0e.fillRect(0x0, 0x0, this.lbCanvas.width, this.lbCanvas.height);
    _0x429f0e.globalAlpha = 0x1;
    _0x429f0e.fillStyle = "#FFFFFF";
    var _0x5a192b = curServer.name;
    _0x429f0e.font = "24px Arial";
    if (!options_lowGraphics) {
      _0x429f0e.shadowOffsetX = 0x1;
      _0x429f0e.shadowOffsetY = 0x1;
    }
    _0x429f0e.shadowColor = "black";
    _0x429f0e.fillText(_0x5a192b, this.lbCanvas.width / 0x2 - _0x429f0e.measureText(_0x5a192b).width / 0x2, 0x28);
    var _0x2a3c69;
    _0x429f0e.textAlign = "left";
    _0x429f0e.font = "17px Arial";
    for (_0x2a3c69 = 0x0; _0x2a3c69 < _0x2ac9b8.length; ++_0x2a3c69) {
      _0x5a192b = _0xce1d60 ? '' : _0x2ac9b8[_0x2a3c69].name || "mope.io";
      _0x5a192b += " (" + _0x40c2b6(_0x2ac9b8[_0x2a3c69].xp, 0x0) + ")";
      _0x429f0e.fillStyle = "#FFFFFF";
      _0x429f0e.fillText(_0x5a192b, 0xf, 0x41 + 0x16 * _0x2a3c69);
    }
  }
};
_0x31f41d.prototype.drawLeaderboard = function () {
  if (_0x5f5cae) {
    if (this.pieChartCanvas != null) {
      if (this.pieChartCanvas.width) {
        _0x3b8ba2.drawImage(this.pieChartCanvas, 0x14 * _0x43e85b, 0x14 * _0x43e85b, this.pieChartCanvas.width, this.pieChartCanvas.height);
      }
    }
  }
  if (_0x9452de) {
    _0x511923();
  }
};
_0x31f41d.prototype.btnPlayAgain = null;
_0x31f41d.prototype.showStats = true;
_0x31f41d.prototype.interfaceButtons = [];
_0x31f41d.prototype.createInterfaceButtons = function () {
  this.interfaceButtons = [];
};
_0x31f41d.prototype.drawInterfaceButtons = function () {
  if (this.interfaceButtons) {
    for (var _0x149b4d = 0x0; _0x149b4d < this.interfaceButtons.length; _0x149b4d++) {
      var _0x2d0246 = this.interfaceButtons[_0x149b4d];
      if (_0x2d0246.isVisible) {
        _0x2d0246.draw();
      }
    }
  }
};
_0x31f41d.prototype.onResize = function () {
  this.drawInterfaceButtons();
};
_0x31f41d.prototype.readPlayerStats = function (_0x2fb27e) {
  var _0x26374b = [];
  _0x26374b.rank = _0x2fb27e.readUInt16();
  _0x26374b.timeAlive = _0x2fb27e.readUInt16();
  _0x26374b.totalKills = _0x2fb27e.readUInt16();
  _0x26374b.topRank = _0x2fb27e.readUInt16();
  _0x26374b.maxXP = _0x2fb27e.readUInt32();
  _0x26374b.killedBy = _0x2fb27e.readString();
  return _0x26374b;
};
_0x31f41d.prototype.playerInfo = function (_0x1c7ac7) {
  if (isGhost && !_0x46771c) {
    var _0x3d0c29 = this.readPlayerStats(_0x1c7ac7);
    this.buildEndScreenHTML(_0x3d0c29);
  } else if (!isGhost) {
    this.endScreenCanvas = null;
  }
};
var _0x316a79 = 0x1;
var _0x316a79 = 0x1;
_0x31f41d.prototype.worldUpdate = function (_0x557c50) {
  _0x4fc996 = _0x557c50.readUInt8();
  if (_0x4fc996 == 0x2) {
    var _0x5ddc92 = minimapW / 0xc8;
    var _0x406cbc = minimapH / 0xc8;
    var _0x57a372 = _0x557c50.readUInt32() * _0x5ddc92;
    var _0xe2181f = _0x557c50.readUInt32() * _0x406cbc;
    var _0x4748b = _0x557c50.readUInt32() * 0x5;
    _0x9452de = {
      "x": _0x57a372,
      "y": _0xe2181f,
      "rad": _0x4748b * (minimapW / _0x1f0c0a)
    };
  } else {
    _0x9452de = null;
  }
};
_0x31f41d.prototype.handleMessage = function (_0x36c492) {
  var _0x5b0cb9 = _0x36c492.readUInt8();
  switch (_0x5b0cb9) {
    case 0x53:
      {
        var _0x14ad99 = _0x36c492.readString();
        this.setStatusBarMessage(_0x14ad99, 0xf);
        break;
      }
    case 0x52:
      {
        this.alivePlayers = _0x36c492.readUInt16();
        this.playerCountMsg = _0x36c492.readString();
        this.setPlayerCountMsg();
        break;
      }
    case 0x54:
      {
        this.timeRemain = _0x36c492.readUInt16();
        break;
      }
    case 0x21:
      {
        isGhost = true;
        this.showStats = true;
        _0x1d6ac7 = false;
        _0x40d246();
      }
      break;
    case 0x22:
      {
        _0x3821a0 = "You WON!";
        respawnXp = 0x0;
        _0x2a6191 = 0x50;
        _0x21e61c = "limegreen";
        _0x43dc83 = +new Date() + 0x1388;
        _0x1d6ac7 = false;
        _0x40d246();
      }
      break;
    case 0x23:
      {}
      break;
    case 0x24:
      {
        var _0x250a84 = _0x36c492.readUInt8();
        var _0xc6c5b0 = [];
        for (_0x496539 = 0x0; _0x496539 < _0x250a84; ++_0x496539) {
          _0xc6c5b0.push({
            "name": _0x36c492.readString(),
            "xp": _0x36c492.readUInt32()
          });
        }
        this.leaderboard(_0xc6c5b0);
      }
      break;
    case 0x25:
      {
        var _0x5a1378 = _0x36c492.readUInt16();
        var _0x5bbd22 = _0x4ec1fc(_0x5a1378);
        if (this.state == 0x4) {
          var _0x14ad99 = "Game restarts in " + _0x5bbd22;
          if (_0x5a1378 < 0x3) {
            _0x14ad99 = "Starting new game";
          }
          this.setMessage(_0x14ad99, 0x1f4);
        } else {
          var _0x14ad99 = "Battle begins in " + _0x5bbd22;
          if (_0x5a1378 < 0x3) {
            if (_0x5bbd22 == '') {
              _0x14ad99 = "Starting new battle!";
            } else {
              _0x14ad99 = "Starting new battle! (" + _0x5bbd22 + ")";
            }
          }
          this.setMessage(_0x14ad99, 0x1f4);
          if (_0x5a1378 == 0x0) {
            _0x1c9e5a("SURVIVE!", 0x9c4);
          }
        }
      }
      break;
    case 0x26:
      {
        this.playersJoined = _0x36c492.readUInt16();
        if (this.playersJoined > 0x0) {
          this.setPlayerCount(this.playersJoined);
        }
      }
      break;
    case 0x27:
      {
        var _0x5a1378 = _0x36c492.readUInt16();
        var _0x5bbd22 = _0x4ec1fc(_0x5a1378);
        if (!isGhost) {
          var _0x14ad99 = "Heatwave expanding in " + _0x5bbd22;
          if (_0x5a1378 < 0x4) {
            _0x14ad99 = "Heatwave expands now!";
          }
          this.setMessage(_0x14ad99, 0x1f4);
          if (_0x5a1378 == 0x0) {
            _0x1c9e5a("STAY SAFE!", 0x9c4);
          }
        }
      }
      break;
    case 0x28:
      {
        if (isGhost) {
          this.setMessage("You have been eliminated!", 0x1f4);
        } else {
          this.setMessage("Stay in safe area!", 0x1f4);
        }
      }
      break;
    case 0x29:
      {
        _0x4fc996 = this.state = _0x36c492.readUInt8();
        this.playersJoined = _0x36c492.readUInt16();
        if (this.playersJoined > 0x0) {
          this.setPlayerCount(this.playersJoined);
        }
        if (this.state == 0x0) {
          this.setMessage("Waiting for players", 0x3e8);
        } else if (this.state == battleRoyal_gameReset) {
          _0x5e5c01();
        }
      }
      break;
    case 0x2a:
      {
        var _0x56709b = _0x36c492.readUInt8() == 0x1;
        if (_0x56709b) {
          this.setMessage("You WON!", 0x3a98);
        } else {
          this.setMessage("You LOST!", 0x3a98);
        }
      }
      break;
    case 0x2b:
      {
        _0x28145a = true;
        if (_0x192f81 && _0x192f81.ws && _0x192f81.ws.readyState === WebSocket.OPEN) {
          null.close();
        }
      }
      break;
    case 0x2c:
      {
        var _0x49be0d = _0x36c492.readString();
        if (_0x49be0d && _0x49be0d.length > 0x0) {
          this.onPlayerWasted(_0x49be0d);
        }
      }
      break;
    case 0x2d:
      {
        console.log("Msg_battleroyal_endScreen");
        var _0x378ba0 = null;
        var _0x1c5637 = 0x0;
        if (!_0x444b0f) {
          _0x378ba0 = this.readPlayerStats(_0x36c492);
          _0x1c5637 = _0x378ba0.totalPlayers;
        } else {
          _0x1c5637 = _0x36c492.readUInt16();
        }
        var _0x430b67 = [];
        if (_0x1c5637 > 0x0) {
          if (_0x1c5637 > 0x5) {
            _0x1c5637 = 0x5;
          }
          for (var _0x496539 = 0x0; _0x496539 < _0x1c5637; ++_0x496539) {
            _0x430b67.push({
              "playerName": _0x36c492.readString(),
              "wins": _0x36c492.readUInt8()
            });
          }
        }
        if (_0x430b67 != null || _0x378ba0 != null) {
          this.endScreenDisplayed = false;
          this.buildEndScreenHTML(_0x430b67, _0x378ba0);
        }
      }
      break;
    case 0x2e:
      {
        var _0x5a1378 = _0x36c492.readUInt16();
        if (_0x5a1378 == 0x0) {
          this.setMessage("Battle Ended", 0x1f4);
        } else {
          var _0x5bbd22 = _0x4ec1fc(_0x5a1378);
          if (!isGhost) {
            this.setMessage("Battle Ending in " + _0x5bbd22, 0x1f4);
          }
        }
      }
    case 0x30:
      {
        var _0x378ba0 = this.readPlayerStats(_0x36c492);
        this.buildEndScreen(null, _0x378ba0);
      }
  }
};
var _0x530309 = null;
function _0x511923() {
  if (!_0x530309) {
    _0x530309 = document.createElement("canvas");
  }
  _0x530309.width = minimapW;
  _0x530309.height = minimapH;
  var _0x58a54c = _0x530309.getContext("2d");
  _0x58a54c.clearRect(0x0, 0x0, _0x530309.width, _0x530309.height);
  _0x58a54c.save();
  var _0x3925c3 = _0x9452de.x;
  var _0x2e316e = _0x9452de.y;
  _0x58a54c.translate(_0x3925c3, _0x2e316e);
  _0x58a54c.save();
  _0x58a54c.globalAlpha = 0x1;
  _0x2ae911(_0x58a54c, 0x0, 0x0, _0x9452de.rad, 0x5, "white");
  _0x58a54c.restore();
  var _0x341779 = _0x301800 * minimapW * 1.5;
  var _0x8dd8af = _0x301800 * minimapH * 1.5;
  _0x525fa4(_0x58a54c, _0x9452de.rad, Math.PI * 0x0, "red", 0x1, _0x341779, _0x8dd8af);
  _0x525fa4(_0x58a54c, _0x9452de.rad, Math.PI * 0.5, "red", 0x1, _0x341779, _0x8dd8af);
  _0x525fa4(_0x58a54c, _0x9452de.rad, Math.PI * 0x1, "red", 0x1, _0x341779, _0x8dd8af);
  _0x525fa4(_0x58a54c, _0x9452de.rad, Math.PI * 1.5, "red", 0x1, _0x341779, _0x8dd8af);
  _0x58a54c.restore();
  if (_0x530309) {
    _0x3b8ba2.drawImage(_0x530309, _0x485584 - (0xa * _0x43e85b + null.width * _0x301800), 0xa * _0x43e85b, minimapW * _0x301800, minimapH * _0x301800);
  }
}
_0x31f41d.prototype.drawZombiePlayers = function () {
  if (this.zombiePlayers) {
    for (t = 0x0; t < this.zombiePlayers.length; t++) {
      _0x3aeca2(this.zombiePlayers[t], "#adff32", 0x1);
    }
  }
};
_0x31f41d.prototype.drawMap = function () {
  this.buildPieChart();
  if (!_0x50282a) {
    this.drawZombiePlayers();
  }
};
_0x31f41d.prototype.pieChartCanvas = null;
_0x31f41d.prototype.teamColors = {
  0x0: "white",
  0x1: "#B6CF40"
};
_0x31f41d.prototype.buildPieChart = function () {
  if (this.pieChartCanvas == null) {
    this.pieChartCanvas = document.createElement("canvas");
  }
  if (this.pieChartCanvas == null) {
    return;
  }
  var _0x5aa6e0 = this.pieChartCanvas.getContext("2d");
  var _0x20ea8f = {
    0x0: this.nonZombiePlayersCount,
    0x1: this.zombieCount
  };
  _0x3eca11 = _0x50282a ? 0x1 : 0x0;
  var _0x4b5bfe = new _0x2ed12b({
    "pad": 0x1e,
    "canvas": this.pieChartCanvas,
    "data": _0x20ea8f,
    "colors": this.teamColors
  });
  var _0x46f6fe = 0x37;
  _0x46f6fe = 210;
  this.pieChartCanvas.width = 210;
  this.pieChartCanvas.height = _0x46f6fe;
  _0x4b5bfe.draw();
  _0x5aa6e0.globalAlpha = 0.2;
  var _0x1e0f89 = 0x5;
  _0x5aa6e0.globalAlpha = 0.5;
  _0x5aa6e0.fillStyle = "white";
  _0x5aa6e0.font = "20px Arial";
  var _0x1e0f89 = 0xc8;
  str = curServer.name;
  _0x5aa6e0.fillText(str, this.pieChartCanvas.width / 0x2 - _0x5aa6e0.measureText(str).width / 0x2 - 0xf, _0x1e0f89);
};
_0x31f41d.prototype.endScreenDisplayed = false;
_0x31f41d.prototype.buildEndScreenHTML = function (_0x5ad25a) {
  if (this.endScreenDisplayed) {
    return;
  }
  this.endScreenDisplayed = true;
  var _0x162edf = '';
  _0x162edf += "<div class='msg'>YOU WERE #" + _0x5ad25a.rank + "</div>";
  _0x162edf += "<div class='row'>";
  _0x162edf += "<div class='label'>Killed by:</div>";
  _0x162edf += "<div class='value2'>" + _0x5ad25a.killedBy + "</div>";
  _0x162edf += "</div>";
  _0x162edf += "<div class='row'>";
  _0x162edf += "<div class='col1'>";
  _0x162edf += "<div class='label'>Time alive:</div>";
  _0x162edf += "<div class='value'>" + _0x4ec1fc(_0x5ad25a.timeAlive) + "</div>";
  _0x162edf += "</div>";
  _0x162edf += "<div class='col2'>";
  _0x162edf += "<div class='label'>Total kills:</div>";
  _0x162edf += "<div class='value'>" + _0x5ad25a.totalKills + "</div>";
  _0x162edf += "</div>";
  _0x162edf += "</div>";
  _0x162edf += "<div class='row'>";
  _0x162edf += "<div class='col1'>";
  _0x162edf += "<div class='label'>Top rank:</div>";
  _0x162edf += "<div class='value'>" + _0x5ad25a.topRank + "</div>";
  _0x162edf += "</div>";
  _0x162edf += "<div class='col2'>";
  _0x162edf += "<div class='label'>Max xp:</div>";
  _0x162edf += "<div class='value'>" + _0x40c2b6(_0x5ad25a.maxXP, 0x0) + "</div>";
  _0x162edf += "</div>";
  _0x162edf += "</div>";
  _0x162edf += "<div style='clear:both;'></div>";
  _0x162edf += "<div class='btnDiv'>";
  _0x162edf += "<button id='btnMopeOptions' class='btn'>      CONTINUE      </button>";
  _0x162edf += "</div>";
  _0x162edf += "<div style='clear:both;'></div>";
  var _0x37f60c = document.getElementById("endScreen");
  if (_0x37f60c) {
    _0x37f60c.innerHTML = _0x162edf;
    _0x37f60c.style.display = "block";
  }
  if (!_0x5f5cae || isGhost) {
    _0x5f1a0c(true);
  }
};
_0x31f41d.prototype.endScreenCanvas = null;
_0x31f41d.prototype.buildEndScreen = function (_0xad8402, _0x40f0d2) {
  if (this.endScreenCanvas == null) {
    this.endScreenCanvas = document.createElement("canvas");
  }
  if (this.endScreenCanvas == null) {
    return;
  }
  var _0x1060d5 = this.endScreenCanvas.getContext("2d");
  var _0x4707f1 = 0x37;
  _0x4707f1 = 250;
  this.endScreenCanvas.width = 430;
  this.endScreenCanvas.height = _0x4707f1;
  _0x1060d5.globalAlpha = 0.2;
  _0x1060d5.fillStyle = "#000000";
  _0x1060d5.fillRect(0x0, 0x0, this.endScreenCanvas.width, this.endScreenCanvas.height);
  _0x1060d5.fillStyle = "#000000";
  _0x1060d5.fillRect(0x5, 0x5, this.endScreenCanvas.width - 10, this.endScreenCanvas.height - 10);
  var _0x314eee = 0x5;
  _0x1060d5.globalAlpha = 0x1;
  _0x1060d5.fillStyle = "#FFFFFF";
  _0x1060d5.font = "30px Arial";
  _0x314eee += 0x37;
  var _0x1c6382 = "Final Stats";
  _0x1060d5.font = "30px Arial";
  _0x1060d5.fillText(_0x1c6382, this.endScreenCanvas.width / 0x2 - _0x1060d5.measureText(_0x1c6382).width / 0x2, _0x314eee);
  _0x1060d5.font = "20px Arial";
  _0x314eee += 0x2d;
  _0x1c6382 = "You were #" + _0x40f0d2.rank;
  _0x1060d5.fillText(_0x1c6382, this.endScreenCanvas.width / 0x2 - _0x1060d5.measureText(_0x1c6382).width / 0x2, _0x314eee);
  _0x314eee += 0x28;
  var _0x5129e9 = 20;
  _0x27ab59(_0x1060d5, "Killed by", _0x40f0d2.killedBy, _0x5129e9, _0x314eee);
  _0x314eee += 0x28;
  _0x27ab59(_0x1060d5, "Time Alive", _0x4ec1fc(_0x40f0d2.timeAlive), _0x5129e9, _0x314eee);
  _0x5129e9 += 0xd2;
  _0x27ab59(_0x1060d5, "Total Kills", _0x40f0d2.totalKills, _0x5129e9, _0x314eee);
  _0x314eee += 0x28;
  _0x5129e9 = 20;
  _0x27ab59(_0x1060d5, "Top rank", _0x40f0d2.topRank, _0x5129e9, _0x314eee);
  _0x5129e9 += 0xd2;
  _0x27ab59(_0x1060d5, "Max XP", _0x40c2b6(_0x40f0d2.maxXP, 0x0), _0x5129e9, _0x314eee);
  _0x314eee += 0x32;
};
var _0x525fa4 = function (_0x5cc234, _0x126789, _0x2ce5f9, _0x306432, _0x45cde5, _0x1183e3, _0x2d0111) {
  _0x5cc234.save();
  _0x5cc234.globalAlpha = _0x45cde5;
  _0x5cc234.fillStyle = _0x306432;
  _0x5cc234.rotate(_0x2ce5f9);
  _0x5cc234.save();
  _0x5cc234.strokeStyle = "white";
  _0x5cc234.beginPath();
  _0x5cc234.arc(0x0, 0x0, _0x126789, 0x0, Math.PI * 0.5, false);
  _0x5cc234.stroke();
  _0x5cc234.restore();
  _0x5cc234.save();
  _0x5cc234.beginPath();
  _0x5cc234.arc(0x0, 0x0, _0x126789, 0x0, Math.PI * 0.5, false);
  _0x5cc234.lineTo(0x0, _0x1183e3);
  _0x5cc234.lineTo(_0x2d0111, _0x1183e3);
  _0x5cc234.lineTo(_0x2d0111, 0x0);
  _0x5cc234.closePath();
  _0x5cc234.fill();
  _0x5cc234.restore();
  _0x5cc234.restore();
};
_0x31f41d.prototype.lastWastedPopupT = 0x0;
_0x31f41d.prototype.onPlayerWasted = function (_0x16fddd) {
  if ((_0x1f4c9e - this.lastWastedPopupT) / 0x3e8 > 0.7) {
    this.lastWastedPopupT = _0x1f4c9e;
    var _0x360b27 = new _0x17bc50(_0x16fddd + " wasted!", 0x28, "red", 0x5dc);
    this.wastedPopups.push(_0x360b27);
  }
};
_0x31f41d.prototype.screenTextEndT = 0x0;
_0x31f41d.prototype.screenTextMsg = '';
_0x31f41d.prototype.setMessage = function (_0x4f764c, _0x56cfcb) {
  this.screenTextMsg = _0x4f764c;
  if (_0x56cfcb == 0x0) {
    this.screenTextEndT = +new Date() + _0x56cfcb;
  } else {
    this.screenTextEndT = +new Date() + _0x56cfcb;
  }
};
_0x31f41d.prototype.screenMessage = function () {
  var _0xe7c29b = (this.screenTextEndT - _0x1f4c9e) / 0x3e8 / 0x1;
  _0xe7c29b = 0x0 > _0xe7c29b ? 0x0 : 0x1 < _0xe7c29b ? 0x1 : _0xe7c29b;
  if (_0xe7c29b > 0x0) {
    _0x3b8ba2.save();
    var _0x2ff6d3 = _0x485584 / 0x2;
    var _0x533766 = 0x3c * _0x301800;
    var _0x1b6f1a = (_0x485584 / 0x2 - 0x64) * _0x301800;
    _0x3b8ba2.globalAlpha = 0.35;
    _0x3b8ba2.fillStyle = "black";
    var _0x3344de = _0x2c7985 - _0x2c7985 * 0.2;
    _0x3b8ba2.fillRect(_0x2ff6d3 - _0x1b6f1a / 0x2, _0x3344de - _0x533766 / 0x2, _0x1b6f1a, _0x533766);
    _0x3b8ba2.globalAlpha = 0x1;
    _0x3b8ba2.globalAlpha = _0xe7c29b;
    _0x3b8ba2.globalAlpha = 0x1;
    _0x3b8ba2.fillStyle = "white";
    _0x3b8ba2.font = 0x28 * _0x301800 + "px Arial";
    _0x3b8ba2.lineWidth = 0x1;
    _0x3b8ba2.textAlign = "center";
    _0x3b8ba2.textBaseline = "middle";
    _0x3b8ba2.shadowOffsetX = 0x1;
    _0x3b8ba2.shadowOffsetY = 0x1;
    _0x3b8ba2.shadowColor = "black";
    _0x3b8ba2.fillText(this.screenTextMsg, _0x485584 / 0x2, _0x3344de);
    _0x3b8ba2.restore();
  }
};
var _0x3a8961 = new Array();
_0x31f41d.prototype.setStatusBarMessage = function (_0x2f9648, _0x442cca) {
  var _0x500d32 = _0x485584 / 0x2;
  var _0x3025a1 = _0x2c7985 - _0x2c7985 * 0.15;
  var _0x137a78 = _0x485584 / 0x2 - 0x64;
  var _0x3778eb = +new Date() + _0x442cca * 0x3e8;
  this.msg_statusbar = {
    "txt": _0x2f9648,
    "txt_size": 0x28,
    "txt_alpha": 0x1,
    "txt_color": "white",
    "x": _0x500d32,
    "y": _0x3025a1,
    "bg_w": _0x137a78,
    "bg_h": 0x3c,
    "bg_color": "black",
    "bg_alpha": 0.1,
    "dur": _0x3778eb
  };
};
_0x31f41d.prototype.msg_statusbar = null;
_0x31f41d.prototype.msg_playerCount = null;
_0x31f41d.prototype.setPlayerCountMsg = function () {
  var _0x59e05c = _0x485584 / 0x2;
  var _0x2df69b = 0x28;
  var _0x5226ba = '';
  if (this.playerCountMsg != "alive") {
    _0x2df69b = 0x46;
    _0x5226ba = this.playerCountMsg + "\n" + this.alivePlayers + " joined";
  } else {
    _0x5226ba = this.alivePlayers + " alive";
  }
  var _0x45515b = +new Date() + 60000;
  this.msg_playerCount = {
    "txt": _0x5226ba,
    "txt_size": 0x14,
    "txt_alpha": 0x1,
    "txt_color": "white",
    "x": _0x59e05c,
    "y": 0x1e,
    "bg_w": 0x64,
    "bg_h": _0x2df69b,
    "bg_color": "black",
    "bg_alpha": 0.1,
    "dur": _0x45515b
  };
};
_0x31f41d.prototype.gameMode_screenMsg = function () {
  if (this.msg_statusbar) {
    this.drawMessage(this.msg_statusbar);
    if (this.msg_statusbar.dur - _0x1f4c9e < 0x0) {
      this.msg_statusbar = null;
    }
  }
  if (this.msg_playerCount) {
    this.drawMessage(this.msg_playerCount);
  }
};
_0x31f41d.prototype.drawMessage = function (_0x19dd70) {
  if (_0x19dd70 && _0x19dd70.txt) {
    this.drawMessageBar(_0x19dd70.txt, _0x19dd70.txt_size, _0x19dd70.txt_alpha, _0x19dd70.txt_color, _0x19dd70.x, _0x19dd70.y, _0x19dd70.bg_w, _0x19dd70.bg_h, _0x19dd70.bg_color, _0x19dd70.bg_alpha, _0x19dd70.dur);
  }
};
_0x31f41d.prototype.drawMessageBar = function (_0x219b8d, _0x1c7855, _0x5dbe9c, _0x1f1bb0, _0xe08964, _0xc9e48d, _0x15f0ce, _0x597872, _0x12e0c2, _0x3282b8, _0x4d58d8) {
  {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = _0x3282b8;
    _0x3b8ba2.fillStyle = _0x12e0c2;
    _0x1c7855 = _0x1c7855 * _0x301800;
    _0x3b8ba2.font = _0x1c7855 + "px Arial";
    var _0x193441 = _0xc9e48d;
    var _0x1095ae = _0x219b8d.split("\n");
    var _0x3e75bd = _0x1c7855 * _0x1095ae.length * 1.5 * _0x301800;
    var _0x11b72e = 0x0;
    for (var _0x127675 = 0x0; _0x127675 < _0x1095ae.length; ++_0x127675) {
      _0x11b72e = Math.max(_0x11b72e, _0x3b8ba2.measureText(_0x1095ae[_0x127675]).width);
    }
    _0x11b72e = _0x11b72e * 1.5 * _0x301800;
    _0x3b8ba2.fillRect(_0xe08964 - _0x11b72e / 0x2, _0x193441 - _0x3e75bd / 0x2, _0x11b72e, _0x3e75bd);
    _0x3b8ba2.globalAlpha = _0x5dbe9c;
    _0x3b8ba2.fillStyle = _0x1f1bb0;
    _0x3b8ba2.lineWidth = 0x1;
    _0x3b8ba2.textAlign = "center";
    _0x3b8ba2.textBaseline = "middle";
    _0x3b8ba2.shadowOffsetX = 0x1;
    _0x3b8ba2.shadowOffsetY = 0x1;
    _0x3b8ba2.shadowColor = "black";
    if (_0x1095ae.length > 0x1) {
      _0x193441 -= 0xa * _0x301800;
    } else {
      _0x193441 += 0x5 * _0x301800;
    }
    for (var _0x127675 = 0x0; _0x127675 < _0x1095ae.length; _0x127675++) {
      _0x3b8ba2.fillText(_0x1095ae[_0x127675], _0xe08964, _0x193441);
      _0x193441 += _0x1c7855 * (_0x127675 + 0x1);
    }
    _0x3b8ba2.restore();
  }
};
function _0x31f41d(_0x3ee11c) {
  this.mode = 0x2;
  this.chatAllowed = true;
  this.createInterfaceButtons();
}
window.BattleRoyale = _0x31f41d;
var _0x2ed12b = function (_0x1dd29f) {
  this.options = _0x1dd29f;
  this.radius = _0x1dd29f.radius;
  this.pad = _0x1dd29f.pad;
  this.canvas = _0x1dd29f.canvas;
  this._ctx = this.canvas.getContext("2d");
  this.colors = _0x1dd29f.colors;
  this.radius = Math.min(this.canvas.width / 0x2, this.canvas.height / 0x2);
  this.draw = function () {
    var _0x4ec7f9 = 0x0;
    var _0x3289bf = 0x0;
    this._ctx.save();
    this._ctx.globalAlpha = 0.3;
    this.drawCircle(this.canvas.width / 0x2 - this.pad / 0x2, this.canvas.height / 0x2 - this.pad / 0x2, this.radius - this.pad, "white");
    this._ctx.restore();
    for (var _0x1488f1 in this.options.data) {
      var _0x4f9a26 = this.options.data[_0x1488f1];
      _0x4ec7f9 += _0x4f9a26;
    }
    var _0x19d1e2 = 0x0;
    for (_0x1488f1 in this.options.data) {
      this._ctx.save();
      this._ctx.lineWidth = 0x4;
      this._ctx.strokeStyle = "white";
      this._ctx.globalAlpha = 0.3;
      var _0x1d42ce = 0x0;
      if (_0x3eca11 == _0x1488f1) {
        this._ctx.globalAlpha = 0.6;
        _0x1d42ce = 0x8;
      }
      _0x4f9a26 = this.options.data[_0x1488f1];
      var _0x581bc2 = 0x2 * Math.PI * _0x4f9a26 / _0x4ec7f9;
      this.drawPieSlice(this.canvas.width / 0x2 - this.pad / 0x2, this.canvas.height / 0x2 - this.pad / 0x2, this.radius - this.pad, _0x19d1e2, _0x19d1e2 + _0x581bc2, this.colors[_0x1488f1], _0x1d42ce);
      this._ctx.restore();
      _0x19d1e2 += _0x581bc2;
      _0x3289bf++;
    }
  };
  this.drawPieSlice = function (_0x33dc8b, _0x3e3707, _0x39cc23, _0x1edcfe, _0x375260, _0x117fa7, _0x37c787) {
    this._ctx.fillStyle = _0x117fa7;
    this._ctx.beginPath();
    this._ctx.moveTo(_0x33dc8b, _0x3e3707);
    this._ctx.arc(_0x33dc8b, _0x3e3707, _0x39cc23 + _0x37c787, _0x1edcfe, _0x375260);
    this._ctx.closePath();
    this._ctx.fill();
    if (_0x37c787 > 0x0) {
      this._ctx.stroke();
    }
  };
  this.drawCircle = function (_0x2540da, _0x4851b9, _0xb42bda, _0xaee9f7) {
    this._ctx.fillStyle = _0xaee9f7;
    this._ctx.beginPath();
    this._ctx.moveTo(_0x2540da, _0x4851b9);
    this._ctx.arc(_0x2540da, _0x4851b9, _0xb42bda, 0x0, Math.PI * 0x2);
    this._ctx.closePath();
    this._ctx.fill();
  };
};
var _0x53abbc = _0x59651b;
_0xf572d3.prototype = Object.create(_0x53abbc.prototype);
_0xf572d3.prototype.constructor = _0xf572d3;
_0xf572d3.superClass = _0x53abbc;
_0xf572d3.prototype.safeArea = null;
_0xf572d3.prototype.teamColors = {
  0x0: "#cccccc",
  0x1: "#ffff00",
  0x2: "#01effc",
  0x3: "#bb00ff"
};
function _0xf572d3() {
  this.mode = 0x3;
  this.createInterfaceButtons();
}
_0xf572d3.prototype.wastedPopups = [];
_0xf572d3.prototype.playerDisplayNum = 0x0;
_0xf572d3.prototype.eventText = null;
_0xf572d3.prototype.setServerPlayerCount = function () {
  switch (this.playerDisplayNum) {
    case 0x1:
    case 0x2:
      _0x3540bd.setText("On Server: " + _0x5aae58.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " playing " + nPlayersUnique + " unqiue");
      this.playerDisplayNum++;
      break;
    case 0x3:
    case 0x4:
      _0x3540bd.setText("Modes Total: " + gamemodes_alive + " playing, " + gamemodes_unique + " unique");
      this.playerDisplayNum++;
      break;
    case 0x5:
      var _0x2ae7f9 = gamemodes_unique / _0x2f24c4 * 0x64;
      _0x3540bd.setText("Milestone 2: " + _0x2ae7f9.toFixed(0x2).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + "% (" + gamemodes_unique + " of " + _0x2f24c4 + ")");
      this.playerDisplayNum++;
      break;
    case 0x6:
      this.playerDisplayNum = 0x0;
      break;
    default:
      _0x3540bd.setText(_0x2f24c4.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " across Mope!");
      this.playerDisplayNum++;
      break;
  }
  if (_0x18c03a) {
    _0x18c03a.setPlayersCount(_0x2f24c4);
  }
};
_0xf572d3.prototype.socketMessages = function (_0x23365e) {
  var _0x4ed1f3 = _0x23365e.readUInt8();
  switch (_0x4ed1f3) {
    case 0x1:
      {
        let _0x3f7c8a = _0x23365e.readUInt8();
        let _0x5efe2c = _0x23365e.readString();
        _0x5efe2c = "Nice, your team has unlocked '" + _0x5efe2c + "' buff.";
        this.showBuffMessage("success", _0x5efe2c, _0x3f7c8a, 0x6);
        break;
      }
    case 0x2:
      {
        let _0x1945a9 = _0x23365e.readUInt8();
        let _0x1c9779 = _0x23365e.readString();
        _0x1c9779 = "Oh no, '" + _0x1c9779 + "' buff has been compromised!";
        this.showBuffMessage("error", _0x1c9779, _0x1945a9, 0x6);
        if (this.isApocalypseInprogress) {}
        break;
      }
    case 0x3:
      {
        console.log("APOCALYPSE_STARTED");
        this.apocalypseType = _0x23365e.readString();
        this.triggeredByTeamID = _0x23365e.readUInt8();
        this.apocalypseStatus = _0x23365e.readString();
        this.timeLeft = _0x23365e.readUInt16() / 0x64;
        break;
      }
    case 0x4:
      {
        console.log("APOCALYPSE_ENDED");
        this.apocalypseType = null;
        this.triggeredByTeamID = 0x0;
        this.apocalypseStatus = null;
        this.timeLeft = 0x0;
        _0x54e075("Apocalypse is over. Now, you can go anywhere freely!", "success", 0x6);
        $bus.emit($bus.EVENTS.SET_APOCALYPSE_ONGOING, {
          "isOngoing": false,
          "timeLeft": 0x0
        });
        break;
      }
    case 0x5:
      {
        this.isApocalypseInprogress = _0x23365e.readUInt8() == 0x1;
        if (this.isApocalypseInprogress) {
          this.apocalypseType = _0x23365e.readString();
          this.triggeredByTeamID = _0x23365e.readUInt8();
          this.apocalypseStatus = _0x23365e.readString();
          this.timeLeft = _0x23365e.readUInt16() / 0x64;
          $bus.emit($bus.EVENTS.SET_APOCALYPSE_ONGOING, {
            "isOngoing": this.isApocalypseInprogress,
            "timeLeft": this.timeLeft
          });
        }
        break;
      }
    case 0x6:
      {
        this.team1 = _0x23365e.readUInt16();
        this.team2 = _0x23365e.readUInt16();
        this.team3 = _0x23365e.readUInt16();
        this.updatePieChart({
          0x1: this.team1,
          0x2: this.team2,
          0x3: this.team3
        });
        this.drawPieLeaderboard();
        break;
      }
    case 0x7:
      {
        let _0x1468ac = _0x23365e.readUInt8();
        this.capturedStones = [];
        for (var _0x49f974 = 0x0; _0x49f974 < _0x1468ac; _0x49f974++) {
          this.capturedStones.push({
            "stoneBuffID": _0x23365e.readUInt8(),
            "hp": _0x23365e.readUInt8() / 0x64
          });
        }
        $bus.emit($bus.EVENTS.SET_STONE_BUFFS, this.capturedStones);
        break;
      }
  }
};
_0xf572d3.prototype.getStoneBuffIcon = function (_0xb20a27) {
  switch (_0xb20a27) {
    case 0x1:
      return "/assets/s/2/gameobj/78/incentive/1.png";
    case 0x2:
      return "/assets/s/2/gameobj/78/incentive/2.png";
    case 0x3:
      return "/assets/s/2/gameobj/78/incentive/3.png";
    case 0x4:
      return "/assets/s/2/gameobj/78/incentive/4.png";
    case 0x5:
      return "/assets/s/2/gameobj/78/incentive/5.png";
    case 0x6:
      return "/assets/s/2/gameobj/78/incentive/6.png";
    case 0x7:
      return "/assets/s/2/gameobj/78/incentive/7.png";
    case 0x8:
      return "/assets/s/2/gameobj/78/incentive/8.png";
    case 0x9:
      return "/assets/s/2/gameobj/78/incentive/9.png";
    case 0xa:
      return "/assets/s/2/gameobj/78/incentive/10.png";
    case 0xb:
      return "/assets/s/2/gameobj/78/incentive/11.png";
    case 0xc:
      return "/assets/s/2/gameobj/78/incentive/12.png";
    case 0xd:
      return "/assets/s/2/gameobj/78/incentive/13.png";
  }
};
_0xf572d3.prototype.showBuffMessage = function (_0x3aa8ad, _0x1f03d2, _0xbe9032, _0x126efe) {
  _0x4218b7();
  var _0x50c084 = document.getElementsByTagName("body")[0x0];
  if (_0x50c084) {
    let _0x4dceb7 = document.getElementById("gameAreaWrapper");
    let _0x3a4660 = _0x234c5f("mopeshop-popup");
    let _0xc55cb2 = this.getStoneBuffIcon(_0xbe9032);
    let _0x138e08 = _0x234c5f("mopeshop-popup-icon", '');
    _0x138e08.innerHTML = "<img src='" + _0xc55cb2 + "'/>";
    let _0x4b189a = _0x234c5f("msg", _0x3aa8ad);
    let _0x18d960 = _0x234c5f("text");
    _0x18d960.innerHTML = _0x1f03d2;
    let _0x593a42 = _0x234c5f("closeMsg", '');
    _0x593a42.onclick = function () {
      _0x4218b7();
    };
    _0x4b189a.appendChild(_0x138e08);
    _0x4b189a.appendChild(_0x593a42);
    _0x4b189a.appendChild(_0x18d960);
    _0x3a4660.appendChild(_0x4b189a);
    _0x50c084.insertBefore(_0x3a4660, _0x4dceb7);
    if (_0x126efe !== undefined && _0x126efe > 0x0) {
      setTimeout(_0x4218b7, _0x126efe * 0x3e8);
    }
  }
};
_0xf572d3.prototype["interface"] = function () {
  if (this.state == -0x1 || this.mode != _0x16c921) {
    return;
  }
  if (_0x5f5cae) {
    if (this.pieChartCanvas != null) {
      if (this.pieChartCanvas.width) {
        _0x3b8ba2.drawImage(this.pieChartCanvas, 0x0, 0x0, this.pieChartCanvas.width, this.pieChartCanvas.height);
      }
    }
  }
  this.drawInterfaceButtons();
};
_0xf572d3.prototype.drawMap = function () {
  if (_0x5f5cae) {
    if (_0x11da90) {
      return;
    }
    this.drawPieLeaderboard();
    this.drawTeamPlayers();
    if (_0x18c03a) {
      _0x18c03a.drawMap();
    }
    this.onApocalypseUpdated();
  }
};
_0xf572d3.prototype.interfaceReset = function () {
  this.endScreenCanvas = null;
  this.dangerCircleMiniMapCanvas = null;
  this.wastedPopups = [];
  this.lastWastedPopupT = 0x0;
  this.playercount = 0x0;
  this.safeArea = null;
  if (this.interfaceButtons) {
    for (var _0x3d5908 = 0x0; _0x3d5908 < this.interfaceButtons.length; _0x3d5908++) {
      var _0x311fb9 = this.interfaceButtons[_0x3d5908];
      _0x311fb9.onInterfaceReset();
    }
  }
  this.interfaceButtons = [];
};
_0xf572d3.prototype.onInit = function () {};
_0xf572d3.prototype.playercount = 0x0;
_0xf572d3.prototype.setPlayerCount = function (_0x57b1d7) {
  this.playercount = _0x57b1d7;
};
_0xf572d3.prototype.showPlayerCount = function () {
  _0x3b8ba2.save();
  var _0x41b940 = _0x485584 / 0x2;
  var _0x4d46b7 = 0x32 * _0x301800;
  var _0x378842 = 0x12c * _0x301800;
  _0x3b8ba2.globalAlpha = 0.35;
  _0x3b8ba2.fillStyle = "black";
  var _0x50b35a = 0x1e * _0x301800;
  _0x3b8ba2.fillRect(_0x41b940 - _0x378842 / 0x2, _0x50b35a, _0x378842, _0x4d46b7);
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.fillStyle = "white";
  _0x3b8ba2.font = 0x1e * _0x301800 + "px Arial";
  _0x3b8ba2.lineWidth = 0x1;
  _0x3b8ba2.textAlign = "center";
  _0x3b8ba2.textBaseline = "middle";
  _0x3b8ba2.shadowOffsetX = 0x1;
  _0x3b8ba2.shadowOffsetY = 0x1;
  _0x3b8ba2.shadowColor = "black";
  _0x50b35a += 0x19 * _0x301800;
  var _0x54cdf0 = " player";
  if (this.playercount > 0x1) {
    _0x54cdf0 += "s";
  }
  if (this.state == battleRoyal_inProgress) {
    _0x54cdf0 += " alive!";
  } else {
    if (this.state == 0x0 || this.state == battleRoyal_ready) {
      _0x54cdf0 += " joined";
    }
  }
  _0x3b8ba2.fillText(this.playercount + _0x54cdf0, _0x41b940, _0x50b35a);
  _0x3b8ba2.restore();
};
_0xf572d3.prototype.lbCanvas = null;
_0xf572d3.prototype.leaderboard = function (_0x5aa00c) {};
_0xf572d3.prototype.btnPlayAgain = null;
_0xf572d3.prototype.showStats = true;
_0xf572d3.prototype.interfaceButtons = [];
_0xf572d3.prototype.createInterfaceButtons = function () {
  this.interfaceButtons = [];
};
_0xf572d3.prototype.drawInterfaceButtons = function () {
  if (this.interfaceButtons) {
    for (var _0x105aae = 0x0; _0x105aae < this.interfaceButtons.length; _0x105aae++) {
      var _0x357749 = this.interfaceButtons[_0x105aae];
      if (_0x357749.isVisible) {
        _0x357749.draw();
      }
    }
  }
};
_0xf572d3.prototype.onResize = function () {
  this.drawInterfaceButtons();
};
_0xf572d3.prototype.playerInfo = function (_0x4bbcf4) {};
_0xf572d3.prototype.playerWorldUpdate = function (_0x359e67) {
  return;
  this.team1 = _0x359e67.readUInt16();
  this.team2 = _0x359e67.readUInt16();
  this.team3 = _0x359e67.readUInt16();
  this.isApocalypseInprogress = _0x359e67.readUInt8() == 0x1;
  if (this.isApocalypseInprogress) {
    this.apocalypseType = _0x359e67.readString();
    this.triggeredByTeamID = _0x359e67.readUInt8();
    this.apocalypseStatus = _0x359e67.readString();
    this.timeLeft = _0x359e67.readUInt16() / 0x64;
    $bus.emit($bus.EVENTS.SET_APOCALYPSE_ONGOING, {
      "isOngoing": this.isApocalypseInprogress,
      "timeLeft": this.timeLeft
    });
  } else {
    $bus.emit($bus.EVENTS.SET_APOCALYPSE_ONGOING, {
      "isOngoing": false,
      "timeLeft": 0x0
    });
  }
  let _0x34d6ac = _0x359e67.readUInt8();
  this.capturedStones = [];
  for (var _0x36fc61 = 0x0; _0x36fc61 < _0x34d6ac; _0x36fc61++) {
    this.capturedStones.push({
      "stoneBuffID": _0x359e67.readUInt8(),
      "hp": _0x359e67.readUInt8() / 0x64
    });
  }
  $bus.emit($bus.EVENTS.SET_STONE_BUFFS, this.capturedStones);
};
_0xf572d3.prototype.onApocalypseUpdated = function () {
  if (this.isApocalypseInprogress) {
    if (this.eventText == null) {
      this.eventText = new _0x4e6b66(0x14, "white");
      this.eventText.setFontSize(0x1c * _0x301800);
    }
    if (this.eventText) {
      this.eventText.x = _0x485584 / 0x2;
      this.eventText.y = _0x2c7985 * 0.2;
      this.eventText.draw();
    }
  }
};
_0xf572d3.prototype.bonusRoundTimer = null;
_0xf572d3.prototype.pieChartCanvas = null;
_0xf572d3.prototype.setBonusRoundTimer = function (_0x37af7d) {
  var _0xda8c80 = '' + _0x37af7d;
  if (null == this.bonusRoundTimer) {
    this.bonusRoundTimer = new _0x4e6b66(0x28, "#FFFFFF");
    this.bonusRoundTimer.strokeW = 0x2;
    this.bonusRoundTimer.multiLine = true;
    this.bonusRoundTimer.renderScale = 0x5;
    this.bonusRoundTimer.setText(_0xda8c80);
  } else {
    this.bonusRoundTimer.setFontSize(0x28);
    this.bonusRoundTimer.setText(_0xda8c80);
  }
};
_0xf572d3.prototype.drawMiniMapObjects = function (_0x5673ed) {
  if (this.teamStones) {
    for (let _0x3f1e3c = 0x0; _0x3f1e3c < this.teamStones.length; _0x3f1e3c++) {
      let _0x410bba = this.teamStones[_0x3f1e3c];
      if (_0x410bba) {
        _0x410bba.c = "black";
        _0x5673ed.drawCircle(_0x410bba);
      }
    }
    _0x5673ed.updateMapData();
  }
};
_0xf572d3.prototype.teamStones = [];
_0xf572d3.prototype.teamModePieChart = null;
_0xf572d3.prototype.updatePieChart = function (_0x3adbad) {
  if (this.pieChartCanvas == null) {
    this.pieChartCanvas = document.createElement("canvas");
    this.teamModePieChart = new _0x2ed12b({
      "pad": 0x1e,
      "canvas": this.pieChartCanvas,
      "colors": this.teamColors
    });
  }
  if (this.teamModePieChart) {
    this.teamModePieChart.setData(_0x3adbad);
  }
};
_0xf572d3.prototype.drawPieLeaderboard = function () {
  if (this.pieChartCanvas == null) {
    return;
  }
  var _0x339aee = this.pieChartCanvas.getContext("2d");
  this.pieChartCanvas.width = 0xc8;
  this.pieChartCanvas.height = 220;
  this.teamModePieChart.draw();
  _0x339aee.globalAlpha = 0.2;
  var _0x5dd5e1 = 0x5;
  _0x339aee.globalAlpha = 0.5;
  _0x339aee.fillStyle = "white";
  _0x339aee.font = "20px Arial";
  var _0x5dd5e1 = 0xd2;
  str = curServer.name;
  _0x339aee.fillText(str, this.pieChartCanvas.width / 0x2 - _0x339aee.measureText(str).width / 0x2, _0x5dd5e1);
};
_0xf572d3.prototype.inviteScreenCanvas = null;
_0xf572d3.prototype.endScreenCanvas = null;
_0xf572d3.prototype.endScreenDisplayed = false;
var _0x2ed12b = function (_0x4d572e) {
  this.options = _0x4d572e;
  this.radius = _0x4d572e.radius;
  this.pad = _0x4d572e.pad;
  this.canvas = _0x4d572e.canvas;
  this._ctx = this.canvas.getContext("2d");
  this.colors = _0x4d572e.colors;
  this.radius = Math.min(this.canvas.width / 0x2, this.canvas.height / 0x2);
  this.showBg = false;
  this.setData = function (_0x28a9dc) {
    this.options.data = _0x28a9dc;
  };
  this.draw = function () {
    var _0x1cd6bd = 0x0;
    var _0x51a82c = 0x0;
    if (this.showBg) {
      this._ctx.save();
      this._ctx.beginPath();
      this._ctx.globalAlpha = 0.1;
      this._ctx.fillStyle = "black";
      this._ctx.rect(0x0, 0x0, this.canvas.width, this.canvas.height);
      this._ctx.fill();
      this._ctx.restore();
    }
    var _0x410083 = this.canvas.width / 0x2;
    var _0x5ca3fe = this.canvas.height / 0x2;
    this._ctx.save();
    this._ctx.globalAlpha = 0.3;
    this.drawCircle(_0x410083, _0x5ca3fe, this.radius, "white");
    this._ctx.restore();
    for (var _0x2bbfdd in this.options.data) {
      var _0x242b1a = this.options.data[_0x2bbfdd];
      _0x1cd6bd += _0x242b1a;
    }
    var _0x34e744 = 0x0;
    for (_0x2bbfdd in this.options.data) {
      this._ctx.save();
      this._ctx.lineWidth = 0x4;
      this._ctx.strokeStyle = "white";
      this._ctx.globalAlpha = 0.3;
      var _0x16ff94 = 0x0;
      if (_0x3eca11 == _0x2bbfdd) {
        this._ctx.globalAlpha = 0.6;
        _0x16ff94 = 0x8;
      }
      _0x242b1a = this.options.data[_0x2bbfdd];
      var _0x3c3117 = 0x2 * Math.PI * _0x242b1a / _0x1cd6bd;
      this.drawPieSlice(_0x410083, _0x5ca3fe, this.radius, _0x34e744, _0x34e744 + _0x3c3117, this.colors[_0x2bbfdd], _0x16ff94);
      this._ctx.restore();
      _0x34e744 += _0x3c3117;
      _0x51a82c++;
    }
  };
  this.drawPieSlice = function (_0x5a39da, _0x4eeb49, _0x26481d, _0x3e47bf, _0x221455, _0x4d9a97, _0x19c7cf) {
    this._ctx.fillStyle = _0x4d9a97;
    this._ctx.beginPath();
    this._ctx.moveTo(_0x5a39da, _0x4eeb49);
    this._ctx.arc(_0x5a39da, _0x4eeb49, _0x26481d + _0x19c7cf, _0x3e47bf, _0x221455);
    this._ctx.closePath();
    this._ctx.fill();
    if (_0x19c7cf > 0x0) {
      this._ctx.stroke();
    }
  };
  this.drawCircle = function (_0x21953d, _0x4fc3e4, _0xee78ec, _0x3f0dba) {
    this._ctx.fillStyle = _0x3f0dba;
    this._ctx.beginPath();
    this._ctx.moveTo(_0x21953d, _0x4fc3e4);
    this._ctx.arc(_0x21953d, _0x4fc3e4, _0xee78ec, 0x0, Math.PI * 0x2);
    this._ctx.closePath();
    this._ctx.fill();
  };
};
_0xf572d3.prototype.stonesCanvas = null;
_0xf572d3.prototype.getSkinImageObj = function (_0x79c951) {
  var _0x4bba95 = "./assets/s/2/" + _0x79c951;
  return _0x3df4ce(_0x4bba95, function (_0x5b088f) {});
};
_0xf572d3.prototype.playerUI = [];
_0xf572d3.prototype.drawPlayerUI = function (_0x15e16b) {};
_0xf572d3.prototype.drawStoneCount = function (_0x3f1194, _0x3a2450, _0x5840ab, _0xd6a485) {
  _0x3f1194.save();
  _0x3f1194.globalAlpha = 0.5;
  let _0x1d79e8 = "./assets/s/2/gameobj/78/stone" + _0x3a2450 + ".png";
  let _0x421a95 = _0x3df4ce(_0x1d79e8);
  if (_0x421a95) {
    _0x3f1194.drawImage(_0x421a95, 0xa, _0xd6a485, 0x28, 0x28);
    _0xd6a485 += 0x32;
    _0x3f1194.fillStyle = "black";
    _0x3f1194.fillText(_0x5840ab + '', 0x3c, _0xd6a485 - 0x12);
  }
  _0x3f1194.restore();
};
_0xf572d3.prototype.drawTeamPlayers = function () {
  if (this.teamPlayers) {
    var _0x2502c5 = this.teamColors[_0x3eca11];
    for (t = 0x0; t < this.teamPlayers.length; t++) {
      _0x3aeca2(this.teamPlayers[t], _0x2502c5, 0x1);
    }
  }
};
_0xf572d3.prototype.getTeamColor = function (_0x54e089) {
  switch (_0x54e089) {
    case 0x1:
      return "yellow";
    case 0x2:
      return "cyan";
    case 0x3:
      return "purple";
  }
  return "gray";
};
_0xf572d3.prototype.msgDisplayPlayersOnMiniMap = function (_0x4786eb) {
  _0x219364 = [];
  var _0x31aefd = _0x4786eb.readUInt16();
  for (var _0x4a09d9 = 0x0; _0x4a09d9 < _0x31aefd; _0x4a09d9++) {
    _0x219364.push({
      "teamID": _0x4786eb.readUInt16(),
      "x": _0x4786eb.readUInt32() / 0x64,
      "y": _0x4786eb.readUInt32() / 0x64,
      "rad": 0x3
    });
  }
};
_0xf572d3.prototype.readGameRoomPropertyUpdate = function (_0x5e32db) {
  var _0x535103 = _0x5e32db.readUInt8();
  for (var _0x3f73fa = 0x0; _0x3f73fa < _0x535103; _0x3f73fa++) {
    var _0x22c106 = _0x5e32db.readUInt8();
    this.readUpdatedPropertyItem(_0x22c106, _0x5e32db);
  }
};
_0xf572d3.prototype.readUpdatedPropertyItem = function (_0x31dc9f, _0x34a569) {
  if (_0x31dc9f == 0x1) {
    console.log("TEAMMODE_APOCALYPSE_STARTED");
    this.isApocalypseInprogress = _0x34a569.readUInt8() == 0x1;
  } else {
    if (_0x31dc9f == 0x2) {
      console.log("TEAMMODE_APOCALYPSE_ENDED");
      this.isApocalypseInprogress = _0x34a569.readUInt8() == 0x1;
      $bus.emit($bus.EVENTS.SET_APOCALYPSE_ONGOING, {
        "isOngoing": false,
        "timeLeft": 0x0
      });
    } else {
      if (_0x31dc9f == 0x3) {
        console.log("TEAMMODE_APOCALYPSE_TIME_LEFT");
        let _0x2294e5 = _0x34a569.readUInt16();
        $bus.emit($bus.EVENTS.SET_APOCALYPSE_ONGOING, {
          "isOngoing": this.isApocalypseInprogress,
          "timeLeft": _0x2294e5
        });
      }
    }
  }
};
window.TeamMode = _0xf572d3;
var _0x53abbc = _0x59651b;
_0x46bdd9.prototype = Object.create(_0x53abbc.prototype);
_0x46bdd9.prototype.constructor = _0x46bdd9;
_0x46bdd9.superClass = _0x53abbc;
_0x46bdd9.prototype.safeArea = null;
function _0x46bdd9(_0xbeaf3f) {
  this.mode = _0xbeaf3f;
  this.stamp = +new Date();
  this.chatAllowed = true;
  this.createInterfaceButtons();
}
_0x46bdd9.prototype.wastedPopups = [];
_0x46bdd9.prototype.playerDisplayNum = 0x0;
_0x46bdd9.prototype.setServerPlayerCount = function () {
  _0x3540bd.setText(_0x2f24c4.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") + " online");
  if (_0x18c03a) {
    _0x18c03a.setPlayersCount(_0x2f24c4);
  }
  this.playerDisplayNum = this.playerDisplayNum == 0x0 ? 0x1 : 0x0;
};
_0x46bdd9.prototype["interface"] = function () {
  if (this.state == -0x1 || this.mode != _0x16c921) {
    return;
  }
  if (_0x5f5cae) {
    for (var _0x2eb2e5 = this.wastedPopups.length - 0x1; _0x2eb2e5 >= 0x0; _0x2eb2e5--) {
      var _0x564eb3 = this.wastedPopups[_0x2eb2e5];
      _0x564eb3.draw();
      if (_0x564eb3.timedOut) {
        this.wastedPopups.splice(_0x2eb2e5, 0x1);
      }
    }
  }
  if (this.endScreenCanvas != null) {
    if (this.endScreenCanvas.width) {
      _0x3b8ba2.drawImage(this.endScreenCanvas, _0x485584 / 0x2 - this.endScreenCanvas.width / 0x2, 0xf * _0x43e85b, this.endScreenCanvas.width, this.endScreenCanvas.height);
    }
    if (!_0x5f5cae || isGhost) {
      _0x5f1a0c(true);
    }
  }
  this.drawInterfaceButtons();
};
_0x46bdd9.prototype.interfaceReset = function () {
  this.endScreenCanvas = null;
  this.dangerCircleMiniMapCanvas = null;
  this.wastedPopups = [];
  this.lastWastedPopupT = 0x0;
  this.playercount = 0x0;
  this.safeArea = null;
  if (this.interfaceButtons) {
    for (var _0x52caa6 = 0x0; _0x52caa6 < this.interfaceButtons.length; _0x52caa6++) {
      var _0x110599 = this.interfaceButtons[_0x52caa6];
      _0x110599.onInterfaceReset();
    }
  }
  this.interfaceButtons = [];
};
_0x46bdd9.prototype.onInit = function () {};
_0x46bdd9.prototype.playercount = 0x0;
_0x46bdd9.prototype.setPlayerCount = function (_0x5c14f3) {
  this.playercount = _0x5c14f3;
};
_0x46bdd9.prototype.showPlayerCount = function () {
  _0x3b8ba2.save();
  var _0x1ea255 = _0x485584 / 0x2;
  var _0x4d331d = 0x32 * _0x301800;
  var _0x38fe37 = 0x12c * _0x301800;
  _0x3b8ba2.globalAlpha = 0.35;
  _0x3b8ba2.fillStyle = "black";
  var _0x172d9f = 0x1e * _0x301800;
  _0x3b8ba2.fillRect(_0x1ea255 - _0x38fe37 / 0x2, _0x172d9f, _0x38fe37, _0x4d331d);
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.fillStyle = "white";
  _0x3b8ba2.font = 0x1e * _0x301800 + "px Arial";
  _0x3b8ba2.lineWidth = 0x1;
  _0x3b8ba2.textAlign = "center";
  _0x3b8ba2.textBaseline = "middle";
  _0x3b8ba2.shadowOffsetX = 0x1;
  _0x3b8ba2.shadowOffsetY = 0x1;
  _0x3b8ba2.shadowColor = "black";
  _0x172d9f += 0x19 * _0x301800;
  var _0x2712f9 = " player";
  if (this.playercount > 0x1) {
    _0x2712f9 += "s";
  }
  if (this.state == battleRoyal_inProgress) {
    _0x2712f9 += " alive!";
  } else {
    if (this.state == 0x0 || this.state == battleRoyal_ready) {
      _0x2712f9 += " joined";
    }
  }
  _0x3b8ba2.fillText(this.playercount + _0x2712f9, _0x1ea255, _0x172d9f);
  _0x3b8ba2.restore();
};
_0x46bdd9.prototype.lbCanvas = null;
_0x46bdd9.prototype.leaderboard = function (_0x2a8df1) {
  if (this.lbCanvas == null) {
    this.lbCanvas = document.createElement("canvas");
  }
  if (_0x2a8df1) {
    var _0x43bd8f = this.lbCanvas.getContext("2d");
    var _0x2dddc5 = 0x37;
    _0x2dddc5 = _0x2dddc5 + 0x16 * _0x2a8df1.length;
    this.lbCanvas.width = 0x10e;
    this.lbCanvas.height = _0x2dddc5;
    _0x43bd8f.globalAlpha = 0.2;
    _0x43bd8f.fillStyle = "#000000";
    _0x43bd8f.fillRect(0x0, 0x0, this.lbCanvas.width, this.lbCanvas.height);
    _0x43bd8f.globalAlpha = 0x1;
    _0x43bd8f.fillStyle = "#FFFFFF";
    var _0x9cdea5 = curServer.name;
    _0x43bd8f.font = "24px Arial";
    if (!(_0x4bda0b == 0x2)) {
      _0x43bd8f.shadowOffsetX = 0x1;
      _0x43bd8f.shadowOffsetY = 0x1;
    }
    _0x43bd8f.shadowColor = "black";
    _0x43bd8f.fillText(_0x9cdea5, this.lbCanvas.width / 0x2 - _0x43bd8f.measureText(_0x9cdea5).width / 0x2, 0x28);
    var _0xe8a223;
    _0x43bd8f.textAlign = "left";
    _0x43bd8f.font = "17px Arial";
    for (_0xe8a223 = 0x0; _0xe8a223 < _0x2a8df1.length; ++_0xe8a223) {
      _0x9cdea5 = _0xce1d60 ? '' : _0x2a8df1[_0xe8a223].name || "mope.io";
      _0x9cdea5 += " (" + _0x40c2b6(_0x2a8df1[_0xe8a223].xp, 0x0) + ")";
      _0x43bd8f.fillStyle = "#FFFFFF";
      _0x43bd8f.fillText(_0x9cdea5, 0xf, 0x41 + 0x16 * _0xe8a223);
    }
  }
};
_0x46bdd9.prototype.drawLeaderboard = function () {
  if (_0x5f5cae) {
    if (!_0x1d6ac7) {
      if (_0x47971a) {
        if (_0x47971a.width) {
          _0x3b8ba2.drawImage(_0x47971a, 0xa * _0x43e85b, 0xa * _0x43e85b, _0x47971a.width * _0x301800, _0x47971a.height * _0x301800);
        }
      }
    }
  }
};
_0x46bdd9.prototype.btnPlayAgain = null;
_0x46bdd9.prototype.showStats = true;
_0x46bdd9.prototype.interfaceButtons = [];
_0x46bdd9.prototype.createInterfaceButtons = function () {
  this.interfaceButtons = [];
};
_0x46bdd9.prototype.drawInterfaceButtons = function () {
  if (this.interfaceButtons) {
    for (var _0x38ae08 = 0x0; _0x38ae08 < this.interfaceButtons.length; _0x38ae08++) {
      var _0x477358 = this.interfaceButtons[_0x38ae08];
      if (_0x477358.isVisible) {
        _0x477358.draw();
      }
    }
  }
};
_0x46bdd9.prototype.onResize = function () {
  this.drawInterfaceButtons();
};
_0x46bdd9.prototype.readPlayerStats = function (_0x2f4337) {
  var _0x5392b8 = [];
  _0x5392b8.rank = _0x2f4337.readUInt16();
  _0x5392b8.timeAlive = _0x2f4337.readUInt16();
  _0x5392b8.totalKills = _0x2f4337.readUInt16();
  _0x5392b8.topRank = _0x2f4337.readUInt16();
  _0x5392b8.maxXP = _0x2f4337.readUInt32();
  _0x5392b8.killedBy = _0x2f4337.readString();
  return _0x5392b8;
};
_0x46bdd9.prototype.playerInfo = function (_0x2a90b1) {
  if (isGhost && !_0x46771c) {
    var _0xfdea33 = this.readPlayerStats(_0x2a90b1);
    this.buildEndScreenHTML(_0xfdea33);
  } else if (!isGhost) {
    this.endScreenCanvas = null;
  }
};
_0x46bdd9.prototype.playerWorldUpdate = function (_0x439f34) {};
_0x46bdd9.prototype.worldUpdate = function (_0x28fba1) {};
_0x46bdd9.prototype.drawMap = function () {
  if (_0x5f5cae) {
    if (_0x11da90) {
      return;
    }
    if (_0x18c03a) {
      _0x18c03a.drawMap();
    }
    this.drawLeaderboard();
  }
};
_0x46bdd9.prototype.pieChartCanvas = null;
_0x46bdd9.prototype.teamColors = {
  0x0: "white",
  0x1: "#B6CF40"
};
_0x46bdd9.prototype.endScreenDisplayed = false;
_0x46bdd9.prototype.buildEndScreenHTML = function (_0x3f380f) {
  if (this.endScreenDisplayed) {
    return;
  }
  this.endScreenDisplayed = true;
  var _0xe03734 = '';
  _0xe03734 += "<div class='msg'>YOU WERE #" + _0x3f380f.rank + "</div>";
  _0xe03734 += "<div class='row'>";
  _0xe03734 += "<div class='label'>Killed by:</div>";
  _0xe03734 += "<div class='value2'>" + _0x3f380f.killedBy + "</div>";
  _0xe03734 += "</div>";
  _0xe03734 += "<div class='row'>";
  _0xe03734 += "<div class='col1'>";
  _0xe03734 += "<div class='label'>Time alive:</div>";
  _0xe03734 += "<div class='value'>" + _0x4ec1fc(_0x3f380f.timeAlive) + "</div>";
  _0xe03734 += "</div>";
  _0xe03734 += "<div class='col2'>";
  _0xe03734 += "<div class='label'>Total kills:</div>";
  _0xe03734 += "<div class='value'>" + _0x3f380f.totalKills + "</div>";
  _0xe03734 += "</div>";
  _0xe03734 += "</div>";
  _0xe03734 += "<div class='row'>";
  _0xe03734 += "<div class='col1'>";
  _0xe03734 += "<div class='label'>Top rank:</div>";
  _0xe03734 += "<div class='value'>" + _0x3f380f.topRank + "</div>";
  _0xe03734 += "</div>";
  _0xe03734 += "<div class='col2'>";
  _0xe03734 += "<div class='label'>Max xp:</div>";
  _0xe03734 += "<div class='value'>" + _0x40c2b6(_0x3f380f.maxXP, 0x0) + "</div>";
  _0xe03734 += "</div>";
  _0xe03734 += "</div>";
  _0xe03734 += "<div style='clear:both;'></div>";
  _0xe03734 += "<div class='btnDiv'>";
  _0xe03734 += "<button id='btnMopeOptions' class='btn'>      CONTINUE      </button>";
  _0xe03734 += "</div>";
  _0xe03734 += "<div style='clear:both;'></div>";
  var _0x15f03a = document.getElementById("endScreen");
  if (_0x15f03a) {
    _0x15f03a.innerHTML = _0xe03734;
    _0x15f03a.style.display = "block";
  }
  if (!_0x5f5cae || isGhost) {
    _0xbec047();
  }
};
_0x46bdd9.prototype.endScreenCanvas = null;
_0x46bdd9.prototype.buildEndScreen = function (_0x33b27a, _0x37ed4e) {
  if (this.endScreenCanvas == null) {
    this.endScreenCanvas = document.createElement("canvas");
  }
  if (this.endScreenCanvas == null) {
    return;
  }
  var _0x30c9a9 = this.endScreenCanvas.getContext("2d");
  var _0x5c6730 = 0x37;
  _0x5c6730 = 250;
  this.endScreenCanvas.width = 430;
  this.endScreenCanvas.height = _0x5c6730;
  _0x30c9a9.globalAlpha = 0.2;
  _0x30c9a9.fillStyle = "#000000";
  _0x30c9a9.fillRect(0x0, 0x0, this.endScreenCanvas.width, this.endScreenCanvas.height);
  _0x30c9a9.fillStyle = "#000000";
  _0x30c9a9.fillRect(0x5, 0x5, this.endScreenCanvas.width - 10, this.endScreenCanvas.height - 10);
  var _0x29ab74 = 0x5;
  _0x30c9a9.globalAlpha = 0x1;
  _0x30c9a9.fillStyle = "#FFFFFF";
  _0x30c9a9.font = "30px Arial";
  _0x29ab74 += 0x37;
  var _0x132a6d = "Final Stats";
  _0x30c9a9.font = "30px Arial";
  _0x30c9a9.fillText(_0x132a6d, this.endScreenCanvas.width / 0x2 - _0x30c9a9.measureText(_0x132a6d).width / 0x2, _0x29ab74);
  _0x30c9a9.font = "20px Arial";
  _0x29ab74 += 0x2d;
  _0x132a6d = "You were #" + _0x37ed4e.rank;
  _0x30c9a9.fillText(_0x132a6d, this.endScreenCanvas.width / 0x2 - _0x30c9a9.measureText(_0x132a6d).width / 0x2, _0x29ab74);
  _0x29ab74 += 0x28;
  var _0x5684fe = 20;
  _0x27ab59(_0x30c9a9, "Killed by", _0x37ed4e.killedBy, _0x5684fe, _0x29ab74);
  _0x29ab74 += 0x28;
  _0x27ab59(_0x30c9a9, "Time Alive", _0x4ec1fc(_0x37ed4e.timeAlive), _0x5684fe, _0x29ab74);
  _0x5684fe += 0xd2;
  _0x27ab59(_0x30c9a9, "Total Kills", _0x37ed4e.totalKills, _0x5684fe, _0x29ab74);
  _0x29ab74 += 0x28;
  _0x5684fe = 20;
  _0x27ab59(_0x30c9a9, "Top rank", _0x37ed4e.topRank, _0x5684fe, _0x29ab74);
  _0x5684fe += 0xd2;
  _0x27ab59(_0x30c9a9, "Max XP", _0x40c2b6(_0x37ed4e.maxXP, 0x0), _0x5684fe, _0x29ab74);
  _0x29ab74 += 0x32;
};
_0x46bdd9.prototype.lastWastedPopupT = 0x0;
_0x46bdd9.prototype.onPlayerWasted = function (_0x5af0ba) {
  if ((_0x1f4c9e - this.lastWastedPopupT) / 0x3e8 > 0.7) {
    this.lastWastedPopupT = _0x1f4c9e;
    var _0x5d5ab2 = new _0x17bc50(_0x5af0ba + " wasted!", 0x28, "red", 0x5dc);
    this.wastedPopups.push(_0x5d5ab2);
  }
};
_0x46bdd9.prototype.lastWastedPopupT = 0x0;
_0x46bdd9.prototype.msgDisplayPlayersOnMiniMap = function (_0x5f1ff7) {
  _0x219364 = [];
  var _0x46f998 = _0x5f1ff7.readUInt16();
  for (var _0x57a971 = 0x0; _0x57a971 < _0x46f998; _0x57a971++) {
    _0x219364.push({
      "id": _0x5f1ff7.readUInt32(),
      "x": _0x5f1ff7.readUInt32() / 0x64,
      "y": _0x5f1ff7.readUInt32() / 0x64,
      "rad": 0x3
    });
  }
};
window.WildMope = _0x46bdd9;
function _0x54e075(_0x4d7bef, _0x89d8a6, _0xf25463) {
  _0x4218b7();
  var _0x49f00e = document.getElementsByTagName("body")[0x0];
  if (_0x49f00e) {
    var _0x3cc7f7 = document.getElementById("gameAreaWrapper");
    var _0x565f7b = _0x234c5f("mopeshop-popup");
    var _0x37a83e = _0x234c5f("msg", _0x89d8a6);
    var _0xcfa488 = _0x234c5f("text");
    _0xcfa488.innerHTML = _0x4d7bef;
    var _0x3740ed = _0x234c5f("closeMsg", '');
    _0x3740ed.onclick = function () {
      _0x4218b7();
    };
    _0x37a83e.appendChild(_0x3740ed);
    _0x37a83e.appendChild(_0xcfa488);
    _0x565f7b.appendChild(_0x37a83e);
    _0x49f00e.insertBefore(_0x565f7b, _0x3cc7f7);
    if (_0xf25463 !== undefined && _0xf25463 > 0x0) {
      console.log("timeout:" + _0xf25463);
      setTimeout(_0x4218b7, _0xf25463 * 0x3e8);
    }
  }
}
function _0x4218b7() {
  var _0x809465 = document.getElementById("mopeshop-popup");
  if (_0x809465) {
    _0x809465.parentNode.removeChild(_0x809465);
  }
}
function _0x234c5f(_0x4194ae, _0x1c78df) {
  var _0x48c220 = _0xe0b638("div", _0x4194ae, _0x1c78df);
  return _0x48c220;
}
function _0x21a60e(_0x10e2fb, _0x4bcec1, _0x4ee010) {
  var _0x29bad4 = _0xe0b638("div", _0x10e2fb, _0x4bcec1);
  _0x29bad4.innerHTML = _0x4ee010;
  return _0x29bad4;
}
const _0xac4a13 = [];
function _0xe0b638(_0x3a5528, _0x50788a, _0x2abe48) {
  if (_0x3a5528 == undefined) {
    return null;
  }
  var _0x488c7d = document.createElement(_0x3a5528);
  if (_0x50788a !== undefined) {
    _0x488c7d.id = _0x50788a;
  }
  if (_0x2abe48 !== undefined) {
    _0x488c7d.className = _0x2abe48;
  }
  return _0x488c7d;
}
function _0xa26ec0() {
  var _0x44aa9c = _0x46dde7.coins;
  if (_0x44aa9c > -0x1) {
    if (('' + _0x44aa9c).length > 0xa) {
      return ('' + _0x44aa9c).substring(0x0, 0x4) + " PI.COINS";
    }
    return _0x44aa9c;
  } else {
    return "LOGIN";
  }
}
function _0x34e88d() {
  return _0x46dde7.coins > -0x1;
}
function _0x514d12(_0x2654ed) {
  if (_0x2654ed && _0x4ecbfe) {
    _0x4ecbfe.loadData(_0x2654ed);
  } else {
    _0x4ecbfe = new _0x8db18e();
    _0x4ecbfe.loadData();
  }
}
var _0x1994ce = {
  "customClassesForOType": {},
  "setCustomClassForShopItem": function (_0x59f05f, _0x5c74a7, _0x3124a3) {
    if (!this.customClassesForOType[_0x5c74a7]) {
      this.customClassesForOType[_0x5c74a7] = {
        "oTypeMainClass": null,
        "secondaryTypeClasses": {}
      };
    }
    var _0x4c626f = this.customClassesForOType[_0x5c74a7];
    if (_0x3124a3 == null) {
      if (_0x4c626f.oTypeMainClass != null) {
        console.log("ERROR 'GameObjType.setCustomClassForGameObjType': a class (" + this.customClassesForOType[_0x5c74a7] + ") is already set for oType " + _0x5c74a7 + "! Check for duplicate calls!");
      }
      _0x4c626f.oTypeMainClass = _0x59f05f;
    } else {
      if (_0x3124a3 in _0x4c626f.secondaryTypeClasses) {
        console.log("ERROR 'GameObjType.setCustomClassForGameObjType': a class is already set for oType " + _0x5c74a7 + " AND secondaryType (eg. animalType) " + _0x3124a3 + "! Check for duplicate calls!");
      }
      _0x4c626f.secondaryTypeClasses[_0x3124a3] = _0x59f05f;
    }
    this.onClassSet(_0x59f05f, _0x5c74a7, _0x3124a3);
  },
  "getClassForGameObjType": function (_0xfbfd71, _0x2826e4) {
    if (_0xfbfd71 in this.customClassesForOType) {
      var _0x146f4e = this.customClassesForOType[_0xfbfd71];
      if (_0x2826e4 == null || _0x2826e4 == 0x0) {
        return _0x146f4e.oTypeMainClass;
      } else {
        if (_0x2826e4 in _0x146f4e.secondaryTypeClasses) {
          return _0x146f4e.secondaryTypeClasses[_0x2826e4];
        } else {
          return _0x146f4e.oTypeMainClass;
        }
      }
    } else {
      return _0x56c4af;
    }
  },
  "newlyVis_createGameObjFromMsg": function (_0xe2848f, _0x1c9edf) {
    var _0x1e90f5 = _0x1c9edf.oType;
    var _0x57d1a5 = null;
    if (_0x1e90f5 == 0x2) {
      _0x57d1a5 = _0x1c9edf.animalType;
    }
    var _0xdbee4e = _0x1994ce.createGameObjOfOType(_0x1e90f5, _0x57d1a5);
    _0xdbee4e.itemType = _0xe2848f;
    _0xdbee4e.worldUpd_readMsgNewlyVisible(_0x1c9edf, _0x1e90f5, _0x57d1a5);
    return _0xdbee4e;
  },
  "createGameObjOfOType": function (_0x23c3a1, _0x38e971) {
    var _0x59f628 = this.getClassForGameObjType(_0x23c3a1, _0x38e971);
    var _0x4bd75a = new _0x59f628(_0x23c3a1, _0x38e971);
    return _0x4bd75a;
  },
  "onClassSet": function (_0x40db5d) {}
};
_0x56c4af.prototype = {
  "id": 0x0,
  "oType": 0x0,
  "itemType": null
};
function _0x56c4af(_0x3007c7) {
  this.oType = _0x3007c7;
}
_0x56c4af.prototype.setObjTypes = function (_0x1d438a, _0xf933db) {
  this.oType = _0x1d438a;
};
_0x56c4af.prototype.loadShopData = function (_0x1e4e48) {
  this.data = _0x1e4e48;
  this.id = _0x1e4e48.id;
  this.itemType = _0x1e4e48.itemType;
  this.coinsPrice = _0x1e4e48.coinsPrice;
};
_0x56c4af.prototype.worldUpd_readMsgNewlyVisible = function (_0x15a5f7, _0x2918ab, _0xe21dfc) {
  this.setObjTypes(_0x2918ab, _0xe21dfc);
  this.loadShopData(_0x15a5f7);
};
_0x56c4af.prototype.getImage = function () {
  return null;
};
_0x56c4af.prototype.generateHtml = function () {};
window.ShopItem = _0x56c4af;
var _0x2995b5 = _0x2de2c4;
var _0x53abbc = _0x56c4af;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
function _0x2de2c4() {
  _0x2de2c4.superClass.call(this, 0x3e8);
  this.oType = 0x3e8;
  this.itemType = 0x1;
}
_0x2de2c4.prototype.prefix = null;
_0x2de2c4.prototype.bonus = 0x0;
_0x2de2c4.prototype.loadShopData = function (_0x10ec92) {
  _0x2de2c4.superClass.prototype.loadShopData.call(this, _0x10ec92);
  this.prefix = _0x10ec92.prefix;
  this.bonus = _0x10ec92.bonus;
  this.value = _0x10ec92.value;
};
_0x2de2c4.prototype.worldUpd_readMsgNewlyVisible = function (_0xee9fb8, _0x49d619, _0x554ace) {
  this.loadShopData(_0xee9fb8);
};
_0x1994ce.setCustomClassForShopItem(_0x2de2c4, 0x3e8);
window.MopeCoin = _0x2de2c4;
var _0x2995b5 = _0x449657;
var _0x53abbc = _0x56c4af;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
function _0x449657(_0x2da209, _0x4b61eb) {
  _0x449657.superClass.call(this, 0x2);
  this.animalType = _0x4b61eb;
  this.setBiome(this.animalType);
}
_0x449657.prototype.setBiome = function (_0x44e211) {
  switch (_0x44e211) {
    case _0x30afcb:
    case _0x578001:
    case _0x43c61f:
    case _0x5b3559:
    case _0x1f9f6d:
    case _0x166f22:
    case _0x49fd90:
    case _0x479786:
    case _0x4f3bf1:
      this.biome = 0x0;
      this.biomeName = "Land";
      break;
    case _0x2fcf20:
    case _0x3db2bf:
    case _0x301ddb:
    case _0x351d94:
    case _0x267cc6:
      this.biome = 0x1;
      this.biomeName = "Ocean";
      break;
    case _0xc3cf49:
    case _0x4b1170:
    case _0x3af7d1:
    case _0x542f57:
      this.biome = 0x2;
      this.biomeName = "Arctic";
      break;
    case _0x330b14:
    case _0x1a6650:
    case _0x23a03f:
    case _0x21817a:
      this.biome = 0x3;
      this.biomeName = "Volcano";
      break;
    case _0x2a5063:
    case _0x3032f7:
    case _0xcb5cf3:
    case _0x57279a:
      this.biome = 0x4;
      this.biomeName = "Desert";
      break;
    default:
      break;
  }
};
_0x449657.prototype.loadShopData = function (_0x3ab9ba) {
  _0x449657.superClass.prototype.loadShopData.call(this, _0x3ab9ba);
  this.animalSpecies = _0x3ab9ba.animalSpecies;
  this.shopImg = "shop/" + _0x3ab9ba.shopImg;
  this.skinImage = _0x3ab9ba.skinImage;
  this.skinName = _0x3ab9ba.skinName;
  this.saleType = _0x3ab9ba.saleType;
  this.salePrice = _0x3ab9ba.salePrice;
};
_0x449657.prototype.setObjTypes = function (_0x18c792, _0x224bc5) {
  this.animalType = _0x224bc5;
};
_0x449657.prototype.getAnimalName = function () {
  switch (this.animalType) {
    case _0x5ebc28:
      return "rabbit";
    case _0x2e9b2f:
      return "pig";
    case _0x1dbdce:
      return "fox";
    case _0x356eb6:
      return "deer";
    case _0x4ddfd4:
      return "mole";
    case _0x25dccf:
      return "zebra";
    case _0x527d90:
      return "lion";
    case _0x4fa2e5:
      return "bigcat";
    case _0x54ab20:
      return "bear";
    case _0x4bb269:
      return "croc";
    case _0x3040c9:
      return "rhino";
    case _0x49fd90:
      return "hippo";
    case _0x578001:
      return "dragon";
    case _0x46f565:
      return "shrimp";
    case _0x5c1699:
      return "trout";
    case _0x1515a4:
      return "crab";
    case _0x50e755:
      return "squid";
    case _0x4ebe0d:
      return "shark";
    case _0x1bc4f4:
      return "stingray";
    case _0x1473db:
      return "turtle";
    case _0xe6b188:
      return "seahorse";
    case _0x16cf7a:
      return "jellyfish";
    case _0x301ddb:
      return "kraken";
    case _0x3446ed:
      return "pufferfish";
    case _0x267cc6:
      return "killerwhale";
    case _0x5f4a90:
      return "swordfish";
    case _0x4dd4dc:
      return "gorilla";
    case _0x1e1d71:
      return "octopus";
    case _0x26fb25:
      return "wolf";
    case _0x197269:
      return "arctichare";
    case _0x4b1170:
      return "yeti";
    case _0x1b70a9:
      return "chipmunk";
    case _0x89ca62:
      return "muskox";
    case _0x112e88:
      return "penguin";
    case _0x3146b2:
      return "polarbear";
    case _0x40a896:
      return "seal";
    case _0x42d03d:
      return "snowleopard";
    case _0x517417:
      return "walrus";
    case _0x21e8e0:
      return "reindeer";
    case _0x3d4e92:
      return "arcticfox";
    case _0x3b55ee:
      return "wolverine";
    case _0x3af7d1:
      return "mammoth";
    case _0x39640d:
      return "donkey";
    case _0x357f05:
      return "snail";
    case _0x1a6650:
      return "blackdragon";
    case _0x542f57:
      return "sabertoothtiger";
    case _0x166f22:
      return "elephant";
    case _0x351d94:
      return "bluewhale";
    case _0x22c8fa:
      return "cobra";
    case _0x479786:
      return "boaconstrictor";
    case _0x5b3559:
      return "giantspider";
    case _0x43c61f:
      return "trex";
    case _0x3a6833:
      return "tiger";
    case _0x5294bc:
      return "giraffe";
    case _0x1150f3:
      return "eagle";
    case _0x35e093:
      return "hedgehog";
    case _0xd29b39:
      return "duck";
    case _0x3d66e5:
      return "duckling";
    case _0x119c33:
      return "lemming";
    case _0x3db2bf:
      return "kingcrab";
    case _0x25c952:
      return "frog";
    case _0x4f3bf1:
      return "ostrich";
    case _0x3c3bc1:
      return "pelican";
    case _0x337560:
      return "falcon";
    case _0x5002ba:
      return "snowyowl";
    case _0x11bfae:
      return "honeybee";
    case _0x21817a:
      return "phoenix";
    case _0x14ebaa:
      return "ostrichbaby";
    case _0x2fcf20:
      return "seamonster";
    case _0x23a03f:
      return "landmonster";
    case _0xc3cf49:
      return "icemonster";
    case _0x30afcb:
      return "dinomonster";
    case _0x3c19f5:
      return "pigeon";
    case _0x386e05:
      return "toucan";
    case _0x371924:
      return "macaw";
    case _0x45f5fa:
      return "flamingo";
    case _0x1f9f6d:
      return "cassowary";
    case _0x6025f6:
      return "chicken";
    case _0x147e06:
      return "woodpecker";
    case _0x4b67a0:
      return "peacock";
    case _0x33fcaa:
      return "kangaroorat";
    case _0x33c563:
      return "desertchipmunk";
    case _0x10db93:
      return "meerkat";
    case _0x5af123:
      return "gazelle";
    case _0x112f51:
      return "armadillo";
    case _0x1414c7:
      return "fennecfox";
    case _0xd21fde:
      return "camel";
    case _0x432bf5:
      return "warthog";
    case _0x42fa0c:
      return "hyena";
    case _0x1bbb89:
      return "rattlesnake";
    case _0xcb2b53:
      return "vulture";
    case _0x5295d3:
      return "bison";
    case _0x57279a:
      return "komododragon";
    case _0x2a5063:
      return "giantscorpion";
    case _0x3032f7:
      return "pterodactyl";
    case _0x344c95:
      return "gobibear";
    case _0xcb5cf3:
      return "blackwidow";
    case _0x172e43:
      return "bulletant";
    case _0xa31c83:
      return "markhor";
  }
};
_0x449657.prototype.getSkinPath = function (_0x19740a) {
  var _0x366226 = _0x4ecbfe.ifMultiAssetSkin(this.animalType, this.skinImage);
  var _0x15e44c = this.skinImage == undefined ? this.shopImg : "skins/" + _0x366226;
  if (_0x19740a) {
    _0x15e44c += _0x19740a;
  }
  return _0x15e44c + ".png";
};
_0x449657.prototype.getShopImageSrc = function () {
  return "assets/s/" + this.data.season + "/" + this.getSkinPath();
};
_0x449657.prototype.getImage = function () {
  var _0x5e9ee2 = new Image();
  _0x5e9ee2.className = "animalSkin_" + this.animalType;
  _0x5e9ee2.src = "assets/s/" + this.data.season + "/" + this.getSkinPath();
  return _0x5e9ee2;
};
_0x449657.prototype.getImagePromo = function (_0x2ff3e2) {
  var _0x151975 = new Image();
  _0x151975.className = "animalSkin_" + this.animalType;
  _0x151975.src = "assets/s/" + this.data.season + "/" + this.getSkinPath(_0x2ff3e2);
  console.log("promo: " + _0x151975.src);
  return _0x151975;
};
_0x449657.prototype.getSkinName = function () {
  var _0x46076d = this.skinName;
  return _0x46076d.replace("\n", "<br>");
};
window.AnimalSkin = _0x449657;
_0x1994ce.setCustomClassForShopItem(_0x449657, 0x2);
function _0x8db18e() {}
_0x8db18e.prototype.items = [];
_0x8db18e.prototype.datatab = [];
_0x8db18e.prototype.showSeason = true;
_0x8db18e.prototype.getPackageInfo = function (_0x22b13f) {};
_0x8db18e.prototype.getFeatureInfo = function (_0x35b8d2) {
  switch (_0x35b8d2) {
    case "feature_1v1redemption_5credits":
      return {
        "title": "5 Redemption Credits"
      };
    case "feature_1v1redemption_10credits":
      return {
        "title": "10 Redemption Credits"
      };
    case "feature_1v1redemption_20credits":
      return {
        "title": "20 Redemption Credits"
      };
  }
};
_0x8db18e.prototype.getAnimalInfo = function (_0x402118) {
  switch (_0x402118) {
    case "halloween_wyrmous":
      return [_0x22c8fa, 0x64, "Wyrmous", "land/cobra/100/cobra"];
    case "halloween_equusthulhu":
      return [_0x39640d, 0x64, "Equusthulhu", "land/donkey/100/donkey"];
    case "halloween_frostaline":
      return [_0x42d03d, 0x64, "Frostaline", "arctic/snowleopard/100/snowleopard"];
    case "halloween_pufferMace":
      return [_0x3446ed, 0x64, "Puffermace", "ocean/pufferfish/100/pufferfish"];
    case "halloween_carnageodactyl":
      return [_0x3032f7, 0x64, "Carnageodactyl", "desert/pterodactyl/100/pterodactyl_ability"];
    case "halloween_mrDollar":
      return [_0x43c61f, 0x64, "Mr. Dollar", "land/trex/100/trex"];
    case "halloween_wendigoDeer":
      return [_0x356eb6, 0x64, "The Wendigo", "land/deer/100/deer"];
    case "halloween_cactiRat":
      return [_0x33fcaa, 0x64, "Cacti Rat", "desert/kangaroorat/100/kangaroorat"];
    case "halloween_hiPower":
      return [_0x49fd90, 0x64, "Swampster", "land/hippo/100/hippo"];
    case "halloween_puumpkat":
      return [_0x10db93, 0x64, "Puumpkat", "desert/meerkat/100/meerkat"];
    case "halloween_doomedarius":
      return [_0xd21fde, 0x64, "The Doomedarius", "desert/camel/100/camel"];
    case "halloween_roboMouse":
      return [_0x2ebefb, 0x64, "Robo Mouse", "land/mouse/100/mouse"];
    case "halloween_uncleSam":
      return [_0x4bb269, 0x64, "Uncle Sam", "land/croc/100/croc"];
    case "halloween_zombieMole":
      return [_0x4ddfd4, 0x64, "Zombie Mole", "land/mole/100/mole"];
    case "halloween_flammyHart":
      return [_0x5af123, 0x64, "Flammy Hart", "desert/gazelle/100/gazelle"];
    case "halloween_gummyViper":
      return [_0x1bbb89, 0x64, "Gummy Viper", "desert/rattlesnake/100/rattlesnake"];
    case "halloween_grimRipper":
      return [_0x4dd4dc, 0x64, "Grim Reaper", "land/gorilla/100/gorilla"];
    case "halloween_bigCookie":
      return [_0x4fa2e5, 0x64, "Big Cookie", "land/bigcat/100/bigcat"];
    case "halloween_gargolgon":
      return [_0x578001, 0x64, "The Gargon", "land/dragon/100/dragon"];
    case "halloween_candyRus":
      return [_0x517417, 0x64, "Candy Rus", "arctic/walrus/100/walrus"];
    case "halloween_mantilian":
      return [_0x527d90, 0x64, "The Mantilian", "land/lion/100/lion"];
    case "halloween_phantomRay":
      return [_0x1bc4f4, 0x64, "Phantom Ray", "ocean/stingray/100/stingray"];
    case "halloween_suitedToucan":
      return [_0x386e05, 0x64, "The Dapper", "land/toucan/100/toucan"];
    case "halloween_vulgeist":
      return [_0xcb2b53, 0x64, "The Vulgeist", "desert/vulture/100/vulture"];
    case "halloween_burlone":
      return [_0x432bf5, 0x64, "The Burlone", "desert/warthog/100/warthog"];
    case "halloween_unicornze":
      return [_0x25dccf, 0x64, "Unicornze", "land/zebra/100/zebra"];
    case "gold_blackDragon":
      return [_0x1a6650, 0x1, "Golden\nBlack Dragon", "volcano/blackdragon/1/blackdragon"];
    case "gold_kingDragon":
      return [_0x330b14, 0x1, "Golden\nKing Dragon", "volcano/kingdragon/1/kingdragon"];
    case "gold_Dragon":
      return [_0x578001, 0x1, "Golden\nDragon", "land/dragon/1/dragon"];
    case "gold_kraken":
      return [_0x301ddb, 0x1, "Golden\nKraken", "ocean/kraken/1/kraken"];
    case "gold_yeti":
      return [_0x4b1170, 0x1, "Golden\nYeti", "arctic/yeti/1/yeti"];
    case "gold_trex":
      return [_0x43c61f, 0x1, "Golden\nT.Rex", "land/trex/1/trex"];
    case "gold_kingCrab":
      return [_0x3db2bf, 0x1, "GoldenCrab", "ocean/kingcrab/1/kingcrab"];
    case "gold_phoenix":
      return [_0x21817a, 0x1, "Golden\nPhoenix", "volcano/phoenix/1/phoenix"];
    case "gold_pterodactyl":
      return [_0x3032f7, 0x1, "Golden\nPterodactyl", "desert/pterodactyl/1/pterodactyl_ability"];
    case "gold_iceMonster":
      return [_0xc3cf49, 0x1, "Golden\nIce Monster", "arctic/icemonster/1/icemonster"];
    case "gold_dinoMonster":
      return [_0x30afcb, 0x1, "Golden\nDino Monster", "land/dinomonster/1/dinomonster"];
    case "gold_seaMonster":
      return [_0x2fcf20, 0x1, "Golden\nSea Monster", "ocean/seamonster/1/seamonster"];
    case "gold_landMonster":
      return [_0x23a03f, 0x1, "Golden\nLand Monster", "volcano/landmonster/1/landmonster"];
    case "gold_giantScorion":
      return [_0x2a5063, 0x1, "Golden\nGiant Scorpion", "desert/scorpion/1/giantscorpion"];
    case "gold_bluewhale":
      return [_0x351d94, 0x1, "Golden\nBlue Whale", "ocean/bluewhale/1/bluewhale"];
    case "gold_elephant":
      return [_0x166f22, 0x1, "Golden\nElephant", "land/elephant/1/elephant"];
    case "gold_cassowary":
      return [_0x1f9f6d, 0x1, "Golden\nCassowary", "land/cassowary/1/cassowary"];
    case "gold_giantspider":
      return [_0x5b3559, 0x1, "Golden\nGiant Spider", "land/giantspider/1/giantspider"];
    case "gold_blackwidow":
      return [_0xcb5cf3, 0x1, "Golden\nBlackwidow", "desert/blackwidow/1/blackwidow"];
    case "gold_mammoth":
      return [_0x3af7d1, 0x1, "Golden\nMammoth", "arctic/mammoth/1/mammoth"];
    case "gold_hippo":
      return [_0x49fd90, 0x1, "Golden\nHippo", "land/hippo/1/hippo"];
    case "gold_ostrich":
      return [_0x4f3bf1, 0x1, "Golden\nOstrich", "land/ostrich/1/ostrich"];
    case "gold_boa":
      return [_0x479786, 0x1, "Golden\nBoa", "land/boaconstrictor/1/boaconstrictor"];
    case "gold_komodo":
      return [_0x57279a, 0x1, "Golden\nKomodo", "desert/komododragon/1/komodo"];
    case "gold_killerwhale":
      return [_0x267cc6, 0x1, "Golden\nKiller Whale", "ocean/killerwhale/1/killerwhale"];
    case "gold_sabertooth":
      return [_0x542f57, 0x1, "Golden\nSabertooth", "arctic/sabertooth/1/sabertooth"];
    case "skin_blueDragon":
      return [_0x1a6650, 0x2, "The\nAzure Bringer", "volcano/blackdragon/2/blackdragon"];
    case "skin_kingRipper":
      return [_0x330b14, 0x2, "King\nRipper", "volcano/kingdragon/2/kingdragon"];
    case "skin_kingStan":
      return [_0x330b14, 0x3, "King\nStan", "volcano/kingdragon/3/kingdragon"];
    case "skin_kingShah":
      return [_0x330b14, 0x4, "King\nShah", "volcano/kingdragon/4/kingdragon"];
    case "skin_dragon_gray":
      return [_0x578001, 0x2, "Knight\nDragon", "land/dragon/2/dragon"];
    case "skin_kraken_cyan":
      return [_0x301ddb, 0x2, "Chromatic\nKraken", "ocean/kraken/2/kraken"];
    case "skin_yeti_emerald":
      return [_0x4b1170, 0x2, "Emerald\nYeti", "arctic/yeti/2/yeti"];
    case "skin_snowman":
      return [_0x356343, 0x1, "The\nSnowman", "arctic/snowman/1/snowman"];
    case "skin_snowgirl":
      return [_0x356343, 0x2, "The\nSnowgirl", "arctic/snowman/2/snowgirl"];
    case "skin_trex_gray":
      return [_0x43c61f, 0x2, "Ember\nT.Rex", "land/trex/2/trex"];
    case "skin_kingCrab":
      return [_0x3db2bf, 0x2, "Amethyst\nCrab", "ocean/kingcrab/2/kingcrab"];
    case "skin_phoenix_blue":
      return [_0x21817a, 0x2, "Alpha\nPhoenix", "volcano/phoenix/2/phoenix"];
    case "skin_pterodactyl_green":
      return [_0x3032f7, 0x2, "Emerald\nPterodactyl", "desert/pterodactyl/2/pterodactyl_ability"];
    case "skin_iceMonster":
      return [_0xc3cf49, 0x2, "Amethyst\nMonster", "arctic/icemonster/2/icemonster"];
    case "skin_dinoMonster":
      return [_0x30afcb, 0x2, "Citrine\nMonster", "land/dinomonster/2/dinomonster"];
    case "skin_seaMonster":
      return [_0x2fcf20, 0x2, "Sapphire\nMonster", "ocean/seamonster/2/seamonster"];
    case "skin_landMonster":
      return [_0x23a03f, 0x2, "Titanite\nMonster", "volcano/landmonster/2/landmonster"];
    case "skin_orangeScorpion":
      return [_0x2a5063, 0x2, "Carnelian\nScorpion", "desert/scorpion/2/giantscorpion"];
    case "skin_bluewhale":
      return [_0x351d94, 0x2, "Albino\nBlue Whale", "ocean/bluewhale/2/bluewhale"];
    case "skin_elephant":
      return [_0x166f22, 0x2, "White\nElephant", "land/elephant/2/elephant"];
    case "skin_cassowary":
      return [_0x1f9f6d, 0x2, "Cotton\nCassowary", "land/cassowary/2/cassowary"];
    case "skin_giantspider":
      return [_0x5b3559, 0x2, "Goliath\nSpider", "land/giantspider/2/giantspider"];
    case "skin_blackwidow":
      return [_0xcb5cf3, 0x2, "Queen\nBlackwidow", "desert/blackwidow/2/blackwidow"];
    case "skin_mammoth":
      return [_0x3af7d1, 0x2, "Black\nMammoth", "arctic/mammoth/2/mammoth"];
    case "skin_hippo":
      return [_0x49fd90, 0x2, "Pygmy\nHippo", "land/hippo/2/hippo"];
    case "skin_ostrich":
      return [_0x4f3bf1, 0x2, "Ruffled\nOstrich", "land/ostrich/2/ostrich"];
    case "skin_boa":
      return [_0x479786, 0x2, "Tree\nBoa", "land/boaconstrictor/2/boaconstrictor"];
    case "skin_komodo":
      return [_0x57279a, 0x2, "Night\nKomodo", "desert/komododragon/2/komodo"];
    case "skin_killerwhale":
      return [_0x267cc6, 0x2, "Albino\nOrca", "ocean/killerwhale/2/killerwhale"];
    case "skin_sabertooth":
      return [_0x542f57, 0x2, "Margala\nSabertooth", "arctic/sabertooth/2/sabertooth"];
    case "skin_tigerShark":
      return [_0x4ebe0d, 0x2, "Tiger\nShark", "ocean/shark/1/shark", true];
    case "skin_hamerHeadShark":
      return [_0x4ebe0d, 0x3, "Hammerhead\nShark", "ocean/shark/2/shark", true];
    case "skin_panda":
      return [_0x54ab20, 0x2, "Panda", "land/panda/panda", true];
    case "skin_zonkey":
      return [_0x39640d, 0x3, "Zonkey", "land/donkey/2/zonkey", true];
    case "skin_okapi":
      return [_0x25dccf, 0x2, "Okapi", "land/okapi/okapi", true];
    case "skin_giantCroc":
      return [_0x4bb269, 0x2, "Giant\nCrocodile", "land/croc/1/croc", true];
    case "skin_purpleMouse":
      return [_0x2ebefb, 0x2, "Purple\nMouse", "land/mouse/2/mouse", true];
    case "skin_prismaToucan":
      return [_0x386e05, 0x6, "Prisma\nToucan", "land/toucan/6/toucan", true];
    case "gold_mouse":
      return [_0x2ebefb, 0x2, "Golden\nMouse", "land/mouse/1/mouse", true];
    case "skin_queenScarlet":
      return [_0x330b14, 0x5, "Queen\nScarlet", "volcano/kingdragon/5/kingdragon", true];
    case "skin_queenCeleste":
      return [_0x330b14, 0x6, "Queen\nCeleste", "volcano/kingdragon/6/kingdragon", true];
    case "skin_bigFoot":
      return [_0xb061ee, 0x1, "The\nBigfoot", "land/bigfoot/thebigfoot", true];
    case "skin_woollyRhino":
      return [_0x3040c9, 0x3, "Woolly\nRhino", "land/rhino/3/rhino", true];
  }
  return null;
};
_0x8db18e.prototype.loadData = function () {
  _0x4f42ee(function (_0x864272, _0x36a912) {
    var _0x3fb5f1 = {
      "shopItems": [],
      "settings": []
    };
    if (!_0x864272) {
      _0x54e075("Could not connect to AccountServer!", "itemDoesntExist", 0x5);
      return;
    }
    if (_0x36a912) {
      for (var _0x1707f4 = 0x0; _0x1707f4 < _0x36a912.shopItems.length; _0x1707f4++) {
        var _0xc6a6ac = _0x36a912.shopItems[_0x1707f4];
        if (_0xc6a6ac.purchasedByPlayer) {
          _0xc6a6ac.coinsPrice = -0x1;
        }
        _0x3fb5f1.shopItems.push(_0xc6a6ac);
      }
      if (_0x36a912.settings) {
        for (var _0x1707f4 = 0x0; _0x1707f4 < _0x36a912.settings.length; _0x1707f4++) {
          _0x3fb5f1.settings.push(_0x36a912.settings[_0x1707f4]);
        }
      }
    }
    var _0x1bffa8 = {
      "tab": "Skins",
      "shopItems": []
    };
    var _0x578249 = {
      "tab": "Deals",
      "shopItems": []
    };
    var _0x5abb6c = {
      "tab": "Features",
      "shopItems": []
    };
    var _0xe69d62 = [];
    var _0x3b5ed1 = [_0x1bffa8, _0x5abb6c, _0x578249];
    for (_0x1707f4 = 0x0; _0x1707f4 < _0x3fb5f1.shopItems.length; _0x1707f4++) {
      var _0x5f2d62 = _0x3fb5f1.shopItems[_0x1707f4];
      switch (_0x5f2d62.shopCategory) {
        case "halloween":
        case "locked":
        case "gold":
          {
            var _0x37c221 = _0x8db18e.prototype.getAnimalInfo(_0x5f2d62.itemName, _0x5f2d62);
            if (_0x37c221) {
              _0x5f2d62.id = _0x5f2d62.itemName;
              _0x5f2d62.oType = 0x2;
              _0x5f2d62.animalType = _0x37c221[0x0];
              _0x5f2d62.animalSpecies = _0x37c221[0x1];
              _0x5f2d62.skinName = _0x37c221[0x2];
              _0x5f2d62.skinImage = _0x37c221[0x3];
              _0x1bffa8.shopItems.push(_0x5f2d62);
            }
          }
          break;
        case "feature":
          {
            if (_0x5f2d62.itemType == "animal") {
              var _0x37c221 = _0x8db18e.prototype.getAnimalInfo(_0x5f2d62.itemName);
              if (_0x37c221) {
                _0x5f2d62.id = _0x5f2d62.itemName;
                _0x5f2d62.oType = 0x2;
                _0x5f2d62.animalType = _0x37c221[0x0];
                _0x5f2d62.animalSpecies = _0x37c221[0x1];
                _0x5f2d62.skinName = _0x37c221[0x2];
                _0x5f2d62.skinImage = _0x37c221[0x3];
                _0x5abb6c.shopItems.push(_0x5f2d62);
              } else {
                console.log("No animal type data for shop item " + _0x5f2d62.itemName);
              }
            } else {
              if (_0x5f2d62.itemType == "feature") {
                var _0x351406 = _0x8db18e.prototype.getFeatureInfo(_0x5f2d62.itemName) || {
                  "title": "Feature"
                };
                _0x5f2d62.id = _0x5f2d62.itemName;
                _0x5f2d62.oType = 0x4;
                _0x5f2d62.title = _0x351406.title;
                _0x5abb6c.shopItems.push(_0x5f2d62);
              }
            }
          }
          break;
        case "deal":
          {
            _0x5f2d62.id = _0x5f2d62.itemName;
            _0x5f2d62.oType = 0x3;
            _0x578249.shopItems.push(_0x5f2d62);
          }
          break;
        case "buff":
          {
            _0xe69d62.push(_0x5f2d62);
          }
          break;
        default:
      }
    }
    var _0x18cf24 = {
      "skins": _0x3b5ed1
    };
    _0x8db18e.prototype.shop = {
      "ownedSkins": [],
      "ownedAnimals": [],
      "ownedDeals": [],
      "ownedProps": [],
      "settings": _0x3fb5f1.settings,
      "skins": [],
      "props": [],
      "buffs": _0xe69d62
    };
    var _0x1c46af = [];
    var _0x2a87d4 = [];
    for (t = 0x0; t < _0x18cf24.skins.length; t++) {
      var _0x5490f8 = _0x18cf24.skins[t];
      for (_0x1707f4 = 0x0; _0x1707f4 < _0x5490f8.shopItems.length; _0x1707f4++) {
        var _0x5d727b = _0x5490f8.shopItems[_0x1707f4];
        var _0x18f249 = _0x1994ce.newlyVis_createGameObjFromMsg(_0x5d727b.itemType, _0x5d727b);
        if (_0x5d727b.isTemporary) {
          _0x18f249.isTemporary = true;
        }
        if (_0x18f249.coinsPrice == -0x1 && _0x18f249.data.itemType == "skin") {
          if (!_0x8db18e.prototype.shop.ownedSkins[_0x5d727b.itemName]) {
            _0x8db18e.prototype.shop.ownedSkins[_0x5d727b.itemName] = _0x18f249;
            _0x8db18e.prototype.shop.ownedSkins.push(_0x18f249);
          }
        } else {
          if (_0x18f249.coinsPrice == -0x1 && _0x18f249.data.itemType == "animal") {
            if (!_0x8db18e.prototype.shop.ownedAnimals[_0x5d727b.itemName]) {
              _0x8db18e.prototype.shop.ownedAnimals[_0x5d727b.itemName] = _0x18f249;
              _0x8db18e.prototype.shop.ownedAnimals.push(_0x18f249);
            }
          } else if (_0x18f249.coinsPrice == -0x1 && _0x18f249.data.itemType == "deal") {
            _0x8db18e.prototype.shop.ownedDeals.push(_0x18f249);
          }
        }
        if (_0x5d727b.saleType > -0x1 && _0x5d727b.canBuy == true) {
          _0x1c46af.push(_0x18f249);
        } else {
          _0x2a87d4.push(_0x18f249);
        }
      }
    }
    _0x8db18e.prototype.shop.allItems = _0x1c46af;
    for (d = 0x0; d < _0x8db18e.prototype.shop.ownedDeals.length; d++) {
      var _0x27d6c1 = _0x8db18e.prototype.shop.ownedDeals[d];
      for (s = 0x0; s < _0x1c46af.length; s++) {
        var _0x5d727b = _0x1c46af[s];
        if (_0x5d727b.data.promotions !== undefined && _0x5d727b.data.promotions.length > 0x0) {
          if (_0x5d727b.data.promotions.indexOf(_0x27d6c1.itemName) > -0x1) {
            _0x5d727b.coinsPrice = -0x1;
            if (!_0x8db18e.prototype.shop.ownedSkins[_0x5d727b.data.itemName]) {
              _0x8db18e.prototype.shop.ownedSkins.push(_0x5d727b);
            }
          }
        }
      }
      for (s = 0x0; s < _0x2a87d4.length; s++) {
        var _0x5d727b = _0x2a87d4[s];
        if (_0x5d727b.data.promotions !== undefined && _0x5d727b.data.promotions.length > 0x0) {
          if (_0x5d727b.data.promotions.indexOf(_0x27d6c1.itemName) > -0x1) {
            _0x5d727b.coinsPrice = -0x1;
            if (!_0x8db18e.prototype.shop.ownedSkins[_0x5d727b.data.itemName]) {
              _0x8db18e.prototype.shop.ownedSkins.push(_0x5d727b);
            }
          }
        }
      }
    }
    for (_0x1707f4 = 0x0; _0x1707f4 < _0x8db18e.prototype.shop.allItems.length; _0x1707f4++) {
      _0x8db18e.prototype.shop.allItems[_0x8db18e.prototype.shop.allItems[_0x1707f4].data.itemName] = _0x8db18e.prototype.shop.allItems[_0x1707f4];
    }
    for (t = 0x0; t < _0x18cf24.skins.length; t++) {
      var _0x5490f8 = _0x18cf24.skins[t];
      var _0x40c101 = _0x5490f8.tab;
      var _0x3fc025 = {
        "name": _0x40c101,
        "items": []
      };
      _0x8db18e.prototype.shop.skins.push(_0x3fc025);
      _0x8db18e.prototype.shop.skins[_0x40c101] = _0x3fc025;
      for (_0x1707f4 = 0x0; _0x1707f4 < _0x5490f8.shopItems.length; _0x1707f4++) {
        var _0x5d727b = _0x5490f8.shopItems[_0x1707f4];
        for (a = 0x0; a < _0x1c46af.length; a++) {
          var _0x5eabd6 = _0x1c46af[a];
          if (_0x5d727b.id == _0x5eabd6.id && _0x5eabd6.coinsPrice > -0x1) {
            _0x3fc025.items.push(_0x5eabd6);
          }
        }
      }
    }
    $bus.emit($bus.EVENTS.LOADED_SHOP_DATA, {
      "shopData": {
        ..._0x8db18e.prototype.shop
      },
      "responseObject": _0x36a912
    });
  });
};
_0x8db18e.prototype.ownedItems = new Array();
_0x8db18e.prototype.shop = null;
_0x8db18e.prototype.shopDiv = null;
_0x8db18e.prototype.callback = null;
_0x8db18e.prototype.upgradeMenu_callback = null;
$bus.on($bus.EVENTS.UI_PURCHASE_SHOP_ITEM, _0x4efa9c => {
  _0x4c5cea(_0x4efa9c, function (_0x169424, _0x419262) {
    if (_0x169424) {
      $bus.emit($bus.EVENTS.PURCHASE_ITEM_RESPONSE, {
        "success": true,
        "itemName": _0x4efa9c
      });
      _0x4735a4();
      _0x514d12();
    } else {
      switch (_0x419262) {
        case "alreadyowned":
          $bus.emit($bus.EVENTS.PURCHASE_ITEM_RESPONSE, {
            "success": false,
            "itemName": _0x4efa9c,
            "error": "AccountServer: item already purchased!"
          });
          break;
        case "cantafford":
          $bus.emit($bus.EVENTS.PURCHASE_ITEM_RESPONSE, {
            "success": false,
            "itemName": _0x4efa9c,
            "error": "AccountServer: not enough coins to buy this!"
          });
          break;
        case "itemDoesntExist":
          $bus.emit($bus.EVENTS.PURCHASE_ITEM_RESPONSE, {
            "success": false,
            "itemName": _0x4efa9c,
            "error": "AccountServer: Item doesn't exist!"
          });
          break;
        default:
          $bus.emit($bus.EVENTS.PURCHASE_ITEM_RESPONSE, {
            "success": false,
            "itemName": _0x4efa9c,
            "error": "Failed to purchase item"
          });
          break;
      }
    }
  });
});
_0x8db18e.prototype.getSkinPath = function (_0x7fdc74, _0x517e03) {
  console.log("getskin path");
  var _0x27ebaf = _0x2b451a.createGameObjOfOType(0x2, _0x7fdc74);
  _0x27ebaf.animalType = _0x7fdc74;
  _0x27ebaf.animalSpecies = 0x0;
  _0x27ebaf.animalSubSpecies = 0x0;
  _0x27ebaf.animalPremiumSkin = 0x0;
  _0x27ebaf.curBiome = 0x0;
  _0x27ebaf.lava = 0x64;
  _0x27ebaf.mopeSeasonID = 0x0;
  _0x27ebaf.skinThemeID = _0x517e03;
  var _0x2622d4 = _0x27ebaf.animalInfo();
  var _0x589e55 = _0x27ebaf.getSkinImagePathForShop(_0x2622d4.skinName);
  _0x589e55 = this.ifMultiAssetSkin(_0x7fdc74, _0x589e55);
  return _0x589e55 + ".png";
};
_0x8db18e.prototype.ifMultiAssetSkin = function (_0xb8d18d, _0x11c6fa) {
  switch (_0xb8d18d) {
    case 0x13:
    case 0x1d:
    case 0x1b:
    case 0x14:
    case 0x12:
    case 0x17:
    case _0x3446ed:
      _0x11c6fa = _0x11c6fa;
      break;
  }
  return _0x11c6fa;
};
_0x8db18e.prototype.getPostFixForItem = function (_0x19d547) {
  switch (_0x19d547) {
    case "halloween_pufferMace":
      return "1";
  }
  return null;
};
_0x8db18e.prototype.createField = function (_0x5db18a, _0x544326, _0x137345, _0x3d9179, _0xf4469f) {
  var _0x5b3ac0 = _0x234c5f('', _0x137345);
  var _0x5db18a = _0x234c5f('', _0x3d9179);
  var _0x544326 = _0x234c5f('', _0xf4469f);
  _0x5b3ac0.appendChild(_0x5db18a);
  _0x5b3ac0.appendChild(_0x544326);
  return _0x5b3ac0;
};
_0x8db18e.prototype.addCloseButton = function (_0x30959d) {
  var _0x46c915 = _0xe0b638("div", "close-shop");
  _0x46c915.onclick = function () {
    closeShop();
  };
  _0x46c915.innerHTML = "X";
  _0x30959d.appendChild(_0x46c915);
};
_0x8db18e.prototype.updateCoinsBalance = function () {
  console.log("coins balance updated");
  var _0x2802e8 = _0x46dde7;
  _0x2802e8.level = Math.round(_0x4421b3(0x1, 0xa));
  _0x2802e8.xp = 0x32;
  _0x2802e8.xpNextLvl = _0x2802e8.xp + 0x12c;
  var _0x3b2d94 = Math.round(_0x2802e8.xp);
  var _0x105be4 = document.getElementById("coins");
  if (_0x105be4) {
    _0x105be4.innerHTML = this.coinsFormat(_0xa26ec0());
    var _0x5bd3ae = document.getElementById("userxp-barbar");
    var _0x5d7586 = document.getElementById("userxp-val");
    var _0x249e67 = document.getElementById("userxp-star");
    _0x5d7586.innerHTML = _0x3b2d94 + " / " + _0x2802e8.xpNextLvl;
    _0x3b2d94 = _0x3b2d94 / _0x2802e8.xpNextLvl * 0x64;
    _0x5bd3ae.style.width = _0x3b2d94 + "px";
    _0x249e67.innerHTML = _0x2802e8.level;
  }
  var _0x5ddad8 = document.getElementById("coins2");
  if (_0x5ddad8) {
    _0x5ddad8.innerHTML = _0xa26ec0();
    var _0x5bd3ae = document.getElementById("userxp-barbar2");
    var _0x5d7586 = document.getElementById("userxp-val2");
    var _0x249e67 = document.getElementById("userxp-star2");
    _0x5d7586.innerHTML = _0x3b2d94 + " / " + _0x2802e8.xpNextLvl;
    _0x3b2d94 = _0x3b2d94 / _0x2802e8.xpNextLvl * 0x64;
    _0x5bd3ae.style.width = _0x3b2d94 + "px";
    _0x249e67.innerHTML = _0x2802e8.level;
  }
};
_0x8db18e.prototype.coinsFormat = function (_0x48c617) {
  console.log("coinsFormat");
  var _0x46768c = '' + _0x48c617;
  _0x46768c = _0x46768c.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  return _0x46768c;
};
_0x8db18e.prototype.enableClothingShop = false;
_0x8db18e.prototype.getItemByName = function (_0x31cf8d) {
  if (this.shop.allItems) {
    for (i = 0x0; i < this.shop.allItems.length; i++) {
      if (this.shop.allItems[i].itemName == _0x31cf8d) {
        return this.shop.allItems[i];
      }
    }
  }
  return null;
};
_0x8db18e.prototype.deleteTab = function () {
  var _0x28a570 = document.getElementById("shop_div");
  if (_0x28a570) {
    _0x28a570.parentNode.removeChild(_0x28a570);
  }
};
_0x8db18e.prototype.getShopFilters = function () {};
$bus.on($bus.EVENTS.PLAY_CLICK_SOUND, () => {
  _0x5a53d0();
});
_0x8db18e.prototype.props = {
  "hatsColor": '',
  "beardsColor": '',
  "glassesColor": '',
  "scarfsColor": ''
};
_0x8db18e.prototype.propBought = {
  "hats": {
    "white": 0x1,
    "red": 0x0,
    "green": 0x0,
    "blue": 0x1,
    "pink": 0x0,
    "gold": 0x0
  },
  "beards": {
    "white": 0x0,
    "red": 0x1,
    "green": 0x0,
    "blue": 0x0,
    "pink": 0x0,
    "gold": 0x1
  },
  "glasses": {
    "white": 0x0,
    "red": 0x1,
    "green": 0x1,
    "blue": 0x0,
    "pink": 0x0,
    "gold": 0x0
  },
  "scarfs": {
    "white": 0x0,
    "red": 0x1,
    "green": 0x0,
    "blue": 0x1,
    "pink": 0x0,
    "gold": 0x1
  }
};
_0x8db18e.prototype.hasBoughtProp = function (_0x53c6df, _0x492b5a) {
  var _0x3b0a59 = this.propBought[_0x53c6df][_0x492b5a];
  if (_0x3b0a59 === 0x1) {
    return true;
  }
  return false;
};
_0x8db18e.prototype.isPropSelected = function (_0x5470f3, _0x4c133d) {
  var _0x18dabb = this.getPropColorNum(_0x4c133d);
  var _0x17b510 = this.props[_0x5470f3 + "Color"];
  return _0x17b510 === _0x18dabb;
};
_0x8db18e.prototype.showProp = function (_0x27e7f1) {
  var _0x431527 = document.getElementById("propDisplay");
  _0x431527.style.display = "block";
  var _0x5f4213 = document.getElementById("btn-" + _0x27e7f1);
  if (_0x5f4213) {
    var _0x539744 = document.getElementById("btn-hats");
    var _0x2da3cc = document.getElementById("btn-glasses");
    var _0x445651 = document.getElementById("btn-beards");
    var _0x5af806 = document.getElementById("btn-scarfs");
    _0x539744.className = "clothingbtn";
    _0x2da3cc.className = "clothingbtn";
    _0x445651.className = "clothingbtn";
    _0x5af806.className = "clothingbtn";
    _0x5f4213.className = "clothingbtn selected";
    var _0x55141f = document.getElementById("propColors");
    _0x55141f.innerHTML = '';
    var _0x311226 = _0xe0b638("div", "propColor-white", "propColor propColor-white" + (this.isPropSelected(_0x27e7f1, "white") ? " selected" : '') + (this.hasBoughtProp(_0x27e7f1, "white") ? " bought" : ''));
    var _0x330af0 = _0xe0b638("div", "propColor-red", "propColor propColor-red" + (this.isPropSelected(_0x27e7f1, "red") ? " selected" : '') + (this.hasBoughtProp(_0x27e7f1, "red") ? " bought" : ''));
    var _0x238ead = _0xe0b638("div", "propColor-green", "propColor propColor-green" + (this.isPropSelected(_0x27e7f1, "green") ? " selected" : '') + (this.hasBoughtProp(_0x27e7f1, "green") ? " bought" : ''));
    var _0x2d75b7 = _0xe0b638("div", "propColor-blue", "propColor propColor-blue" + (this.isPropSelected(_0x27e7f1, "blue") ? " selected" : '') + (this.hasBoughtProp(_0x27e7f1, "blue") ? " bought" : ''));
    var _0x4918bf = _0xe0b638("div", "propColor-pink", "propColor propColor-pink" + (this.isPropSelected(_0x27e7f1, "pink") ? " selected" : '') + (this.hasBoughtProp(_0x27e7f1, "pink") ? " bought" : ''));
    var _0x2cefb6 = _0xe0b638("div", "propColor-gold", "propColor propColor-gold" + (this.isPropSelected(_0x27e7f1, "gold") ? " selected" : '') + (this.hasBoughtProp(_0x27e7f1, "gold") ? " bought" : ''));
    _0x311226.appendChild(_0xe0b638("div", '', "color"));
    _0x330af0.appendChild(_0xe0b638("div", '', "color"));
    _0x238ead.appendChild(_0xe0b638("div", '', "color"));
    _0x2d75b7.appendChild(_0xe0b638("div", '', "color"));
    _0x4918bf.appendChild(_0xe0b638("div", '', "color"));
    _0x2cefb6.appendChild(_0xe0b638("div", '', "color"));
    _0x311226.onclick = function () {
      _0x4ecbfe.setPropColor(_0x27e7f1, "white");
    };
    _0x330af0.onclick = function () {
      _0x4ecbfe.setPropColor(_0x27e7f1, "red");
    };
    _0x238ead.onclick = function () {
      _0x4ecbfe.setPropColor(_0x27e7f1, "green");
    };
    _0x2d75b7.onclick = function () {
      _0x4ecbfe.setPropColor(_0x27e7f1, "blue");
    };
    _0x4918bf.onclick = function () {
      _0x4ecbfe.setPropColor(_0x27e7f1, "pink");
    };
    _0x2cefb6.onclick = function () {
      _0x4ecbfe.setPropColor(_0x27e7f1, "gold");
    };
    _0x55141f.appendChild(_0x311226);
    _0x55141f.appendChild(_0x330af0);
    _0x55141f.appendChild(_0x238ead);
    _0x55141f.appendChild(_0x2d75b7);
    _0x55141f.appendChild(_0x4918bf);
    _0x55141f.appendChild(_0x2cefb6);
    var _0x1b6590 = document.getElementById("propBuyDiv");
    _0x1b6590.innerHTML = '';
  }
};
_0x8db18e.prototype.propAnimal = null;
_0x8db18e.prototype.updatePropsForAnimal = function () {
  console.log(this.props);
  var _0x13a30c = _0x2ebefb;
  var _0x2289c8 = _0x2b451a.createGameObjOfOType(0x2, _0x13a30c);
  _0x2289c8.animalType = _0x13a30c;
  _0x2289c8.animalSpecies = 0x0;
  _0x2289c8.animalSubSpecies = 0x0;
  _0x2289c8.animalPremiumSkin = 0x0;
  var _0x1718ce = _0x234c5f('', "propimg");
  var _0x3d40bd = _0x234c5f('', "propimg");
  var _0x23dd8a = _0x234c5f('', "propimg");
  var _0xebf56f = _0x234c5f('', "propimg");
  var _0x2c63b3 = _0x234c5f('', "propimg");
  var _0xa1ad39 = document.getElementById("propAnimal");
  _0xa1ad39.innerHTML = '';
  var _0x203c9d = "skins/" + _0x2289c8.animalInfo().skinName + ".png";
  var _0x48a512 = "/props/" + _0x13a30c + "/beards/" + this.props.beardsColor + ".png";
  var _0x45764b = "/props/" + _0x13a30c + "/hats/" + this.props.hatsColor + ".png";
  var _0x2e0d3b = "/props/" + _0x13a30c + "/scarfs/" + this.props.scarfsColor + ".png";
  var _0x3ab321 = "/props/" + _0x13a30c + "/glasses/" + this.props.glassesColor + ".png";
  console.log(_0x48a512);
  _0x3d40bd.style.backgroundImage = "url(" + _0x48a512 + ")";
  _0x1718ce.style.backgroundImage = "url(" + _0x203c9d + ")";
  _0x23dd8a.style.backgroundImage = "url(" + _0x45764b + ")";
  _0xebf56f.style.backgroundImage = "url(" + _0x2e0d3b + ")";
  _0x2c63b3.style.backgroundImage = "url(" + _0x3ab321 + ")";
  _0xa1ad39.appendChild(_0x3d40bd);
  _0xa1ad39.appendChild(_0x1718ce);
  _0xa1ad39.appendChild(_0xebf56f);
  _0xa1ad39.appendChild(_0x2c63b3);
  _0xa1ad39.appendChild(_0x23dd8a);
};
_0x8db18e.prototype.getPropColorNum = function (_0xf2437d) {
  switch (_0xf2437d) {
    case "white":
      return 0x0;
    case "red":
      return 0x1;
    case "green":
      return 0x2;
    case "blue":
      return 0x3;
    case "pink":
      return 0x4;
    case "gold":
      return 0x5;
  }
};
_0x8db18e.prototype.setPropColor = function (_0xa5328b, _0x5cc447) {
  var _0x178afd = _0xa5328b + "Color";
  var _0x190797 = document.getElementById("propColor-" + _0x5cc447);
  var _0x62d845 = document.getElementById("propColor-red");
  var _0x251aac = document.getElementById("propColor-green");
  var _0x3bfa42 = document.getElementById("propColor-blue");
  var _0x346909 = document.getElementById("propColor-pink");
  var _0x5a56c6 = document.getElementById("propColor-white");
  var _0x566cfc = document.getElementById("propColor-gold");
  _0x62d845.className = "propColor propColor-red" + (this.hasBoughtProp(_0xa5328b, "red") ? " bought" : '');
  _0x251aac.className = "propColor propColor-green" + (this.hasBoughtProp(_0xa5328b, "green") ? " bought" : '');
  _0x3bfa42.className = "propColor propColor-blue" + (this.hasBoughtProp(_0xa5328b, "blue") ? " bought" : '');
  _0x346909.className = "propColor propColor-pink" + (this.hasBoughtProp(_0xa5328b, "pink") ? " bought" : '');
  _0x5a56c6.className = "propColor propColor-white" + (this.hasBoughtProp(_0xa5328b, "white") ? " bought" : '');
  _0x566cfc.className = "propColor propColor-gold" + (this.hasBoughtProp(_0xa5328b, "gold") ? " bought" : '');
  var _0xa28749 = document.getElementById("propBuyDiv");
  _0xa28749.innerHTML = '';
  var _0x5c9f8a = _0xe0b638("div", "propBuyBtn", "buybutton");
  _0x5c9f8a.onclick = function () {
    alert("buy prop: " + _0xa5328b + " color: " + _0x5cc447);
  };
  if (this.isPropSelected(_0xa5328b, _0x5cc447)) {
    this.props[_0x178afd] = '';
    _0x190797.className = "propColor propColor-" + _0x5cc447;
  } else {
    this.props[_0x178afd] = this.getPropColorNum(_0x5cc447);
    _0x190797.className = "propColor propColor-" + _0x5cc447 + " selected";
    if (!this.hasBoughtProp(_0xa5328b, _0x5cc447)) {
      var _0x23380c = new Image();
      _0x23380c.className = "buycoin-img";
      _0x23380c.src = "shop/mopecoin.png";
      var _0x305abf = _0xe0b638("span", '', "buycoin-price");
      _0x305abf.innerHTML = 0x64 + this.getPropColorNum(_0x5cc447) * 0x64;
      _0x5c9f8a.appendChild(_0x23380c);
      _0x5c9f8a.appendChild(_0x305abf);
      _0xa28749.appendChild(_0x5c9f8a);
    }
  }
  this.updatePropsForAnimal();
};
_0x8db18e.prototype.curTabPage = 0x0;
_0x8db18e.prototype.version = 0.2;
_0x8db18e.prototype.playerSettings_update = function (_0xc48b4c) {
  console.log("update: " + _0xc48b4c);
  _0xd29c8a(_0xc48b4c, function (_0x1e1c68, _0x36df33) {
    if (_0x1e1c68) {
      _0x54e075("Settings updated successfully!", "success", 0x5);
      $bus.emit($bus.EVENTS.SHOP_SETTING_CHANGED, _0xc48b4c);
      _0x4735a4();
      _0x514d12(true);
    } else {
      switch (_0x36df33) {
        case "alreadyowned":
          _0x54e075("AccountServer: item already purchased!", _0x36df33, 0xf);
          break;
        case "cantafford":
          _0x54e075("AccountServer: not enough coins to buy this!", _0x36df33, 0xf);
          break;
        case "urlnotfound":
          _0x54e075("AccountServer: Can't reach server at this moment!", "itemDoesntExist", 0xf);
          break;
      }
    }
  });
};
window.MopeShop = _0x8db18e;
var _0x4ecbfe = new _0x8db18e();
$bus.on($bus.EVENTS.UI_SHOP_SETTING_ACTION, _0xfc10d9 => {
  _0x4ecbfe.playerSettings_update(_0xfc10d9);
});
function _0x218804(_0x285b2f) {
  var _0x512d4f = _0xe0b638("input", "txtCopy");
  _0x512d4f.setAttribute("type", "text");
  _0x512d4f.setAttribute("value", _0x285b2f);
  console.log(_0x512d4f);
  _0x512d4f.select();
  _0x512d4f.setSelectionRange(0x0, 0x1869f);
  document.execCommand("copy");
  alert("Copied the text: " + _0x512d4f.value);
}
_0x4ecbfe.loadData();
_0x8db18e.prototype.getAnimalInfo = function (_0x361e42, _0x37c2bf) {
  switch (_0x361e42) {
    case "sampleTestSkin":
      return [_0x2ebefb, 0xfa, "Sample Mouse", "land/mouse/250/mouse"];
    case "summer21_seamonster":
      return [_0x2fcf20, 0xc9, "Ancient Tortoise", "ocean/seamonster/201/seamonster"];
    case "summer21_puffer":
      return [_0x3446ed, 0xc9, "Omniball Puffer", "ocean/pufferfish/201/pufferfish"];
    case "summer21_turtle":
      return [_0x1473db, 0xc9, "Kiwi Turtle", "ocean/turtle/201/turtle"];
    case "summer21_octopus":
      return [_0x1e1d71, 0xc9, "Fuchsia Tiger", "ocean/octopus/201/octopus.ui"];
    case "summer21_orca":
      return [_0x267cc6, 0xc9, "Lifeguard Orca", "ocean/killerwhale/201/killerwhale"];
    case "summer21_iceMonster":
      return [_0xc3cf49, 0xc9, "Cryo Coach Monster", "arctic/icemonster/201/icemonster"];
    case "summer21_mammoth":
      return [_0x3af7d1, 0xc9, "Lost Tourist", "arctic/mammoth/201/mammoth"];
    case "summer21_crab":
      return [_0x1515a4, 0xc9, "Coconut Crab", "ocean/crab/201/crab"];
    case "summer21_hare":
      return [_0x197269, 0xc9, "Snow Cone Hare", "arctic/arctichare/201/arctichare"];
    case "summer21_shrimp":
      return [_0x46f565, 0xc9, "Chef Shrimp", "ocean/shrimp/201/shrimp"];
    case "summer21_walrus":
      return [_0x517417, 0xc9, "Walrusmelon", "arctic/walrus/201/walrus"];
    case "summer21_squid":
      return [_0x50e755, 0xc9, "Seacoast Squid", "ocean/squid/201/squid.ui"];
    case "summer21_fox":
      return [_0x1dbdce, 0xc9, "Forest Sprit Fox", "arctic/arcticfox/201/arcticfox"];
    case "summer21_seal":
      return [_0x40a896, 0xc9, "Hawaiian Monk", "arctic/seal/201/seal"];
    case "summer21_wolf":
      return [_0x26fb25, 0xc9, "Pineapple Wolf", "arctic/wolf/201/wolf"];
    case "summer21_markhor":
      return [_0xa31c83, 0xc9, "Fruity Ice Markhor", "arctic/markhor/201/1/markhor"];
    case "summer21_warthog":
      return [_0x432bf5, 0xc9, "Flame Tiki", "desert/warthog/201/warthog"];
    case "summer21_chicken":
      return [_0x6025f6, 0xc9, "Countryside Chick", "land/chicken/201/chicken"];
    case "summer21_owl":
      return [_0x5002ba, 0xc9, "Snowy Owrigami", "arctic/snowyowl/201/snowyowl"];
    case "summer21_zebra":
      return [_0x25dccf, 0xc9, "Playground Zebra", "land/zebra/201/zebra"];
    case "summer21_croc":
      return [_0x4bb269, 0xc9, "Big Hoss", "land/croc/0/201/croc"];
    case "summer21_meerkat":
      return [_0x10db93, 0xc9, "Scubakat", "desert/meerkat/201/meerkat"];
    case "summer21_rhino":
      return [_0x3040c9, 0xc9, "Shrub Rhino", "land/rhino/201/rhino"];
    case "summer21_elephant":
      return [_0x166f22, 0xc9, "Leiphant", "land/elephant/0/201/elephant"];
    case "summer21_pig":
      return [_0x2e9b2f, 0xc9, "Floaty Pig", "land/pig/201/pig"];
    case "summer21_camel":
      return [_0xd21fde, 0xc9, "Balloon Warrior", "desert/camel/201/camel"];
    case "summer21_hyena":
      return [_0x42fa0c, 0xc9, "DJ Hyena", "desert/hyena/201/hyena"];
    case "summer21_gorilla":
      return [_0x4dd4dc, 0xc9, "Explorer Ape", "land/gorilla/0/201/gorilla"];
    case "summer21_squishyYeti":
      return [_0x4b1170, 0xc9, "Squishy Yeti", "arctic/yeti/201/yeti"];
    case "summer21_squishyKraken":
      return [_0x301ddb, 0xc9, "Squishy Kraken", "ocean/kraken/201/kraken"];
    case "summer21_squishyDragon":
      return [_0x578001, 0xc9, "Squishy Dragon", "land/dragon/0/201/dragon"];
    case "summer21_mermaidWhale":
      return [_0x351d94, 0xc9, "Mermaid Whale", "ocean/bluewhale/0/201/bluewhale"];
    case "summer21_seafoamJellyfish":
      return [_0x16cf7a, 0xc9, "Seafoam Jellyfish", "ocean/jellyfish/201/jellyfish"];
    case "summer21_bubblyMouse":
      return [_0x2ebefb, 0xc9, "Bubbly Mouse", "land/mouse/201/mouse"];
    case "summer21_surfboardChomper":
      return [_0x4ebe0d, 0xc9, "Surfboard Chomper", "ocean/shark/201/shark"];
    case "summer21_surferPenguin":
      return [_0x112e88, 0xc9, "Surfer Penguin", "arctic/penguin/201/penguin"];
    case "summer21_waterGunHorse":
      return [_0xe6b188, 0xc9, "Water Gun Horse", "ocean/seahorse/201/seahorse"];
    case "summer21_sunburnReindeer":
      return [_0x21e8e0, 0xc9, "Sunburn Reindeer", "arctic/reindeer/201/reindeer"];
    case "summer21_surfboardSwordfish":
      return [_0x5f4a90, 0xc9, "Surfboardfish", "ocean/swordfish/0/201/swordfish"];
    case "summer21_popsicleTrout":
      return [_0x5c1699, 0xc9, "Popsicle Trout", "ocean/trout/0/201/trout"];
    case "summer21_playfulChipmunk":
      return [_0x1b70a9, 0xc9, "Playful Munk", "arctic/chipmunk/201/chipmunk"];
    case "summer21_fireworkOx":
      return [_0x89ca62, 0xc9, "Fireworks Ox", "arctic/muskox/201/muskox"];
    case "summer21_chocolateStingray":
      return [_0x1bc4f4, 0xc9, "Chocolate Ray", "ocean/stingray/201/stingray.ui"];
    case "summer21_connoisseurBear":
      return [_0x3146b2, 0xc9, "Cola Connoisseur", "arctic/bear/201/bear"];
    case "summer21_coralQueen":
      return [_0x42d03d, 0xc9, "Coral Queen", "arctic/snowleopard/201/snowleopard"];
    case "summer21_strawbertoothTiger":
      return [_0x542f57, 0xc9, "Strawbertooth", "arctic/sabertooth/201/sabertooth"];
    case "skin_leatherBackTurtle":
      return [_0x1473db, 0xc8, "Leather Back\nTurtle", "ocean/turtle/200/turtle"];
    case "skin_celestialCobra":
      return [_0x22c8fa, 0xc8, "Celestial Cobra", "land/cobra/200/cobra"];
    case "skin_brazenBull":
      return [_0x89ca62, 0xc8, "Brazen Bull", "arctic/muskox/200/muskox"];
    case "skin_luckyCharmMonster":
      return [_0x2fcf20, 0xc8, "Luckycharm Monster", "ocean/seamonster/200/seamonster"];
    case "skin_iceToucan":
      return [_0x386e05, 0xc8, "Ice Toucan", "land/toucan/200/toucan"];
    case "skin_clowoudLion":
      return [_0x527d90, 0xc8, "Clowoud Lion", "land/lion/200/0/lion"];
    case "skin_sunsetClowoudLion":
      return [_0x527d90, 0xc8, "Sunset\nClowoud Lion", "land/lion/200/1/lion"];
    case "skin_stormClowoudLion":
      return [_0x527d90, 0xc8, "Storm\nClowoud Lion", "land/lion/200/2/lion"];
    case "skin_kaijuRex":
      return [_0x43c61f, 0xc8, "Kaiju Rex", "land/trex/200/trex"];
    case "skin_warTHog":
      return [_0x432bf5, 0xc8, "WarT. Hog", "desert/warthog/200/warthog"];
    case "skin_velvetChimp":
      return [_0x33c563, 0xc8, "Velvet\nChipmunk", "desert/chipmunk/200/chipmunk"];
    case "skin_aquaPhoenix":
      return [_0x21817a, 0xc8, "Aqua Phoenix", "volcano/phoenix/200/0/phoenix"];
    case "skin_icePhoenix":
      return [_0x21817a, 0xc8, "Ice Phoenix", "volcano/phoenix/200/1/phoenix"];
    case "skin_ashPhoenix":
      return [_0x21817a, 0xc8, "Ash Phoenix", "volcano/phoenix/200/2/phoenix"];
    case "skin_redGiantPhoenix":
      return [_0x21817a, 0xc8, "Red Giant\nPhoenix", "volcano/phoenix/200/3/phoenix"];
    case "skin_goofyDragon":
      return [_0x578001, 0xc8, "Goofy Dragon", "land/dragon/0/101/dragon"];
    case "skin_desertDragon":
      return [_0x578001, 0xc8, "Desert Dragon", "land/dragon/0/102/dragon"];
    case "skin_forgeDragon":
      return [_0x578001, 0xc8, "Forge Dragon", "land/dragon/0/103/dragon"];
    case "skin_mythicalSerpent":
      return [_0x578001, 0xc8, "Mythical Serpent", "land/dragon/0/104/dragon"];
    case "skin_fireyDragon":
      return [_0x578001, 0xc8, "Firey Dragon", "land/dragon/0/105/dragon"];
    case "skin_technoSaber":
      return [_0x542f57, 0xc8, "Techno\nSabertooth", "arctic/sabertooth/200/sabertooth"];
    case "skin_iceFox":
      return [_0x3d4e92, 0xc8, "Ice Fox", "arctic/arcticfox/200/arcticfox"];
    case "skin_clownfish":
      return [_0x5c1699, 0xc8, "Clownfish", "ocean/trout/0/200/trout"];
    case "skin_tullyMonster":
      return [_0xe6b188, 0xc8, "Tully\nMonster", "ocean/seahorse/200/seahorse"];
    case "skin_vampireSquid":
      return [_0x1e1d71, 0xc8, "Vampire\nSquid", "ocean/octopus/200/octopus"];
    case "skin_cuttlefish":
      return [_0x50e755, 0xc8, "Cuttle Fish", "ocean/squid/200/squid"];
    case "skin_deluxeShrimp":
      return [_0x46f565, 0xc8, "Deluxe\nShrimp", "ocean/shrimp/200/shrimp"];
    case "skin_monochromeRabbit":
      return [_0x5ebc28, 0xc8, "Monochrome\nRabbit", "land/rabbit/200/rabbit"];
    case "skin_nightFox":
      return [_0x1dbdce, 0xc8, "Thief of\nThe Night", "land/fox/200/fox"];
    case "skin_plagueRaptor":
      return [_0x4b67a0, 0xc8, "Plague\nRaptor", "land/peacock/200/peacock.ui"];
    case "skin_titanBison":
      return [_0x5295d3, 0xc8, "Titan Bison", "desert/bison/200/bison"];
    case "skin_dowagerVarande":
      return [_0x57279a, 0xc8, "Dowager Varande", "desert/komododragon/200/0/komodo"];
    case "skin_emeprorVarande":
      return [_0x57279a, 0xc8, "Emepror Varande", "desert/komododragon/200/1/komodo"];
    case "skin_rubyDevil":
      return [_0x30afcb, 0xc8, "Ruby Devil", "land/dinomonster/200/dinomonster"];
    case "skin_metalicCrab":
      return [_0x1515a4, 0xc8, "Metallic Crab", "ocean/crab/200/crab"];
    case "skin_queenFlame":
      return [_0x330b14, 0xc8, "Queen Flame", "volcano/kingdragon/200/kingdragon"];
    case "halloween_wyrmous":
      return [_0x22c8fa, 0x64, "Wyrmous", "land/cobra/100/cobra"];
    case "halloween_equusthulhu":
      return [_0x39640d, 0x64, "Equusthulhu", "land/donkey/100/donkey"];
    case "halloween_frostaline":
      return [_0x42d03d, 0x64, "Frostaline", "arctic/snowleopard/100/snowleopard"];
    case "halloween_pufferMace":
      return [_0x3446ed, 0x64, "Puffermace", "ocean/pufferfish/100/pufferfish"];
    case "halloween_carnageodactyl":
      return [_0x3032f7, 0x64, "Carnageodactyl", "desert/pterodactyl/100/pterodactyl_ability"];
    case "halloween_mrDollar":
      return [_0x43c61f, 0x64, "Mr. Dollar", "land/trex/100/trex"];
    case "halloween_wendigoDeer":
      return [_0x356eb6, 0x64, "The Wendigo", "land/deer/100/deer"];
    case "halloween_cactiRat":
      return [_0x33fcaa, 0x64, "Cacti Rat", "desert/kangaroorat/100/kangaroorat"];
    case "halloween_hiPower":
      return [_0x49fd90, 0x64, "Swampster", "land/hippo/100/hippo"];
    case "halloween_puumpkat":
      return [_0x10db93, 0x64, "Puumpkat", "desert/meerkat/100/meerkat"];
    case "halloween_doomedarius":
      return [_0xd21fde, 0x64, "The Doomedarius", "desert/camel/100/camel"];
    case "halloween_roboMouse":
      return [_0x2ebefb, 0x64, "Robo Mouse", "land/mouse/100/mouse"];
    case "halloween_uncleSam":
      return [_0x4bb269, 0x64, "Uncle Sam", "land/croc/0/100/croc"];
    case "halloween_zombieMole":
      return [_0x4ddfd4, 0x64, "Zombie Mole", "land/mole/100/mole"];
    case "halloween_flammyHart":
      return [_0x5af123, 0x64, "Flammy Hart", "desert/gazelle/100/gazelle"];
    case "halloween_gummyViper":
      return [_0x1bbb89, 0x64, "Gummy Viper", "desert/rattlesnake/100/rattlesnake"];
    case "halloween_grimRipper":
      return [_0x4dd4dc, 0x64, "Grim Reaper", "land/gorilla/0/100/gorilla"];
    case "halloween_bigCookie":
      return [_0x4fa2e5, 0x64, "Big Cookie", "land/bigcat/100/bigcat"];
    case "halloween_gargolgon":
      return [_0x578001, 0x64, "The Gargon", "land/dragon/0/100/dragon"];
    case "halloween_candyRus":
      return [_0x517417, 0x64, "Candy Rus", "arctic/walrus/100/walrus"];
    case "halloween_mantilian":
      return [_0x527d90, 0x64, "The Mantilian", "land/lion/100/lion"];
    case "halloween_phantomRay":
      return [_0x1bc4f4, 0x64, "Phantom Ray", "ocean/stingray/100/stingray"];
    case "halloween_suitedToucan":
      return [_0x386e05, 0x64, "The Dapper", "land/toucan/100/toucan"];
    case "halloween_vulgeist":
      return [_0xcb2b53, 0x64, "The Vulgeist", "desert/vulture/100/vulture"];
    case "halloween_burlone":
      return [_0x432bf5, 0x64, "The Burlone", "desert/warthog/100/warthog"];
    case "halloween_unicornze":
      return [_0x25dccf, 0x64, "Unicornze", "land/zebra/100/zebra"];
    case "gold_blackDragon":
      return [_0x1a6650, 0x1, "Golden\nBlack Dragon", "volcano/blackdragon/1/blackdragon"];
    case "gold_kingDragon":
      return [_0x330b14, 0x1, "Golden\nKing Dragon", "volcano/kingdragon/1/kingdragon"];
    case "gold_Dragon":
      return [_0x578001, 0x1, "Golden\nDragon", "land/dragon/0/1/dragon"];
    case "gold_kraken":
      return [_0x301ddb, 0x1, "Golden\nKraken", "ocean/kraken/1/kraken"];
    case "gold_yeti":
      return [_0x4b1170, 0x1, "Golden\nYeti", "arctic/yeti/1/yeti"];
    case "gold_trex":
      return [_0x43c61f, 0x1, "Golden\nT.Rex", "land/trex/1/trex"];
    case "gold_kingCrab":
      return [_0x3db2bf, 0x1, "Golden\nCrab", "ocean/kingcrab/1/kingcrab"];
    case "gold_phoenix":
      return [_0x21817a, 0x1, "Golden\nPhoenix", "volcano/phoenix/1/phoenix"];
    case "gold_pterodactyl":
      return [_0x3032f7, 0x1, "Golden\nPterodactyl", "desert/pterodactyl/1/pterodactyl_ability"];
    case "gold_iceMonster":
      return [_0xc3cf49, 0x1, "Golden\nIce Monster", "arctic/icemonster/1/icemonster"];
    case "gold_dinoMonster":
      return [_0x30afcb, 0x1, "Golden\nDino Monster", "land/dinomonster/1/dinomonster"];
    case "gold_seaMonster":
      return [_0x2fcf20, 0x1, "Golden\nSea Monster", "ocean/seamonster/1/seamonster"];
    case "gold_landMonster":
      return [_0x23a03f, 0x1, "Golden\nLand Monster", "volcano/landmonster/0/1/landmonster"];
    case "gold_giantScorion":
      return [_0x2a5063, 0x1, "Golden\nGiant Scorpion", "desert/scorpion/1/giantscorpion"];
    case "gold_bluewhale":
      return [_0x351d94, 0x1, "Golden\nBlue Whale", "ocean/bluewhale/0/1/bluewhale"];
    case "gold_elephant":
      return [_0x166f22, 0x1, "Golden\nElephant", "land/elephant/1/elephant"];
    case "gold_cassowary":
      return [_0x1f9f6d, 0x1, "Golden\nCassowary", "land/cassowary/1/cassowary"];
    case "gold_giantspider":
      return [_0x5b3559, 0x1, "Golden\nGiant Spider", "land/giantspider/1/giantspider"];
    case "gold_blackwidow":
      return [_0xcb5cf3, 0x1, "Golden\nBlackwidow", "desert/blackwidow/0/1/blackwidow"];
    case "gold_mammoth":
      return [_0x3af7d1, 0x1, "Golden\nMammoth", "arctic/mammoth/1/mammoth"];
    case "gold_hippo":
      return [_0x49fd90, 0x1, "Golden\nHippo", "land/hippo/1/hippo"];
    case "gold_ostrich":
      return [_0x4f3bf1, 0x1, "Golden\nOstrich", "land/ostrich/1/ostrich"];
    case "gold_boa":
      return [_0x479786, 0x1, "Golden\nBoa", "land/boaconstrictor/1/boaconstrictor"];
    case "gold_komodo":
      return [_0x57279a, 0x1, "Golden\nKomodo", "desert/komododragon/1/komodo"];
    case "gold_killerwhale":
      return [_0x267cc6, 0x1, "Golden\nKiller Whale", "ocean/killerwhale/1/killerwhale"];
    case "gold_sabertooth":
      return [_0x542f57, 0x1, "Golden\nSabertooth", "arctic/sabertooth/1/sabertooth"];
    case "skin_blueDragon":
      return [_0x1a6650, 0x2, "The\nAzure Bringer", "volcano/blackdragon/2/blackdragon"];
    case "skin_kingRipper":
      return [_0x330b14, 0x2, "King\nRipper", "volcano/kingdragon/2/kingdragon"];
    case "skin_kingStan":
      return [_0x330b14, 0x3, "King\nStan", "volcano/kingdragon/3/kingdragon"];
    case "skin_kingShah":
      return [_0x330b14, 0x4, "King\nShah", "volcano/kingdragon/4/kingdragon"];
    case "skin_dragon_gray":
      return [_0x578001, 0x2, "Knight\nDragon", "land/dragon/0/2/dragon"];
    case "skin_kraken_cyan":
      return [_0x301ddb, 0x2, "Chromatic\nKraken", "ocean/kraken/2/kraken"];
    case "skin_yeti_emerald":
      return [_0x4b1170, 0x2, "Emerald\nYeti", "arctic/yeti/2/yeti"];
    case "skin_snowman":
      return [_0x356343, 0x1, "The\nSnowman", "arctic/snowman/1/snowman"];
    case "skin_snowgirl":
      return [_0x356343, 0x2, "The\nSnowgirl", "arctic/snowman/2/snowgirl"];
    case "skin_trex_gray":
      return [_0x43c61f, 0x2, "Ember\nT.Rex", "land/trex/2/trex"];
    case "skin_kingCrab":
      return [_0x3db2bf, 0x2, "Amethyst\nCrab", "ocean/kingcrab/2/kingcrab"];
    case "skin_phoenix_blue":
      return [_0x21817a, 0x2, "Alpha\nPhoenix", "volcano/phoenix/2/phoenix"];
    case "skin_pterodactyl_green":
      return [_0x3032f7, 0x2, "Emerald\nPterodactyl", "desert/pterodactyl/2/pterodactyl_ability"];
    case "skin_iceMonster":
      return [_0xc3cf49, 0x2, "Amethyst\nMonster", "arctic/icemonster/2/icemonster"];
    case "skin_dinoMonster":
      return [_0x30afcb, 0x2, "Citrine\nMonster", "land/dinomonster/2/dinomonster"];
    case "skin_seaMonster":
      return [_0x2fcf20, 0x2, "Sapphire\nMonster", "ocean/seamonster/2/seamonster"];
    case "skin_landMonster":
      return [_0x23a03f, 0x2, "Titanite\nMonster", "volcano/landmonster/0/2/landmonster"];
    case "skin_orangeScorpion":
      return [_0x2a5063, 0x2, "Carnelian\nScorpion", "desert/scorpion/2/giantscorpion"];
    case "skin_bluewhale":
      return [_0x351d94, 0x2, "Albino\nBlue Whale", "ocean/bluewhale/0/2/bluewhale"];
    case "skin_elephant":
      return [_0x166f22, 0x2, "White\nElephant", "land/elephant/2/elephant"];
    case "skin_cassowary":
      return [_0x1f9f6d, 0x2, "Cotton\nCassowary", "land/cassowary/2/cassowary"];
    case "skin_giantspider":
      return [_0x5b3559, 0x2, "Goliath\nSpider", "land/giantspider/2/giantspider"];
    case "skin_blackwidow":
      return [_0xcb5cf3, 0x2, "Queen\nBlackwidow", "desert/blackwidow/0/2/blackwidow"];
    case "skin_mammoth":
      return [_0x3af7d1, 0x2, "Black\nMammoth", "arctic/mammoth/2/mammoth"];
    case "skin_hippo":
      return [_0x49fd90, 0x2, "Pygmy\nHippo", "land/hippo/2/hippo"];
    case "skin_ostrich":
      return [_0x4f3bf1, 0x2, "Ruffled\nOstrich", "land/ostrich/2/ostrich"];
    case "skin_boa":
      return [_0x479786, 0x2, "Tree\nBoa", "land/boaconstrictor/2/boaconstrictor"];
    case "skin_komodo":
      return [_0x57279a, 0x2, "Night\nKomodo", "desert/komododragon/2/komodo"];
    case "skin_killerwhale":
      return [_0x267cc6, 0x2, "Albino\nOrca", "ocean/killerwhale/2/killerwhale"];
    case "skin_sabertooth":
      return [_0x542f57, 0x2, "Margala\nSabertooth", "arctic/sabertooth/2/sabertooth"];
    case "skin_tigerShark":
      return [_0x4ebe0d, 0x2, "Tiger\nShark", "ocean/shark/1/shark"];
    case "skin_hamerHeadShark":
      return [_0x4ebe0d, 0x3, "Hammerhead\nShark", "ocean/shark/2/shark"];
    case "skin_panda":
      return [_0x54ab20, 0x2, "Panda", "land/panda/panda"];
    case "skin_zonkey":
      return [_0x39640d, 0x3, "Zonkey", "land/donkey/2/zonkey"];
    case "skin_okapi":
      return [_0x25dccf, 0x2, "Okapi", "land/okapi/okapi"];
    case "skin_giantCroc":
      return [_0x4bb269, 0x1, "Giant\nCrocodile", "land/croc/0/1/croc"];
    case "skin_purpleMouse":
      return [_0x2ebefb, 0x2, "Purple\nMouse", "land/mouse/2/mouse"];
    case "skin_prismaToucan":
      return [_0x386e05, 0x6, "Prisma\nToucan", "land/toucan/6/toucan"];
    case "gold_mouse":
      return [_0x2ebefb, 0x2, "Golden\nMouse", "land/mouse/1/mouse"];
    case "skin_queenScarlet":
      return [_0x330b14, 0x5, "Queen\nScarlet", "volcano/kingdragon/5/kingdragon"];
    case "skin_queenCeleste":
      return [_0x330b14, 0x6, "Queen\nCeleste", "volcano/kingdragon/6/kingdragon"];
    case "skin_bigFoot":
      return [_0xb061ee, 0x1, "The\nBigfoot", "land/bigfoot/1/thebigfoot"];
    case "skin_woollyRhino":
      return [_0x3040c9, 0x3, "Woolly\nRhino", "land/rhino/3/rhino"];
    case "darkPlagueRat":
      return [_0x2ebefb, 0xcc, "Dark Plague\nRat", "land/mouse/204/0/mouse"];
    case "lightPlagueRat":
      return [_0x2ebefb, 0xcc, "Light Plague\nRat", "land/mouse/204/1/mouse"];
    case "carrotRabbit":
      return [_0x5ebc28, 0xcc, "Carrot\nRabbit", "land/rabbit/204/rabbit"];
    case "darkMatterCrab":
      return [_0x1515a4, 0xcc, "Dark Matter\nCrab", "ocean/crab/204/crab"];
    case "necromancerMeerkat":
      return [_0x10db93, 0xcc, "Necromancer\nMeerkat", "desert/meerkat/204/meerkat"];
    case "butcherPig":
      return [_0x2e9b2f, 0xcc, "Butcher\nPig", "land/pig/204/0/pig"];
    case "hotdogPig":
      return [_0x2e9b2f, 0xcc, "Hot Dog\nPig", "land/pig/204/1/pig"];
    case "voidScuttlingSquid":
      return [_0x50e755, 0xcc, "Void Scuttling\nSquid", "ocean/squid/204/squid"];
    case "spideer":
      return [_0x21e8e0, 0xcc, "Spideer", "arctic/reindeer/204/reindeer"];
    case "blackAsuraFox":
      return [_0x1dbdce, 0xcc, "Black Asura\nFox", "land/fox/204/fox"];
    case "candyCornWarthog":
      return [_0x432bf5, 0xcc, "Candy Corn\nWarthog", "desert/warthog/204/warthog"];
    case "phantomGorilla":
      return [_0x4dd4dc, 0xcc, "Phantom\nGorilla", "land/gorilla/0/204/gorilla.ui"];
    case "martianLeopard":
      return [_0x42d03d, 0xcc, "Martian\nLeopard", "arctic/snowleopard/204/snowleopard"];
    case "genieCheetah":
      return [_0x4fa2e5, 0xcc, "Genie\nCheetah", "land/bigcat/204/cheetah"];
    case "chimeraTiger":
      return [_0x3a6833, 0xcc, "Chimera\nTiger", "land/tiger/204/tiger"];
    case "acidHusk":
      return [_0xcb2b53, 0xcc, "Acid\nHusk", "desert/vulture/204/vulture"];
    case "acutiRhino":
      return [_0x3040c9, 0xcc, "Acuti\nRhino", "land/rhino/204/rhino"];
    case "goldenDevilGoat":
      return [_0xa31c83, 0xcc, "Golden Devil\nGoat", "arctic/markhor/204/2/markhor"];
    case "sunHippo":
      return [_0x49fd90, 0xcc, "Sun\nHippo", "land/hippo/204/hippo"];
    case "smileSpider":
      return [_0x5b3559, 0xcc, "Smile\nSpider", "land/giantspider/204/giantspider"];
    case "bloodwidowSpider":
      return [_0xcb5cf3, 0xcc, "Bloodwidow\nSpider", "desert/blackwidow/0/204/blackwidow"];
    case "basiliskCassowary":
      return [_0x1f9f6d, 0xcc, "Basilisk\nCassowary", "land/cassowary/204/cassowary"];
    case "magmaDragon":
      return [_0x578001, 0xcc, "Magma\nDragon", "land/dragon/0/204/dragon"];
    case "plasmacoreKingCrab":
      return [_0x3db2bf, 0xcc, "Plasma-core King\nCrab", "ocean/kingcrab/204/kingcrab"];
    case "frostWolf":
      return [_0x4b1170, 0xcc, "Frost\nWolf", "arctic/yeti/204/yeti"];
    case "tartarusRex":
      return [_0x43c61f, 0xcc, "Tartarus\nRex", "land/trex/204/trex"];
    case "cthulhuKraken":
      return [_0x301ddb, 0xcc, "Cthulhu\nKraken", "ocean/kraken/204/kraken"];
    case "necromus":
      return [_0x23a03f, 0xcc, "Necromus", "volcano/landmonster/0/204landmonster"];
    case "planetEaterMonster":
      return [_0x23a03f, 0xcc, "Planet Eater\nMonster", "volcano/landmonster/0/205/landmonster"];
    case "bloodCrystalMonster":
      return [_0xc3cf49, 0xcc, "Blood Crystal\nMonster", "arctic/icemonster/204/icemonster"];
    case "superMouse":
      return [_0x2ebefb, 0xca, "Super Mouse", "land/mouse/202/mouse"];
    case "sushiShrimp":
      return [_0x46f565, 0xca, "Sushi Shrimp", "ocean/shrimp/202/shrimp"];
    case "plasmaRat":
      return [_0x33fcaa, 0xca, "Plasma Rat", "desert/kangaroorat/202/kangaroorat"];
    case "chipmonk":
      return [_0x1b70a9, 0xca, "Chipmonk", "desert/chipmunk/202/chipmunk"];
    case "jackapole":
      return [_0x5ebc28, 0xca, "Jackapole", "land/rabbit/202/0/rabbit"];
    case "thugPigeon":
      return [_0x3c19f5, 0xca, "Thug Pigeon", "land/pigeon/202/pigeon"];
    case "royalGuppy":
      return [_0x5c1699, 0xca, "Royal Guppy", "ocean/trout/0/202/trout"];
    case "hollowRabbit":
      return [_0x5ebc28, 0xca, "Hollow Rabbit", "land/rabbit/202/1/rabbit"];
    case "ratMunk":
      return [_0x33c563, 0xca, "Ratmunk", "desert/chipmunk/202/chipmunk"];
    case "toxicMole":
      return [_0x4ddfd4, 0xca, "Toxic Mole", "land/mole/202/0/mole"];
    case "lightningLord":
      return [_0x6025f6, 0xca, "Lightning Lord", "land/chicken/202/chicken"];
    case "ufoPigeon":
      return [_0x112e88, 0xca, "UFO Pigeon", "arctic/penguin/202/penguin"];
    case "cytokineticMole":
      return [_0x4ddfd4, 0xca, "Cytokinetic Mole", "land/mole/202/1/mole"];
    case "piggyBank":
      return [_0x2e9b2f, 0xca, "Piggy Bank", "land/pig/202/pig"];
    case "jackhammer":
      return [_0x147e06, 0xca, "Jackhammer", "land/woodpecker/202/woodpecker"];
    case "leafySeadragon":
      return [_0xe6b188, 0xca, "Leafy Seadragon", "ocean/seahorse/202/seahorse"];
    case "soapySeal":
      return [_0x40a896, 0xca, "Soapy Seal", "arctic/seal/202/seal"];
    case "windupKakapo":
      return [_0x3dadb2, 0xca, "Wind-up Kakapo", "forest/kakapo/202/kakapo"];
    case "mevazor":
      return [_0x356eb6, 0xca, "Mevazor", "land/deer/202/0/deer"];
    case "flyMango":
      return [_0x45f5fa, 0xca, "Fly Mango", "ocean/flamingo/202/flamingo"];
    case "psychedelicSquid":
      return [_0x50e755, 0xca, "Psychedelic Squid", "ocean/squid/202/squid"];
    case "piebaldCosmos":
      return [_0x21e8e0, 0xca, "Piebald Cosmos", "arctic/reindeer/202/reindeer"];
    case "retroNeonGazelle":
      return [_0x5af123, 0xca, "Retro Neon Gazelle", "desert/gazelle/202/gazelle"];
    case "divineDeer":
      return [_0x356eb6, 0xca, "Divine Deer", "land/deer/202/1/deer"];
    case "grassHedgehog":
      return [_0x35e093, 0xca, "Grass Hedgehog", "land/hedgehog/202/hedgehog"];
    case "spectrumPeacock":
      return [_0x4b67a0, 0xca, "Spectrum Peacock", "land/peacock/202/peacock"];
    case "discoJellyfish":
      return [_0x16cf7a, 0xca, "Disco Jellyfish", "ocean/jellyfish/202/0/jellyfish"];
    case "iceFox":
      return [_0x3d4e92, 0xca, "Ice Fox", "arctic/arcticfox/202/arcticfox"];
    case "fireFox":
      return [_0x1414c7, 0xca, "Fire Fox", "desert/fennecfox/202/1/fennecfox"];
    case "muscipulaRaven":
      return [_0xb9b52b, 0xca, "Muscipula Raven", "forest/raven/202/raven"];
    case "sneakyFox":
      return [_0x1dbdce, 0xca, "Sneaky Fox", "land/fox/202/fox"];
    case "twistedHorror":
      return [_0x16cf7a, 0xca, "Twisted Horror", "ocean/jellyfish/202/1/jellyfish"];
    case "purpleFireFox":
      return [_0x1414c7, 0xca, "Purple Fire Fox", "desert/fennecfox/202/1/fennecfox"];
    case "synthZebra":
      return [_0x25dccf, 0xca, "Synth Zebra", "land/zebra/202/zebra"];
    case "moltenGlassTurtle":
      return [_0x1473db, 0xca, "Molten Glass Turtle", "ocean/turtle/202/turtle"];
    case "monitorMuskox":
      return [_0x89ca62, 0xca, "Monitor Muskox", "arctic/muskox/202/muskox"];
    case "headlessMule":
      return [_0x39640d, 0xca, "Headless Mule", "land/donkey/202/donkey"];
    case "quilinGiraffe":
      return [_0x5294bc, 0xca, "Quilin Giraffe", "land/giraffe/202/0/giraffe"];
    case "etherStingray":
      return [_0x1bc4f4, 0xca, "Ether Stingray", "ocean/stingray/202/0/stingray"];
    case "potatoWalrus":
      return [_0x517417, 0xca, "Potato Walrus", "arctic/walrus/202/walrus"];
    case "fungalCamel":
      return [_0xd21fde, 0xca, "Fungal Camel", "desert/camel/202/camel"];
    case "draquorum":
      return [_0x5294bc, 0xca, "Draquorum", "land/giraffe/202/1/giraffe"];
    case "pancakeStingray":
      return [_0x1bc4f4, 0xca, "Pancake Stingray", "ocean/stingray/202/1/stingray"];
    case "kongrilla":
      return [_0x4dd4dc, 0xca, "Kongrilla", "land/gorilla/0/202/gorilla"];
    case "corpseFlowerToucan":
      return [_0x386e05, 0xca, "Corpse Flower Toucan", "land/toucan/202/toucan"];
    case "ballonPufferfish":
      return [_0x3446ed, 0xca, "Balloon Pufferfish", "ocean/pufferfish/202/pufferfish"];
    case "astralLeopard":
      return [_0x42d03d, 0xca, "Astral Leopard", "arctic/snowleopard/202/snowleopard"];
    case "cmykNeonCheetah":
      return [_0x4fa2e5, 0xca, "C.M.Y.K NeoN Cheetak", "land/bigcat/202/cheetah"];
    case "beekeeperBear":
      return [_0x54ab20, 0xca, "Beekeeper Bear", "land/bear/0/202/bear"];
    case "dalmatianPelican":
      return [_0x3c3bc1, 0xca, "Dalmatian Pelican", "ocean/pelican/202/pelican"];
    case "rocketSwordfish":
      return [_0x5f4a90, 0xca, "Rocket Swordfish", "ocean/swordfish/0/202/swordfish"];
    case "okamiWolf":
      return [_0x26fb25, 0xca, "Okami Wolf", "arctic/wolf/202/wolf"];
    case "anubisHyena":
      return [_0x42fa0c, 0xca, "Anubis Hyena", "desert/hyena/202/hyena"];
    case "gobeeBear":
      return [_0x344c95, 0xca, "Gobee Bear", "desert/gobibear/202/gobibear"];
    case "chimeraLion":
      return [_0x527d90, 0xca, "Chimera Lion", "land/lion/202/lion"];
    case "meteorFalcon":
      return [_0x337560, 0xca, "Meteor Falcon", "land/falcon/202/falcon"];
    case "naKika":
      return [_0x1e1d71, 0xca, "Na Kika", "ocean/octopus/202/octopus"];
    case "waterBear":
      return [_0x3146b2, 0xca, "Water Bear", "arctic/bear/202/bear"];
    case "croczilla":
      return [_0x4bb269, 0xca, "Croczilla", "land/croc/0/202/croc"];
    case "ammit":
      return [_0x4bb269, 0xca, "Ammit", "land/croc/0/203/croc"];
    case "cottonCandyRhino":
      return [_0x3040c9, 0xca, "Cotton Candy Rhino", "land/rhino/202/rhino"];
    case "floralWolverine":
      return [_0x3b55ee, 0xca, "Floral Wolverine", "arctic/wolverine/202/wolverine"];
    case "minotaur":
      return [_0x5295d3, 0xca, "Minotaur", "desert/bison/202/bison"];
    case "planetHippo":
      return [_0x49fd90, 0xca, "Planet Hippo", "land/hippo/202/hippo"];
    case "seaAngelOrca":
      return [_0x267cc6, 0xca, "Sea Angel Orca", "ocean/killerwhale/202/killerwhale"];
    case "icefangSabertooth":
      return [_0x542f57, 0xca, "Ice-Fang Sabertooth", "arctic/sabertooth/202/sabertooth"];
    case "galaxyKomodoDragon":
      return [_0x57279a, 0xca, "Galaxy Komodo Dragon", "desert/komododragon/202/komododragon"];
    case "sapphireCaveSpider":
      return [_0x5b3559, 0xca, "Sapphire Cave Spider", "land/giantspider/202/giantspider"];
    case "pastelCassowary":
      return [_0x1f9f6d, 0xca, "Pastel Cassowary", "land/cassowary/202/cassowary"];
    case "whaleboat":
      return [_0x351d94, 0xca, "Whale Boat", "ocean/bluewhale/0/202/bluewhale"];
    case "acidMammoth":
      return [_0x3af7d1, 0xca, "Acid Mammoth", "arctic/mammoth/202/0/mammoth"];
    case "iceWizardElephant":
      return [_0x166f22, 0xca, "Ice Wizard Elephant", "land/elephant/0/202/elephant"];
    case "ancientIslandMonster":
      return [_0x351d94, 0xca, "Ancient Island Monster", "ocean/bluewhale/0/203/bluewhale"];
    case "crystalGolem":
      return [_0x3af7d1, 0xca, "Crystal Golem", "arctic/mammoth/202/1/mammoth"];
    case "aberrantDragon":
      return [_0x578001, 0xca, "Aberrant Dragon", "land/dragon/0/202/dragon"];
    case "agDragon":
      return [_0x578001, 0xce, "AG Dragon", "land/dragon/0/206/dragon"];
    case "hyporevenantRex":
      return [_0x43c61f, 0xca, "Hyporevenant Rex", "land/trex/202/0/trex"];
    case "giantSquid":
      return [_0x301ddb, 0xca, "Giant Squid", "ocean/kraken/202/0/kraken"];
    case "lovelyYeti":
      return [_0x4b1170, 0xca, "Lovely Yeti", "arctic/yeti/202/0/yeti"];
    case "abyssalKingCrab":
      return [_0x3db2bf, 0xca, "Abyssal King Crab", "ocean/kingcrab/202/kingcrab"];
    case "hydrothothKraken":
      return [_0x301ddb, 0xca, "Hydrothoth Kraken", "ocean/kraken/202/1/kraken"];
    case "frostEyeDemon":
      return [_0x4b1170, 0xca, "Frosty Eye Demon", "arctic/yeti/202/1/yeti"];
    case "ghoulDragon":
      return [_0x578001, 0xca, "Ghoul Dragon", "land/dragon/0/203/dragon"];
    case "tankMonster":
      return [_0x30afcb, 0xca, "Tank Monster", "land/dinomonster/202/dinomonster"];
    case "fighterJet":
      return [_0x23a03f, 0xca, "Fighter Jet", "volcano/landmonster/0/202/landmonster"];
    case "submarineMonster":
      return [_0x2fcf20, 0xca, "Submarine Monster", "ocean/seamonster/202/seamonster"];
    case "kingGraveyard1":
      return [_0x330b14, 0xca, "King Graveyard", "volcano/kingdragon/202/kingdragon"];
    case "fairyRabbit":
      return [_0x5ebc28, 0xdc, "Fairy Rabbit", "land/rabbit/220/rabbit"];
    case "darkMatterWarthog":
      return [_0x432bf5, 0xca, "Dark Matter Warthog", "desert/warthog/220/warthog"];
    case "fumigatorPig":
      return [_0x2e9b2f, 0xdc, "Fumigator Pig", "land/pig/220/pig"];
    case "moltenToucan":
      return [_0x386e05, 0xdc, "Molten Toucan", "land/toucan/220/toucan.ui"];
    case "summonerWolverine":
      return [_0x3b55ee, 0xdc, "Summoner Wolverine", "arctic/wolverine/220/wolverine"];
    case "golemMammoth":
      return [_0x3af7d1, 0xdc, "Golem Mammoth", "arctic/mammoth/220/mammoth"];
    case "glacialDemon":
      return [_0x4b1170, 0xdc, "Glacial Demon", "arctic/yeti/220/yeti"];
    case "cordyceraDino":
      return [_0x30afcb, 0xdc, "Cordycera Dino", "land/dinomonster/220/dinomonster"];
    case "blazingIceMonster":
      return [_0xc3cf49, 0xdc, "BlazingIce Monster", "arctic/icemonster/220/icemonster"];
    case "bioMutantTRex":
      return [_0x43c61f, 0xdc, "Bio Mutant T-rex", "land/trex/220/trex"];
    case "sunsetOstrich":
      return [_0x4f3bf1, 0xdc, "Sunset Ostrich", "land/ostrich/220/ostrich"];
    case "lightwaveElephant":
      return [_0x166f22, 0xdc, "Lightwave Elephant", "land/elephant/0/220/elephant"];
    case "inkRhino":
      return [_0x3040c9, 0xdc, "Ink Rhino", "land/rhino/220/rhino"];
    case "dimensionalMonster":
      return [_0x2fcf20, 0xdc, "Dimensional Monster", "ocean/seamonster/220/seamonster"];
    case "nebuladonScorpion":
      return [_0x2a5063, 0xdc, "Nebuladon Scorpion", "desert/scorpion/220/giantscorpion"];
    case "ghastlyJadeLion":
      return [_0x527d90, 0xdc, "Ghastly Jade Lion", "land/lion/220/lion"];
    case "belphegor":
      return [_0x23a03f, 0xdc, "Belphegor", "volcano/landmonster/0/220/landmonster"];
    case "muscipulaRaven":
      return [_0xb9b52b, 0xdc, "Muscipula Raven", "forest/raven/220/raven"];
    case "behemothHiveDragon":
      return [_0x578001, 0xdc, "Behemoth Hive Dragon", "land/dragon/0/220/dragon"];
    case "okamiWolf":
      return [_0x26fb25, 0xdc, "Okami Wolf", "arctic/wolf/220/wolf"];
    case "starCrusherCrab":
      return [_0x3db2bf, 0xdc, "Star Crusher Crab", "ocean/kingcrab/220/kingcrab"];
    case "drBrainiopod":
      return [_0x301ddb, 0xdc, "Dr. Brainiopod", "ocean/kraken/220/kraken"];
    case "xmas22_iceHuskTrout":
      return [_0x5c1699, 0xde, "Ice Husk Trout", "ocean/trout/0/221/trout"];
    case "xmas22_jollyRabbit":
      return [_0x5ebc28, 0xde, "Jolly Rabbit", "land/rabbit/222/rabbit"];
    case "xmas22_peppermintLandMonster":
      return [_0x23a03f, 0xde, "Peppermint Land Monster", "volcano/landmonster/0/222/landmonster"];
    case "xmas22_gingerbreadKraken":
      return [_0x301ddb, 0xde, "Gingerbread Kraken", "ocean/kraken/222/kraken"];
    case "val23_wolverine":
      return [_0x3b55ee, 0x0, "Valentine Wolverine", "arctic/wolverine/0/223/wolverine"];
    case "val23_orca":
      return [_0x267cc6, 0x0, "Valentine Orca", "ocean/killerwhale/0/223/killerwhale"];
    case "val23_mamoth":
      return [_0x3af7d1, 0x0, "Valentine Mammoth", "arctic/mammoth/0/223/mammoth"];
    case "val23_whale":
      return [_0x351d94, 0x0, "Valentine Whale", "ocean/bluewhale/0/223/bluewhale"];
    case "val23_walrus":
      return [_0x517417, 0x0, "Valentine Walrus", "arctic/walrus/0/223/walrus"];
    case "val23_stingray":
      return [_0x1bc4f4, 0x0, "Valentine Stingray", "ocean/stingray/0/223/stingray"];
    case "val23_snowleopard":
      return [_0x42d03d, 0x0, "Valentine Snow Leopard", "arctic/snowleopard/0/223/snowleopard"];
    case "val23_gorilla":
      return [_0x4dd4dc, 0x0, "Valentine Gorilla", "land/gorilla/0/223/gorilla"];
    case "animal_BirdMonster":
      return [_0xc764f6, 0x0, "Bird Monster", "land/birdmonster/0/birdmonster"];
    case "apesGorilla":
      return [_0x4dd4dc, 0xe0, "Apes.io Gorilla", "land/gorilla/0/224/gorilla"];
    case "hw2023_botX303":
      return [_0xcb5cf3, 0x7e7, "Bot X-303", "desert/blackwidow/0/2023/blackwidow"];
    case "hw2023_sodaFish":
      return [_0x5f4a90, 0x7e7, "Sodafish", "ocean/swordfish/0/2023/swordfish"];
    case "hw2023_solarWyvern":
      return [_0x23a03f, 0x7e7, "Solar Wyvern", "volcano/landmonster/0/2023/landmonster"];
    case "hw2023_drLochness":
      return [_0x5c1699, 0x7e7, "Dr. Lochness", "ocean/trout/0/2023/trout"];
    case "hw2023_moltenFrostWhale":
      return [_0x351d94, 0x7e7, "Molten Frost Whale", "ocean/bluewhale/0/2023/bluewhale"];
    case "hw2023_sharkodile":
      return [_0x4bb269, 0x7e7, "Sharkodile", "land/croc/0/2023/croc"];
    case "hw2023_mafiaGorilla":
      return [_0x4dd4dc, 0x7e7, "Mafia Gorilla", "land/gorilla/0/2023/gorilla"];
    case "hw2023_carnivalElephant":
      return [_0x166f22, 0x7e7, "Carnival Elephant", "land/elephant/0/2023/elephant"];
    case "hw2023_beachBattleKraken":
      return [_0x301ddb, 0x7e7, "Beach Battle Kraken", "ocean/kraken/0/2023/kraken"];
    case "hw2023_stormDragon":
      return [_0x578001, 0x7e7, "Storm Dragon", "land/dragon/0/2023/dragon"];
    case "hw2023_spookyBear":
      return [_0x54ab20, 0xca, "Spooky Bear", "land/bear/0/2023/bear"];
  }
  return null;
};
var _0x2995b5 = _0x589e43;
var _0x53abbc = _0x56c4af;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
function _0x589e43() {
  _0x589e43.superClass.call(this, 0x3);
}
_0x589e43.prototype.loadShopData = function (_0x20e9e1) {
  _0x589e43.superClass.prototype.loadShopData.call(this, _0x20e9e1);
  this.itemName = _0x20e9e1.itemName;
  this.title = _0x20e9e1.title;
  this.saleType = _0x20e9e1.saleType;
  this.salePrice = _0x20e9e1.salePrice;
};
_0x589e43.prototype.getShopImageSrc = function () {
  return "shop/deals/" + this.itemName.toLowerCase() + ".png";
};
_0x589e43.prototype.getImage = function () {
  var _0x33035d = new Image();
  _0x33035d.className = "shopdeal";
  _0x33035d.src = "shop/deals/" + this.itemName.toLowerCase() + ".png";
  return _0x33035d;
};
_0x589e43.prototype.getTitle = function () {
  var _0x189f10 = '' + this.title;
  return _0x189f10.replace("\n", "<br>").toUpperCase();
};
_0x589e43.prototype.generateHtml = function (_0x4700ed) {
  var _0x1b6963 = "item deal" + (this.coinsPrice == -0x1 ? " itemOwned buyItem" : " buyItem") + " " + this.itemName;
  if (_0x4700ed == 0x1) {
    _0x1b6963 = _0x1b6963 + " confirm_deal";
  }
  var _0x2f4886 = _0x234c5f('', _0x1b6963);
  var _0x4b8f6b = _0x234c5f('', "image biome_" + this.biome);
  var _0x4d468d = _0x234c5f('', "price");
  var _0xb9ed6a = _0x234c5f('', "orig-value");
  _0x2f4886.setAttribute("title", this.getTitle().replace("<BR>", " "));
  _0x4d468d.innerHTML = this.getTitle();
  var _0x40b627 = this.getImage();
  _0x4b8f6b.appendChild(_0x40b627);
  if (this.coinsPrice > 0x0) {
    var _0x1da1eb = '';
    if (this.saleType == 0x1) {
      _0x1da1eb = "NEW BUNDLE";
    } else {
      if (this.saleType == 0x2) {
        _0x1da1eb = "SALE BUNDLE";
      }
    }
    if (_0x1da1eb != '') {
      var _0x402e17 = _0x234c5f("newItem_" + this.animalType, "newItem");
      _0x402e17.innerHTML = _0x1da1eb;
      _0x2f4886.appendChild(_0x402e17);
    }
  }
  _0x2f4886.appendChild(_0x4b8f6b);
  _0x2f4886.appendChild(_0x4d468d);
  if (this.saleType == 0x2) {
    var _0x587bf1 = new Image();
    _0x587bf1.className = "buycoin-img";
    _0x587bf1.src = "shop/mopecoin.png";
    var _0x20c7d7 = _0xe0b638("span", '', "buycoin-price");
    _0x20c7d7.innerHTML = this.coinsPrice;
    _0xb9ed6a.appendChild(_0x587bf1);
    _0xb9ed6a.appendChild(_0x20c7d7);
  }
  if (this.coinsPrice > 0x0) {
    _0x2f4886.appendChild(_0xb9ed6a);
    _0x2f4886.appendChild(this.btn.generateHtml(_0x4700ed));
  } else {}
  return _0x2f4886;
};
_0x589e43.prototype.fillItemDetails = function (_0x22b00a) {
  var _0x5cab43 = _0x234c5f("bundleSkins", "bundleSkins_" + this.itemName);
  _0x22b00a.appendChild(_0x5cab43);
  if (this.data.aniTypes == undefined) {
    for (i = 0x0; i < _0x4ecbfe.shop.allItems.length; i++) {
      var _0x285859 = _0x4ecbfe.shop.allItems[i];
      console.log(_0x285859.data);
      if (_0x285859.data.shopCategory == "halloween") {
        console.log(_0x285859.data.promotions + " = " + this.itemName.toLowerCase());
      }
      if (_0x285859 && _0x285859.data.promotions && _0x285859.data.promotions.toLowerCase().indexOf(this.itemName.toLowerCase()) > -0x1) {
        var _0x15e2ba = _0x4ecbfe.getPostFixForItem(_0x285859.data.itemName);
        var _0x6178a8 = _0x285859.getImagePromo(_0x15e2ba);
        _0x6178a8.className = "bundleSkinImg" + (_0x285859.coinsPrice == -0x1 ? " bought" : '');
        _0x6178a8.width = "40px";
        _0x5cab43.appendChild(_0x6178a8);
      }
    }
  } else {
    if (this.data.aniTypes != undefined) {
      for (i = 0x0; i < this.data.aniTypes.length; i++) {
        if (this.data.aniTypes[i] == 0x3e8) {
          continue;
        }
        var _0x16f906 = _0x4ecbfe.getSkinPath(this.data.aniTypes[i], this.data.theme);
        console.log(_0x16f906);
        var _0x6178a8 = new Image();
        _0x6178a8.src = _0x16f906;
        _0x6178a8.className = "bundleSkinImg aniTypes";
        _0x6178a8.width = "40px";
        _0x5cab43.appendChild(_0x6178a8);
      }
    }
  }
};
window.ShopDeal = _0x589e43;
_0x1994ce.setCustomClassForShopItem(_0x589e43, 0x3);
var _0x2995b5 = _0x34ef02;
var _0x53abbc = _0x56c4af;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
function _0x34ef02() {
  _0x34ef02.superClass.call(this, 0x3);
}
_0x34ef02.prototype.loadShopData = function (_0x4baeaa) {
  _0x34ef02.superClass.prototype.loadShopData.call(this, _0x4baeaa);
  this.itemName = _0x4baeaa.itemName;
  this.title = _0x4baeaa.title;
  this.credits = _0x4baeaa.credits;
  this.saleType = _0x4baeaa.saleType;
  this.salePrice = _0x4baeaa.salePrice;
};
_0x34ef02.prototype.getShopImageSrc = function () {
  return "shop/feature/" + this.itemName.toLowerCase() + ".png";
};
_0x34ef02.prototype.getImage = function () {
  var _0x3a7835 = new Image();
  _0x3a7835.className = "shopFeature";
  _0x3a7835.src = "shop/feature/" + this.itemName.toLowerCase() + ".png";
  return _0x3a7835;
};
_0x34ef02.prototype.getTitle = function () {
  var _0x318738 = '' + this.title;
  return _0x318738.replace("\n", "<br>").toUpperCase();
};
_0x34ef02.prototype.generateHtml = function (_0x1cb254) {
  var _0x471d57 = "item feature " + (this.coinsPrice == -0x1 ? " itemOwned" : " buyItem") + " " + this.itemName;
  if (_0x1cb254 == 0x1) {
    _0x471d57 = _0x471d57 + " confirm_item";
  }
  var _0x53897c = _0x234c5f('', _0x471d57);
  var _0x4b56b6 = _0x234c5f('', "image biome_" + this.biome);
  var _0x438194 = _0x234c5f('', "price");
  _0x438194.innerHTML = this.title;
  var _0x5f3ea1 = this.getImage();
  _0x4b56b6.appendChild(_0x5f3ea1);
  if (this.coinsPrice > 0x0) {
    var _0xae7d3a = '';
    if (this.saleType == 0x1) {
      _0xae7d3a = "NEW";
    } else {
      if (this.saleType == 0x2) {
        _0xae7d3a = "SALE";
      }
    }
    if (_0xae7d3a != '') {
      var _0x1405d8 = _0x234c5f("newItem_" + this.animalType, "newItem");
      _0x1405d8.innerHTML = _0xae7d3a;
      _0x53897c.appendChild(_0x1405d8);
    }
  }
  _0x53897c.appendChild(_0x4b56b6);
  _0x53897c.appendChild(_0x438194);
  if (this.coinsPrice > 0x0) {
    _0x53897c.appendChild(this.btn.generateHtml(_0x1cb254));
  } else {
    if (_0x1cb254 != 0x2) {}
  }
  return _0x53897c;
};
_0x34ef02.prototype.fillItemDetails = function (_0x4a4c19) {
  var _0x1fafef = _0x234c5f("bundleSkins", "bundleSkins_" + this.itemName);
  _0x4a4c19.appendChild(_0x1fafef);
  if (this.data.aniTypes == undefined) {
    for (i = 0x0; i < _0x4ecbfe.shop.allItems.length; i++) {
      var _0x83e954 = _0x4ecbfe.shop.allItems[i];
      if (_0x83e954 && _0x83e954.data.promotions && _0x83e954.data.promotions.toLowerCase().indexOf(this.itemName.toLowerCase()) > -0x1) {
        var _0x1bfe7e = _0x4ecbfe.getPostFixForItem(_0x83e954.data.itemName);
        var _0x5db58b = _0x83e954.getImagePromo(_0x1bfe7e);
        _0x5db58b.className = "bundleSkinImg" + (_0x83e954.coinsPrice == -0x1 ? " bought" : '');
        _0x5db58b.width = "40px";
        _0x1fafef.appendChild(_0x5db58b);
      }
    }
  } else {
    for (i = 0x0; i < this.data.aniTypes.length; i++) {
      if (this.data.aniTypes[i] == 0x3e8) {
        continue;
      }
      var _0x547eb8 = _0x4ecbfe.getSkinPath(this.data.aniTypes[i], this.data.theme);
      console.log(_0x547eb8);
      var _0x5db58b = new Image();
      _0x5db58b.src = _0x547eb8;
      _0x5db58b.className = "bundleSkinImg aniTypes";
      _0x5db58b.width = "40px";
      _0x1fafef.appendChild(_0x5db58b);
    }
  }
};
window.ShopFeature = _0x34ef02;
_0x1994ce.setCustomClassForShopItem(_0x34ef02, 0x4);
var _0x2995b5 = _0x280587;
var _0x53abbc = _0x56c4af;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
function _0x280587(_0x3b7608, _0x426f8) {
  _0x280587.superClass.call(this, 0x3e9);
}
_0x280587.prototype.data = null;
_0x280587.prototype.loadShopData = function (_0x36102a) {
  _0x280587.superClass.prototype.loadShopData.call(this, _0x36102a);
  this.data = _0x36102a;
  this.getPropType();
};
_0x280587.prototype.itemType = null;
_0x280587.prototype.propType = null;
_0x280587.prototype.propColor = null;
_0x280587.prototype.getPropType = function () {
  if (this.data == null) {
    return;
  }
  var _0x1939a1 = this.data.id.split("_");
  if (_0x1939a1.length == 0x3) {
    this.itemType = _0x1939a1[0x0];
    this.propType = _0x1939a1[0x1];
    this.propColor = _0x1939a1[0x2];
  }
};
window.PropItem = _0x280587;
_0x1994ce.setCustomClassForShopItem(_0x280587, 0x3e9);
function _0x1f9585(_0x4167e3) {
  this.tabs = {
    "titles": new Array()
  };
  this.data = _0x4167e3;
  this.load = function () {
    for (i = 0x0; i < this.data.length; i++) {
      var _0x59d862 = this.data[i].itemType;
      if (this.tabs[_0x59d862] === undefined) {
        this.tabs.titles.push(_0x59d862);
        this.tabs[_0x59d862] = new Array();
      }
      this.tabs[_0x59d862].push(this.data[i]);
    }
  };
}
var _0x2995b5 = _0x3bad79;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x2995b5.prototype.arenaState = 0x0;
_0x2995b5.prototype.fightNumber = 0x0;
_0x2995b5.prototype.climaxType = 0x1;
_0x2995b5.prototype.timer = 0x0;
_0x2995b5.prototype.timerTxt = null;
_0x2995b5.prototype.p1Name = null;
_0x2995b5.prototype.p2Name = null;
_0x2995b5.prototype.p1Bites = 0x0;
_0x2995b5.prototype.p2Bites = 0x0;
_0x2995b5.prototype.arenaRad = 0xa;
_0x2995b5.prototype.nArenaRad = 0xa;
_0x2995b5.prototype.oArenaRad = 0xa;
_0x2995b5.prototype.isCountdownTimer = true;
_0x2995b5.prototype.p1PushRemain = 0x0;
_0x2995b5.prototype.p1DashRemain = 0x0;
_0x2995b5.prototype.p2PushRemain = 0x0;
_0x2995b5.prototype.p2DashRemain = 0x0;
_0x3bad79.prototype.setTimer = function (_0x507a52) {
  var _0x299f88 = '';
  var _0x1cf2a2 = 0x19;
  if (this.isCountdownTimer) {
    _0x299f88 = '' + _0x507a52;
  } else {
    _0x1cf2a2 = 0xf;
    if (this.isCpuVsPlayer) {
      _0x299f88 = "1v1 REDEMPTION";
    } else {
      if (this.arenaModeType == 0x2) {
        _0x299f88 = "MATCH #" + this.fightNumber;
      } else {
        _0x299f88 = "FIGHT\n#" + this.fightNumber;
      }
    }
    _0x299f88 = curServer.name + "\n" + _0x299f88;
  }
  if (this.isCountdownTimer) {
    _0x1cf2a2 = Number(_0x507a52) ? 0x1e : _0x1cf2a2;
  }
  if (null == this.timerTxt) {
    this.timerTxt = new _0x4e6b66(_0x1cf2a2, "#FFFFFF");
    this.timerTxt.strokeW = 0x2;
    this.timerTxt.multiLine = true;
    this.timerTxt.renderScale = 0x5;
    this.timerTxt.setText(_0x299f88);
  } else {
    this.timerTxt.setFontSize(_0x1cf2a2);
    this.timerTxt.setText(_0x299f88);
  }
  var _0x2f41f8 = "MOPE";
  if (this.arenaModeType == 0x1) {
    _0x2f41f8 = "NOOB";
  } else {
    if (this.arenaModeType == 0x2) {
      _0x2f41f8 = "PRO";
    }
  }
  var _0x1029eb = this.climaxType == 0x1 ? "LAST " + _0x2f41f8 + " STANDING" : this.maxBitesToWin + " BITES WINS";
  if (null == this.climaxTxt) {
    this.climaxTxt = new _0x4e6b66(_0x1cf2a2, "#FFFFFF");
    this.climaxTxt.strokeW = 0x2;
    this.climaxTxt.multiLine = true;
    this.climaxTxt.renderScale = 0x5;
    this.climaxTxt.setText(_0x1029eb);
  } else {
    this.climaxTxt.setFontSize(0xf);
    this.climaxTxt.setText(_0x1029eb);
  }
};
_0x3bad79.prototype.playerFontSize = 0xa;
_0x3bad79.prototype.setP1 = function (_0x3be71c) {
  var _0xadaa1b = '' + _0x3be71c;
  if (null == this.p1Name) {
    this.p1Name = new _0x4e6b66(this.playerFontSize, "cyan");
    this.p1Name.strokeW = 0x2;
    this.p1Name.multiLine = true;
    this.p1Name.renderScale = 0x2;
    this.p1Name.setText(_0xadaa1b);
  } else {
    this.p1Name.setFontSize(this.playerFontSize);
    this.p1Name.setText(_0xadaa1b);
  }
};
_0x3bad79.prototype.setP2 = function (_0x2ad982) {
  var _0x1a8917 = '' + _0x2ad982;
  if (null == this.p2Name) {
    this.p2Name = new _0x4e6b66(this.playerFontSize, "yellow");
    this.p2Name.strokeW = 0x2;
    this.p2Name.multiLine = true;
    this.p2Name.renderScale = 0x2;
    this.p2Name.setText(_0x1a8917);
  } else {
    this.p2Name.setFontSize(this.playerFontSize);
    this.p2Name.setText(_0x1a8917);
  }
};
_0x3bad79.prototype.updateZ = function () {
  this.z = 0x186a2;
};
_0x3bad79.prototype.dotX = 0.33;
_0x3bad79.prototype.dotY = 0.77;
_0x3bad79.prototype.glowEffect = 0x0;
_0x3bad79.prototype.ver = 0x2;
_0x3bad79.prototype.customDraw = function (_0x12cb40) {
  if (_0x11da90 && _0x5b8cee && _0x4bf4b8 == this.id) {
    this.drawCanvas();
  }
  if (this.arenaState == 0x2 || this.arenaState == 0x3) {
    this.displayEndScreen();
  }
  _0x3b8ba2.save();
  _0x3b8ba2.rotate(-0.5 * Math.PI);
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0.065;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, 0x2 * Math.PI, false);
  _0x3b8ba2.arc(0x0, 0x0, this.arenaRad, 0x0, 0x2 * Math.PI, true);
  _0x3b8ba2.fillStyle = "red";
  _0x3b8ba2.closePath();
  _0x3b8ba2.fill();
  _0x3b8ba2.restore();
  if (_0x4bf4b8 == this.id) {
    if (_0x4bf4b8 == this.id && this.arenaState == 0x1) {
      _0x3b8ba2.save();
      _0x3b8ba2.lineWidth = 0x4;
      _0x3b8ba2.globalAlpha = 0.5;
      var _0x5f2b77 = -0x2 * this.timeoutAngle;
      if (this.closingAngleSet) {
        var _0x3710b9 = -0x2 * this.arenaClosingAngle;
        _0x3b8ba2.save();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, this.rad - 0x2, _0x3710b9 * Math.PI, _0x5f2b77 * Math.PI);
        _0x3b8ba2.strokeStyle = "red";
        _0x3b8ba2.stroke();
        _0x3b8ba2.restore();
        _0x3b8ba2.save();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, this.rad - 0x2, 0x0, _0x3710b9 * Math.PI);
        _0x3b8ba2.strokeStyle = "#32ff00";
        _0x3b8ba2.stroke();
        _0x3b8ba2.restore();
      } else {
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(0x0, 0x0, this.rad - 0x2, 0x0, _0x5f2b77 * Math.PI);
        _0x3b8ba2.strokeStyle = "#32ff00";
        _0x3b8ba2.stroke();
      }
      _0x3b8ba2.restore();
    }
    if (this.showTimerAngle) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0.5;
      var _0x67d40 = -0x2 * this.timerAngle;
      _0x3b8ba2.beginPath();
      _0x3b8ba2.lineWidth = 0x2;
      _0x3b8ba2.arc(0x0, 0x0, this.arenaRad + 0x2, 0x0, _0x67d40 * Math.PI);
      _0x3b8ba2.strokeStyle = "red";
      _0x3b8ba2.stroke();
      _0x3b8ba2.restore();
    }
  }
  _0x3b8ba2.restore();
  if (this.timerTxt != null) {
    if (this.arenaState == 0x0) {
      this.timerTxt.x = 0x0;
      this.timerTxt.y = 0x0;
      this.timerTxt.draw();
    } else {
      if (this.arenaState == 0x1) {
        this.timerTxt.x = 0x0;
        this.timerTxt.y = -this.rad * 0.9;
        this.timerTxt.draw();
        if (this.climaxTxt != null) {
          this.climaxTxt.x = 0x0;
          this.climaxTxt.y = this.rad * 0.85;
          this.climaxTxt.draw();
        }
      } else if (this.arenaState == 0x2 || this.arenaState == 0x3) {
        this.timerTxt.x = 0x0;
        this.timerTxt.y = 0x0;
        this.timerTxt.draw();
        if (this.climaxTxt != null) {
          this.climaxTxt.x = 0x0;
          this.climaxTxt.y = this.rad * 0.85;
          this.climaxTxt.draw();
        }
      }
    }
  }
  if (this.p1Name != null) {
    this.p1Name.x = -this.rad / 0x2;
    this.p1Name.y = -this.rad * 0.65;
    this.p1Name.draw();
    if (!this.isCpuVsPlayer) {
      var _0xb4d13 = 0x0;
      var _0x2dbe94 = -this.rad * 0.72;
      _0xb4d13 -= 0x23;
      _0x2dbe94 -= 30;
      var _0x29b0ae = this.getSkinImageObj("img/fire/0/0.png");
      for (i = 0x0; i < this.getLives(); i++) {
        _0xb4d13 -= 33;
        if (_0x29b0ae) {
          _0x3b8ba2.save();
          if (this.roundsWon_p1 > 0x0 && i + 0x1 <= this.roundsWon_p1) {
            _0x3b8ba2.globalAlpha = 0.8;
          } else {
            _0x3b8ba2.globalAlpha = 0.2;
          }
          _0x3b8ba2.drawImage(_0x29b0ae, _0xb4d13 - 0xf, _0x2dbe94 - 0xf, 30, 30);
          _0x3b8ba2.restore();
        }
      }
    }
  }
  if (this.p2Name != null) {
    this.p2Name.x = this.rad / 0x2;
    this.p2Name.y = -this.rad * 0.65;
    this.p2Name.draw();
    if (!this.isCpuVsPlayer) {
      var _0xb4d13 = 0x0;
      var _0x2dbe94 = -this.rad * 0.72;
      _0xb4d13 = 0x23;
      _0x2dbe94 -= 30;
      var _0x29b0ae = this.getSkinImageObj("img/fire/0/0.png");
      for (i = 0x0; i < this.getLives(); i++) {
        _0xb4d13 += 33;
        if (_0x29b0ae) {
          _0x3b8ba2.save();
          if (this.roundsWon_p2 > 0x0 && i + 0x1 <= this.roundsWon_p2) {
            _0x3b8ba2.globalAlpha = 0.8;
          } else {
            _0x3b8ba2.globalAlpha = 0.2;
          }
          _0x3b8ba2.drawImage(_0x29b0ae, _0xb4d13 - 0xf, _0x2dbe94 - 0xf, 30, 30);
          _0x3b8ba2.restore();
        }
      }
    }
  }
  if (_0x2bd878 != 0x0 && this.id == _0x4bf4b8 && this.arenaState == 0x0) {}
};
_0x3bad79.prototype.getLives = function () {
  switch (this.fightType) {
    case 0x1:
      return 0x1;
    case 0x3:
      return 0x2;
    case 0x5:
      return 0x3;
    case 0x9:
      return 0x5;
  }
  return 0x1;
};
_0x3bad79.prototype.hasAdLoaded = false;
_0x3bad79.prototype.isCpuVsPlayer = false;
_0x3bad79.prototype.arenaModeType = 0x0;
_0x3bad79.prototype.canPush = false;
_0x3bad79.prototype.canDash = false;
_0x3bad79.prototype.isDarkTheme = false;
_0x3bad79.prototype.custom_canvas = null;
_0x3bad79.prototype.drawCanvas = function () {
  if (this.custom_canvas == null) {
    this.custom_canvas = document.createElement("canvas");
    var _0x3ad20e = this.rad * 0xa;
    var _0x4c9791 = this.rad * 0xa;
    this.custom_canvas.width = _0x3ad20e;
    this.custom_canvas.height = _0x4c9791;
    var _0x190bb2 = this.custom_canvas.getContext("2d");
    _0x190bb2.save();
    _0x190bb2.globalAlpha = 0x1;
    _0x190bb2.fillStyle = "black";
    _0x190bb2.fillRect(0x0, 0x0, this.custom_canvas.width, this.custom_canvas.height);
    _0x190bb2.globalCompositeOperation = "xor";
    _0x190bb2.beginPath();
    _0x190bb2.arc(_0x3ad20e / 0x2, _0x3ad20e / 0x2, this.rad, 0x0, 0x2 * Math.PI);
    _0x190bb2.fillStyle = "blue";
    _0x190bb2.fill();
    _0x190bb2.restore();
  }
  if (this.custom_canvas != null) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0.5;
    _0x3b8ba2.drawImage(this.custom_canvas, -this.custom_canvas.width / 0x2, -this.custom_canvas.height / 0x2, this.custom_canvas.width, this.custom_canvas.height);
    _0x3b8ba2.restore();
  }
};
_0x3bad79.prototype.timerAngle = 0x0;
_0x3bad79.prototype.nTimerAngle = 0x0;
_0x3bad79.prototype.showTimerAngle = true;
_0x3bad79.prototype.nTimeoutAngle = 0x0;
_0x3bad79.prototype.timeoutAngle = 0x0;
_0x3bad79.prototype.arenaTimeoutLeft = 0x0;
_0x3bad79.prototype.isArenaClosing = false;
_0x3bad79.prototype.closingAngleSet = false;
_0x3bad79.prototype.arenaClosingAngle = 0x0;
_0x3bad79.prototype.onLerpUpdate = function (_0x454d16) {
  _0x3bad79.superClass.prototype.onLerpUpdate.call(this, _0x454d16);
  this.arenaRad += (this.nArenaRad - this.arenaRad) * 0.1;
  this.timerAngle += (this.nTimerAngle - this.timerAngle) * 0.1;
  this.timeoutAngle += (this.nTimeoutAngle - this.timeoutAngle) * 0.1;
};
_0x3bad79.prototype.timeLeft = 0x0;
_0x3bad79.prototype.fightType = 0x0;
_0x3bad79.prototype.rounds = 0x0;
_0x3bad79.prototype.roundsWon_p1 = 0x0;
_0x3bad79.prototype.roundsWon_p2 = 0x0;
_0x3bad79.prototype.resetArena = false;
_0x3bad79.prototype.player1DarkTheme = false;
_0x3bad79.prototype.player2DarkTheme = false;
_0x3bad79.prototype.readCustomData_onNewlyVisible = function (_0x33acbc) {
  _0x3bad79.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x33acbc);
  this.fightType = _0x33acbc.readUInt8();
  this.arenaState = _0x33acbc.readUInt8();
  this.rounds = _0x33acbc.readUInt8();
  this.p1 = _0x33acbc.readString();
  this.p2 = _0x33acbc.readString();
  this.arenaModeType = _0x33acbc.readUInt8();
  this.isCpuVsPlayer = this.arenaModeType == 0x1 || this.arenaModeType == 0x2;
  this.p1Wins = _0x33acbc.readUInt8();
  this.p2Wins = _0x33acbc.readUInt8();
  this.fightNumber = _0x33acbc.readUInt16();
  var _0x216976 = _0x33acbc.readUInt16() / 0x64;
  this.oArenaRad = this.arenaRad;
  this.nArenaRad = _0x216976;
  this.setNames();
  this.climaxType = _0x33acbc.readUInt8();
  if (this.climaxType == 0x2) {
    this.maxBitesToWin = _0x33acbc.readUInt8();
  }
  this.canPush = _0x33acbc.readUInt8() == 0x1;
  this.canDash = _0x33acbc.readUInt8() == 0x1;
};
_0x3bad79.prototype.readUpdatedProperty = function (_0x19fcd4, _0x44dd41) {
  if (_0x19fcd4 == 0x27) {
    this.arenaState = _0x44dd41.readUInt8();
  } else {
    if (_0x19fcd4 == 0x28) {
      this.rounds = _0x44dd41.readUInt8();
    } else {
      if (_0x19fcd4 == 0x2f) {
        var _0x268de0 = _0x44dd41.readUInt16() / 0x64;
        this.oArenaRad = this.arenaRad;
        this.nArenaRad = _0x268de0;
      } else {
        if (_0x19fcd4 == 0x29) {
          this.closingAngleSet = this.isArenaClosing = false;
          this.timer = _0x44dd41.readUInt16() / 0x64;
          this.isCountdownTimer = true;
          if (this.timer < 0x17) {
            this.updateTimer();
          }
        } else {
          if (_0x19fcd4 == 0x2a) {
            this.timer = _0x44dd41.readUInt16() / 0x64;
            this.isCountdownTimer = false;
            this.updateTimer();
            this.displayAds = false;
            this.adShown = false;
          } else {
            if (_0x19fcd4 == 0x2b) {
              this.timeLeft = _0x44dd41.readUInt16();
              this.nTimerAngle = this.timeLeft / 0x3e8;
            } else {
              if (_0x19fcd4 == 0x2c) {
                this.showTimerAngle = _0x44dd41.readUInt8() == 0x1;
              } else {
                if (_0x19fcd4 == 0x2d) {
                  this.isArenaClosing = _0x44dd41.readUInt8() == 0x1;
                  if (this.isArenaClosing && !this.closingAngleSet) {
                    this.closingAngleSet = true;
                    this.arenaClosingAngle = this.timeoutAngle;
                  }
                } else {
                  if (_0x19fcd4 == 0x2e) {
                    this.arenaTimeoutLeft = _0x44dd41.readUInt16();
                    this.nTimeoutAngle = this.arenaTimeoutLeft / 0x3e8;
                  } else {
                    if (_0x19fcd4 == 0x30) {
                      this.winner = _0x44dd41.readUInt8();
                      var _0xfff15f = '' + this.p1;
                      if (_0xfff15f.length == 0x0) {
                        _0xfff15f = "mope.io";
                      }
                      var _0x452975 = '' + this.p2;
                      if (_0x452975.length == 0x0) {
                        _0x452975 = "mope.io";
                      }
                      if (this.winner == 0x1) {
                        this.winnerName = _0xfff15f;
                      } else {
                        this.winnerName = _0x452975;
                      }
                    } else {
                      if (_0x19fcd4 == 0x31) {
                        this.winnerMsg = _0x44dd41.readString();
                      } else {
                        if (_0x19fcd4 == 0x32) {
                          this.p1Bites = _0x44dd41.readUInt8();
                          this.setNames();
                        } else {
                          if (_0x19fcd4 == 0x33) {
                            this.p2Bites = _0x44dd41.readUInt8();
                            this.setNames();
                          } else {
                            if (_0x19fcd4 == 0x34) {
                              this.winBonus = _0x44dd41.readUInt32();
                            } else {
                              if (_0x19fcd4 == 0x35) {
                                this.roundsWon_p1 = _0x44dd41.readUInt8();
                              } else {
                                if (_0x19fcd4 == 0x36) {
                                  this.roundsWon_p2 = _0x44dd41.readUInt8();
                                } else {
                                  if (_0x19fcd4 == 0x37) {
                                    this.p1Wins = _0x44dd41.readUInt8();
                                  } else {
                                    if (_0x19fcd4 == 0x38) {
                                      this.p2Wins = _0x44dd41.readUInt8();
                                    } else {
                                      if (_0x19fcd4 == 0x39) {
                                        this.p1 = _0x44dd41.readString();
                                        this.setNames();
                                      } else {
                                        if (_0x19fcd4 == 0x3a) {
                                          this.p2 = _0x44dd41.readString();
                                          this.setNames();
                                        } else {
                                          if (_0x19fcd4 == 0x3b) {
                                            var _0x593d52 = _0x44dd41.readUInt8() == 0x1;
                                            if (this.resetArena != _0x593d52) {
                                              this.endScreenState = 0x0;
                                              this.resetArena = _0x593d52;
                                            }
                                          } else {
                                            if (_0x19fcd4 == 0x3c) {
                                              this.fightNumber = _0x44dd41.readUInt16();
                                            } else {
                                              if (_0x19fcd4 == 0x3d) {
                                                this.player1DarkTheme = _0x44dd41.readUInt8() == 0x1;
                                              } else if (_0x19fcd4 == 0x3e) {
                                                this.player2DarkTheme = _0x44dd41.readUInt8() == 0x1;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
_0x3bad79.prototype.endScreenState = -0x1;
_0x3bad79.prototype.endScreenChangeT = 0x0;
_0x3bad79.prototype.resetEndScreenState = true;
_0x3bad79.prototype.displayEndScreen = function () {
  if (_0x1f4c9e >= this.endScreenChangeT) {
    this.endScreenState++;
    this.endScreenChangeT = _0x1f4c9e + 0xbb8;
  }
  if (this.timerTxt != null) {
    if (this.endScreenState == 0x0) {
      this.timerTxt.setFontSize(0x28);
      this.timerTxt.setText("\nKO!");
    } else {
      if (this.endScreenState == 0x1) {
        this.timerTxt.setFontSize(0x14);
        this.timerTxt.setText(this.winnerName + "\nWON!");
      } else if (this.endScreenState >= 0x3) {
        this.timerTxt.setFontSize(0x14);
        if (this.winBonus !== undefined && this.winnerMsg != null && this.winBonus > 0x0) {
          this.timerTxt.setText(this.winnerMsg + "\nWIN BONUS: " + _0x40c2b6(this.winBonus, 0x0));
        }
      }
    }
  }
};
_0x3bad79.prototype.challenger = null;
_0x3bad79.prototype.opponent = null;
_0x3bad79.prototype.setNames = function () {
  var _0x5c6892 = '' + this.p1;
  if (_0x5c6892.length == 0x0) {
    _0x5c6892 = "mope.io";
  }
  var _0x448a37 = '' + this.p2;
  if (_0x448a37.length == 0x0) {
    _0x448a37 = "mope.io";
  }
  var _0x3c92ca = this.isCpuVsPlayer ? "level" : "wins";
  var _0x1b7aba = "\n(" + _0x3c92ca + ": " + this.p1Wins + ")";
  var _0x4b0a92 = "\n(" + _0x3c92ca + ": " + this.p2Wins + ")";
  var _0x4237e3 = "\nbites: " + this.p1Bites;
  var _0x5a0ae4 = "\nbites: " + this.p2Bites;
  if (this.arenaState < 0x3) {
    this.challenger = _0x5c6892 + _0x1b7aba;
    this.opponent = _0x448a37 + _0x4b0a92;
    this.setP1(_0x5c6892 + _0x1b7aba + _0x4237e3);
    this.setP2(_0x448a37 + _0x4b0a92 + _0x5a0ae4);
  } else {
    if (this.arenaState == 0x3) {
      if (this.winner == 0x1) {
        this.winnerName = _0x5c6892;
        this.setP1(_0x5c6892 + _0x1b7aba + _0x4237e3);
        this.p2Name = null;
      } else if (this.winner == 0x2) {
        this.winnerName = _0x448a37;
        this.setP2(_0x448a37 + _0x4b0a92 + _0x5a0ae4);
        this.p1Name = null;
      }
    }
  }
};
_0x3bad79.prototype.updateTimer = function () {
  this.timer = Math.round(this.timer);
  var _0xf0a4c5 = this.timer;
  if (this.isCountdownTimer) {
    switch (this.timer) {
      case 0x17:
        _0xf0a4c5 = '';
        break;
      case 0x16:
      case 0x15:
        if (this.arenaModeType == 0x3) {
          _0xf0a4c5 = "1V1 TOURNAMENT";
        } else {
          _0xf0a4c5 = "WELCOME TO 1V1 ARENA";
        }
        break;
      case 0x14:
      case 0x13:
        if (this.arenaModeType == 0x3) {
          _0xf0a4c5 = "MATCH #" + this.fightNumber;
        } else {
          var _0x2d5b0c = "MAN";
          if (this.arenaModeType == 0x1) {
            _0x2d5b0c = "NOOB";
          } else {
            if (this.arenaModeType == 0x2) {
              _0x2d5b0c = "PRO";
            }
          }
          _0xf0a4c5 = "FIGHT #" + this.fightNumber + "\n" + (this.climaxType == 0x1 ? "LAST " + _0x2d5b0c + " STANDING" : this.maxBitesToWin + " BITES TO WIN");
          _0xf0a4c5 = curServer.name + "\n" + _0xf0a4c5;
        }
        break;
      case 0x12:
      case 0x11:
        if (!this.isCpuVsPlayer) {
          _0xf0a4c5 = "CHALLENGER";
          break;
        }
      case 0x10:
      case 0xf:
        if (this.isCpuVsPlayer) {
          _0xf0a4c5 = "REDEMPTION\nLEVEL " + this.p1Wins;
        } else {
          _0xf0a4c5 = this.challenger;
        }
        break;
      case 0xe:
      case 0xd:
        _0xf0a4c5 = "OPPONENT";
        break;
      case 0xc:
      case 0xb:
        _0xf0a4c5 = this.opponent;
        break;
      case 0x2:
        _0xf0a4c5 = "ROUND " + this.rounds;
        break;
      case 0x1:
        _0xf0a4c5 = "GET SET";
        break;
      case 0x0:
        _0xf0a4c5 = "FIGHT";
        break;
    }
    if (this.timer < 0x14 && !this.displayAds && !this.adShown) {
      this.displayAds = true;
    }
  }
  this.setTimer(_0xf0a4c5);
};
_0x3bad79.prototype.adShown = false;
_0x3bad79.prototype.displayAds = false;
_0x3bad79.prototype.displayedAdsOnEnd = false;
_0x3bad79.prototype.showAds = function (_0x58babf) {
  if (!_0x1c65d6) {
    if (!this.adShown) {
      if (this.displayAds) {
        if (_0x1853dc > 0xd) {
          this.adShown = true;
          _0x33a49f($bus.CONSTANTS.AD_SCREEN_LAYOUTS.ARENA);
          setTimeout(() => {
            _0x33a49f($bus.CONSTANTS.AD_SCREEN_LAYOUTS.NONE);
          }, _0x58babf);
        }
      }
    }
  }
};
_0x3bad79.prototype.removeAds = function () {
  if (_0x4bf4b8 == this.id) {
    _0x33a49f($bus.CONSTANTS.AD_SCREEN_LAYOUTS.NONE);
  }
};
_0x3bad79.prototype.onRemovedFromGame = function () {
  console.log("Arena removed from game!");
};
function _0x3bad79() {
  _0x3bad79.superClass.call(this);
  this.hasAdLoaded = false;
}
window.AbilityObj1v1Arena = _0x3bad79;
_0x2b451a.setCustomClassForGameObjType(_0x3bad79, 0xe, 0x44);
var _0x3c2776 = _0x3c2776;
var _0x53abbc = _0xf4bb63;
_0x3c2776.prototype = Object.create(_0x53abbc.prototype);
_0x3c2776.prototype.constructor = _0x3c2776;
_0x3c2776.superClass = _0x53abbc;
_0x3c2776.prototype.getSkinName = function () {
  if (this.animalSpecies == 0xdc && this.animalSubSpecies == 0x0) {
    return "ocean/seamonster/" + this.animalSpecies + "/seamonster1";
  } else {
    return "ocean/seamonster/" + this.animalSpecies + "/seamonster";
  }
};
_0x3c2776.prototype.calcAnimalZIndex = function () {
  if (this.flag_underWater) {
    this.z = -0x64;
  } else {
    if (this.flag_isInArena) {
      this.z += 0x3e8;
    } else {
      if (this.flag_eff_tossedInAir) {
        this.z = 0x4b0 + this.rad;
      } else {
        this.z = 0x3e8 + this.rad;
      }
    }
  }
};
_0x3c2776.prototype.animalInfo = function () {
  var _0x40db5c = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x40db5c.aniName = "Sea Monster";
      break;
    case 0x1:
      _0x40db5c.aniName = "Golden Sea Monster";
      break;
    case 0x2:
      _0x40db5c.aniName = "Sapphire Monster";
      break;
    case 0xc8:
      _0x40db5c.aniName = "Luckycharm Monster";
      break;
    case 0xc9:
      _0x40db5c.aniName = "Ancient Tortoise";
      break;
    case 0xca:
      _0x40db5c.aniName = "Submarine Monster";
      break;
    case 0xdc:
      _0x40db5c.aniName = "Dimensional Monster";
      break;
  }
  _0x40db5c.aniCol = "blue";
  _0x40db5c.upgradeText = "UPGRADED to " + _0x40db5c.aniName + "!\nCreate whirlpool to trap prey!" + '';
  _0x40db5c.skinName = "ocean/seamonster/" + this.animalSpecies + "/seamonster";
  return _0x40db5c;
};
_0x3c2776.prototype.getAbilityInfo = function (_0x27a4d3) {
  var _0x3058ea = {
    abilName: "Giant Whirlpool",
    abilImg: "abilities/Whirlpool.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x3058ea;
};
_0x3c2776.prototype.drawSkinCustomization = function () {
  this.setSkinScale();
  if (this.animalSpecies == 0xdc && this.animalSubSpecies == 0x0) {
    var _0x110020 = this.skinScale * 1.07;
    var _0x3fd5d5 = this.skinRad;
    var _0x4b8150 = 0x1 + Math.trunc(_0x1f4c9e / 0x78) % 0x8;
    var _0x365278 = this.getSkinImageObj("skins/ocean/seamonster/220//anim/" + _0x4b8150 + ".png");
    if (_0x365278) {
      _0x3b8ba2.save();
      _0x3b8ba2.drawImage(_0x365278, -_0x3fd5d5 * _0x110020, (-_0x3fd5d5 + _0x3fd5d5 * 0.05) * _0x110020 - 0x0, 0x2 * _0x3fd5d5 * _0x110020, 0x2 * _0x3fd5d5 * _0x110020);
      _0x3b8ba2.restore();
    }
  }
};
_0x3c2776.prototype.basicDrawSkinImg = function () {
  if (this.animalSpecies == 0xdc && this.animalSubSpecies == 0x0) {
    this.setSkinScale();
    var _0x3c34c8 = this.skinRad;
    if (this.loadedSkinImg) {
      overSizeOffset = this.skinRad / 0x2;
      _0x3b8ba2.drawImage(this.loadedSkinImg, -_0x3c34c8 * 1.8, -_0x3c34c8 * 1.8, 0x2 * _0x3c34c8 * 1.8, 0x2 * _0x3c34c8 * 1.8);
    }
  } else {
    _0x3c2776.superClass.prototype.basicDrawSkinImg.call(this);
  }
};
function _0x3c2776() {
  _0x3c2776.superClass.call(this, 0x2);
}
window.SeaMonster = _0x3c2776;
_0x2b451a.setCustomClassForGameObjType(_0x3c2776, 0x2, _0x2fcf20);
var _0x1ee037 = _0x1ee037;
var _0x53abbc = _0xf4bb63;
_0x1ee037.prototype = Object.create(_0x53abbc.prototype);
_0x1ee037.prototype.constructor = _0x1ee037;
_0x1ee037.superClass = _0x53abbc;
_0x1ee037.prototype.calcAnimalZIndex = function () {
  if (this.flag_underWater) {
    this.z = -0x64;
  } else {
    if (this.flag_isInArena) {
      this.z += 0x3e8;
    } else {
      if (this.flag_eff_tossedInAir) {
        this.z = 0x4b0 + this.rad;
      } else {
        this.z = 0x4b0 + this.rad;
      }
    }
  }
};
_0x1ee037.prototype.animalInfo = function () {
  var _0xe41ed6 = {};
  switch (this.animalSubSpecies) {
    case 0x0:
      _0xe41ed6.aniName = "Land Monster";
      break;
    case 0x1:
      _0xe41ed6.aniName = "Golden Land Monster";
      break;
    case 0x2:
      _0xe41ed6.aniName = "Titanite Monster";
      break;
    case 0xca:
      _0xe41ed6.aniName = "Fighter Jet";
      break;
    case 0xcc:
      _0xe41ed6.aniName = "Necromus";
      break;
    case 0xcd:
      _0xe41ed6.aniName = "Planet Eater Monster";
      break;
    case 0xdc:
      _0xe41ed6.aniName = "Belphegor";
      break;
    case 0xde:
      _0xe41ed6.aniName = "Peppermint Monster";
      break;
    case 0x7e7:
      _0xe41ed6.aniName = "Solar Wyvern";
      break;
  }
  _0xe41ed6.aniCol = "orange";
  _0xe41ed6.upgradeText = "UPGRADED to " + _0xe41ed6.aniName + "!\nCreate Sink holes to trap prey!" + '';
  _0xe41ed6.skinName = this.getSkinName();
  return _0xe41ed6;
};
_0x1ee037.prototype.getSkinName = function () {
  if (this.animalSubSpecies == 0xcc) {
    return "volcano/landmonster/" + this.animalSpecies + "/" + this.animalSubSpecies + "/landmonster1";
  } else {
    return "volcano/landmonster/" + this.animalSpecies + "/" + this.animalSubSpecies + "/landmonster";
  }
};
_0x1ee037.prototype.getAbilityInfo = function (_0x2d7e19) {
  var _0x21bb64 = {
    abilName: "Giant\nSinkhole!",
    abilImg: "abilities/Sinkhole.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x21bb64;
};
_0x1ee037.prototype.drawSkinCustomization = function () {
  this.setSkinScale();
  if (this.animalSubSpecies == 0xcc) {
    var _0xad3ca0 = this.skinScale * 1.07;
    var _0x525d44 = this.skinRad;
    var _0x114fb1 = 0x1 + Math.trunc(_0x1f4c9e / 0x78) % 0x7;
    var _0x307f98 = this.getSkinImageObj("skins/volcano/landmonster/0/204//landmonster_head.png");
    if (_0x307f98) {
      _0x3b8ba2.save();
      var _0x525d44 = this.rad;
      _0x3b8ba2.drawImage(_0x307f98, -_0x525d44 * _0xad3ca0, (-_0x525d44 + _0x525d44 * 0.05) * _0xad3ca0 - 0x0, 0x2 * _0x525d44 * _0xad3ca0, 0x2 * _0x525d44 * _0xad3ca0);
      _0x3b8ba2.restore();
      var _0x3b9a92 = this.getSkinImageObj("skins/volcano/landmonster/0/204//fire" + _0x114fb1 + ".png");
      if (_0x3b9a92) {
        _0x3b8ba2.save();
        _0x3b8ba2.drawImage(_0x3b9a92, -_0x525d44 * _0xad3ca0, (-_0x525d44 + _0x525d44 * 0.05) * _0xad3ca0 - 0x0, 0x2 * _0x525d44 * _0xad3ca0, 0x2 * _0x525d44 * _0xad3ca0);
        _0x3b8ba2.restore();
      }
      var _0x3b9a92 = this.getSkinImageObj("skins/volcano/landmonster/0/204//landmonster_head1.png");
      if (_0x3b9a92) {
        _0x3b8ba2.save();
        _0x3b8ba2.drawImage(_0x3b9a92, -_0x525d44 * _0xad3ca0, (-_0x525d44 + _0x525d44 * 0.05) * _0xad3ca0 - 0x0, 0x2 * _0x525d44 * _0xad3ca0, 0x2 * _0x525d44 * _0xad3ca0);
        _0x3b8ba2.restore();
      }
    }
  }
};
_0x1ee037.prototype.basicDrawSkinImg = function () {
  if (this.animalSubSpecies == 0xcc) {
    this.setSkinScale();
    var _0x37d759 = this.skinRad;
    if (this.loadedSkinImg) {
      overSizeOffset = this.skinRad / 0x2;
      _0x3b8ba2.drawImage(this.loadedSkinImg, -_0x37d759 * 1.8, -_0x37d759 * 1.8, 0x2 * _0x37d759 * 1.8, 0x2 * _0x37d759 * 1.8);
    }
  } else {
    _0x1ee037.superClass.prototype.basicDrawSkinImg.call(this);
  }
};
function _0x1ee037() {
  _0x1ee037.superClass.call(this, 0x2);
}
window.LandMonster = _0x1ee037;
_0x2b451a.setCustomClassForGameObjType(_0x1ee037, 0x2, _0x23a03f);
var _0x519a53 = _0x519a53;
var _0x53abbc = _0xf4bb63;
_0x519a53.prototype = Object.create(_0x53abbc.prototype);
_0x519a53.prototype.constructor = _0x519a53;
_0x519a53.superClass = _0x53abbc;
_0x519a53.prototype.calcAnimalZIndex = function () {
  if (this.flag_underWater) {
    this.z = -0x64;
  } else {
    if (this.flag_isInArena) {
      this.z += 0x3e8;
    } else {
      if (this.flag_eff_tossedInAir) {
        this.z = 0x4b0 + this.rad;
      } else {
        this.z = 0x3e8 + this.rad;
      }
    }
  }
};
_0x519a53.prototype.animalInfo = function () {
  var _0x1e0fc1 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x1e0fc1.aniName = "Ice Monster";
      break;
    case 0x1:
      _0x1e0fc1.aniName = "Golden Ice Monster";
      break;
    case 0x2:
      _0x1e0fc1.aniName = "Amethyst Monster";
      break;
    case 0xc9:
      _0x1e0fc1.aniName = "Cryo Coach Monster";
      break;
    case 0xcc:
      _0x1e0fc1.aniName = "Blood Crystal Monster";
      break;
    case 0xdc:
      _0x1e0fc1.aniName = "Blazing Ice Monster";
      break;
  }
  _0x1e0fc1.aniCol = "#ffffff";
  _0x1e0fc1.upgradeText = "UPGRADED to " + _0x1e0fc1.aniName + "!\nShoot Ice crystals to freeze prey!" + '';
  _0x1e0fc1.skinName = "arctic/icemonster/" + this.animalSpecies + "/icemonster";
  return _0x1e0fc1;
};
_0x519a53.prototype.getSkinName = function () {
  var _0xef8567 = this.id == 0x0 ? "ability" : "icemonster";
  return "arctic/icemonster/" + this.animalSpecies + "/" + _0xef8567;
};
_0x519a53.prototype.getAbilityInfo = function (_0x5bae6c) {
  var _0x420907 = {
    abilName: "Freeze Prey!",
    abilImg: "abilities/Ice-Freeze.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x420907;
};
_0x519a53.prototype.readCustomData_onNewlyVisible = function (_0x14add1) {
  _0x519a53.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x14add1);
  this.readCrystalsInfo(_0x14add1);
};
_0x519a53.prototype.readCrystal = function (_0x2e0696, _0x1231a5) {
  var _0x4e4d39 = _0x2e0696.readInt16() / 0x64;
  this.crystals[_0x1231a5].nRad = _0x4e4d39;
  if (_0x4e4d39 < 0x1) {
    this.crystals[_0x1231a5].rad = 0x0;
  }
  this.crystals[_0x1231a5].isReady = _0x2e0696.readUInt8() == 0x1;
};
_0x519a53.prototype.customUpdatedProperty = function (_0x20f125, _0x363505) {
  if (_0x20f125 == 0x4e) {
    this.readCrystal(_0x363505, 0x0);
  } else {
    if (_0x20f125 == 0x4f) {
      this.readCrystal(_0x363505, 0x1);
    } else {
      if (_0x20f125 == 0x50) {
        this.readCrystal(_0x363505, 0x2);
      } else {
        if (_0x20f125 == 0x51) {
          this.readCrystal(_0x363505, 0x3);
        } else {
          if (_0x20f125 == 0x52) {
            this.readCrystal(_0x363505, 0x4);
          } else {
            if (_0x20f125 == 0x53) {
              this.readCrystal(_0x363505, 0x5);
            } else if (_0x20f125 == 0x54) {
              this.readCrystal(_0x363505, 0x6);
            }
          }
        }
      }
    }
  }
};
_0x519a53.prototype.crystals = [];
_0x519a53.prototype.readCrystalsInfo = function (_0x4ef833) {
  var _0x19d4ae = _0x4ef833.readUInt8();
  this.crystals = [];
  for (i = 0x0; i < _0x19d4ae; i++) {
    var _0x23c498 = _0x4ef833.readInt16() / 0x64;
    var _0x55f818 = _0x4ef833.readInt16() / 0x64;
    var _0x2841bf = _0x4ef833.readInt16() / 0x64;
    var _0x43f188 = _0x4ef833.readUInt8() * 0x4;
    var _0x534743 = _0x4ef833.readUInt8() == 0x1;
    this.crystals.push({
      "isReady": _0x534743,
      "x": _0x23c498,
      "y": _0x55f818,
      "nRad": _0x2841bf,
      "oRad": _0x2841bf,
      "rad": _0x2841bf,
      "angle": _0x43f188
    });
  }
};
_0x519a53.prototype.drawSkinCustomization = function () {
  if (this.animalSpecies == 0xc9) {
    _0x3b8ba2.save();
    var _0x4cf429 = 0x0;
    for (i = 0x0; i < this.crystals.length; i++) {
      var _0x1c9a0a = this.crystals[i];
      if (_0x1c9a0a.isReady) {
        _0x4cf429++;
      }
    }
    _0x4cf429 = Math.min(0x5, _0x4cf429);
    var _0x4c69e9 = "skins/arctic/icemonster/201/icemonster" + _0x4cf429 + ".png";
    var _0x26fd15 = this.getSkinImageObj(_0x4c69e9);
    if (_0x26fd15) {
      var _0x599cc2 = this.rad * 1.5;
      _0x3b8ba2.drawImage(_0x26fd15, -_0x599cc2, -_0x599cc2, 0x2 * _0x599cc2, 0x2 * _0x599cc2);
    }
    _0x3b8ba2.restore();
  } else {
    var _0x599cc2 = this.rad - this.outlineW;
    for (i = 0x0; i < this.crystals.length; i++) {
      var _0x1c9a0a = this.crystals[i];
      if (_0x1c9a0a.nRad == 0x0) {
        continue;
      }
      _0x1c9a0a.rad += (_0x1c9a0a.nRad - _0x1c9a0a.rad) * 0.01;
      var _0x1f812a = _0x1c9a0a.x * _0x599cc2;
      var _0x301235 = _0x1c9a0a.y * _0x599cc2;
      var _0x405166 = _0x1c9a0a.angle;
      var _0x2da090 = _0x1c9a0a.rad;
      _0x3b8ba2.save();
      _0x3b8ba2.translate(_0x1f812a, _0x301235);
      _0x3b8ba2.globalAlpha = 0x1;
      _0x3b8ba2.rotate(_0x405166 * (Math.PI / 0xb4));
      var _0x26fd15 = this.getSkinImageObj("skins/arctic/icemonster/" + this.animalSpecies + "/crystal.png");
      if (_0x26fd15) {
        _0x3b8ba2.drawImage(_0x26fd15, -_0x2da090, -_0x2da090 * 0x2, _0x2da090 * 0x2, _0x2da090 * 0x2);
      }
      _0x3b8ba2.restore();
    }
  }
};
function _0x519a53() {
  _0x519a53.superClass.call(this, 0x2);
}
window.IceMonster = _0x519a53;
_0x2b451a.setCustomClassForGameObjType(_0x519a53, 0x2, _0xc3cf49);
var _0x5d3cfe = _0x5d3cfe;
var _0x53abbc = _0xf4bb63;
_0x5d3cfe.prototype = Object.create(_0x53abbc.prototype);
_0x5d3cfe.prototype.constructor = _0x5d3cfe;
_0x5d3cfe.superClass = _0x53abbc;
_0x5d3cfe.prototype.calcAnimalZIndex = function () {
  if (this.flag_underWater) {
    this.z = -0x64;
  } else {
    if (this.flag_isInArena) {
      this.z += 0x3e8;
    } else {
      if (this.flag_eff_tossedInAir) {
        this.z = 0x4b0 + this.rad;
      } else {
        this.z = 0x3e8 + this.rad;
      }
    }
  }
};
_0x5d3cfe.prototype.drawWhenUnderwater = function () {
  this.drawUnderwaterCustomization(0x1, 1.1);
};
_0x5d3cfe.prototype.animalInfo = function () {
  var _0x2582fc = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x2582fc.aniName = "Dino Monster";
      break;
    case 0x1:
      _0x2582fc.aniName = "Golden Dino Monster";
      break;
    case 0x2:
      _0x2582fc.aniName = "Citrine Monster";
      break;
    case 0xc8:
      _0x2582fc.aniName = "Ruby Devil";
      break;
    case 0xca:
      _0x2582fc.aniName = "Tank Monster";
      break;
    case 0xdc:
      _0x2582fc.aniName = "Cordycera Dino Monster";
      break;
  }
  _0x2582fc.aniCol = "orange";
  _0x2582fc.upgradeText = "UPGRADED to " + _0x2582fc.aniName + "!\nKnock prey in Air to inflict deadly damage!" + '';
  _0x2582fc.skinName = "land/dinomonster/" + this.animalSpecies + "/dinomonster";
  return _0x2582fc;
};
_0x5d3cfe.prototype.getSkinName = function () {
  return "land/dinomonster/" + this.animalSpecies + "/dinomonster1";
};
_0x5d3cfe.prototype.getAbilityInfo = function (_0x10a241) {
  var _0x4bc5d7 = {
    abilName: "Knock in Air",
    abilImg: "abilities/Throw.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x4bc5d7;
};
_0x5d3cfe.prototype.drawSkinCustomization = function () {
  var _0x1e07a0 = "skins/land/dinomonster/" + this.animalSpecies + "/dinomonster";
  if (this.flag_usingAbility) {
    _0x1e07a0 += "3";
  } else {
    _0x1e07a0 += "2";
  }
  var _0x3eb712 = this.getSkinImageObj(_0x1e07a0 + ".png");
  if (_0x3eb712) {
    _0x3b8ba2.save();
    var _0x4884ed = (this.rad - this.outlineW) * 1.1;
    _0x3b8ba2.drawImage(_0x3eb712, -_0x4884ed * this.skinScale * 0.91, -_0x4884ed * this.skinScale * 1.1, 0x2 * _0x4884ed * this.skinScale * 0.91, 0x2 * _0x4884ed * this.skinScale * 1.1);
    _0x3b8ba2.restore();
  }
};
function _0x5d3cfe() {
  _0x5d3cfe.superClass.call(this, 0x2);
}
window.DinoMonster = _0x5d3cfe;
_0x2b451a.setCustomClassForGameObjType(_0x5d3cfe, 0x2, _0x30afcb);
var _0x53abbc = _0x472b99;
_0x2dcaa7.prototype = Object.create(_0x53abbc.prototype);
_0x2dcaa7.prototype.constructor = _0x2dcaa7;
_0x2dcaa7.superClass = _0x53abbc;
_0x2dcaa7.prototype.updateZ = function () {
  this.z = 0x3ed;
};
_0x2dcaa7.prototype.customDraw = function (_0x577245) {
  var _0x28ad55 = this.getSkinImageObj("skins/arctic/icemonster/" + this.speciesType + "/crystalfire.png");
  if (_0x28ad55) {
    _0x3b8ba2.save();
    var _0x1d7905 = this.rad * 1.5;
    _0x3b8ba2.rotate(this.angle + 0xb4 * (Math.PI / 0xb4));
    _0x3b8ba2.drawImage(_0x28ad55, -_0x1d7905, -_0x1d7905, _0x1d7905 * 0x2, _0x1d7905 * 2.5);
    _0x3b8ba2.restore();
  }
};
_0x2dcaa7.prototype.getSkinImageObj = function (_0x51bce5) {
  var _0x1a2990 = this.speciesType === 0x1 || this.speciesType === 0x2 || this.speciesType === 0xc9 || this.speciesType === 0xcc ? 0x1 : this.mopeSeasonID;
  var _0x391807 = "./assets/s/" + _0x1a2990 + "/" + _0x51bce5;
  if (this.skinThemeID > 0x0) {
    _0x391807 = "./assets/t/" + this.skinThemeID + "/" + _0x51bce5;
  }
  return _0x3df4ce(_0x391807, function (_0x2f6caa) {
    console.log(_0x2f6caa.src);
  });
};
_0x2dcaa7.prototype.readCustomData_onNewlyVisible = function (_0x31fe4e) {
  _0x2dcaa7.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x31fe4e);
  this.speciesType = _0x31fe4e.readUInt8();
};
function _0x2dcaa7() {
  _0x2dcaa7.superClass.call(this, 0x50);
}
window.IceCrystal = _0x2dcaa7;
_0x2b451a.setCustomClassForGameObjType(_0x2dcaa7, 0x50);
var _0x53abbc = _0x472b99;
_0x2892ea.prototype = Object.create(_0x53abbc.prototype);
_0x2892ea.prototype.constructor = _0x2892ea;
_0x2892ea.superClass = _0x53abbc;
_0x2892ea.prototype.updateZ = function () {
  this.z = -0x65;
};
_0x2892ea.prototype.customDraw = function (_0x246423) {
  _0x3b8ba2.save();
  if (this.specType == 0x0) {
    this.drawOutlinedCircle('', "#9F8641");
    _0x3b8ba2.globalAlpha = 0.6;
    _0x133658(0x0 + this.rPer, 0x1, Math.max(0x0, this.rad * 0.9), "#5C4E28");
    _0x3b8ba2.globalAlpha = 0.7;
    _0x133658(0x0 - this.rPer, 0x1, Math.max(0x0, this.rad * 0.8), "#40371D");
    _0x3b8ba2.globalAlpha = 0.9;
    _0x133658(0x0 - this.rPer, 0x1, Math.max(0x0, this.rad * 0.8), "#40371D");
    _0x3b8ba2.globalAlpha = 0.5;
    _0x133658(0x0 - this.rPer * 0x3, 0x1, Math.max(0x0, this.rad * 0.5), "black");
    _0x3b8ba2.globalAlpha = 0x1;
    _0x133658(0x0 - this.rPer * 0x3, 0x1, Math.max(0x0, this.rad * 0.3), "#ff6000");
  } else {
    this.drawOutlinedCircle('', "#9F8641");
    _0x133658(0x0 - this.rPer, 0x0 - this.rPer, Math.max(0x0, this.rad - 0x7), "#7E6A35");
    _0x133658(0x0 + this.rPer, 0x1, Math.max(0x0, this.rad - 0xe), "#5C4E28");
    _0x133658(0x0 - this.rPer * 0x2 - 0x3, 0x1, Math.max(0x0, this.rad - 18.5), "#40371D");
  }
  _0x3b8ba2.restore();
};
function _0x2892ea() {
  _0x2892ea.superClass.call(this, 0x39);
  this.webTransparency = 0x0;
  this.doesDrawEffectScale = true;
  this.drawEffectScale_Slow = true;
}
window.SinkHole = _0x2892ea;
_0x2b451a.setCustomClassForGameObjType(_0x2892ea, 0x48);
var _0x53abbc = _0x472b99;
_0x575357.prototype = Object.create(_0x53abbc.prototype);
_0x575357.prototype.constructor = _0x575357;
_0x575357.superClass = _0x53abbc;
_0x575357.prototype.mommyID = 0x0;
_0x575357.prototype.updateZ = function () {
  this.z = -0x99;
};
_0x575357.prototype.isEdibleOutlined = function () {
  if (this.mommyID == _0x2bd878) {
    return false;
  }
  var _0x19a589 = _0x37d716.superClass.prototype.isEdibleOutlined.call(this);
  return _0x19a589;
};
_0x575357.prototype.customDraw = function (_0x3c377e) {
  _0x3b8ba2.save();
  var _0x15badc = this.getSkinImageObj("skins/land/ostrich/" + this.speciesType + "/ostrichEgg" + (this.isEdibleOutlined() ? "edible" : '') + ".png");
  if (_0x15badc) {
    var _0x11d3df = this.rad;
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x15badc, -_0x11d3df, -_0x11d3df, 0x2 * _0x11d3df, 0x2 * _0x11d3df);
  }
  _0x3b8ba2.restore();
};
_0x575357.prototype.getSkinImageObj = function (_0x5b9159) {
  var _0x3b5a1e = this.speciesType === 0x1 || this.speciesType === 0x2 || this.speciesType === 0xcc ? 0x1 : this.mopeSeasonID;
  return this.getSkinImageObjForSeason(_0x5b9159, _0x3b5a1e);
};
_0x575357.prototype.readCustomData_onNewlyVisible = function (_0x5119d7) {
  _0x575357.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x5119d7);
  this.mommyID = _0x5119d7.readUInt32();
  this.speciesType = _0x5119d7.readUInt8();
};
function _0x575357() {
  _0x575357.superClass.call(this, 0x42);
  this.doesDrawEffectScale = true;
}
window.OstrichEgg = _0x575357;
_0x2b451a.setCustomClassForGameObjType(_0x575357, 0x42);
var _0x4fbd26 = _0x4fbd26;
var _0x53abbc = _0xf4bb63;
_0x4fbd26.prototype = Object.create(_0x53abbc.prototype);
_0x4fbd26.prototype.constructor = _0x4fbd26;
_0x4fbd26.superClass = _0x53abbc;
_0x4fbd26.prototype.drawNickName = function (_0x561ad4) {
  if (this.flag_usingAbility && this.flag_flying || !this.flag_usingAbility || _0x388788.mode == 0x4) {
    _0x4fbd26.superClass.prototype.drawNickName.call(this, _0x561ad4);
  }
};
_0x4fbd26.prototype.animalInfo = function () {
  var _0x559e5f = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x559e5f.aniName = "Macaw";
      break;
    case 0x1:
      _0x559e5f.aniName = "Blue Macaw";
      break;
    case 0x2:
      _0x559e5f.aniName = "Pakistan Macaw";
      break;
  }
  _0x559e5f.aniCol = "#FF9000";
  _0x559e5f.skinName = this.getSpeciesPath("macaw") + "/macaw";
  _0x559e5f.upgradeText = "UPGRADED to " + (this.animalSpecies == 0x2 ? "Rare " : '') + _0x559e5f.aniName + "!\nHold W to fly around.\n(Hint: Use ability on hills to mimic animals) ";
  return _0x559e5f;
};
_0x4fbd26.prototype.getSkinName = function () {
  var _0x32a292 = this.getSpeciesPath("macaw") + "/macaw";
  _0x32a292 += this.specType == 0x0 ? '' : this.specType;
  return _0x32a292;
};
_0x4fbd26.prototype.getSpeciesPath = function (_0x58b7dd) {
  return "land/" + _0x58b7dd + "/" + this.animalSpecies;
};
_0x4fbd26.prototype.getWing = function (_0x547d73, _0x507055, _0x2bdbf7) {
  var _0x353e16 = "skins/" + (_0x2bdbf7 ? this.getSpeciesPath(_0x547d73) + "/" : _0x547d73 + "/");
  _0x353e16 += _0x547d73 + "_wing" + _0x507055 + ".png";
  return _0x353e16;
};
_0x4fbd26.prototype.getHead = function (_0x8b1d41, _0x224f79) {
  var _0x50b828 = "skins/" + (_0x224f79 ? this.getSpeciesPath(_0x8b1d41) + "/" : _0x8b1d41 + "/");
  _0x50b828 += _0x8b1d41 + "_head.png";
  return _0x50b828;
};
_0x4fbd26.prototype.getAniRadius = function (_0x511c7e) {
  if (this.flag_usingDiveAbility) {
    return _0x511c7e * 0.7;
  }
  return this.flag_flying ? _0x511c7e * 0.9 : _0x511c7e;
};
_0x4fbd26.prototype.basicDrawSkinImg = function () {
  if (this.flag_usingAbility) {
    if (!this.flag_flying && this.octoDrawObj != null) {
      return;
    }
  }
  _0x4fbd26.superClass.prototype.basicDrawSkinImg.call(this);
  if (this.skinThemeID != 0x0) {
    return;
  }
  var _0x40e83c = -0.08;
  this.setSkinScale();
  var _0x3d1ba9 = this.getAniRadius(this.skinRad - this.outlineW);
  if (this.loadedSkinImg) {
    _0x3b8ba2.drawImage(this.loadedSkinImg, -_0x3d1ba9 * 1.4705882352941178, -_0x3d1ba9 * 1.4705882352941178, 0x2 * _0x3d1ba9 * 1.4705882352941178, 0x2 * _0x3d1ba9 * 1.4705882352941178);
    if (this.flag_flying || !this.flag_usingAbility) {
      var _0x5ddcf6 = "skins/" + this.getSpeciesPath("macaw") + "/tail.png";
      var _0x50dc37 = this.getSkinImageObj(_0x5ddcf6);
      var _0x52c49 = this.skinScale;
      if (_0x50dc37) {
        _0x3b8ba2.save();
        var _0x3d1ba9 = this.rad - this.outlineW;
        _0x3b8ba2.drawImage(_0x50dc37, -_0x3d1ba9 * 1.1 * _0x52c49, (-_0x3d1ba9 + _0x3d1ba9 * _0x40e83c) * 1.1 * _0x52c49, 0x2 * _0x3d1ba9 * 1.1 * _0x52c49, 0x2 * _0x3d1ba9 * 1.1 * _0x52c49);
        _0x3b8ba2.restore();
      }
    }
    if (!this.flag_usingAbility) {
      var _0x180529 = this.getSkinImageObj("skins/" + this.getSpeciesPath("macaw") + "/top.png");
      if (_0x180529) {
        _0x3b8ba2.drawImage(_0x180529, -_0x3d1ba9 * 1.4705882352941178, (-_0x3d1ba9 + _0x3d1ba9 * 0.05) * 1.4705882352941178, 0x2 * _0x3d1ba9 * 1.4705882352941178, 0x2 * _0x3d1ba9 * 1.4705882352941178);
      }
    }
  }
};
_0x4fbd26.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    return;
  }
  var _0x5c1bee = this.getAniRadius(this.skinRad - this.outlineW);
  var _0x154b67 = _0x5c1bee * 0.8;
  if (this.flag_flying) {
    if (this.flag_flying && !this.flag_isGrabbed) {
      _0x3b8ba2.save();
      let _0x53b94e = _0x1d1686("bird", this.spawnTime);
      if (_0x53b94e !== undefined && _0x53b94e != null) {
        this.theFrame = _0x53b94e;
      }
      let _0x47c708 = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
      var _0x28496f = this.getSkinImageObj(this.getWing("macaw", 0x1, true));
      if (_0x28496f) {
        _0x3b8ba2.save();
        var _0x306921 = -(-0.2 + _0x47c708) * _0x4bb70c;
        _0x3b8ba2.rotate(_0x46d781 + _0x306921);
        var _0x2ba596 = 0x0;
        var _0x2d443a = _0x154b67;
        var _0x45a2eb = _0x154b67 * 0x2 * 0.62;
        var _0x5310e8 = _0x154b67 * 2.2;
        var _0x21c8d3 = 0.2;
        var _0xdeb90e = 1.7;
        _0x3b8ba2.drawImage(_0x28496f, _0x2ba596 + _0x45a2eb * -_0x21c8d3, _0x2d443a + _0x5310e8 * -_0xdeb90e, _0x45a2eb, _0x5310e8);
        _0x3b8ba2.restore();
      }
      var _0x28496f = this.getSkinImageObj(this.getWing("macaw", 0x2, true));
      if (_0x28496f) {
        _0x3b8ba2.save();
        var _0x306921 = -(-0.2 + _0x47c708) * -_0x4bb70c;
        _0x3b8ba2.rotate(-_0x46d781 + _0x306921);
        var _0x2ba596 = 0x0;
        var _0x2d443a = _0x154b67;
        var _0x45a2eb = _0x154b67 * 0x2 * 0.62;
        var _0x5310e8 = _0x154b67 * 2.2;
        var _0x21c8d3 = 0.8;
        var _0xdeb90e = 1.7;
        _0x3b8ba2.drawImage(_0x28496f, _0x2ba596 + _0x45a2eb * -_0x21c8d3, _0x2d443a + _0x5310e8 * -_0xdeb90e, _0x45a2eb, _0x5310e8);
        _0x3b8ba2.restore();
      }
      _0x3b8ba2.restore();
    }
    if (this.specType != 0x0 && this.specType != undefined) {
      var _0x57e6c6 = this.getSkinImageObj(this.getHead("macaw", true));
      if (_0x57e6c6) {
        _0x3b8ba2.save();
        var _0x5c1bee = this.rad;
        _0x3b8ba2.drawImage(_0x57e6c6, -_0x5c1bee * 1.4705882352941178, (-_0x5c1bee + _0x5c1bee * 0.2) * 1.4705882352941178, 0x2 * _0x5c1bee * 1.4705882352941178, 0x2 * _0x5c1bee * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
    }
  }
};
_0x4fbd26.prototype.readCustomData_onNewlyVisible = function (_0x1f8958) {
  _0x4fbd26.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x1f8958);
  this.customUpdatedProperty(0x5e, _0x1f8958);
};
_0x4fbd26.prototype.customUpdatedProperty = function (_0x303c53, _0x2e29e7) {
  if (_0x303c53 == 0x5e) {
    var _0x2049a8 = _0x2e29e7.readUInt8() == 0x1;
    if (_0x2049a8) {
      var _0x55d178 = _0x2e29e7.readUInt16();
      var _0x5c5aae = _0x2e29e7.readUInt16();
      this.createDisguiseAniObj(_0x55d178, _0x5c5aae);
    } else {
      this.octoDrawObj = null;
    }
  }
};
_0x4fbd26.prototype.createDisguiseAniObj = function (_0x49fff0, _0x51117b) {
  if (this.octoDrawObj == null) {
    var _0x2b960a = _0x2b451a.createGameObjOfOType(0x2, _0x49fff0);
    _0x2b960a.animalType = _0x49fff0;
    _0x2b960a.animalSpecies = _0x51117b;
    _0x2b960a.rad = _0x2b960a.oRad = _0x2b960a.nRad = this.rad;
    _0x2b960a.curBiome = this.curBiome;
    _0x2b960a.hp = 0x5 + Math.random() * 0x32;
    this.octoDrawObj = _0x2b960a;
  }
};
_0x4fbd26.prototype.drawHealthBar = function () {
  if (this.flag_usingAbility && !this.flag_flying && this.octoDrawObj != null) {
    this.octoDrawObj.curBiome = this.curBiome;
    this.hpPer_n = 0x1;
    this.hpPer = this.octoDrawObj.hp;
    this.hpBarA = 0x1;
  }
  _0x3b8ba2.save();
  var _0x2b72da = _0x1f4c9e < this.hpBarTimeoutT ? 0x1 : 0x0;
  this.hpBarA += (_0x2b72da - this.hpBarA) * 0.04;
  if (this.hpBarA > 0.001) {
    this.hpPer += (this.hpPer_n - this.hpPer) * 0.1;
    var _0x159361 = Math.max(0x1, this.rad / 0x19);
    var _0x38b1b0 = 0x14 * _0x159361;
    var _0x117b29 = 0x5 * _0x159361;
    var _0x5e3ed3 = -this.rad - 0xa * _0x159361;
    _0x3b8ba2.globalAlpha *= this.hpBarA;
    _0x3b8ba2.fillStyle = "rgba(0,0,0,0.35)";
    _0x3b8ba2.fillRect(0x0 - _0x38b1b0 / 0x2, _0x5e3ed3 - _0x117b29 / 0x2, _0x38b1b0, _0x117b29);
    _0x3b8ba2.fillStyle = "#16D729";
    var _0x52da81 = _0x38b1b0 * (this.hpPer / 0x64);
    if (this.flag_usingAbility && this.octoIsAnimal) {
      _0x52da81 = _0x38b1b0 * 0.25;
    }
    _0x3b8ba2.fillRect(0x0 - _0x38b1b0 / 0x2, _0x5e3ed3 - _0x117b29 / 0x2, _0x52da81, _0x117b29);
  }
  _0x3b8ba2.restore();
};
_0x4fbd26.prototype.drawOnTopOfSkinImg = function () {
  _0x4fbd26.superClass.prototype.drawOnTopOfSkinImg.call(this);
  if (this.flag_usingAbility && !this.flag_flying) {
    if (this.octoDrawObj != null) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0x1;
      this.octoDrawObj.mopeSeasonID = this.mopeSeasonID;
      this.octoDrawObj.rad = this.rad;
      this.octoDrawObj.draw();
      _0x3b8ba2.restore();
    }
  }
};
function _0x4fbd26() {
  _0x4fbd26.superClass.call(this, 0x2);
}
window.Macaw = _0x4fbd26;
_0x2b451a.setCustomClassForGameObjType(_0x4fbd26, 0x2, _0x371924);
var _0x2b14c9 = _0x2b14c9;
var _0x53abbc = _0xf4bb63;
_0x2b14c9.prototype = Object.create(_0x53abbc.prototype);
_0x2b14c9.prototype.constructor = _0x2b14c9;
_0x2b14c9.superClass = _0x53abbc;
_0x2b14c9.prototype.getSkinName = function () {
  var _0x424fc4 = this.getSpeciesPath("flamingo") + "/flamingo";
  _0x424fc4 += this.specType == 0x0 ? '' : this.specType;
  return _0x424fc4;
};
_0x2b14c9.prototype.animalInfo = function () {
  var _0x4fecbe = {
    "aniName": "Flamingo"
  };
  switch (this.animalSpecies) {
    case 0xca:
      _0x4fecbe.aniName = "Fly Mango";
      break;
  }
  _0x4fecbe.aniCol = "#FF9000";
  _0x4fecbe.skinName = this.getSpeciesPath("flamingo") + "/flamingo";
  _0x4fecbe.upgradeText = "UPGRADED to Flamingo!\nHold W in water to search for food underwater.\n(Tip: Any nearby underwater animals will get surfaced by the flamingo!)";
  return _0x4fecbe;
};
_0x2b14c9.prototype.getSpeciesPath = function (_0x565ce2) {
  return "ocean/" + _0x565ce2 + "/" + this.animalSpecies;
};
_0x2b14c9.prototype.getWing = function (_0x10364d, _0x564537, _0x213cf6) {
  var _0x361961 = "skins/" + this.getSpeciesPath(_0x10364d) + (_0x213cf6 ? "/pink" : '') + "/";
  _0x361961 += _0x10364d + "_wing" + _0x564537 + ".png";
  return _0x361961;
};
_0x2b14c9.prototype.getHead = function (_0x8ca2c8, _0x5f117c) {
  var _0x59317f = "skins/" + this.getSpeciesPath(_0x8ca2c8) + (_0x5f117c ? "/pink" : '') + "/";
  _0x59317f += _0x8ca2c8 + "_head.png";
  return _0x59317f;
};
_0x2b14c9.prototype.getAbilityInfo = function (_0x315735) {
  var _0x5b88b2 = {
    abilName: "HOLD in water\n(find food)",
    abilImg: this.flag_isClimbingHill || this.flag_flying ? "abilities/Fly.svg" : "abilities/Dive.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x5b88b2;
};
_0x2b14c9.prototype.basicDrawSkinImg = function () {
  _0x2b14c9.superClass.prototype.basicDrawSkinImg.call(this);
  if (!this.flag_underWater && this.id > 0x0) {
    var _0x27a6e2 = this.skinScale;
    var _0x1cd980 = this.skinRad;
    var _0x6cdeba = "skins/" + this.getSpeciesPath("flamingo") + "/pink/flamingo";
    _0x6cdeba += this.specType == 0x0 ? '' : this.specType;
    var _0x506ab8 = this.getSkinImageObj(_0x6cdeba + ".png");
    if (_0x506ab8) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = this.colorPerc;
      _0x3b8ba2.drawImage(_0x506ab8, -_0x1cd980 * _0x27a6e2, -_0x1cd980 * _0x27a6e2, 0x2 * _0x1cd980 * _0x27a6e2, 0x2 * _0x1cd980 * _0x27a6e2);
      _0x3b8ba2.restore();
    }
  }
};
_0x2b14c9.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    return;
  }
  _0x3b8ba2.save();
  var _0x25a8e5 = this.flag_flying ? 0x2d : 0x2f;
  var _0x1cc9aa = this.flag_flying ? 0x5a : 0x2d;
  var _0xf4de24 = this.flag_flying ? 0.2 : 0.01;
  var _0x5af3e7 = this.flag_flying ? 2.5 : 0x2;
  var _0x4f6e08 = this.flag_flying ? 0x2 : 2.5;
  var _0x982aa6 = this.flag_flying ? 0.5 : 1.2;
  var _0x527e23 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  if (this.flag_flying) {
    var _0x27f44f = _0x1d1686("bird", this.spawnTime);
    if (_0x27f44f !== undefined && _0x27f44f != null) {
      this.theFrame = _0x27f44f;
    }
  } else {
    this.theFrame = !(_0x4bda0b == 0x2 || _0x11da90) ? _0x7b826(_0x527e23, _0x982aa6, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle;
  }
  var _0x3bf365 = this.theFrame;
  var _0x3d985b = this.getSkinImageObj(this.getWing("flamingo", 0x1, false));
  if (_0x3d985b) {
    _0x3b8ba2.save();
    var _0x34fcf3 = -(-_0xf4de24 + _0x3bf365) * (_0x1cc9aa * (Math.PI / 0xb4));
    var _0x3c6ba6 = this.rad * 0.8;
    _0x3b8ba2.rotate(_0x25a8e5 * (Math.PI / 0xb4) + _0x34fcf3);
    var _0x20f28f = 0x0;
    var _0xbec527 = this.rad;
    var _0x8e912a = _0x3c6ba6 * _0x4f6e08 * 0.62;
    var _0xbd5bff = _0x3c6ba6 * _0x5af3e7;
    var _0x42bd43 = 0.2;
    var _0x502dbc = 1.7;
    _0x3b8ba2.drawImage(_0x3d985b, _0x20f28f + _0x8e912a * -_0x42bd43, _0xbec527 + _0xbd5bff * -_0x502dbc, _0x8e912a, _0xbd5bff);
    _0x3b8ba2.restore();
  }
  var _0x3d985b = this.getSkinImageObj(this.getWing("flamingo", 0x2, false));
  if (_0x3d985b) {
    _0x3b8ba2.save();
    var _0x34fcf3 = -(-_0xf4de24 + _0x3bf365) * (-_0x1cc9aa * (Math.PI / 0xb4));
    var _0x3c6ba6 = this.rad * 0.8;
    _0x3b8ba2.rotate(-_0x25a8e5 * (Math.PI / 0xb4) + _0x34fcf3);
    var _0x20f28f = 0x0;
    var _0xbec527 = this.rad;
    var _0x8e912a = _0x3c6ba6 * _0x4f6e08 * 0.62;
    var _0xbd5bff = _0x3c6ba6 * _0x5af3e7;
    var _0x42bd43 = 0.8;
    var _0x502dbc = 1.7;
    _0x3b8ba2.drawImage(_0x3d985b, _0x20f28f + _0x8e912a * -_0x42bd43, _0xbec527 + _0xbd5bff * -_0x502dbc, _0x8e912a, _0xbd5bff);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
  if (this.specType == 0x1) {
    var _0x115c27 = this.getSkinImageObj(this.getHead("flamingo", false));
    if (_0x115c27) {
      _0x3b8ba2.save();
      var _0x3c6ba6 = this.rad;
      _0x3b8ba2.drawImage(_0x115c27, -_0x3c6ba6 * 1.4705882352941178, (-_0x3c6ba6 + _0x3c6ba6 * 0.1) * 1.4705882352941178, 0x2 * _0x3c6ba6 * 1.4705882352941178, 0x2 * _0x3c6ba6 * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
  }
};
_0x2b14c9.prototype.drawUnderSkinImgOutline = function () {
  _0x2b14c9.superClass.prototype.drawUnderSkinImgOutline.call(this);
  if (this.flag_usingAbility && !this.flag_flying) {
    var _0x407af1 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x37857e = 0.5 * Math.sin(0x2 * Math.PI / 1.5 * _0x407af1);
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha *= 0.8;
    _0x133658(0x0, this.rad * (0.9 + 0.12 * _0x37857e), this.rad * 0.3, "#2c84ff");
    _0x133658(0x0, -this.rad * 0.3, this.rad * (1.05 + 0.09 * _0x37857e), "#4668ff");
    _0x3b8ba2.restore();
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0x1;
    _0x3b8ba2.fillStyle = "#4E71C3";
    var _0x374cf5 = this.rad * 0.1;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * -0.3, this.rad * 1.2, Math.max(0x0, _0x374cf5 + _0x37857e), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * 0.2, this.rad * 1.5, Math.max(0x0, _0x374cf5 - _0x37857e), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * 0.3, this.rad * 1.2, Math.max(0x0, _0x374cf5 + _0x37857e), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * -0.2, this.rad * 1.5, Math.max(0x0, _0x374cf5 - _0x37857e), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.restore();
  }
};
_0x2b14c9.prototype.readCustomData_onNewlyVisible = function (_0x191576) {
  _0x2b14c9.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x191576);
  var _0x30e78d = _0x191576.readUInt8();
  this.colorPerc = _0x30e78d / 0x64;
};
_0x2b14c9.prototype.customUpdatedProperty = function (_0x331c2c, _0x4d3980) {
  if (_0x331c2c == 0x5d) {
    var _0x27b086 = _0x4d3980.readUInt8();
    this.colorPerc = _0x27b086 / 0x64;
  }
};
function _0x2b14c9() {
  _0x2b14c9.superClass.call(this, 0x2);
}
window.Flamingo = _0x2b14c9;
_0x2b451a.setCustomClassForGameObjType(_0x2b14c9, 0x2, _0x45f5fa);
var _0x53abbc = _0xf4bb63;
_0x15894b.prototype = Object.create(_0x53abbc.prototype);
_0x15894b.prototype.constructor = _0x15894b;
_0x15894b.superClass = _0x53abbc;
_0x15894b.prototype.getSkinName = function () {
  let _0xc86e64 = this.getSpeciesPath() + "/cassowary";
  _0xc86e64 += this.specType == 0x0 ? '' : this.specType;
  return _0xc86e64;
};
_0x15894b.prototype.getSpeciesPath = function () {
  return "land/cassowary/" + this.animalSpecies + this.getSubSpecies();
};
_0x15894b.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x15894b.prototype.getAbilityInfo = function (_0x2e27ea) {
  var _0x436d06 = {
    abilName: "Front Kick\n(Hold to Charge)",
    abilImg: "abilities/Kick.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x436d06;
};
_0x15894b.prototype.animalInfo = function () {
  var _0x1aa944 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x1aa944.aniName = "Cassowary!";
      break;
    case 0x1:
      _0x1aa944.aniName = "Golden Cassowary!";
      break;
    case 0x2:
      _0x1aa944.aniName = "Cotton Cassowary!";
      break;
    case 0xca:
      _0x1aa944.aniName = "Pastel Cassowary";
      break;
    case 0xcc:
      _0x1aa944.aniName = "Basilisk Cassowary!";
      break;
  }
  _0x1aa944.aniCol = "#FF9000";
  _0x1aa944.skinName = this.getSkinName();
  _0x1aa944.upgradeText = "UPGRADED to " + _0x1aa944.aniName + "!\nHold W to charge up a kick, the longer you hold, the more powerful it is!";
  return _0x1aa944;
};
function _0x15894b() {
  _0x15894b.superClass.call(this, 0x2);
}
window.Cassowary = _0x15894b;
_0x2b451a.setCustomClassForGameObjType(_0x15894b, 0x2, _0x1f9f6d);
var _0x53abbc = _0xf4bb63;
_0x559088.prototype = Object.create(_0x53abbc.prototype);
_0x559088.prototype.constructor = _0x559088;
_0x559088.superClass = _0x53abbc;
_0x559088.prototype.getSkinName = function () {
  var _0xc73629 = "land/chicken/" + this.animalSpecies + "/chicken";
  _0xc73629 += this.specType == 0x0 ? '' : this.specType;
  return _0xc73629;
};
_0x559088.prototype.animalInfo = function () {
  var _0x3a9ac3 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x3a9ac3.aniName = "Chicken";
      break;
    case 0xc9:
      _0x3a9ac3.aniName = "Countryside Chick";
      break;
    case 0xca:
      _0x3a9ac3.aniName = "Lightning Lord";
      break;
  }
  _0x3a9ac3.aniCol = "#FF9000";
  _0x3a9ac3.skinName = "land/chicken/" + this.animalSpecies + "/chicken";
  _0x3a9ac3.upgradeText = "UPGRADED to " + _0x3a9ac3.aniName + "!";
  return _0x3a9ac3;
};
_0x559088.prototype.getWing = function (_0x171208, _0x1f797c, _0x35c205) {
  var _0x43dd31 = "skins/land/" + (_0x35c205 ? this.getSpeciesPath(_0x171208) + "/" : _0x171208 + "/");
  _0x43dd31 += _0x171208 + "_wing" + _0x1f797c + ".png";
  return _0x43dd31;
};
_0x559088.prototype.getHead = function (_0x5b2480, _0xa63809) {
  var _0x1df2c9 = "skins/land/" + (_0xa63809 ? this.getSpeciesPath(_0x5b2480) + "/" : _0x5b2480 + "/");
  _0x1df2c9 += _0x5b2480 + "_head.png";
  return _0x1df2c9;
};
_0x559088.prototype.getAbilityInfo = function (_0x49b0d5) {
  var _0x53985f = {
    abilName: "Run!",
    abilImg: "abilities/Dash-Boost.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x53985f;
};
_0x559088.prototype.drawSkinCustomization = function () {
  if (this.flag_usingAbility) {
    _0x3b8ba2.save();
    var _0x288fbf = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x1e57a3 = _0x7b826(_0x288fbf, 0.3, 0x1, 0x2);
    var _0x3353c4 = this.getSkinImageObj(this.getWing("chicken", 0x1, true));
    if (_0x3353c4) {
      _0x3b8ba2.save();
      var _0x157e56 = -(-0.2 + _0x1e57a3) * (0xf * (Math.PI / 0xb4));
      var _0x4a9c6f = this.rad * 0.8;
      _0x3b8ba2.rotate(0xf * (Math.PI / 0xb4) + _0x157e56);
      var _0x523e86 = 0x0;
      var _0x43129f = this.rad;
      var _0x55d718 = _0x4a9c6f * 0x2 * 0.7;
      var _0x28c937 = _0x4a9c6f * 2.2;
      var _0xcf8907 = 0x0;
      var _0xffbe92 = 1.5;
      _0x3b8ba2.drawImage(_0x3353c4, _0x523e86 + _0x55d718 * -_0xcf8907, _0x43129f + _0x28c937 * -_0xffbe92, _0x55d718, _0x28c937);
      _0x3b8ba2.restore();
    }
    var _0x3353c4 = this.getSkinImageObj(this.getWing("chicken", 0x2, true));
    if (_0x3353c4) {
      _0x3b8ba2.save();
      var _0x157e56 = -(-0.2 + _0x1e57a3) * (-0xf * (Math.PI / 0xb4));
      var _0x4a9c6f = this.rad * 0.8;
      _0x3b8ba2.rotate(-0xf * (Math.PI / 0xb4) + _0x157e56);
      var _0x523e86 = 0x0;
      var _0x43129f = this.rad;
      var _0x55d718 = _0x4a9c6f * 0x2 * 0.7;
      var _0x28c937 = _0x4a9c6f * 2.2;
      var _0xcf8907 = 0x1;
      var _0xffbe92 = 1.5;
      _0x3b8ba2.drawImage(_0x3353c4, _0x523e86 + _0x55d718 * -_0xcf8907, _0x43129f + _0x28c937 * -_0xffbe92, _0x55d718, _0x28c937);
      _0x3b8ba2.restore();
    }
    var _0x584824 = this.getSkinImageObj(this.getHead("chicken", true));
    if (_0x584824) {
      _0x3b8ba2.save();
      var _0x4a9c6f = this.rad * 0x1;
      var _0x2a9eeb = -this.rad * 0.1;
      _0x3b8ba2.drawImage(_0x584824, -_0x4a9c6f * 1.4705882352941178, -_0x4a9c6f + _0x2a9eeb * 1.4705882352941178, 0x2 * _0x4a9c6f * 1.4705882352941178, 0x2 * _0x4a9c6f * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
    _0x3b8ba2.restore();
  }
};
function _0x559088() {
  _0x559088.superClass.call(this, 0x2);
}
window.Chicken = _0x559088;
_0x2b451a.setCustomClassForGameObjType(_0x559088, 0x2, _0x6025f6);
var _0x16bfb2 = _0x16bfb2;
var _0x53abbc = _0xf4bb63;
_0x16bfb2.prototype = Object.create(_0x53abbc.prototype);
_0x16bfb2.prototype.constructor = _0x16bfb2;
_0x16bfb2.superClass = _0x53abbc;
_0x16bfb2.prototype.animalInfo = function () {
  var _0x51c9d2 = {
    "aniName": "Woodpecker"
  };
  switch (this.animalSpecies) {
    case 0xca:
      _0x51c9d2.aniName = "Jackhammer";
      break;
  }
  _0x51c9d2.aniCol = "#FF9000";
  _0x51c9d2.skinName = this.getSpeciesPath("woodpecker") + "/woodpecker";
  _0x51c9d2.upgradeText = "UPGRADED to Woodpecker!\nHold W to Peck other animals,\n or (Hint: Use ability on hills to fly)";
  return _0x51c9d2;
};
_0x16bfb2.prototype.getSpeciesPath = function (_0x896b72) {
  return "land/" + _0x896b72 + "/" + this.animalSpecies;
};
_0x16bfb2.prototype.getSkinName = function () {
  var _0x3bf8aa = this.getSpeciesPath("woodpecker") + "/woodpecker";
  _0x3bf8aa += this.specType == 0x0 ? '' : this.specType;
  return _0x3bf8aa;
};
_0x16bfb2.prototype.getHead = function (_0x36c9d7, _0x32d54c) {
  var _0x4e60f5 = "skins/" + (_0x32d54c ? this.getSpeciesPath(_0x36c9d7) + "/" : _0x36c9d7 + "/");
  _0x4e60f5 += _0x36c9d7 + "_head" + (!this.flag_flying && this.flag_usingAbility ? "1" : '') + ".png";
  return _0x4e60f5;
};
_0x16bfb2.prototype.getAbilityInfo = function (_0x290cfe) {
  var _0x528c4d = {
    abilName: "HOLD to Peck\n/ Fly",
    abilImg: "abilities/Peck.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x528c4d;
};
_0x16bfb2.prototype.getAniRadius = function (_0x430562) {
  if (this.flag_usingAbility && this.flag_flying) {
    return _0x430562 * 0.8;
  }
  return _0x430562;
};
_0x16bfb2.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    return;
  }
  {
    _0x3b8ba2.save();
    var _0x2bcc8d = this.flag_flying ? 0x2d : 0x2f;
    var _0x4d1c8b = this.flag_flying ? 0x5a : 0x2d;
    var _0x121292 = this.flag_flying ? 0.2 : 0.01;
    var _0x209762 = this.flag_flying ? 2.5 : 0x2;
    var _0x3e7875 = this.flag_flying ? 2.2 : 2.5;
    var _0x37ab46 = this.flag_flying ? 0.5 : 0.3;
    var _0x519bcf = 0.3;
    var _0x1dad61 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    if (this.flag_flying) {
      var _0x25b31f = _0x1d1686("bird", this.spawnTime);
      if (_0x25b31f !== undefined && _0x25b31f != null) {
        this.theFrame = _0x25b31f;
      }
    } else {
      this.theFrame = !(_0x4bda0b == 0x2 || _0x11da90) ? _0x7b826(_0x1dad61, _0x37ab46, _0x519bcf, 0x2) : this.birdNoAnimationFlyWingAngle;
    }
    var _0x2fc530 = this.theFrame;
    var _0x17d010 = this.getSkinImageObj(this.getWing("woodpecker", 0x1, true));
    if (_0x17d010) {
      _0x3b8ba2.save();
      var _0x4270f9 = -(-_0x121292 + _0x2fc530) * (_0x4d1c8b * (Math.PI / 0xb4));
      var _0x259370 = this.rad * 0.8;
      _0x3b8ba2.rotate(_0x2bcc8d * (Math.PI / 0xb4) + _0x4270f9);
      var _0x1907d0 = 0x0;
      var _0x2aa9a1 = this.rad;
      var _0x16a694 = _0x259370 * _0x3e7875 * 0.62;
      var _0x1f21d1 = _0x259370 * _0x209762;
      var _0x3c62d2 = 0.2;
      var _0x53f4f6 = 1.7;
      _0x3b8ba2.drawImage(_0x17d010, _0x1907d0 + _0x16a694 * -_0x3c62d2, _0x2aa9a1 + _0x1f21d1 * -_0x53f4f6, _0x16a694, _0x1f21d1);
      _0x3b8ba2.restore();
    }
    var _0x17d010 = this.getSkinImageObj(this.getWing("woodpecker", 0x2, true));
    if (_0x17d010) {
      _0x3b8ba2.save();
      var _0x4270f9 = -(-_0x121292 + _0x2fc530) * (-_0x4d1c8b * (Math.PI / 0xb4));
      var _0x259370 = this.rad * 0.8;
      _0x3b8ba2.rotate(-_0x2bcc8d * (Math.PI / 0xb4) + _0x4270f9);
      var _0x1907d0 = 0x0;
      var _0x2aa9a1 = this.rad;
      var _0x16a694 = _0x259370 * _0x3e7875 * 0.62;
      var _0x1f21d1 = _0x259370 * _0x209762;
      var _0x3c62d2 = 0.8;
      var _0x53f4f6 = 1.7;
      _0x3b8ba2.drawImage(_0x17d010, _0x1907d0 + _0x16a694 * -_0x3c62d2, _0x2aa9a1 + _0x1f21d1 * -_0x53f4f6, _0x16a694, _0x1f21d1);
      _0x3b8ba2.restore();
    }
    _0x3b8ba2.restore();
    if (this.specType != 0x0 && this.specType != undefined) {
      var _0x408baa = this.getSkinImageObj(this.getHead("woodpecker", true));
      if (_0x408baa) {
        _0x2fc530 = 0x0;
        if (!this.flag_flying) {
          _0x519bcf = 0x3;
          _0x37ab46 = 0.18;
          _0x2fc530 = !(_0x4bda0b == 0x2) ? _0x7b826(_0x1dad61, _0x37ab46, _0x519bcf, 0x2) : this.birdNoAnimationFlyWingAngle;
        }
        _0x3b8ba2.save();
        var _0x259370 = this.rad;
        var _0x3f00a0 = !this.flag_flying ? (-_0x259370 + _0x259370 * 0.1) * 1.4705882352941178 + _0x2fc530 : -_0x259370;
        _0x3b8ba2.drawImage(_0x408baa, -_0x259370 * 1.4705882352941178, _0x3f00a0, 0x2 * _0x259370 * 1.4705882352941178, 0x2 * _0x259370 * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
    }
  }
};
function _0x16bfb2() {
  _0x16bfb2.superClass.call(this, 0x2);
}
window.Woodpecker = _0x16bfb2;
_0x2b451a.setCustomClassForGameObjType(_0x16bfb2, 0x2, _0x147e06);
var _0x4be9da = _0x4be9da;
var _0x53abbc = _0xf4bb63;
_0x4be9da.prototype = Object.create(_0x53abbc.prototype);
_0x4be9da.prototype.constructor = _0x4be9da;
_0x4be9da.superClass = _0x53abbc;
_0x4be9da.prototype.updateZ = function () {
  if (this.flag_usingAbility) {
    if (this.flag_flying) {
      this.z = 0x186a0 + this.rad;
      return;
    }
  }
  this.z = 0x3e8 + this.rad;
};
_0x4be9da.prototype.animalInfo = function () {
  var _0x2cb6db = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x2cb6db.aniName = "Peacock";
      break;
    case 0xc8:
      _0x2cb6db.aniName = "Plague Raptor";
      break;
    case 0xca:
      _0x2cb6db.aniName = "Spectrum Peacock";
      break;
  }
  _0x2cb6db.aniCol = "#FF9000";
  _0x2cb6db.skinName = this.getSpeciesPath("peacock") + "/peacock";
  _0x2cb6db.upgradeText = "UPGRADED to " + _0x2cb6db.aniName + "!\nHold W to hypnotize prey: prey gets pulled in, predtors pushed!. \nHint:Start the ability on a hill to fly!. ";
  return _0x2cb6db;
};
_0x4be9da.prototype.getSkinName = function () {
  var _0x513523 = this.getSpeciesPath("peacock") + "/peacock";
  _0x513523 += this.specType == 0x0 ? '' : this.specType;
  return _0x513523;
};
_0x4be9da.prototype.getSpeciesPath = function (_0x450d77) {
  return "land/" + _0x450d77 + "/" + this.animalSpecies;
};
_0x4be9da.prototype.getWing = function (_0x9fbb04, _0x29f0d1, _0x4cebe8) {
  var _0x4a6400 = "skins/" + (_0x4cebe8 ? this.getSpeciesPath(_0x9fbb04) + "/" : _0x9fbb04 + "/");
  _0x4a6400 += _0x9fbb04 + "_wing" + _0x29f0d1 + ".png";
  return _0x4a6400;
};
_0x4be9da.prototype.getHead = function (_0x2a1864, _0xb4b558) {
  var _0x3575a6 = "skins/" + (_0xb4b558 ? this.getSpeciesPath(_0x2a1864) + "/" : _0x2a1864 + "/");
  _0x3575a6 += _0x2a1864 + "_head.png";
  return _0x3575a6;
};
_0x4be9da.prototype.getAniRadius = function (_0x4193d4) {
  if (this.flag_usingAbility && this.flag_flying) {
    return _0x4193d4 * 0.9;
  }
  return _0x4193d4;
};
_0x4be9da.prototype.getSkinImageObj = function (_0x1c91d6) {
  var _0x31855f = this.animalSpecies === 0xc8 ? 0x1 : this.mopeSeasonID;
  return this.getSkinImageObjForSeason(_0x1c91d6, _0x31855f);
};
_0x4be9da.prototype.basicDrawSkinImg = function () {
  this.setSkinScale();
  var _0x31569c = -0.8;
  var _0x454a18 = this.getAniRadius(this.skinRad - this.outlineW);
  if (!this.flag_flying && this.flag_usingAbility) {
    var _0x5f1ff0 = -0.55;
    var _0xcf60ef = "peacock_ability";
    var _0x33cff0 = this.getSkinImageObj("skins/land/peacock/" + this.animalSpecies + "/" + _0xcf60ef + ".png");
    var _0x1be0e3 = this.skinScale + (this.flag_usingAbility && !this.flag_flying ? 0x1 : 0x0);
    if (_0x33cff0) {
      _0x3b8ba2.save();
      _0x3b8ba2.drawImage(_0x33cff0, -_0x454a18 * _0x1be0e3, (-_0x454a18 + _0x454a18 * _0x5f1ff0) * _0x1be0e3, 0x2 * _0x454a18 * _0x1be0e3, 0x2 * _0x454a18 * _0x1be0e3);
      _0x3b8ba2.restore();
    }
  }
  if (this.loadedSkinImg) {
    var _0x1819eb = this.flag_usingAbility && !this.flag_flying ? this.skinScale * 1.1 : 1.4705882352941178;
    _0x3b8ba2.drawImage(this.loadedSkinImg, -_0x454a18 * _0x1819eb, (-_0x454a18 + _0x454a18 * 0.05) * _0x1819eb, 0x2 * _0x454a18 * _0x1819eb, 0x2 * _0x454a18 * _0x1819eb);
    if (this.flag_flying || !this.flag_usingAbility) {
      var _0xcf60ef = "tail";
      var _0x33cff0 = this.getSkinImageObj("skins/land/peacock/" + this.animalSpecies + "/" + _0xcf60ef + ".png");
      var _0x1be0e3 = this.skinScale;
      if (_0x33cff0) {
        _0x3b8ba2.save();
        var _0x454a18 = this.rad - this.outlineW;
        _0x3b8ba2.drawImage(_0x33cff0, -_0x454a18 * _0x1be0e3, (-_0x454a18 + _0x454a18 * _0x31569c) * _0x1be0e3, 0x2 * _0x454a18 * _0x1be0e3, 0x2 * _0x454a18 * _0x1be0e3);
        _0x3b8ba2.restore();
      }
    }
    if (!this.flag_usingAbility) {
      var _0x7e04ba = this.getSkinImageObj("skins/" + this.getSpeciesPath("peacock") + "/peacock_top.png");
      if (_0x7e04ba) {
        _0x3b8ba2.drawImage(_0x7e04ba, -_0x454a18 * 1.4705882352941178, (-_0x454a18 + _0x454a18 * 0.05) * 1.4705882352941178, 0x2 * _0x454a18 * 1.4705882352941178, 0x2 * _0x454a18 * 1.4705882352941178);
      }
    }
  }
};
_0x4be9da.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    return;
  }
  if (this.flag_flying && !this.flag_isGrabbed) {
    _0x3b8ba2.save();
    var _0x12d78e = _0x1d1686("bird", this.spawnTime);
    if (_0x12d78e !== undefined && _0x12d78e != null) {
      this.theFrame = _0x12d78e;
    }
    var _0x569d93 = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
    var _0x3bdab0 = this.getSkinImageObj(this.getWing("peacock", 0x1, true));
    if (_0x3bdab0) {
      _0x3b8ba2.save();
      var _0x416d57 = -(-0.2 + _0x569d93) * _0x4bb70c;
      var _0x461fa1 = this.rad * 0.8;
      _0x3b8ba2.rotate(0x2d * (Math.PI / 0xb4) + _0x416d57);
      var _0x5d1c96 = 0x0;
      var _0x4413e7 = this.rad;
      var _0x356995 = _0x461fa1 * 0x2 * 0.62;
      var _0x1f5c93 = _0x461fa1 * 2.5;
      var _0x4e53fa = 0.2;
      var _0x498249 = 1.7;
      _0x3b8ba2.drawImage(_0x3bdab0, _0x5d1c96 + _0x356995 * -_0x4e53fa, _0x4413e7 + _0x1f5c93 * -_0x498249, _0x356995, _0x1f5c93);
      _0x3b8ba2.restore();
    }
    var _0x3bdab0 = this.getSkinImageObj(this.getWing("peacock", 0x2, true));
    if (_0x3bdab0) {
      _0x3b8ba2.save();
      var _0x416d57 = -(-0.2 + _0x569d93) * (-0x5a * (Math.PI / 0xb4));
      var _0x461fa1 = this.rad * 0.8;
      _0x3b8ba2.rotate(-0x2d * (Math.PI / 0xb4) + _0x416d57);
      var _0x5d1c96 = 0x0;
      var _0x4413e7 = this.rad;
      var _0x356995 = _0x461fa1 * 0x2 * 0.62;
      var _0x1f5c93 = _0x461fa1 * 2.5;
      var _0x4e53fa = 0.8;
      var _0x498249 = 1.7;
      _0x3b8ba2.drawImage(_0x3bdab0, _0x5d1c96 + _0x356995 * -_0x4e53fa, _0x4413e7 + _0x1f5c93 * -_0x498249, _0x356995, _0x1f5c93);
      _0x3b8ba2.restore();
    }
    _0x3b8ba2.restore();
  } else {
    if (this.flag_usingAbility && !this.flag_flying) {
      _0x3b8ba2.save();
      var _0x3922de = this.flag_flying ? 0x2d : 0x14;
      var _0x1793d9 = this.flag_flying ? 0x5a : 0x2d;
      var _0x1987dc = this.flag_flying ? 0.2 : 0.01;
      var _0x510eae = this.flag_flying ? 2.5 : 0x2;
      var _0x53db3c = this.flag_flying ? 2.5 : 0x2;
      var _0x5cf563 = this.flag_flying ? 0x0 : -0.4;
      var _0x555b09 = this.flag_flying ? 0x0 : -0.2;
      var _0x1caa80 = this.flag_flying ? 0.5 : 1.2;
      var _0x20068c = this.flag_flying ? 0.3 : 0.1;
      var _0x3ae392 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
      var _0x569d93 = !(_0x4bda0b == 0x2 || _0x11da90) ? _0x7b826(_0x3ae392, _0x1caa80, _0x20068c, 0x2) : this.birdNoAnimationFlyWingAngle;
      var _0x3bdab0 = this.getSkinImageObj(this.getWing("peacock", 0x1, true));
      if (_0x3bdab0) {
        _0x3b8ba2.save();
        var _0x416d57 = -(-_0x1987dc + _0x569d93) * (_0x1793d9 * (Math.PI / 0xb4));
        var _0x461fa1 = this.rad * 0.8;
        _0x3b8ba2.rotate(_0x3922de * (Math.PI / 0xb4) + _0x416d57);
        var _0x5d1c96 = 0x0;
        var _0x4413e7 = this.rad;
        var _0x356995 = _0x461fa1 * _0x53db3c * 0.62;
        var _0x1f5c93 = _0x461fa1 * _0x510eae;
        var _0x4e53fa = 0.2 + _0x5cf563;
        var _0x498249 = 1.7 + _0x555b09;
        _0x3b8ba2.drawImage(_0x3bdab0, _0x5d1c96 + _0x356995 * -_0x4e53fa, _0x4413e7 + _0x1f5c93 * -_0x498249, _0x356995, _0x1f5c93);
        _0x3b8ba2.restore();
      }
      var _0x3bdab0 = this.getSkinImageObj(this.getWing("peacock", 0x2, true));
      if (_0x3bdab0) {
        _0x3b8ba2.save();
        var _0x416d57 = -(-_0x1987dc + _0x569d93) * (-_0x1793d9 * (Math.PI / 0xb4));
        var _0x461fa1 = this.rad * 0.8;
        _0x3b8ba2.rotate(-_0x3922de * (Math.PI / 0xb4) + _0x416d57);
        var _0x5d1c96 = 0x0;
        var _0x4413e7 = this.rad;
        var _0x356995 = _0x461fa1 * _0x53db3c * 0.62;
        var _0x1f5c93 = _0x461fa1 * _0x510eae;
        var _0x4e53fa = 0.8 - _0x5cf563;
        var _0x498249 = 1.7 + _0x555b09;
        _0x3b8ba2.drawImage(_0x3bdab0, _0x5d1c96 + _0x356995 * -_0x4e53fa, _0x4413e7 + _0x1f5c93 * -_0x498249, _0x356995, _0x1f5c93);
        _0x3b8ba2.restore();
      }
      _0x3b8ba2.restore();
    }
  }
  if (this.specType != 0x0 && this.specType != undefined) {
    var _0x2498d8 = this.getSkinImageObj(this.getHead("peacock", true));
    if (_0x2498d8) {
      _0x3b8ba2.save();
      var _0x461fa1 = this.rad;
      _0x3b8ba2.drawImage(_0x2498d8, -_0x461fa1 * 1.4705882352941178, (-_0x461fa1 + _0x461fa1 * 0.4) * 1.4705882352941178, 0x2 * _0x461fa1 * 1.4705882352941178, 0x2 * _0x461fa1 * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
  }
};
function _0x4be9da() {
  _0x4be9da.superClass.call(this, 0x2);
}
window.Peacock = _0x4be9da;
_0x2b451a.setCustomClassForGameObjType(_0x4be9da, 0x2, _0x4b67a0);
var _0x53abbc = _0xf4bb63;
_0x3af9e6.prototype = Object.create(_0x53abbc.prototype);
_0x3af9e6.prototype.constructor = _0x3af9e6;
_0x3af9e6.superClass = _0x53abbc;
_0x3af9e6.prototype.updateZ = function () {
  this.z = this.rad;
  if (this.flag_canClimbHill || this.flag_flying) {
    this.z += 0x186a0;
  }
};
_0x3af9e6.prototype.animalInfo = function () {
  var _0x109fcb = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x109fcb.aniName = "Gazelle";
      break;
    case 0x64:
      _0x109fcb.aniName = "Falmmy Hart";
      break;
    case 0xca:
      _0x109fcb.aniName = "Retro Neon Gazelle";
      break;
  }
  _0x109fcb.skinName = this.getSkinName();
  _0x109fcb.aniCol = "#FF9000";
  _0x109fcb.upgradeText = "UPGRADED to " + _0x109fcb.aniName + "!\nHold 'W' to Jump High through everything.";
  return _0x109fcb;
};
_0x3af9e6.prototype.moveF = 0.08;
_0x3af9e6.prototype.jumpAnim = null;
_0x3af9e6.prototype.frame = 0x0;
_0x3af9e6.prototype.drawUnderSkinImg = function () {
  if (this.flag_usingAbility) {
    if (this.jumpAnim == null) {
      this.jumpAnim = new _0x1c8e57(this, 0.5, _0x1c8e57.halfWave);
      this.jumpAnim.keepLastFrame = true;
      this.jumpAnim.loop = true;
      this.jumpAnim.onFrameEntered = function (_0x262e29) {
        this.forObj.frame = _0x262e29;
      };
      this.jumpAnim.onStop = function () {};
    }
    if (this.jumpAnim != null) {
      this.jumpAnim.run();
    }
    var _0x31c6ea = this.rad - this.outlineW;
    var _0x64b302 = 1.4705882352941178;
    this.setSkinScale();
    var _0x3b8412 = "skins/" + this.getSkinPath() + "/legs0.png";
    var _0x5a1e1d = "skins/" + this.getSkinPath() + "/legs1.png";
    var _0x3044c8 = this.getSkinImageObj(_0x3b8412);
    var _0xc39a14 = this.getSkinImageObj(_0x5a1e1d);
    if (_0x3044c8 && _0xc39a14) {
      var _0x64b302 = this.skinScale + this.skinScale * 0.15 * this.frame;
      var _0x31c6ea = this.skinRad;
      if (this.specType == 0x0) {
        _0x3b8ba2.drawImage(_0x3044c8, -_0x31c6ea * _0x64b302, -_0x31c6ea * _0x64b302, 0x2 * _0x31c6ea * _0x64b302, 0x2 * _0x31c6ea * _0x64b302);
        _0x3b8ba2.drawImage(_0xc39a14, -_0x31c6ea * _0x64b302, (-_0x31c6ea - _0x31c6ea * this.moveF * this.frame) * _0x64b302, 0x2 * _0x31c6ea * _0x64b302, 0x2 * _0x31c6ea * _0x64b302);
      } else {
        _0x3b8ba2.drawImage(_0xc39a14, -_0x31c6ea * _0x64b302, -_0x31c6ea * _0x64b302, 0x2 * _0x31c6ea * _0x64b302, 0x2 * _0x31c6ea * _0x64b302);
        _0x3b8ba2.drawImage(_0x3044c8, -_0x31c6ea * _0x64b302, (-_0x31c6ea + _0x31c6ea * this.moveF * this.frame) * _0x64b302, 0x2 * _0x31c6ea * _0x64b302, 0x2 * _0x31c6ea * _0x64b302);
      }
    }
  } else {
    this.jumpAnim = null;
  }
};
_0x3af9e6.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x3af9e6.prototype.getSkinPath = function (_0x24f21d) {
  return "desert/gazelle/" + this.animalSpecies + this.getSubSpecies();
};
_0x3af9e6.prototype.getSkinName = function () {
  var _0x1903ff = this.getSkinPath() + "/gazelle";
  _0x1903ff += this.specType == 0x0 ? '' : this.specType;
  return _0x1903ff;
};
_0x3af9e6.prototype.getAbilityInfo = function (_0x382df4) {
  var _0x41a6ff = {
    abilImg: "abilities/Jump.svg",
    abilName: "HOLD to Jump High\n",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x41a6ff;
};
function _0x3af9e6() {
  _0x3af9e6.superClass.call(this, 0x2);
}
window.Gazelle = _0x3af9e6;
_0x2b451a.setCustomClassForGameObjType(_0x3af9e6, 0x2, _0x5af123);
var _0x53abbc = _0xf4bb63;
_0x46842b.prototype = Object.create(_0x53abbc.prototype);
_0x46842b.prototype.constructor = _0x46842b;
_0x46842b.superClass = _0x53abbc;
_0x46842b.prototype.animalInfo = function () {
  var _0xca04ba = {
    "aniCol": "#FF9000"
  };
  switch (this.animalSpecies) {
    case 0x0:
      _0xca04ba.aniName = "Armadillo";
      break;
  }
  _0xca04ba.skinName = this.getSkinName();
  _0xca04ba.upgradeText = "UPGRADED to " + _0xca04ba.aniName + "!\nHold 'W' to roll through everything. \nCarefully, try eating mangoes around venus flytraps!";
  return _0xca04ba;
};
_0x46842b.prototype.drawUnderSkinTail = function (_0x373b3d) {
  if (!this.flag_usingAbility) {
    _0x46842b.superClass.prototype.drawUnderSkinTail.call(this, _0x373b3d);
  }
};
_0x46842b.prototype.drawAnimalUnderSkinCircle = function (_0x2f5d5b) {
  if (!this.flag_usingAbility) {
    _0x46842b.superClass.prototype.drawAnimalUnderSkinCircle.call(this, _0x2f5d5b);
  }
};
_0x46842b.prototype.basicDrawSkinImg = function () {
  if (!this.flag_usingAbility) {
    _0x46842b.superClass.prototype.basicDrawSkinImg.call(this);
    return;
  } else {
    this.setSkinScale();
    this.frameNumber = Math.trunc(_0x1f4c9e / 0x78) % 0x6;
    var _0x3d231d = "skins/" + this.getSkin() + this.frameNumber + ".png";
    var _0x2a748d = this.getSkinImageObj(_0x3d231d);
    if (_0x2a748d) {
      var _0x3ae85d = this.skinScale;
      var _0x593a84 = this.skinRad;
      _0x3b8ba2.drawImage(_0x2a748d, -_0x593a84 * _0x3ae85d, -_0x593a84 * _0x3ae85d, 0x2 * _0x593a84 * _0x3ae85d, 0x2 * _0x593a84 * _0x3ae85d);
    }
  }
};
_0x46842b.prototype.getSkin = function () {
  return "desert/armadillo/" + this.animalSpecies + this.getSubSpecies() + "/armadillo";
};
_0x46842b.prototype.getSkinName = function () {
  return "desert/armadillo/" + this.animalSpecies + this.getSubSpecies() + "/armadillo" + (this.specType == 0x0 ? '' : this.specType);
};
_0x46842b.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x46842b() {
  _0x46842b.superClass.call(this, 0x2);
}
window.Armadillo = _0x46842b;
_0x2b451a.setCustomClassForGameObjType(_0x46842b, 0x2, _0x112f51);
var _0x53abbc = _0xf4bb63;
_0x32d56b.prototype = Object.create(_0x53abbc.prototype);
_0x32d56b.prototype.constructor = _0x32d56b;
_0x32d56b.superClass = _0x53abbc;
_0x32d56b.prototype.animalInfo = function () {
  var _0x3f8fcf = {
    "aniCol": "#FF9000"
  };
  switch (this.animalSpecies) {
    case 0x64:
      _0x3f8fcf.aniName = "Cacti Rat";
      break;
    case 0x0:
      _0x3f8fcf.aniName = "Desert Rat";
      break;
    case 0xca:
      _0x3f8fcf.aniName = "Plasma Rat";
      break;
  }
  _0x3f8fcf.skinName = this.getSkinName();
  _0x3f8fcf.upgradeText = '';
  return _0x3f8fcf;
};
_0x32d56b.prototype.getSkinName = function () {
  return this.getSkinPath() + "/kangaroorat" + (this.specType == 0x0 ? '' : this.specType);
};
_0x32d56b.prototype.getSkinPath = function () {
  return "desert/kangaroorat/" + this.animalSpecies + this.getSubSpecies();
};
_0x32d56b.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x32d56b.prototype.flapStart = 0x0;
_0x32d56b.prototype.drawSkinCustomization = function () {
  if (this.flag_usingAbility) {
    var _0x5dd03c = "skins/" + this.getSkinPath() + "/tail.png";
    var _0x3be2fd = this.getSkinImageObj(_0x5dd03c);
    if (_0x3be2fd) {
      var _0x26a5d1 = this.skinScale * 1.5;
      var _0x3e1872 = this.skinRad;
      _0x3b8ba2.drawImage(_0x3be2fd, -_0x3e1872 * _0x26a5d1, (-_0x3e1872 + _0x3e1872 * -0.08) * _0x26a5d1, 0x2 * _0x3e1872 * _0x26a5d1, 0x2 * _0x3e1872 * _0x26a5d1);
    }
  }
};
function _0x32d56b() {
  _0x32d56b.superClass.call(this, 0x2);
}
window.KangarooRat = _0x32d56b;
_0x2b451a.setCustomClassForGameObjType(_0x32d56b, 0x2, _0x33fcaa);
var _0x53abbc = _0xf4bb63;
_0x2ade99.prototype = Object.create(_0x53abbc.prototype);
_0x2ade99.prototype.constructor = _0x2ade99;
_0x2ade99.superClass = _0x53abbc;
_0x2ade99.prototype.animalInfo = function () {
  var _0x482699 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x482699.aniName = "Desert Chipmunk";
      break;
    case 0xc8:
      _0x482699.aniName = "Velvet Chipmunk";
      break;
    case 0xca:
      _0x482699.aniName = "Chipmonk";
      break;
  }
  _0x482699.skinName = this.getSkinName();
  _0x482699.aniCol = "#FF9000";
  _0x482699.upgradeText = "UPGRADED to " + _0x482699.aniName + "!\n Press W to Spit food to boost yourself!";
  return _0x482699;
};
_0x2ade99.prototype.getSkinName = function () {
  return this.getSkinPath() + "/chipmunk" + (this.specType == 0x0 ? '' : this.specType);
};
_0x2ade99.prototype.getSkinPath = function () {
  return "desert/chipmunk/" + this.animalSpecies + this.getSubSpecies();
};
_0x2ade99.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x2ade99.prototype.getAbilityInfo = function (_0x3a3a23) {
  var _0x51ff5d = {
    abilName: "Spits Food!",
    abilImg: "abilities/Spit.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x51ff5d;
};
function _0x2ade99() {
  _0x2ade99.superClass.call(this, 0x2);
}
window.DesertChipmunk = _0x2ade99;
_0x2b451a.setCustomClassForGameObjType(_0x2ade99, 0x2, _0x33c563);
var _0x53abbc = _0xf4bb63;
_0x5204fc.prototype = Object.create(_0x53abbc.prototype);
_0x5204fc.prototype.constructor = _0x5204fc;
_0x5204fc.superClass = _0x53abbc;
_0x5204fc.prototype.updateZ = function () {
  if (this.flag_eff_grabbedByFlytrap) {
    this.z = 0x44c + this.rad;
  } else {
    if (this.flag_usingAbility) {
      this.z = -0x9d;
    } else {
      if (this.flag_flying || this.flag_eff_tossedInAir) {
        this.z = 0x834 + this.rad;
      } else {
        this.z = this.rad;
      }
    }
  }
};
_0x5204fc.prototype.animalInfo = function () {
  var _0x53167b = {
    "aniCol": "#FF9000"
  };
  switch (this.animalSpecies) {
    case 0x0:
      _0x53167b.aniName = "Meerkat";
      break;
    case 0x64:
      _0x53167b.aniName = "Puumpkat";
      break;
    case 0xc9:
      _0x53167b.aniName = "Scubakat";
      break;
    case 0xcc:
      _0x53167b.aniName = "Necromancer Meerkat";
      break;
  }
  _0x53167b.skinName = this.getSkinName();
  _0x53167b.upgradeText = "UPGRADED to " + _0x53167b.aniName + "!\n HOLD to Dig Underground. \nYou can now eat pink cactus fruits!";
  return _0x53167b;
};
_0x5204fc.prototype.getSkinName = function () {
  return this.getSkinPath() + "/meerkat" + (this.specType == 0x0 ? '' : this.specType);
};
_0x5204fc.prototype.getSkinPath = function () {
  return "desert/meerkat/" + this.animalSpecies + this.getSubSpecies();
};
_0x5204fc.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x5204fc.prototype.drawAnimalUnderSkinCircle = function (_0x56ae8c) {
  if (!this.flag_usingAbility) {
    _0x5204fc.superClass.prototype.drawAnimalUnderSkinCircle.call(this, _0x56ae8c);
  }
};
_0x5204fc.prototype.drawUnderSkinTail = function (_0x3bf81d) {
  if (!this.flag_usingAbility) {
    _0x5204fc.superClass.prototype.drawUnderSkinTail.call(this, _0x3bf81d);
  }
};
_0x5204fc.prototype.basicDrawSkinImg = function () {
  if (!this.flag_usingAbility) {
    _0x5204fc.superClass.prototype.basicDrawSkinImg.call(this);
    return;
  } else {
    this.setSkinScale();
    _0x3b8ba2.save();
    var _0x261b62 = _0x261b62 = "skins/" + this.getSkinPath() + "/meerkat1.png";
    var _0x41523d = this.getSkinImageObj(_0x261b62);
    if (_0x41523d) {
      var _0x17f3f0 = this.skinScale;
      var _0x1a6f09 = this.skinRad;
      _0x3b8ba2.drawImage(_0x41523d, -_0x1a6f09 * _0x17f3f0, -_0x1a6f09 * _0x17f3f0, 0x2 * _0x1a6f09 * _0x17f3f0, 0x2 * _0x1a6f09 * _0x17f3f0);
    }
    _0x3b8ba2.restore();
  }
};
function _0x5204fc() {
  _0x5204fc.superClass.call(this, 0x2);
}
window.Meerkat = _0x5204fc;
_0x2b451a.setCustomClassForGameObjType(_0x5204fc, 0x2, _0x10db93);
var _0x53abbc = _0xf4bb63;
_0x96778.prototype = Object.create(_0x53abbc.prototype);
_0x96778.prototype.constructor = _0x96778;
_0x96778.superClass = _0x53abbc;
_0x96778.prototype.animalInfo = function () {
  var _0x16b090 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x16b090.aniName = "Fennec Fox";
      break;
    case 0xca:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x16b090.aniName = "Fire Fox";
          break;
        case 0x1:
          _0x16b090.aniName = "Purple Fire Fox";
      }
      break;
  }
  _0x16b090.aniCol = "#FF9000";
  _0x16b090.skinName = this.getSkinName();
  _0x16b090.upgradeText = "UPGRADED to " + _0x16b090.aniName + "!\nFennec Fox has very sharp ears (can see animals in hiding holes).\n Press W to Whine!";
  return _0x16b090;
};
_0x96778.prototype.getSkinPath = function (_0x488c71) {
  return "desert/fennecfox/" + this.animalSpecies + this.getSubSpecies();
};
_0x96778.prototype.getSkinName = function () {
  var _0x181c7e = this.getSkinPath() + "/fennecfox";
  _0x181c7e += this.specType == 0x0 ? '' : this.specType;
  return _0x181c7e;
};
_0x96778.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return this.animalSpecies === 0xca ? "/" + this.animalSubSpecies : '';
};
_0x96778.prototype.flapStart = 0x0;
_0x96778.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    this.flapStart = 0x0;
    return;
  } else if (this.flapStart == 0x0) {
    this.flapStart = _0x1f4c9e;
  }
  this.setSkinScale();
  var _0x135040 = !(_0x4bda0b == 0x2) ? _0x1d1686("fennecfox", this.spawnTime) : 0x2;
  _0x135040 = Math.abs(Math.round(_0x135040));
  var _0x1955e9 = "skins/" + this.getSkinPath() + "/ears" + _0x135040 + ".png";
  var _0xc8dab3 = this.getSkinImageObj(_0x1955e9);
  if (_0xc8dab3) {
    var _0x397971 = this.skinScale;
    var _0x2f1773 = this.skinRad;
    _0x3b8ba2.drawImage(_0xc8dab3, -_0x2f1773 * _0x397971, -_0x2f1773 * _0x397971, 0x2 * _0x2f1773 * _0x397971, 0x2 * _0x2f1773 * _0x397971);
  }
};
function _0x96778() {
  _0x96778.superClass.call(this, 0x2);
}
window.FennecFox = _0x96778;
_0x2b451a.setCustomClassForGameObjType(_0x96778, 0x2, _0x1414c7);
var _0x53abbc = _0xf4bb63;
_0x524bb1.prototype = Object.create(_0x53abbc.prototype);
_0x524bb1.prototype.constructor = _0x524bb1;
_0x524bb1.superClass = _0x53abbc;
_0x524bb1.prototype.animalInfo = function () {
  var _0x2e4b89 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x2e4b89.aniName = "Gobi Bear";
      break;
    case 0xca:
      _0x2e4b89.aniName = "Gobee Bear";
      break;
  }
  _0x2e4b89.aniCol = "#FF9000";
  _0x2e4b89.skinName = this.getSkinName();
  _0x2e4b89.upgradeText = "UPGRADED to " + _0x2e4b89.aniName + "!\n";
  return _0x2e4b89;
};
_0x524bb1.prototype.getSkinName = function () {
  return this.getSkinPath() + "/gobibear" + (this.flag_usingAbility ? "1" : '');
};
_0x524bb1.prototype.getSkinPath = function () {
  return "desert/gobibear/" + this.animalSpecies + this.getSubSpecies();
};
_0x524bb1.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x524bb1.prototype.biteStart = 0x0;
_0x524bb1.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    this.biteStart = 0x0;
    return;
  } else {
    if (this.biteStart == 0x0) {
      this.biteStart = _0x1f4c9e;
    }
    if (_0x1f4c9e - this.biteStart < 0x190) {
      if (this.specType != 0x0 && this.specType != undefined) {
        var _0x221c6a = this.getSkinImageObj("skins/" + this.getSkinPath() + "/gobibear_head1.png");
        var _0x3651da = (_0x1f4c9e - this.biteStart) / 0x3e8;
        var _0x14e295 = this.skinScale * 1.1;
        var _0x132dda = this.skinRad;
        if (_0x221c6a) {
          frame = 0x0;
          if (!this.flag_flying) {
            flapAmount = 0x3;
            flapDur = 0.5;
            frame = !(_0x4bda0b == 0x2) ? _0x7b826(_0x3651da, flapDur, flapAmount, 0x2) : this.birdNoAnimationFlyWingAngle;
          }
          _0x3b8ba2.save();
          var _0x132dda = this.rad;
          _0x3b8ba2.drawImage(_0x221c6a, -_0x132dda * _0x14e295, (-_0x132dda + _0x132dda * 0.1) * _0x14e295 + frame, 0x2 * _0x132dda * _0x14e295, 0x2 * _0x132dda * _0x14e295);
          _0x3b8ba2.restore();
        }
      }
    }
  }
};
function _0x524bb1() {
  _0x524bb1.superClass.call(this, 0x2);
}
window.GobiBear = _0x524bb1;
_0x2b451a.setCustomClassForGameObjType(_0x524bb1, 0x2, _0x344c95);
var _0x53abbc = _0xf4bb63;
_0xa21b77.prototype = Object.create(_0x53abbc.prototype);
_0xa21b77.prototype.constructor = _0xa21b77;
_0xa21b77.superClass = _0x53abbc;
_0xa21b77.prototype.animalInfo = function () {
  var _0x4c6e20 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x4c6e20.aniName = "Camel";
      break;
    case 0x64:
      _0x4c6e20.aniName = "Doomedarius";
      break;
    case 0xc9:
      _0x4c6e20.aniName = "Balloon Warrior";
      break;
    case 0xca:
      _0x4c6e20.aniName = "Fungal Camel";
      break;
  }
  _0x4c6e20.skinName = this.getSkinName();
  _0x4c6e20.aniCol = "#FF9000";
  _0x4c6e20.upgradeText = "UPGRADED to " + _0x4c6e20.aniName + "!\n Press W to Spit. Try eating oranges from trees!";
  return _0x4c6e20;
};
_0xa21b77.prototype.getSkinName = function () {
  let _0x3178f0 = this.getSkinPath() + "/camel";
  _0x3178f0 += this.specType == 0x0 ? '' : this.specType;
  return _0x3178f0;
};
_0xa21b77.prototype.getSkinPath = function () {
  return "desert/camel/" + this.animalSpecies + this.getSubSpecies();
};
_0xa21b77.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0xa21b77.prototype.getAbilityInfo = function (_0x4cff20) {
  var _0x595f78 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x595f78.abilName = "Spit!";
      break;
    case 0x64:
      _0x595f78.abilName = "Cannon Shots!";
      break;
    case 0xc9:
      _0x595f78.abilName = "Water Balloons!";
      break;
  }
  _0x595f78.abilImg = "abilities/Spit.svg";
  _0x595f78.skinThemeID = this.skinThemeID;
  _0x595f78.mopeSeasonID = this.mopeSeasonID;
  return _0x595f78;
};
_0xa21b77.prototype.biteStart = 0x0;
_0xa21b77.prototype.flapAmount = 0x3;
_0xa21b77.prototype.flapDur = 0x1;
_0xa21b77.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    this.biteStart = 0x0;
    return;
  } else {
    if (this.biteStart == 0x0) {
      this.biteStart = _0x1f4c9e;
    }
    if (this.specType != 0x0 && this.specType != undefined) {
      var _0x1914bf = "skins/" + this.getSkinPath() + "/camel_head1.png";
      var _0x3e4670 = this.getSkinImageObj(_0x1914bf);
      var _0x218a9d = (_0x1f4c9e - this.biteStart) / 0x3e8;
      var _0x852f35 = this.skinScale * 1.1;
      var _0x405b76 = this.skinRad;
      if (_0x3e4670) {
        var _0x1f5e21 = 0x0;
        if (!this.flag_flying) {
          _0x1f5e21 = !(_0x4bda0b == 0x2) ? _0x7b826(_0x218a9d, this.flapDur, this.flapAmount, 0x2) : this.flapAmount;
        }
        _0x3b8ba2.save();
        var _0x405b76 = this.rad;
        _0x3b8ba2.drawImage(_0x3e4670, -_0x405b76 * _0x852f35, (-_0x405b76 + _0x405b76 * 0.1) * _0x852f35 - _0x1f5e21, 0x2 * _0x405b76 * _0x852f35, 0x2 * _0x405b76 * _0x852f35);
        _0x3b8ba2.restore();
      }
    }
  }
};
function _0xa21b77() {
  _0xa21b77.superClass.call(this, 0x2);
}
window.Camel = _0xa21b77;
_0x2b451a.setCustomClassForGameObjType(_0xa21b77, 0x2, _0xd21fde);
var _0x53abbc = _0x472b99;
_0x53dbe3.prototype = Object.create(_0x53abbc.prototype);
_0x53dbe3.prototype.constructor = _0x53dbe3;
_0x53dbe3.superClass = _0x53abbc;
_0x53dbe3.prototype.updateZ = function () {
  this.z = 0x3ed;
};
_0x53dbe3.prototype.customDraw = function (_0x443067) {
  var _0x5d6322 = '';
  if (this.speciesType == 0xc9) {
    _0x5d6322 = "skins/desert/camel/" + this.speciesType + "/spit" + this.specType + ".png";
  } else {
    _0x5d6322 = "skins/desert/camel/" + this.speciesType + "/spit.png";
  }
  var _0xfe4742 = this.getSkinImageObj(_0x5d6322);
  if (_0xfe4742) {
    _0x3b8ba2.save();
    var _0x11b7e8 = this.rad * 0x2;
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0xfe4742, -_0x11b7e8, -_0x11b7e8, _0x11b7e8 * 0x2, _0x11b7e8 * 0x2);
    _0x3b8ba2.restore();
  }
};
_0x53dbe3.prototype.getSkinImageObj = function (_0x1cfeb4) {
  var _0x452bc1 = this.speciesType === 0x64 || this.speciesType === 0xc9 ? 0x1 : 0x2;
  var _0x118569 = "./assets/s/" + _0x452bc1 + "/" + _0x1cfeb4;
  if (this.skinThemeID > 0x0) {
    _0x118569 = "./assets/t/" + this.skinThemeID + "/" + _0x1cfeb4;
  }
  return _0x3df4ce(_0x118569, function (_0x55913c) {
    console.log(_0x55913c.src);
  });
};
function _0x53dbe3() {
  _0x53dbe3.superClass.call(this, 0x51);
}
window.CamelSpit = _0x53dbe3;
_0x2b451a.setCustomClassForGameObjType(_0x53dbe3, 0x51);
var _0x53abbc = _0xf4bb63;
_0x11dd3a.prototype = Object.create(_0x53abbc.prototype);
_0x11dd3a.prototype.constructor = _0x11dd3a;
_0x11dd3a.superClass = _0x53abbc;
_0x11dd3a.prototype.animalInfo = function () {
  var _0x37c6d2 = {
    "aniCol": "#FF9000"
  };
  switch (this.animalSpecies) {
    case 0x0:
      _0x37c6d2.aniName = "Warthog";
      break;
    case 0x64:
      _0x37c6d2.aniName = "The Burlone";
      break;
    case 0xc8:
      _0x37c6d2.aniName = "WarT. Hog";
      break;
    case 0xc9:
      _0x37c6d2.aniName = "Flame Tiki";
      break;
    case 0xca:
      _0x37c6d2.aniName = "Dark Matter Warthog";
      break;
    case 0xcc:
      _0x37c6d2.aniName = "Candy Corn Warthog";
      break;
    case 0xdc:
      _0x37c6d2.aniName = "Dark Matter Warthog";
      break;
  }
  _0x37c6d2.skinName = this.getSkinName();
  _0x37c6d2.upgradeText = "UPGRADED to " + _0x37c6d2.aniName + "!\nPress W to Dig and Charge.";
  return _0x37c6d2;
};
_0x11dd3a.prototype.getSkinName = function () {
  let _0x6dcf1c = this.getSkinPath() + "/warthog";
  _0x6dcf1c += this.specType == 0x0 ? '' : this.specType;
  return _0x6dcf1c;
};
_0x11dd3a.prototype.getSkinPath = function () {
  return "desert/warthog/" + this.animalSpecies + this.getSubSpecies();
};
_0x11dd3a.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x11dd3a.prototype.flapStart = 0x0;
_0x11dd3a.prototype.drawUnderSkinImgOutline = function () {
  console.log(this.teamID);
  _0x11dd3a.superClass.prototype.drawUnderSkinImgOutline.call(this);
  if (this.flag_usingAbility && !this.isCharging) {
    var _0x71933 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0xf5b84f = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * _0x71933);
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha *= 0.8 - 0.2 * _0xf5b84f;
    _0x133658(0x0, this.rad * 0.3, this.rad * (0.9 + 0.12 * _0xf5b84f), "#b69327");
    _0x133658(0x0, -this.rad * 0.2, this.rad * (0.9 + 0.09 * _0xf5b84f), "#b69327");
    _0x3b8ba2.restore();
  }
};
_0x11dd3a.prototype.drawUnderSkinImg = function () {
  if (!this.flag_usingAbility) {
    this.flapStart = 0x0;
    return;
  } else if (this.flapStart == 0x0) {
    this.flapStart = _0x1f4c9e;
  }
  if (this.flag_usingAbility && !this.isCharging) {
    var _0x49d8cc = this.rad - this.outlineW;
    var _0x3272d3 = 1.4705882352941178;
    this.setSkinScale();
    var _0x12eca1 = (_0x1f4c9e - this.flapStart) / 0x3e8;
    var _0xfc8fca = !(_0x4bda0b == 0x2) ? _0x7b826(_0x12eca1, 0.8, 0x1, 0x1) : 0x0;
    _0xfc8fca = Math.round(_0xfc8fca);
    if (_0xfc8fca < 0x0) {
      _0xfc8fca = 0x0;
    }
    var _0x220153 = "skins/" + this.getSkinPath() + "/leg" + _0xfc8fca + ".png";
    var _0x4f6692 = this.getSkinImageObj(_0x220153);
    if (_0x4f6692) {
      var _0x3272d3 = this.skinScale;
      var _0x49d8cc = this.skinRad;
      _0x3b8ba2.drawImage(_0x4f6692, -_0x49d8cc * _0x3272d3, -_0x49d8cc * _0x3272d3, 0x2 * _0x49d8cc * _0x3272d3, 0x2 * _0x49d8cc * _0x3272d3);
    }
  }
};
_0x11dd3a.prototype.getAbilityInfo = function (_0x44bea0) {
  var _0xf44aa = {
    abilName: "Dig Food\nSudden Charge",
    abilImg: "abilities/Dig.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0xf44aa;
};
_0x11dd3a.prototype.isCharging = false;
_0x11dd3a.prototype.readCustomData_onNewlyVisible = function (_0x4bc547) {
  _0x11dd3a.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x4bc547);
  this.customUpdatedProperty(0x5c, _0x4bc547);
};
_0x11dd3a.prototype.customUpdatedProperty = function (_0x32d302, _0x559c4c) {
  if (_0x32d302 == 0x5c) {
    this.isCharging = _0x559c4c.readUInt8() == 0x1;
  }
};
function _0x11dd3a() {
  _0x11dd3a.superClass.call(this, 0x2);
}
window.Warthog = _0x11dd3a;
_0x2b451a.setCustomClassForGameObjType(_0x11dd3a, 0x2, _0x432bf5);
var _0x53abbc = _0xf4bb63;
_0x879603.prototype = Object.create(_0x53abbc.prototype);
_0x879603.prototype.constructor = _0x879603;
_0x879603.superClass = _0x53abbc;
_0x879603.prototype.animalInfo = function () {
  var _0x3eddf5 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x3eddf5.aniName = "Hyena";
      break;
    case 0xc9:
      _0x3eddf5.aniName = "DJ Hyena";
      break;
    case 0xca:
      _0x3eddf5.aniName = "Anubis Hyena";
      break;
  }
  _0x3eddf5.aniCol = "#FF9000";
  _0x3eddf5.skinName = this.getSkinName();
  _0x3eddf5.upgradeText = "UPGRADED to " + _0x3eddf5.aniName + "!\nHyenas have a very loud and scary laugh!\nPress W to Laugh.";
  return _0x3eddf5;
};
_0x879603.prototype.getSkinName = function () {
  return this.getSkinPath() + "/hyena" + (this.specType == 0x0 ? '' : this.specType);
};
_0x879603.prototype.getSkinPath = function () {
  return "desert/hyena/" + this.animalSpecies + this.getSubSpecies();
};
_0x879603.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x879603.prototype.biteStart = 0x0;
_0x879603.prototype.flapAmount = 0x3;
_0x879603.prototype.flapDur = 0x1;
_0x879603.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    this.biteStart = 0x0;
    return;
  } else {
    if (this.biteStart == 0x0) {
      this.biteStart = _0x1f4c9e;
    }
    if (this.specType != 0x0 && this.specType != undefined) {
      var _0x3fb7e9 = this.getSkinImageObj("skins/" + this.getSkinPath() + "/hyena_head.png");
      var _0x3bd620 = (_0x1f4c9e - this.biteStart) / 0x3e8;
      var _0x286273 = this.skinScale * 1.1;
      var _0x6c32c5 = this.skinRad;
      if (_0x3fb7e9) {
        frame = 0x0;
        if (!this.flag_flying) {
          frame = !(_0x4bda0b == 0x2) ? _0x7b826(_0x3bd620, this.flapDur, this.flapAmount, 0x2) : this.flapAmount;
        }
        _0x3b8ba2.save();
        var _0x6c32c5 = this.rad;
        _0x3b8ba2.drawImage(_0x3fb7e9, -_0x6c32c5 * _0x286273, (-_0x6c32c5 + _0x6c32c5 * 0.1) * _0x286273 + frame, 0x2 * _0x6c32c5 * _0x286273, 0x2 * _0x6c32c5 * _0x286273);
        _0x3b8ba2.restore();
      }
    }
  }
};
_0x879603.prototype.getAbilityInfo = function (_0x30b28e) {
  var _0x4361e9 = {
    abilName: "Laughs!",
    abilImg: "abilities/Laugh.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x4361e9;
};
_0x879603.prototype.getSkinImageObj = function (_0x3f9e8b) {
  var _0x40ce80 = this.animalSpecies === 0xc9 ? 0x1 : this.mopeSeasonID;
  return this.getSkinImageObjForSeason(_0x3f9e8b, _0x40ce80);
};
function _0x879603() {
  _0x879603.superClass.call(this, 0x2);
}
window.Hyena = _0x879603;
_0x2b451a.setCustomClassForGameObjType(_0x879603, 0x2, _0x42fa0c);
var _0x2995b5 = _0x27c9b7;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x27c9b7.prototype.updateZ = function () {
  this.z = 0x186a2;
};
_0x27c9b7.prototype.customDraw = function (_0x2dd034) {
  _0x3b8ba2.save();
  var _0x28e26c = this.getSkinImageObj("skins/desert/hyena/" + this.speciesType + "/laugh.png");
  if (_0x28e26c) {
    var _0x557ed2 = _0x1f4c9e - this.spawnTime;
    var _0x4775a8 = _0x557ed2 / 0x3e8;
    rShift = 1.5 * Math.sin(0x2 * Math.PI / 0x2 * _0x4775a8);
    var _0x155cef = _0x7b826(_0x4775a8, 5.1, 0x1, 0x1);
    _0x155cef = Math.min(0x1, Math.max(0x0, _0x155cef));
    _0x3b8ba2.globalAlpha = _0x155cef;
    var _0x371021 = this.rad;
    _0x3b8ba2.rotate(this.angle + -0x5a * (Math.PI / 0xb4));
    _0x3b8ba2.drawImage(_0x28e26c, -_0x371021 * 0x1, -_0x371021 * 0x1, 0x2 * _0x371021 * 0x1, 0x2 * _0x371021 * 0x1);
  }
  _0x3b8ba2.restore();
  this.drawChat();
};
_0x27c9b7.prototype.drawChat = function () {
  if (this.aLine == null) {
    return;
  }
  _0x3b8ba2.save();
  _0x3b8ba2.font = "10px Arial";
  _0x3b8ba2.lineWidth = 0x1;
  _0x3b8ba2.textAlign = "center";
  _0x3b8ba2.textBaseline = "middle";
  var _0x113630 = this.aLine;
  var _0x2c5186 = _0x1f4c9e > _0x113630.chatFadeT ? 0x0 : 0x1;
  _0x113630.chatA += (_0x2c5186 - _0x113630.chatA) * 0.1;
  _0x3b8ba2.shadowOffsetX = 0x0;
  _0x3b8ba2.shadowOffsetY = 0x0;
  if (_0x113630.chatA < 0.02) {
    this.aLine = null;
  }
  var _0x2f1888 = _0x3b8ba2.measureText(_0x113630.chatTxt).width;
  _0x3b8ba2.globalAlpha = 0.8 * _0x113630.chatA;
  _0x3b8ba2.fillStyle = _0x4bb1c3(this.curBiome);
  _0x3b8ba2.fillRect(this.x - 0x1 - _0x2f1888 / 0x2, this.y - this.rad - 5 - 0x1, _0x2f1888 + 2, 12);
  _0x3b8ba2.fillStyle = "#F1C34C";
  if (!(_0x4bda0b == 0x2)) {
    _0x3b8ba2.shadowOffsetX = 0x1;
    _0x3b8ba2.shadowOffsetY = 0x1;
    _0x3b8ba2.shadowColor = "black";
  }
  _0x3b8ba2.globalAlpha = _0x113630.chatA;
  _0x3b8ba2.fillText(_0x113630.chatTxt, this.x, this.y - this.rad);
  _0x3b8ba2.restore();
};
function _0x27c9b7() {
  _0x27c9b7.superClass.call(this);
}
_0x27c9b7.prototype.aLine = null;
_0x27c9b7.prototype.readCustomData_onNewlyVisible = function (_0x37b18e) {
  _0x27c9b7.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x37b18e);
  this.aLine = {
    "chatTxt": this.speciesType == 0xc9 ? "Oh yeah!" : "Hehehe",
    "chatFadeT": _0x1f4c9e + 0xfa0,
    "chatA": 0x0
  };
};
_0x27c9b7.prototype.getSkinImageObj = function (_0x24606) {
  var _0x5a4da2 = this.speciesType === 0xc9 ? 0x1 : this.mopeSeasonID;
  return this.getSkinImageObjForSeason(_0x24606, _0x5a4da2);
};
window.HyenaLaugh = _0x27c9b7;
_0x2b451a.setCustomClassForGameObjType(_0x27c9b7, 0xe, 0x56);
var _0x53abbc = _0xf4bb63;
_0x2ac72b.prototype = Object.create(_0x53abbc.prototype);
_0x2ac72b.prototype.constructor = _0x2ac72b;
_0x2ac72b.superClass = _0x53abbc;
_0x2ac72b.prototype.animalInfo = function () {
  var _0xe13651 = {
    "aniCol": "#FF9000"
  };
  switch (this.animalSpecies) {
    case 0x0:
      _0xe13651.aniName = "Rattle Snake";
      break;
    case 0x64:
      _0xe13651.aniName = "Gummy Viper";
      break;
  }
  _0xe13651.upgradeText = "UPGRADED to " + _0xe13651.aniName + "!\nThe " + _0xe13651.aniName + " is a very dangerous animal. \nHOLD W to Rattle.";
  _0xe13651.skinName = this.getSkinName();
  return _0xe13651;
};
_0x2ac72b.prototype.getSkinName = function () {
  return this.getSkinPath() + "/rattlesnake" + (this.specType == 0x0 ? '' : this.specType);
};
_0x2ac72b.prototype.getSkinPath = function () {
  return "desert/rattlesnake/" + this.animalSpecies + this.getSubSpecies();
};
_0x2ac72b.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x2ac72b.prototype.biteStart = 0x0;
_0x2ac72b.prototype.drawUnderSkinImg = function () {
  if (!this.flag_usingAbility) {
    var _0x508570 = this.rad - this.outlineW;
    var _0x39642e = this.getSkinImageObj("skins/" + this.getSkinPath() + "/tongue.png");
    var _0xc946f4 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x164f31 = _0x4bda0b == 0x2 ? 0x0 : _0x7b826(_0xc946f4, 0.7, 0x6, 0.5);
    var _0x4faaf8 = _0x4bda0b == 0x2 ? 0x0 : 0x5;
    if (_0x39642e) {
      _0x3b8ba2.drawImage(_0x39642e, -_0x508570 * 1.4705882352941178, -(_0x508570 + _0x4faaf8 + _0x164f31) * 1.4705882352941178, 0x2 * _0x508570 * 1.4705882352941178, 0x2 * _0x508570 * 1.4705882352941178);
    }
  }
};
_0x2ac72b.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    this.biteStart = 0x0;
    return;
  } else {
    if (this.biteStart == 0x0) {
      this.biteStart = _0x1f4c9e;
    }
    if (this.specType != 0x0 && this.specType != undefined) {
      var _0x3598bb = this.getSkinImageObj("skins/" + this.getSkinPath() + "/rattlesnake_head.png");
      var _0x1c3436 = this.skinScale * 0x1;
      var _0xaf326f = this.skinRad;
      if (_0x3598bb) {
        _0x3b8ba2.save();
        var _0xaf326f = this.rad;
        _0x3b8ba2.drawImage(_0x3598bb, -_0xaf326f * _0x1c3436, -_0xaf326f * 1.2 * _0x1c3436, 0x2 * _0xaf326f * _0x1c3436, 0x2 * _0xaf326f * _0x1c3436);
        _0x3b8ba2.restore();
      }
    }
    var _0x2dc5a6 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x1a9d5e = !(_0x4bda0b == 0x2) ? _0x7b826(_0x2dc5a6, 0.1, 0.2, 0x2) : 0x0;
    var _0xaf326f = this.rad * 1.3;
    var _0x784da6 = this.getSkinImageObj("skins/" + this.getSkinPath() + "/rattle.png");
    if (_0x784da6) {
      _0x3b8ba2.save();
      var _0x1683b3 = -(-0x0 + _0x1a9d5e) * (5 * (Math.PI / 0xb4));
      var _0x1c3436 = this.skinScale * 1.2;
      _0x3b8ba2.rotate(-0x0 * (Math.PI / 0xb4) + _0x1683b3);
      _0x3b8ba2.drawImage(_0x784da6, -_0xaf326f * _0x1c3436, -_0xaf326f * 0.7 * _0x1c3436, 0x2 * _0xaf326f * _0x1c3436, 0x2 * _0xaf326f * _0x1c3436);
      _0x3b8ba2.restore();
    }
  }
};
_0x2ac72b.prototype.getAbilityInfo = function (_0x3a1de7) {
  var _0x3ca62a = {
    abilName: "Rattle!",
    abilImg: "abilities/Rattle.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x3ca62a;
};
function _0x2ac72b() {
  _0x2ac72b.superClass.call(this, 0x2);
}
window.RattleSnake = _0x2ac72b;
_0x2b451a.setCustomClassForGameObjType(_0x2ac72b, 0x2, _0x1bbb89);
var _0x2995b5 = _0x35da64;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x35da64.prototype.updateZ = function () {
  this.z = 0x186a2;
};
_0x35da64.prototype.customDraw = function (_0x5013d8) {
  _0x3b8ba2.save();
  var _0x1fbfce = this.getSkinImageObj("skins/desert/rattlesnake/" + this.speciesType + "/circle.png");
  if (_0x1fbfce) {
    var _0x826593 = _0x1f4c9e - this.spawnTime;
    var _0x51680e = _0x826593 / 0x3e8;
    rShift = 1.5 * Math.sin(0x2 * Math.PI / 0x2 * _0x51680e);
    var _0x32e97c = _0x7b826(_0x51680e, 5.1, 0x1, 0x1);
    _0x32e97c = Math.min(0x1, Math.max(0x0, _0x32e97c));
    _0x3b8ba2.globalAlpha = _0x32e97c;
    var _0x3c4b17 = this.rad * 0.8;
    _0x3b8ba2.drawImage(_0x1fbfce, -_0x3c4b17 * 0x1, -_0x3c4b17 * 0x1, 0x2 * _0x3c4b17 * 0x1, 0x2 * _0x3c4b17 * 0x1);
  }
  _0x3b8ba2.restore();
};
_0x35da64.prototype.getSkinImageObj = function (_0x15adcc) {
  var _0x5c2331 = this.speciesType === 0x64 ? 0x1 : this.mopeSeasonID;
  var _0x5c947f = "./assets/s/" + _0x5c2331 + "/" + _0x15adcc;
  if (this.skinThemeID > 0x0) {
    _0x5c947f = "./assets/t/" + this.skinThemeID + "/" + _0x15adcc;
  }
  return _0x3df4ce(_0x5c947f, function (_0x37fee2) {
    console.log(_0x37fee2.src);
  });
};
function _0x35da64() {
  _0x35da64.superClass.call(this);
}
window.SnakeRattle = _0x35da64;
_0x2b451a.setCustomClassForGameObjType(_0x35da64, 0xe, 0x57);
var _0x487eaa = _0x487eaa;
var _0x53abbc = _0xf4bb63;
_0x487eaa.prototype = Object.create(_0x53abbc.prototype);
_0x487eaa.prototype.constructor = _0x487eaa;
_0x487eaa.superClass = _0x53abbc;
_0x487eaa.prototype.getSkinName2 = function () {
  var _0x80a9c0 = this.getSkinPath() + "/vulture";
  return _0x80a9c0;
};
_0x487eaa.prototype.getSkinName = function () {
  let _0x1b95f7 = this.getSkinPath() + "/vulture";
  if (this.flag_flying && this.flag_usingAbility) {
    _0x1b95f7 += 0x2;
  } else {
    _0x1b95f7 += this.specType == 0x0 ? '' : this.specType;
  }
  return _0x1b95f7;
};
_0x487eaa.prototype.getSkinPath = function () {
  return "desert/vulture/" + this.animalSpecies + this.getSubSpecies();
};
_0x487eaa.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x487eaa.prototype.getAbilityInfo = function (_0x1b99d4) {
  var _0x330c4a = {
    abilName: "Fly/ Pickup Bones",
    abilImg: "abilities/Fly.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x330c4a;
};
_0x487eaa.prototype.animalInfo = function () {
  var _0x3a0099 = {
    "aniName": "Vulture"
  };
  switch (this.animalSpecies) {
    case 0x1:
      _0x3a0099.aniName = "Pakistan Vulture";
      break;
    case 0x64:
      _0x3a0099.aniName = "Vulgeist";
      break;
    case 0xcc:
      _0x3a0099.aniName = "Acid Husk";
      break;
  }
  _0x3a0099.aniCol = "#FF9000";
  _0x3a0099.skinName = this.getSkinName();
  _0x3a0099.upgradeText = "UPGRADED to " + (this.animalSpecies == 0x1 ? "Rare " : '') + "Vulture" + "!\nPress W to Grab/Drop bones" + (this.animalSpecies == 0x1 ? " and animals" : '') + " on other animals,\n (Hint: Use ability on hills to fly) \nTry Eating bones too!";
  return _0x3a0099;
};
_0x487eaa.prototype.getHead = function (_0x4c9180, _0x584e15) {
  var _0xaef6c0 = this.flag_flying ? "1" : "1";
  var _0xf9b0da = "skins/" + this.getSkinName2() + "_head" + _0xaef6c0 + ".png";
  return _0xf9b0da;
};
_0x487eaa.prototype.getWing = function (_0x465baa, _0x7ada9d, _0x741bd1) {
  var _0x37aa56 = "skins/" + this.getSkinName2() + "_wing" + _0x7ada9d + ".png";
  return _0x37aa56;
};
_0x487eaa.prototype.flaps = 0x0;
_0x487eaa.prototype.flapsMod = 0x3;
_0x487eaa.prototype.countFlap = true;
_0x487eaa.prototype.canFlap = !(_0x4bda0b == 0x2);
_0x487eaa.prototype.resumeFlapT = 0x0;
_0x487eaa.prototype.lastFlapFrame = 0x0;
_0x487eaa.prototype.sF = -0x1;
_0x487eaa.prototype.wF = 0x1;
_0x487eaa.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    return;
  }
  if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
    if (!this.canFlap && this.flag_flying && _0x1f4c9e > this.resumeFlapT) {
      this.canFlap = true;
    }
  } else {
    this.canFlap = false;
  }
  {
    _0x3b8ba2.save();
    var _0x4a00a1 = this.flag_flying ? 0x2d : 0x2f;
    var _0x5310d0 = this.flag_flying ? 0x5a : 0x2d;
    var _0x4387dc = this.flag_flying ? 0.2 : 0.001;
    var _0x532a48 = this.flag_flying ? 2.5 : 2.3;
    var _0x4c63df = this.flag_flying ? 2.2 : 2.7;
    var _0x8d2d22 = this.flag_flying ? 1.2 : 0x1;
    var _0x45b092 = this.flag_flying ? 0.35 : 0.2;
    var _0x129cdb = this.flag_flying ? '' : "2";
    var _0x2508ce = (_0x1f4c9e - this.resumeFlapT) / 0x3e8;
    var _0x2fbde6 = this.canFlap ? _0x7b826(_0x2508ce, _0x8d2d22, _0x45b092, 0x2) : this.birdNoAnimationFlyWingAngle;
    if (this.flag_flying && _0x2fbde6 < 0x0 && this.countFlap) {
      this.countFlap = false;
      this.flaps++;
      if (this.flaps % this.flapsMod == 0x0) {
        this.lastFlapFrame = _0x2fbde6;
        this.canFlap = false;
        this.resumeFlapT = +new Date() + 0x5dc;
      }
    } else if (_0x2fbde6 > 0x0 && !this.countFlap) {
      this.countFlap = true;
    }
    if (!this.canFlap) {
      _0x2fbde6 = this.lastFlapFrame;
    }
    _0x532a48 += this.sF * _0x2fbde6;
    _0x4c63df += this.wF * _0x2fbde6;
    var _0x331a68 = this.getSkinImageObj(this.getWing("vulture", _0x129cdb + 0x1, false));
    if (_0x331a68) {
      _0x3b8ba2.save();
      var _0x43d4fa = 0x1;
      _0x43d4fa = -(-_0x4387dc + _0x2fbde6);
      var _0x4c22e4 = _0x43d4fa * (_0x5310d0 * (Math.PI / 0xb4));
      var _0x4082b5 = this.rad * 0.8;
      _0x3b8ba2.rotate(_0x4a00a1 * (Math.PI / 0xb4) + _0x4c22e4);
      var _0x586aaf = 0x0;
      var _0x2617ee = this.rad;
      var _0xccd0aa = _0x4082b5 * _0x4c63df * 0.62;
      var _0xa765bc = _0x4082b5 * _0x532a48;
      var _0x38b40b = 0.2;
      var _0x54a2d8 = 1.7;
      _0x3b8ba2.drawImage(_0x331a68, _0x586aaf + _0xccd0aa * -_0x38b40b, _0x2617ee + _0xa765bc * -_0x54a2d8, _0xccd0aa, _0xa765bc);
      _0x3b8ba2.restore();
    }
    var _0x331a68 = this.getSkinImageObj(this.getWing("vulture", _0x129cdb + 0x2, false));
    if (_0x331a68) {
      _0x3b8ba2.save();
      var _0x43d4fa = 0x1;
      _0x43d4fa = -(-_0x4387dc + _0x2fbde6);
      var _0x4c22e4 = _0x43d4fa * (-_0x5310d0 * (Math.PI / 0xb4));
      var _0x4082b5 = this.rad * 0.8;
      _0x3b8ba2.rotate(-_0x4a00a1 * (Math.PI / 0xb4) + _0x4c22e4);
      var _0x586aaf = 0x0;
      var _0x2617ee = this.rad;
      var _0xccd0aa = _0x4082b5 * _0x4c63df * 0.62;
      var _0xa765bc = _0x4082b5 * _0x532a48;
      var _0x38b40b = 0.8;
      var _0x54a2d8 = 1.7;
      _0x3b8ba2.drawImage(_0x331a68, _0x586aaf + _0xccd0aa * -_0x38b40b, _0x2617ee + _0xa765bc * -_0x54a2d8, _0xccd0aa, _0xa765bc);
      _0x3b8ba2.restore();
    }
    _0x3b8ba2.restore();
    if (this.specType != 0x0 && this.specType != undefined) {
      var _0x42b822 = this.getSkinImageObj(this.getHead("vulture", false));
      if (_0x42b822) {
        var _0x4082b5 = this.rad;
        var _0x4998ce = 0x0;
        if (this.flag_flying) {
          _0x4998ce = (-_0x4082b5 + _0x4082b5 * 0.4) * 1.4705882352941178;
        } else {
          _0x4998ce = (-_0x4082b5 + _0x4082b5 * 0.1) * 1.4705882352941178;
        }
        _0x3b8ba2.save();
        _0x3b8ba2.drawImage(_0x42b822, -_0x4082b5 * 1.4705882352941178, _0x4998ce, 0x2 * _0x4082b5 * 1.4705882352941178, 0x2 * _0x4082b5 * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
    }
  }
};
function _0x487eaa() {
  _0x487eaa.superClass.call(this, 0x2);
  if (this.resumeFlapT == 0x0) {
    this.resumeFlapT = +new Date();
  }
}
window.Vulture = _0x487eaa;
_0x2b451a.setCustomClassForGameObjType(_0x487eaa, 0x2, _0xcb2b53);
var _0x53abbc = _0x472b99;
_0x4e2d1b.prototype = Object.create(_0x53abbc.prototype);
_0x4e2d1b.prototype.constructor = _0x4e2d1b;
_0x4e2d1b.superClass = _0x53abbc;
_0x4e2d1b.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x4e2d1b.prototype.customDraw = function (_0x349b33) {
  var _0x50c8ad = "gameobj/" + this.oType + "/" + this.oType + ".png";
  var _0x252a81 = this.getSkinImageObj(_0x50c8ad);
  if (_0x252a81) {
    _0x3b8ba2.save();
    var _0x45113d = this.rad * 0x1;
    _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
    _0x3b8ba2.drawImage(_0x252a81, -_0x45113d, -_0x45113d, _0x45113d * 0x2, _0x45113d * 0x2);
    _0x3b8ba2.restore();
  }
};
function _0x4e2d1b() {
  _0x4e2d1b.superClass.call(this, 0x54);
}
window.Bone = _0x4e2d1b;
_0x2b451a.setCustomClassForGameObjType(_0x4e2d1b, 0x54);
var _0x53abbc = _0xf4bb63;
_0x57299d.prototype = Object.create(_0x53abbc.prototype);
_0x57299d.prototype.constructor = _0x57299d;
_0x57299d.superClass = _0x53abbc;
_0x57299d.prototype.animalInfo = function () {
  var _0x43218b = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x43218b.aniName = "Bison";
      break;
    case 0xc8:
      _0x43218b.aniName = "Titan Bison";
      break;
    case 0xca:
      _0x43218b.aniName = "Minotaur";
      break;
  }
  _0x43218b.aniCol = "#FF9000";
  _0x43218b.skinName = this.getSkinName();
  _0x43218b.upgradeText = "UPGRADED to " + _0x43218b.aniName + "!\nHold W to charge and toss opponent in air.";
  return _0x43218b;
};
_0x57299d.prototype.getSpeciesPath = function (_0x27f4c3) {
  return "desert/" + _0x27f4c3 + "/" + this.animalSpecies;
};
_0x57299d.prototype.getAbilityInfo = function (_0x58d906) {
  var _0x328de0 = {
    abilName: "Gores!",
    abilImg: "abilities/Gore.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x328de0;
};
_0x57299d.prototype.getSkinName = function () {
  return this.getSkin() + "/bison" + (this.specType == 0x0 ? '' : 0x1);
};
_0x57299d.prototype.getSkin = function () {
  return "desert/bison/" + this.animalSpecies + this.getSubSpecies();
};
_0x57299d.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x57299d.prototype.drawUnderSkinImgOutline = function () {
  _0x57299d.superClass.prototype.drawUnderSkinImgOutline.call(this);
  if (this.flag_usingAbility && this.isHitingAnimal) {
    this.showBackLeg();
  }
};
_0x57299d.prototype.isHitingAnimal = false;
_0x57299d.prototype.drawSkinCustomization = function () {
  if (this.flag_usingAbility) {
    if (this.specType != 0x0 && this.specType != undefined) {
      if (!this.isHitingAnimal && this.specType == 0x2) {
        this.isHitingAnimal = true;
      }
      {
        var _0x4eab88 = this.getSkinImageObj("skins/" + this.getSkin() + "/body_front.png");
        var _0x559594 = this.skinScale * 0x1;
        var _0x58d662 = this.skinRad;
        if (_0x4eab88) {
          frame = 0x0;
          _0x3b8ba2.save();
          var _0x58d662 = this.rad;
          _0x3b8ba2.drawImage(_0x4eab88, -_0x58d662 * _0x559594, -_0x58d662 * _0x559594, 0x2 * _0x58d662 * _0x559594, 0x2 * _0x58d662 * _0x559594);
          _0x3b8ba2.restore();
        }
      }
      var _0x4eab88 = this.getSkinImageObj("skins/" + this.getSkin() + "/bison_head" + this.specType + ".png");
      var _0x559594 = this.skinScale * 1.01;
      var _0x58d662 = this.skinRad;
      if (_0x4eab88) {
        frame = 0x0;
        _0x3b8ba2.save();
        var _0x58d662 = this.rad;
        _0x3b8ba2.drawImage(_0x4eab88, -_0x58d662 * _0x559594, (-_0x58d662 + _0x58d662 * 0.2) * _0x559594 + frame, 0x2 * _0x58d662 * _0x559594, 0x2 * _0x58d662 * _0x559594);
        _0x3b8ba2.restore();
      }
    }
  } else {
    this.legYAnchorF = 0x0;
    this.legHeightF = 0x0;
    this.isHitingAnimal = false;
  }
};
_0x57299d.prototype.legYAnchorF = 2.3;
_0x57299d.prototype.legStretchW = 1.3;
_0x57299d.prototype.legStretchH = 0x1;
_0x57299d.prototype.legHeightF = 0x14;
_0x57299d.prototype.showBackLeg = function () {
  var _0x5d698f = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x46ccba = _0x7b826(_0x5d698f, 0.3, 0x1, 0.5);
  var _0x464483 = "front";
  if (_0x46ccba <= 0.5 && _0x46ccba > 0.1) {
    _0x464483 = "front";
    this.legYAnchorF = 0x1;
    this.legHeightF = 0x14;
  } else if (_0x46ccba > 0.5) {
    _0x464483 = "back";
    this.legYAnchorF = 2.3;
    this.legHeightF = -0x5;
  }
  _0x3b8ba2.save();
  var _0x3ff764 = _0x3b8ba2.globalAlpha;
  _0x3b8ba2.globalAlpha = 0.1 * _0x3ff764;
  _0x133658(0x0, 0x0, this.rad, "#755A2A");
  _0x3b8ba2.globalAlpha = 0x1 * _0x3ff764;
  var _0x492233 = this.getSkinImageObj("skins/" + this.getSkin() + "/" + _0x464483 + "_legs.png");
  if (_0x492233) {
    var _0x53c064 = this.rad * 0.6;
    var _0x2cea94 = this.rad;
    var _0xde964e = _0x53c064 * 0x2 * this.legStretchW;
    var _0x23db65 = _0x53c064 * 0x2 * _0x46ccba;
    _0x3b8ba2.drawImage(_0x492233, 0x0 + _0xde964e * -0.5, _0x2cea94 + (_0x23db65 + this.legHeightF) * (-0.95 * this.legYAnchorF), _0xde964e, _0x23db65 * this.legStretchH);
  }
  _0x3b8ba2.restore();
};
function _0x57299d() {
  _0x57299d.superClass.call(this, 0x2);
}
window.Bison = _0x57299d;
_0x2b451a.setCustomClassForGameObjType(_0x57299d, 0x2, _0x5295d3);
var _0x53abbc = _0xf4bb63;
_0x572673.prototype = Object.create(_0x53abbc.prototype);
_0x572673.prototype.constructor = _0x572673;
_0x572673.superClass = _0x53abbc;
_0x572673.prototype.animalInfo = function () {
  var _0x25add8 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x25add8.aniName = "Komodo Dragon";
      break;
    case 0x1:
      _0x25add8.aniName = "Golden Komodo";
      break;
    case 0x2:
      _0x25add8.aniName = "Night Komodo";
      break;
    case 0xc8:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x25add8.aniName = "Dowager Varande";
          break;
        case 0x1:
          _0x25add8.aniName = "Emepror Varande";
          break;
      }
      break;
    case 0xca:
      _0x25add8.aniName = "Galaxy Komodo Dragon";
      break;
  }
  _0x25add8.aniCol = "#FF9000";
  _0x25add8.skinName = this.getSkinName();
  _0x25add8.upgradeText = "UPGRADED to " + _0x25add8.aniName + "!\n" + _0x25add8.aniName + " have very poisonous bite. Press W to bite! Also eat bones.";
  return _0x25add8;
};
_0x572673.prototype.getAbilityInfo = function (_0x42d54b) {
  var _0x8607f6 = {
    abilName: "Poison Bite\n(Sweat Prey)",
    abilImg: "abilities/Bite.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x8607f6;
};
_0x572673.prototype.getSkinName = function () {
  return this.getSkinPath() + "/komododragon";
};
_0x572673.prototype.getSkinPath = function () {
  return "desert/komododragon/" + this.animalSpecies + this.getSubSpecies();
};
_0x572673.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return this.animalSpecies == 0xc8 ? "/" + this.animalSubSpecies : '';
};
_0x572673.prototype.updateZ = function () {
  if (this.flag_eff_grabbedByFlytrap) {
    this.z = 0x44c + this.rad;
  } else {
    if (this.flag_usingAbility && !this.flag_underWater) {
      this.z = 0x4b0 + this.rad;
    } else {
      if (this.flag_flying || this.flag_eff_tossedInAir) {
        this.z = 0x2710;
        if (this.flag_isGrabbed) {
          this.z -= this.rad;
        } else {
          this.z += this.rad;
        }
      } else {
        this.z = this.rad;
      }
    }
  }
};
_0x572673.prototype.straightTongueOffsetY = -0.45;
_0x572673.prototype.straightTongueScaleF = 1.8;
_0x572673.prototype.drawUnderSkinImg = function () {
  if (this.specType != 0x0) {
    return;
  }
  this.setSkinScale();
  if (+new Date() < this.spawnTime + 0x1388) {
    return;
  }
  if (!this.flag_usingAbility && !this.wasLicking && +new Date() > this.nextShowT) {
    var _0x920914 = this.skinScale * this.straightTongueScaleF;
    var _0x5902c4 = this.skinRad;
    var _0x486491 = this.getSkinImageObj("skins/" + this.getSkinPath() + "/tongue.png");
    var _0x33d536 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x2c5641 = _0x7b826(_0x33d536, 0.7, 0xc, 0.5);
    if (_0x486491) {
      _0x3b8ba2.drawImage(_0x486491, -_0x5902c4 * _0x920914, (-_0x5902c4 + _0x5902c4 * this.straightTongueOffsetY) * _0x920914 + _0x2c5641, 0x2 * _0x5902c4 * _0x920914, 0x2 * _0x5902c4 * _0x920914);
    }
  }
};
_0x572673.prototype.tongueAnimationDur = 0x1;
_0x572673.prototype.tongueScaleF = 1.5;
_0x572673.prototype.tongueAncherY = -0.21;
_0x572673.prototype.showTongue = true;
_0x572673.prototype.nextShowT = 0x0;
_0x572673.prototype.lastLickSide = 0x0;
_0x572673.prototype.wasLicking = false;
_0x572673.prototype.isLicking = false;
_0x572673.prototype.lickFaceOffsetY = -0.3;
_0x572673.prototype.biteStart = 0x0;
_0x572673.prototype.drawSkinCustomization = function () {
  this.setSkinScale();
  var _0x22bd8d = -0.15;
  console.log("specTpye: " + this.specType);
  if (this.flag_usingAbility) {
    if (this.biteStart == 0x0) {
      this.biteStart = _0x1f4c9e;
    }
    if (this.specType == 0x1) {
      {
        var _0x1df82f = this.getSkinImageObj("skins/" + this.getSkinPath() + "/komododragon_neck.png");
        if (_0x1df82f) {
          var _0x1b357a = (_0x1f4c9e - this.biteStart) / 0x3e8;
          var _0x274242 = 0x5;
          var _0x530d28 = 0x1;
          var _0x576f8e = _0x7b826(_0x1b357a, _0x530d28, _0x274242, 0x1);
          _0x3b8ba2.save();
          var _0x4cff6c = this.rad;
          var _0x3f1930 = this.skinScale * 0x1;
          _0x3b8ba2.drawImage(_0x1df82f, -_0x4cff6c * _0x3f1930, (-_0x4cff6c + _0x4cff6c * -0.05) * _0x3f1930 + _0x576f8e, 0x2 * _0x4cff6c * _0x3f1930, 0x2 * _0x4cff6c * _0x3f1930);
          _0x3b8ba2.restore();
        }
      }
      {
        if (!this.flag_underWater) {
          var _0x3d6110 = "skins/" + this.getSkinPath() + "/komododragon_tail.png";
          var _0x4584c3 = this.getSkinImageObj(_0x3d6110);
          if (_0x4584c3) {
            var _0x3f1930 = this.skinScale * 1.2;
            var _0x4cff6c = this.skinRad;
            _0x3b8ba2.drawImage(_0x4584c3, -_0x4cff6c * _0x3f1930, (-_0x4cff6c + _0x4cff6c * 0x0) * _0x3f1930, 0x2 * _0x4cff6c * _0x3f1930, 0x2 * _0x4cff6c * _0x3f1930);
          }
        }
      }
      {
        var _0x40f0e8 = this.getSkinImageObj("skins/" + this.getSkinPath() + "/komododragon_attack.png");
        var _0x3f1930 = this.skinScale * 0x1;
        var _0x4cff6c = this.skinRad;
        var _0x274242 = 0xc;
        var _0x530d28 = 0.9;
        var _0x576f8e = _0x7b826(_0x1b357a, _0x530d28, _0x274242, 0x1);
        if (_0x40f0e8) {
          _0x3b8ba2.save();
          _0x3b8ba2.drawImage(_0x40f0e8, -_0x4cff6c * _0x3f1930, -_0x4cff6c * _0x3f1930 + _0x576f8e, 0x2 * _0x4cff6c * _0x3f1930, 0x2 * _0x4cff6c * _0x3f1930);
          _0x3b8ba2.restore();
        }
      }
    }
  }
  if (this.specType == 0x0) {
    if (!this.flag_underWater) {
      var _0x3d6110 = "skins/" + this.getSkinPath() + "/komododragon_tail.png";
      var _0x4584c3 = this.getSkinImageObj(_0x3d6110);
      if (_0x4584c3) {
        var _0x3f1930 = this.skinScale * 1.2;
        var _0x4cff6c = this.skinRad;
        _0x3b8ba2.drawImage(_0x4584c3, -_0x4cff6c * _0x3f1930, (-_0x4cff6c + _0x4cff6c * 0x0) * _0x3f1930, 0x2 * _0x4cff6c * _0x3f1930, 0x2 * _0x4cff6c * _0x3f1930);
      }
      var _0x40f0e8 = this.getSkinImageObj("skins/" + this.getSkinPath() + "/komododragon_attack.png");
      var _0x3f1930 = this.skinScale * 0x1;
      var _0x4cff6c = this.skinRad;
      var _0x274242 = 0xc;
      var _0x530d28 = 0.9;
      var _0x576f8e = _0x7b826(_0x1b357a, _0x530d28, _0x274242, 0x1);
      if (_0x40f0e8) {
        _0x3b8ba2.save();
        _0x3b8ba2.drawImage(_0x40f0e8, -_0x4cff6c * _0x3f1930, -_0x4cff6c * _0x3f1930 + _0x576f8e, 0x2 * _0x4cff6c * _0x3f1930, 0x2 * _0x4cff6c * _0x3f1930);
        _0x3b8ba2.restore();
      }
      _0x3b8ba2.save();
      var _0x3d6110 = "skins/" + this.getSkinPath() + "/licked_face.png";
      var _0x4584c3 = this.getSkinImageObj(_0x3d6110);
      if (_0x4584c3) {
        var _0x8cbd15 = this.lickedAmt / 0x64;
        _0x3b8ba2.globalAlpha = _0x8cbd15;
        _0x3b8ba2.drawImage(_0x4584c3, -_0x4cff6c * _0x3f1930, (-_0x4cff6c + _0x4cff6c * _0x22bd8d) * _0x3f1930 + _0x576f8e, 0x2 * _0x4cff6c * _0x3f1930, 0x2 * _0x4cff6c * _0x3f1930);
      }
      _0x3b8ba2.restore();
      _0x3b8ba2.save();
      var _0x3d6110 = "skins/" + this.getSkinPath() + "/komododragon_head.png";
      var _0x4584c3 = this.getSkinImageObj(_0x3d6110);
      if (_0x4584c3) {
        var _0x3f1930 = this.skinScale;
        var _0x4cff6c = this.skinRad;
        _0x3b8ba2.drawImage(_0x4584c3, -_0x4cff6c * _0x3f1930, -_0x4cff6c * _0x3f1930, 0x2 * _0x4cff6c * _0x3f1930, 0x2 * _0x4cff6c * _0x3f1930);
      }
      _0x3b8ba2.restore();
    }
  }
};
_0x572673.prototype.lickSide = 0x0;
_0x572673.prototype.lickedAmt = 0x0;
_0x572673.prototype.readCustomData_onNewlyVisible = function (_0x243406) {
  _0x572673.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x243406);
  var _0x45881a = _0x243406.readUInt8() == 0x1;
  this.nextShowT = +new Date() + 0xbb8;
  this.isLicking = _0x45881a;
  this.lickSide = _0x243406.readUInt8();
  this.lickedAmt = _0x243406.readUInt8();
};
_0x572673.prototype.customUpdatedProperty = function (_0x55b5b8, _0x476585) {
  if (_0x55b5b8 == 0x5a) {
    var _0x1c4693 = _0x476585.readUInt8() == 0x1;
    this.nextShowT = +new Date() + 0xbb8;
    this.isLicking = _0x1c4693;
    if (!this.wasLicking && this.isLicking) {
      this.wasLicking = true;
    }
  } else {
    if (_0x55b5b8 == 0x59) {
      this.lickedAmt = _0x476585.readUInt8();
    } else if (_0x55b5b8 == 0x5b) {
      this.lickSide = _0x476585.readUInt8();
    }
  }
};
function _0x572673() {
  _0x572673.superClass.call(this, 0x2);
}
window.KomodoDragon = _0x572673;
_0x2b451a.setCustomClassForGameObjType(_0x572673, 0x2, _0x57279a);
var _0x53abbc = _0x472b99;
_0x41b78e.prototype = Object.create(_0x53abbc.prototype);
_0x41b78e.prototype.constructor = _0x41b78e;
_0x41b78e.superClass = _0x53abbc;
_0x41b78e.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x41b78e.prototype.customDraw = function (_0x98afee) {
  _0x3b8ba2.save();
  this.drawOutlinedCircle('', "#328ca2");
  _0x3b8ba2.restore();
};
function _0x41b78e() {
  _0x41b78e.superClass.call(this, 0x55);
}
window.SweatPoison = _0x41b78e;
_0x2b451a.setCustomClassForGameObjType(_0x41b78e, 0x55);
var _0x53abbc = _0x472b99;
_0x3f89ce.prototype = Object.create(_0x53abbc.prototype);
_0x3f89ce.prototype.constructor = _0x3f89ce;
_0x3f89ce.superClass = _0x53abbc;
_0x3f89ce.prototype.updateZ = function () {
  this.z = -0x9a;
};
_0x3f89ce.prototype.customDraw = function (_0x565f42) {
  _0x3b8ba2.save();
  this.rPer = 0x0;
  this.drawOutlinedCircle('', "#328ca2");
  if (!(_0x4bda0b == 0x2)) {
    _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
  }
  var _0x270498 = 0x0;
  var _0x2e8f7f = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  _0x270498 = 0x4 * Math.sin(0x2 * Math.PI / 0x7 * _0x2e8f7f);
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - 0x1 + _0x270498), 0x0, Math.PI * 0x2);
  _0x3b8ba2.fill();
  if (!(_0x4bda0b == 0x2)) {
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - 0x1 + _0x270498), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * 0.45, -this.rad * 0.45 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x270498), 0x0, 0x2 * Math.PI);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * 0.5, this.rad * 0.5 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.4 + _0x270498), 0x0, 0x2 * Math.PI);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x270498), 0x0, 0x2 * Math.PI);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(-this.rad * 0.75, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.3 + _0x270498), 0x0, 0x2 * Math.PI);
    _0x3b8ba2.fill();
    if (this.rad > 0x32) {
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0xa, 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
    }
  }
  _0x3b8ba2.restore();
};
function _0x3f89ce() {
  _0x3f89ce.superClass.call(this, 0x56);
}
window.PoisonPool = _0x3f89ce;
_0x2b451a.setCustomClassForGameObjType(_0x3f89ce, 0x56);
var _0x53abbc = _0xf4bb63;
_0x4c0d2f.prototype = Object.create(_0x53abbc.prototype);
_0x4c0d2f.prototype.constructor = _0x4c0d2f;
_0x4c0d2f.superClass = _0x53abbc;
_0x4c0d2f.prototype.updateZ = function () {
  if (this.flag_underWater) {
    this.z = -0x64;
  } else {
    if (this.flag_isInArena) {
      this.z = 0x2710 + this.rad;
    } else {
      if (this.flag_eff_tossedInAir) {
        this.z = 0x4b0 + this.rad;
      } else {
        this.z = 0x4b0 + this.rad;
      }
    }
  }
};
_0x4c0d2f.prototype.animalInfo = function () {
  var _0x204ecc = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x204ecc.aniName = "Giant Scorpion";
      break;
    case 0x1:
      _0x204ecc.aniName = "Golden Scorpion";
      break;
    case 0x2:
      _0x204ecc.aniName = "Carnelian Scorpion";
      break;
    case 0xcc:
      _0x204ecc.aniName = "Selamorph Scorpion";
      break;
    case 0xdc:
      _0x204ecc.aniName = "Nebuladon Scorpion";
      break;
  }
  _0x204ecc.aniCol = "#FF9000";
  _0x204ecc.skinName = "scorpion";
  _0x204ecc.upgradeText = "UPGRADED to " + _0x204ecc.aniName + "!\nSting and Shiver your prey to death.\n(Press W to Sting)";
  return _0x204ecc;
};
_0x4c0d2f.prototype.getAbilityInfo = function (_0xf6d467) {
  var _0x4cceff = {
    abilName: "Sting!\n(Shivers Prey)",
    abilImg: "abilities/Sting.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x4cceff;
};
_0x4c0d2f.prototype.getSkinName = function () {
  var _0x547e68 = "desert/scorpion/" + this.animalSpecies + "/scorpion";
  _0x547e68 += this.specType == 0x0 ? '' : this.specType;
  return _0x547e68;
};
_0x4c0d2f.prototype.stingerScaleF = 0.7;
_0x4c0d2f.prototype.stingerOffsetY = -0.6;
_0x4c0d2f.prototype.poison = 0x32;
_0x4c0d2f.prototype.clawAnimation = null;
_0x4c0d2f.prototype.stingAnimation = null;
_0x4c0d2f.prototype.stingerTailNormal = null;
_0x4c0d2f.prototype.stingerTail = null;
_0x4c0d2f.prototype.stingerAttack = null;
_0x4c0d2f.prototype.stingerAttackFull = null;
_0x4c0d2f.prototype.stingerNormal = null;
_0x4c0d2f.prototype.stingerNormalFull = null;
_0x4c0d2f.prototype.isUsingAbility = false;
_0x4c0d2f.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    this.clawAnimation = null;
    this.stingAnimation = null;
    this.isUsingAbility = false;
  }
  if (!this.isUsingAbility && this.flag_eff_aniInClaws) {
    this.isUsingAbility = true;
    this.stingAnimation = null;
  }
  if (this.isUsingAbility && !this.flag_usingDiveAbility) {
    if (this.stingAnimation == null) {
      this.stingAnimation = new _0x1c8e57(this, 0x1, _0x1c8e57.bow, {
        "v1": 0x5
      });
      this.stingAnimation.onFrameEntered = function (_0x53a695) {
        _0x3b8ba2.save();
        var _0x108910 = this.forObj.skinScale * this.forObj.stingerScaleF;
        var _0x47882f = this.forObj.rad;
        if (this.forObj.stingerTailAttack) {
          _0x3b8ba2.drawImage(this.forObj.stingerTailAttack, -_0x47882f * _0x108910, (-_0x47882f + _0x47882f * this.forObj.stingerOffsetY) * _0x108910, 0x2 * _0x47882f * _0x108910, 0x2 * (_0x47882f + _0x47882f * _0x53a695) * _0x108910);
        }
        if (this.forObj.stingerTail) {
          _0x3b8ba2.drawImage(this.forObj.stingerTail, -_0x47882f * _0x108910, (-_0x47882f + _0x47882f * _0x53a695) * _0x108910, 0x2 * _0x47882f * _0x108910, 0x2 * _0x47882f * _0x108910);
        }
        if (this.forObj.stingerAttack) {
          _0x3b8ba2.drawImage(this.forObj.stingerAttack, -_0x47882f * _0x108910, (-_0x47882f + _0x47882f * _0x53a695) * _0x108910, 0x2 * _0x47882f * _0x108910, 0x2 * _0x47882f * _0x108910);
        }
        var _0x170c4d = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x531c21 = _0x7b826(_0x170c4d, 0x5, 0x1, 0x1);
        var _0x197ea9 = Math.max(0x0, _0x531c21);
        _0x3b8ba2.globalAlpha = _0x197ea9 * Math.max(0x0, this.poison / 0x64);
        if (this.forObj.stingerAttackFull) {
          _0x3b8ba2.drawImage(this.forObj.stingerAttackFull, -_0x47882f * _0x108910, (-_0x47882f + _0x47882f * _0x53a695) * _0x108910, 0x2 * _0x47882f * _0x108910, 0x2 * _0x47882f * _0x108910);
        }
        _0x3b8ba2.restore();
      };
    }
    if (this.stingAnimation) {
      this.stingAnimation.run();
    }
  }
  if (this.stingAnimation == null || this.stingAnimation.hasStopped) {
    if (!this.flag_underWater && !this.flag_usingDiveAbility) {
      if (this.stingerTailNormal != null && this.stingerNormalFull != null) {
        var _0x47ab64 = this.skinScale * this.stingerScaleF;
        var _0x3c937c = this.skinRad;
        var _0x4b16ab = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x1c35f0 = 0x0;
        var _0x4636da = 0x0;
        if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
          _0x1c35f0 = _0x7b826(_0x4b16ab, 1.5, 0x3, 0x2);
          _0x4636da = _0x7b826(_0x4b16ab, 1.5, 0x1, 0x2);
        }
        _0x3b8ba2.save();
        var _0x3c937c = this.rad - _0x1c35f0 * 0.5;
        _0x3b8ba2.drawImage(this.stingerTailNormal, -_0x3c937c * _0x47ab64, (-_0x3c937c + _0x3c937c * this.stingerOffsetY) * _0x47ab64 + _0x1c35f0 * -_0x4636da, 0x2 * _0x3c937c * _0x47ab64, 0x2 * _0x3c937c * _0x47ab64);
        var _0x4b16ab = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x32af92 = _0x7b826(_0x4b16ab, 0x5, 0x1, 0x1);
        var _0x195422 = Math.max(0x0, _0x32af92);
        _0x3b8ba2.globalAlpha = _0x195422 * Math.max(0x0, this.poison / 0x64);
        _0x3b8ba2.drawImage(this.stingerNormalFull, -_0x3c937c * _0x47ab64, (-_0x3c937c + _0x3c937c * this.stingerOffsetY) * _0x47ab64 + _0x1c35f0 * -_0x4636da, 0x2 * _0x3c937c * _0x47ab64, 0x2 * _0x3c937c * _0x47ab64);
        _0x3b8ba2.restore();
      }
    }
  }
};
_0x4c0d2f.prototype.drawWhenUnderwater = function () {
  this.drawUnderwaterCustomization(0x1, 1.1);
};
_0x4c0d2f.prototype.tailOffsetY = -0.25;
_0x4c0d2f.prototype.tailScaleF = 1.2;
var _0x465bd6 = 0.1;
_0x4c0d2f.prototype.drawUnderSkinImg = function () {
  var _0x2bc58c = "skins/desert/scorpion/" + this.animalSpecies + "/tail_back.png";
  var _0x156f17 = this.getSkinImageObj(_0x2bc58c);
  if (_0x156f17) {
    var _0x2c1a61 = 0x0;
    if (this.stingAnimation) {
      if (this.stingAnimation.frame < 0.5) {
        _0x2c1a61 = -this.stingAnimation.frame * 0.3;
      }
    }
    var _0x115b97 = this.skinScale * this.tailScaleF;
    var _0x60cbac = this.skinRad;
    _0x3b8ba2.drawImage(_0x156f17, -_0x60cbac * _0x115b97, (-_0x60cbac + _0x60cbac * this.tailOffsetY) * _0x115b97, 0x2 * _0x60cbac * _0x115b97, 0x2 * (_0x60cbac + _0x60cbac * _0x2c1a61) * _0x115b97);
  }
  if (this.flag_usingAbility && !this.flag_underWater) {
    if (this.clawAnimation == null) {
      this.clawAnimation = new _0x1c8e57(this, 0.9, _0x1c8e57.bow, {
        "v1": 0x4
      });
      this.clawAnimation.keepLastFrame = true;
      this.clawAnimation.onFrameEntered = function (_0x19f483) {
        var _0x31d2b9 = 0x0;
        if (_0x19f483 < 0.5) {
          _0x31d2b9 = -_0x19f483;
        }
        var _0x55e8e5 = "skins/desert/scorpion/" + this.forObj.animalSpecies + "/arms.png";
        if (this.forObj.flag_eff_aniInClaws) {
          _0x55e8e5 = "skins/desert/scorpion/" + this.forObj.animalSpecies + "/arms-grabbed.png";
        }
        var _0x47a1dc = this.forObj.getSkinImageObj(_0x55e8e5);
        if (_0x47a1dc) {
          var _0x10ab11 = this.forObj.skinScale * this.forObj.tailScaleF;
          var _0x55d101 = this.forObj.skinRad;
          if (!this.hasStopped && this.timePassed < 0.75) {
            _0x465bd6 = _0x31d2b9;
            _0x3b8ba2.drawImage(_0x47a1dc, -_0x55d101 * _0x10ab11, (-_0x55d101 + _0x55d101 * _0x31d2b9) * _0x10ab11, 0x2 * _0x55d101 * _0x10ab11, 0x2 * _0x55d101 * _0x10ab11);
          } else {
            _0x3b8ba2.drawImage(_0x47a1dc, -_0x55d101 * _0x10ab11, (-_0x55d101 + _0x55d101 * _0x465bd6) * _0x10ab11, 0x2 * _0x55d101 * _0x10ab11, 0x2 * _0x55d101 * _0x10ab11);
          }
        }
      };
    }
    if (this.clawAnimation != null) {
      this.clawAnimation.run();
    }
  }
};
_0x4c0d2f.prototype.readCustomData_onNewlyVisible = function (_0x1ea296) {
  _0x4c0d2f.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x1ea296);
  this.poison = _0x1ea296.readUInt8();
};
_0x4c0d2f.prototype.customUpdatedProperty = function (_0x19859f, _0x22904c) {
  if (_0x19859f == 0x59) {
    this.poison = _0x22904c.readUInt8();
  }
};
function _0x4c0d2f() {
  _0x4c0d2f.superClass.call(this, 0x2);
}
_0x4c0d2f.prototype.preLoad = function () {
  this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/scorpion1.png");
  this.stingerTailNormal = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/stinger_normal.png");
  this.stingerTail = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/stinger_tail.png");
  this.stingerTailAttack = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/attack_tail.png");
  this.stingerAttack = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/attack_stinger_dull.png");
  this.stingerAttackFull = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/attack_stinger_full.png");
  this.stingerNormal = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/normal_stinger_dull.png");
  this.stingerNormalFull = this.getSkinImageObj("skins/desert/scorpion/" + this.animalSpecies + "/normal_stinger_full.png");
};
window.GiantScorpion = _0x4c0d2f;
_0x2b451a.setCustomClassForGameObjType(_0x4c0d2f, 0x2, _0x2a5063);
var _0x53abbc = _0xf4bb63;
_0x3bd12f.prototype = Object.create(_0x53abbc.prototype);
_0x3bd12f.prototype.constructor = _0x3bd12f;
_0x3bd12f.superClass = _0x53abbc;
_0x3bd12f.prototype.updateZ = function () {
  if (this.flag_usingAbility && this.webState > 0x2) {
    this.z = 0x3e8;
  } else {
    if (this.flag_eff_isOnSpiderWeb) {
      this.z = 0x3e8 + this.rad;
    } else {
      this.z = 0x3e8 + this.rad;
    }
  }
};
_0x3bd12f.prototype.animalInfo = function () {
  var _0x3cb680 = {};
  switch (this.animalSubSpecies) {
    case 0x0:
      _0x3cb680.aniName = "Blackwidow Spider";
      break;
    case 0x1:
      _0x3cb680.aniName = "Goldenwidow Spider";
      break;
    case 0x2:
      _0x3cb680.aniName = "Queen Blackwidow";
      break;
    case 0xcc:
      _0x3cb680.aniName = "Blood Widow Spider!";
      break;
    case 0x7e7:
      _0x3cb680.aniName = "Bot X-303";
      break;
  }
  _0x3cb680.aniCol = "#FF9000";
  _0x3cb680.skinName = this.getSkinName();
  _0x3cb680.upgradeText = "UPGRADED to " + _0x3cb680.aniName + "!\nBlackwidow is a sneaky predator. It traps prey in the web and injects sweat poison.\nPress W to spin and throw web.";
  return _0x3cb680;
};
_0x3bd12f.prototype.getAbilityInfo = function (_0x4f1dc8) {
  var _0x47063e = {
    abilName: "Spin Web & Bite\n(Sweat Prey)",
    abilImg: "abilities/Web.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x47063e;
};
_0x3bd12f.prototype.readCustomData_onNewlyVisible = function (_0x262aaf) {
  _0x3bd12f.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x262aaf);
  this.customUpdatedProperty(0x67, _0x262aaf);
};
_0x3bd12f.prototype.webX = 0x0;
_0x3bd12f.prototype.webY = 0x0;
_0x3bd12f.prototype.spiderX = 0x0;
_0x3bd12f.prototype.spiderY = 0x0;
_0x3bd12f.prototype.webState = 0x0;
_0x3bd12f.prototype.customUpdatedProperty = function (_0x3bb1bd, _0x3aa12a) {
  if (_0x3bb1bd == 0x67) {
    this.webState = _0x3aa12a.readUInt8();
  }
};
_0x3bd12f.prototype.setStealth = function () {
  if (_0x16c921 == 0x4 && this.flag_usingAbility && (this.flag_stealth || this.flag_inHidingHole || this.flag_eff_isUnderTree)) {
    this.idealOp = 0.01;
  } else {
    _0x3bd12f.superClass.prototype.setStealth.call(this);
  }
};
_0x3bd12f.prototype.readUpdatedPropertyItem = function (_0x470fd3, _0x46f9c5) {
  _0x3bd12f.superClass.prototype.readUpdatedPropertyItem.call(this, _0x470fd3, _0x46f9c5);
  if (_0x470fd3 == 0x1) {
    if (this.webState == 0x0) {
      this.web_nx = this.web_ox = this.webX = this.x;
      this.web_ny = this.web_oy = this.webY = this.y;
      this.spider_ox = this.spiderX = this.spider_nx = this.x;
      this.spider_oy = this.spiderY = this.spider_ny = this.y;
    }
    var _0x1a8314 = _0x46f9c5.readUInt8() == 0x1;
    if (_0x1a8314) {
      var _0x42d12c = _0x46f9c5.readUInt16() / 0x4;
      var _0x3979d8 = _0x46f9c5.readUInt16() / 0x4;
      this.web_ox = this.webX;
      this.web_oy = this.webY;
      this.web_nx = _0x42d12c;
      this.web_ny = _0x3979d8;
      var _0x1b73ba = _0x46f9c5.readUInt16() / 0x4;
      var _0x341a8d = _0x46f9c5.readUInt16() / 0x4;
      this.spider_ox = this.spiderX;
      this.spider_oy = this.spiderY;
      this.spider_nx = _0x1b73ba;
      this.spider_ny = _0x341a8d;
    }
  }
};
_0x3bd12f.prototype.onLerpUpdate = function (_0x439c4e) {
  if (this.webState > 0x0) {
    this.webX = _0x439c4e * (this.web_nx - this.web_ox) + this.web_ox;
    this.webY = _0x439c4e * (this.web_ny - this.web_oy) + this.web_oy;
    this.spiderX = _0x439c4e * (this.spider_nx - this.spider_ox) + this.spider_ox;
    this.spiderY = _0x439c4e * (this.spider_ny - this.spider_oy) + this.spider_oy;
  }
};
_0x3bd12f.prototype.afterCustomDraw = function (_0x41928b) {
  if (this.webState > 0x0 && _0x2bd878 == this.id && this.flag_usingAbility) {
    _0x3b8ba2.save();
    _0x3b8ba2.strokeStyle = this.animalSpecies == 0x1 ? "gold" : "white";
    _0x3b8ba2.globalAlpha = 0.3;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.moveTo(this.webX, this.webY);
    _0x3b8ba2.lineTo(this.spiderX, this.spiderY);
    _0x3b8ba2.stroke();
    _0x3b8ba2.restore();
  }
};
_0x3bd12f.prototype.getSkinName = function () {
  return "desert/blackwidow/" + this.animalSpecies + "/" + this.animalSubSpecies + "/blackwidow" + (this.specType == 0x0 ? '' : this.specType);
};
_0x3bd12f.prototype.drawSkinCustomization = function () {
  if (this.webState == 0x0 && this.flag_usingAbility) {
    var _0x3a5c48 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x5ac404 = 0x1 * Math.sin(0x2 * Math.PI / 0.75 * _0x3a5c48);
    _0x3b8ba2.globalAlpha = 0.3;
    var _0xb9222d = this.animalSpecies == 0x1 ? "gold" : "#f2f2f2";
    _0x133658(0x0, -this.rad * 1.07, this.rad * 0.07, _0xb9222d);
    _0x3b8ba2.globalAlpha = 0.8 - 0.2 * _0x5ac404;
    _0x133658(0x0, -this.rad * 1.07, this.rad * 0.07 + (0.05 + _0x5ac404), _0xb9222d);
  }
};
function _0x3bd12f() {
  _0x3bd12f.superClass.call(this, 0x2);
}
window.BlackWidowSpider = _0x3bd12f;
_0x2b451a.setCustomClassForGameObjType(_0x3bd12f, 0x2, _0xcb5cf3);
var _0x2995b5 = _0x1dd382;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x1dd382.prototype.updateZ = function () {
  if (this.state == 0x0) {
    this.z = 0x2710;
  } else {
    this.z = 0x3e8;
  }
};
_0x1dd382.prototype.webAlpha = 0.5;
_0x1dd382.prototype.customDraw = function (_0x5ce4a9) {
  _0x3b8ba2.save();
  if (this.state > 0x0) {
    var _0x4e991c = this.getSkinImageObj("img/web/" + this.webType + "/spiderWeb.png");
    var _0x2b8c0d = this.rad;
    if (_0x4e991c) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = this.webAlpha;
      _0x3b8ba2.drawImage(_0x4e991c, -_0x2b8c0d, -_0x2b8c0d, 0x2 * _0x2b8c0d, 0x2 * _0x2b8c0d);
      _0x3b8ba2.restore();
    }
  }
  _0x3b8ba2.restore();
};
_0x1dd382.prototype.state = 0x0;
_0x1dd382.prototype.spiderX = 0x0;
_0x1dd382.prototype.spiderY = 0x0;
_0x1dd382.prototype.readUpdatedProperty = function (_0x5107e2, _0x4d60d9) {
  if (_0x5107e2 == 0x67) {
    this.state = _0x4d60d9.readUInt8();
  } else {
    if (_0x5107e2 == 0x21) {
      var _0x32325b = _0x4d60d9.readUInt8() / 0x64;
      if (_0x32325b < this.webAlpha) {
        this.webAlpha = _0x32325b;
      }
    }
  }
};
_0x1dd382.prototype.readCustomData_onNewlyVisible = function (_0x4c0d2a) {
  _0x1dd382.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x4c0d2a);
  this.state = _0x4c0d2a.readUInt8();
  var _0x1b712e = _0x4c0d2a.readUInt8() / 0x64;
  if (_0x1b712e < this.webAlpha) {
    this.webAlpha = _0x1b712e;
  }
  this.webType = _0x4c0d2a.readUInt8();
};
function _0x1dd382() {
  _0x1dd382.superClass.call(this);
}
window.BlackwidowWeb = _0x1dd382;
_0x2b451a.setCustomClassForGameObjType(_0x1dd382, 0xe, 0x5c);
var _0x53abbc = _0xf4bb63;
_0x31af81.prototype = Object.create(_0x53abbc.prototype);
_0x31af81.prototype.constructor = _0x31af81;
_0x31af81.superClass = _0x53abbc;
_0x31af81.prototype.skinFolder = function () {
  return "desert/";
};
_0x31af81.prototype.animalInfo = function () {
  var _0x3c87ab = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x3c87ab.aniName = "Pterodactyl";
      break;
    case 0x1:
      _0x3c87ab.aniName = "Golden Pterodactyl";
      break;
    case 0x2:
      _0x3c87ab.aniName = "Emerald Pterodactyl";
      break;
    case 0x64:
      _0x3c87ab.aniName = "Carnageodactyl";
      break;
  }
  _0x3c87ab.aniCol = "#FF9000";
  _0x3c87ab.skinName = this.skinFolder() + "/pterodactyl/" + this.animalSpecies + "/pterodactyl";
  _0x3c87ab.upgradeText = "UPGRADED to " + _0x3c87ab.aniName + "!\nFly and dive onto prey to pick it up.";
  return _0x3c87ab;
};
_0x31af81.prototype.getHead = function (_0x3a2ce7, _0x183b8c) {
  var _0x19bf44 = "skins/" + this.skinFolder() + "/" + _0x3a2ce7 + "/" + this.animalSpecies + "/" + _0x3a2ce7 + "_head" + '' + ".png";
  return _0x19bf44;
};
_0x31af81.prototype.getSkinName = function () {
  var _0x35b4cf = this.skinFolder() + "/pterodactyl/" + this.animalSpecies + "/pterodactyl";
  if (this.specType == 0x4) {
    _0x35b4cf += "4";
  } else {
    _0x35b4cf += this.specType == 0x0 ? '' : 0x1;
  }
  return _0x35b4cf;
};
_0x31af81.prototype.getWing = function (_0x5bc625, _0x4f15df) {
  if (!this.flag_flying) {
    _0x4f15df = _0x4f15df + '' + _0x4f15df;
  }
  var _0x20e26d = "skins/" + this.skinFolder() + "/" + _0x5bc625 + "/" + this.animalSpecies + "/" + _0x5bc625 + "_wing" + _0x4f15df + "_nohand.png";
  return _0x20e26d;
};
_0x31af81.prototype.getWingBone = function (_0x1e53e1, _0x2b1375) {
  if (!this.flag_flying) {
    _0x2b1375 = _0x2b1375 + '' + _0x2b1375;
  }
  var _0x36c966 = "skins/" + this.skinFolder() + "/" + _0x1e53e1 + "/" + this.animalSpecies + "/" + _0x1e53e1 + "_wing" + _0x2b1375 + "_bones.png";
  return _0x36c966;
};
_0x31af81.prototype.getHand = function (_0x519ed0, _0x255777) {
  if (!this.flag_flying) {
    _0x255777 = _0x255777 + '' + _0x255777;
  }
  if (this.isGliding) {
    _0x255777 = _0x255777 + "3";
  }
  var _0x41b2b4 = "skins/" + this.skinFolder() + "/" + _0x519ed0 + "/" + this.animalSpecies + "/" + _0x519ed0 + "_hand" + _0x255777 + ".png";
  return _0x41b2b4;
};
_0x31af81.prototype.biteStart = 0x0;
_0x31af81.prototype.flaps = 0x0;
_0x31af81.prototype.flapsMod = 0x5;
_0x31af81.prototype.countFlap = true;
_0x31af81.prototype.canFlap = !(_0x4bda0b == 0x2);
_0x31af81.prototype.resumeFlapT = 0x0;
_0x31af81.prototype.lastFlapFrame = 0x0;
_0x31af81.prototype.flapSpeed = 0x1;
_0x31af81.prototype.flapAmount = 0.2;
_0x31af81.prototype.r = 22.5;
_0x31af81.prototype.ax = 0x0;
_0x31af81.prototype.ay = 0x1;
_0x31af81.prototype.ww = 0x4;
_0x31af81.prototype.wh = 2.5;
_0x31af81.prototype.ax2 = 0x1;
_0x31af81.prototype.rf = -0x2;
_0x31af81.prototype.erf = 11.5;
_0x31af81.prototype.erf_gliding = 0x1e;
_0x31af81.prototype.lx = -0.05;
_0x31af81.prototype.famt = 0.5;
_0x31af81.prototype.yf = 0.15;
_0x31af81.prototype.xf = -0.2;
_0x31af81.prototype.legScale = 1.15;
_0x31af81.prototype.handPerc = 0.9;
_0x31af81.prototype.handWF = 0x0;
_0x31af81.prototype.set = false;
_0x31af81.prototype.wOffset = 0.1;
_0x31af81.prototype.headF = 0.5;
_0x31af81.prototype.headFDisp = -0.6;
_0x31af81.prototype.headScale = 0.8;
_0x31af81.prototype.headX = 0.225;
_0x31af81.prototype.drawLegs = function () {
  var _0x8b322d = 1.4705882352941178;
  var _0x2d2a4d = this.flag_eff_aniInClaws ? "legs2" : "legs";
  var _0x5ce139 = this.getSkinImageObj("skins/" + this.skinFolder() + "/pterodactyl/" + this.animalSpecies + "/" + _0x2d2a4d + ".png");
  if (_0x5ce139) {
    _0x3b8ba2.save();
    var _0xb6b033 = this.rad;
    _0x8b322d *= this.legScale;
    _0x3b8ba2.drawImage(_0x5ce139, -_0xb6b033 * _0x8b322d, (-_0xb6b033 + _0xb6b033 * this.lx) * _0x8b322d, 0x2 * _0xb6b033 * _0x8b322d, 0x2 * _0xb6b033 * _0x8b322d);
    _0x3b8ba2.restore();
  }
};
_0x31af81.prototype.drawUnderSkinImg = function () {
  if (this.flag_usingAbility) {
    this.drawWing(this.frame, 0x1);
    this.drawWing(this.frame, 0x2);
  }
  if (this.specType == 0x2) {
    this.drawLegs();
  }
};
_0x31af81.prototype.drawSkinCustomization = function () {
  if (this.flag_usingAbility) {
    this.drawBone(this.frame, 0x1);
    this.drawBone(this.frame, 0x2);
    this.drawHand(this.frame, 0x1);
    this.drawHand(this.frame, 0x2);
    var _0x2a669a = 1.4705882352941178;
    var _0xd6f01f = this.getHead("pterodactyl", false);
    var _0x409288 = this.getSkinImageObj(_0xd6f01f);
    if (_0x409288) {
      _0x3b8ba2.save();
      _0x2a669a += -(0.1 * this.headF) * this.frame;
      var _0x49dbe3 = this.rad;
      _0x3b8ba2.drawImage(_0x409288, -_0x49dbe3 * _0x2a669a, (-_0x49dbe3 + _0x49dbe3 * (0.3 + this.headFDisp * (this.frame / 0xa)) + this.headF * this.frame) * _0x2a669a, 0x2 * _0x49dbe3 * _0x2a669a, 0x2 * _0x49dbe3 * _0x2a669a);
      _0x3b8ba2.restore();
    }
  } else {
    if (this.animalSpecies == 0x64) {
      var _0x545f29 = _0x1f4c9e - this.nextJawAnimT;
      var _0x2a09da = Math.trunc(_0x545f29 / 0x46) % 0x10;
      if (_0x1f4c9e < this.nextJawAnimT) {
        _0x2a09da = 0x0;
      }
      if (_0x2a09da >= 0xf) {
        this.nextJawAnimT = _0x1f4c9e + 0x1388;
      }
      var _0x41941c = this.getSkinImageObj("skins/desert/pterodactyl/100/mouth/pterodactyl_head" + _0x2a09da + ".png");
      if (_0x41941c) {
        var _0x2a669a = 1.4705882352941178 * this.headScale;
        _0x3b8ba2.save();
        var _0x49dbe3 = this.rad;
        _0x3b8ba2.drawImage(_0x41941c, -_0x49dbe3 * _0x2a669a, (-_0x49dbe3 + _0x49dbe3 * this.headX) * _0x2a669a, 0x2 * _0x49dbe3 * _0x2a669a, 0x2 * _0x49dbe3 * _0x2a669a);
        _0x3b8ba2.restore();
      }
    } else {
      var _0xd6f01f = this.getHead("pterodactyl", false);
      var _0x409288 = this.getSkinImageObj(_0xd6f01f);
      if (_0x409288) {
        var _0x2a669a = 1.4705882352941178 * this.headScale;
        _0x3b8ba2.save();
        var _0x49dbe3 = this.rad;
        _0x3b8ba2.drawImage(_0x409288, -_0x49dbe3 * _0x2a669a, (-_0x49dbe3 + _0x49dbe3 * this.headX) * _0x2a669a, 0x2 * _0x49dbe3 * _0x2a669a, 0x2 * _0x49dbe3 * _0x2a669a);
        _0x3b8ba2.restore();
      }
    }
  }
};
_0x31af81.prototype.nextJawAnimT = 0x0;
_0x31af81.prototype.drawWing = function (_0x26cdd3, _0x27a9f5) {
  var _0x46451b = _0x27a9f5 == 0x1 ? 0x1 : -0x1;
  var _0x3e14fd = this.getSkinImageObj(this.getWing("pterodactyl", _0x27a9f5));
  if (_0x3e14fd) {
    var _0x5a1673 = -(-0.2 + _0x26cdd3) * (_0x46451b * this.r * (Math.PI / 0xb4));
    var _0x8024f9 = this.rad * 0.8;
    var _0x293f1b = this.rad;
    var _0x278fd8 = _0x8024f9 * this.ww;
    var _0x55b3b3 = _0x8024f9 * this.wh;
    var _0x304329 = _0x27a9f5 == 0x1 ? this.ax : this.ax2;
    var _0x3d6175 = this.ay + this.yf * _0x26cdd3;
    _0x3b8ba2.save();
    _0x5a1673 *= this.rf;
    var _0x3bbb62 = this.isGliding ? this.erf_gliding : this.erf;
    _0x3b8ba2.rotate(_0x46451b * _0x3bbb62 * (Math.PI / 0xb4) + _0x5a1673);
    var _0x2b31bb = _0x26cdd3 * _0x278fd8 * _0x46451b * this.wOffset;
    _0x3b8ba2.drawImage(_0x3e14fd, 0x0 + _0x278fd8 * -_0x304329 + _0x2b31bb, _0x293f1b + _0x55b3b3 * -_0x3d6175, _0x278fd8, _0x55b3b3);
    _0x3b8ba2.restore();
  }
};
_0x31af81.prototype.drawBone = function (_0x5a0384, _0x16182d) {
  var _0x118ea9 = this.getSkinImageObj(this.getWingBone("pterodactyl", _0x16182d));
  var _0xe24f37 = _0x16182d == 0x1 ? 0x1 : -0x1;
  if (_0x118ea9) {
    var _0x72872 = -(-0.2 + _0x5a0384) * (_0xe24f37 * this.r * (Math.PI / 0xb4));
    var _0x5b2535 = this.rad * 0.8;
    var _0x47751a = this.rad;
    var _0x3f948a = _0x5b2535 * this.ww;
    var _0x31a23b = _0x5b2535 * this.wh;
    var _0x456b15 = _0x16182d == 0x1 ? this.ax : this.ax2;
    var _0xc46b3d = this.ay + this.yf * _0x5a0384;
    _0x3b8ba2.save();
    _0x72872 *= this.rf;
    var _0x1d9bb8 = this.isGliding ? this.erf_gliding : this.erf;
    _0x3b8ba2.rotate(_0xe24f37 * _0x1d9bb8 * (Math.PI / 0xb4) + _0x72872);
    var _0x416d95 = _0x5a0384 * _0x3f948a * _0xe24f37 * this.wOffset;
    _0x3b8ba2.drawImage(_0x118ea9, 0x0 + _0x3f948a * -_0x456b15 + _0x416d95, _0x47751a + _0x31a23b * -_0xc46b3d, _0x3f948a, _0x31a23b);
    _0x3b8ba2.restore();
  }
};
_0x31af81.prototype.drawHand = function (_0x43ab8d, _0x1d645e) {
  var _0x1497f4 = _0x1d645e == 0x1 ? 0x1 : -0x1;
  var _0x28dc2a = this.getSkinImageObj(this.getHand("pterodactyl", _0x1d645e));
  if (_0x28dc2a) {
    var _0x352d22 = -(-0.2 + _0x43ab8d) * (_0x1497f4 * this.r * (Math.PI / 0xb4));
    var _0x17cda8 = this.rad * 0.8;
    var _0x4c6c85 = this.rad;
    var _0x3f51cf = _0x17cda8 * this.ww;
    var _0x436cdd = _0x17cda8 * this.wh + (!this.flag_flying ? this.wh * 0x0 : 0x0);
    var _0x257e49 = _0x1497f4 == 0x1 ? this.ax : this.ax2;
    var _0x5c443e = _0x257e49 + _0x1497f4 * this.xf * _0x43ab8d;
    var _0x3df0c6 = this.ay + this.yf * _0x43ab8d;
    _0x352d22 *= this.rf;
    var _0x2a78cb = this.isGliding ? this.erf_gliding : this.erf;
    _0x3b8ba2.save();
    this.drawImage(_0x28dc2a, 0x0 + _0x3f51cf * -_0x5c443e, _0x4c6c85 + _0x436cdd * -_0x3df0c6, _0x3f51cf + _0x3f51cf * _0x1497f4 * this.handWF, _0x436cdd, _0x1497f4 * _0x2a78cb * (Math.PI / 0xb4) + _0x352d22);
    _0x3b8ba2.restore();
  }
};
_0x31af81.prototype.frame = 0x0;
_0x31af81.prototype.lastFlapFrame = 0x0;
_0x31af81.prototype.getFrame = function () {
  if (!this.canFlap && this.flag_flying && _0x1f4c9e > this.resumeFlapT) {
    this.canFlap = true;
  }
  var _0x1c0fed = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x453245 = !(_0x4bda0b == 0x2) && this.canFlap ? _0x7b826(_0x1c0fed, this.flapSpeed, this.flapAmount * this.handPerc, 0x2) : this.birdNoAnimationFlyWingAngle;
  if (this.flag_flying && _0x453245 < 0x0 && this.countFlap) {
    this.countFlap = false;
    this.flaps++;
    if (this.flaps % this.flapsMod == 0x0) {
      this.lastFlapFrame = _0x453245;
      this.canFlap = false;
      this.resumeFlapT = +new Date() + 0x5dc;
    }
  } else if (_0x453245 > 0x0 && !this.countFlap) {
    this.countFlap = true;
  }
  if (!this.canFlap) {
    _0x453245 = this.lastFlapFrame;
  } else {
    this.lastFlapFrame = _0x453245;
  }
  return _0x453245;
};
_0x31af81.prototype.beforeCustomDraw = function () {
  if (!this.flag_usingAbility) {
    return;
  }
  if (!this.flag_flying && !this.set) {
    this.set = true;
    this.r = 11.25;
    this.erf = 5.75;
    this.ww = 3.5;
  } else if (this.flag_flying && this.set) {
    this.set = false;
    this.r = 22.5;
    this.erf = 11.5;
    this.ww = 4.5;
  }
  if (this.isGliding) {
    this.flapAmount = 0x0;
  } else {
    this.flapAmount = this.famt;
  }
  this.frame = this.getFrame();
};
_0x31af81.prototype.updateZ = function () {
  if (this.flag_eff_grabbedByFlytrap) {
    this.z = 0x44c + this.rad;
  } else {
    if (!this.flag_flying && this.flag_usingAbility && !this.flag_underWater) {
      this.z = 0x4b0 + this.rad;
    } else {
      if (this.flag_flying || this.flag_eff_tossedInAir) {
        this.z = 0x1adb0;
        if (this.flag_isGrabbed) {
          this.z -= this.rad;
        } else {
          this.z += this.rad;
        }
        if (this.flag_eff_aniInClaws) {
          this.z += 0x64;
        }
      } else {
        this.z = 0x3e8 + this.rad;
      }
    }
  }
};
_0x31af81.prototype.getAbilityInfo = function (_0x2eaa2d) {
  var _0x54dd28 = {
    abilName: "Dive Attack\n(Fly with Prey)",
    abilImg: "abilities/SkyDive.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x54dd28;
};
_0x31af81.prototype.readCustomData_onNewlyVisible = function (_0x3c2242) {
  _0x31af81.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x3c2242);
  this.isGliding = _0x3c2242.readUInt8() == 0x1;
};
_0x31af81.prototype.customUpdatedProperty = function (_0x4c7eef, _0x12ee1c) {
  this.isGliding = _0x12ee1c.readUInt8() == 0x1;
};
function _0x31af81() {
  _0x31af81.superClass.call(this, 0x2);
}
window.Pterodactyl = _0x31af81;
_0x2b451a.setCustomClassForGameObjType(_0x31af81, 0x2, _0x3032f7);
var _0x53abbc = _0xf4bb63;
_0x4f1561.prototype = Object.create(_0x53abbc.prototype);
_0x4f1561.prototype.constructor = _0x4f1561;
_0x4f1561.superClass = _0x53abbc;
_0x4f1561.prototype.animalInfo = function () {
  var _0x37b781 = {
    aniName: "Bullet Ant",
    aniCol: "#FF9000",
    skinName: "desert/bulletant/bulletant",
    upgradeText: "UPGRADED to Bullet Ant!\nHold 'W' to pick anything and take to your Anthill."
  };
  return _0x37b781;
};
var _0x44cc11 = 0x1;
_0x4f1561.prototype.drawSkinCustomization = function () {
  var _0x58d420 = this.getSkinImageObj("skins/desert/bulletant/head.png");
  if (_0x58d420) {
    var _0x532d26 = this.skinScale * 1.2;
    var _0x240569 = this.skinRad;
    _0x3b8ba2.drawImage(_0x58d420, -_0x240569 * _0x532d26, (-_0x240569 + _0x240569 * 0.3) * _0x532d26, 0x2 * _0x240569 * _0x532d26, 0x2 * _0x240569 * _0x532d26);
  }
};
var _0x2941e0 = -0.7;
_0x4f1561.prototype.drawUnderSkinImg = function () {
  var _0x28590d = this.getSkinImageObj("skins/desert/bulletant/abdomen.png");
  if (_0x28590d) {
    var _0x2dc0a1 = this.skinScale * 0.9;
    var _0x4e9bfa = this.skinRad;
    _0x3b8ba2.drawImage(_0x28590d, -_0x4e9bfa * _0x2dc0a1, (-_0x4e9bfa + _0x4e9bfa * _0x2941e0) * _0x2dc0a1, 0x2 * _0x4e9bfa * _0x2dc0a1, 0x2 * _0x4e9bfa * _0x2dc0a1);
  }
};
_0x4f1561.prototype.getSkinName = function () {
  return "desert/bulletant/body";
};
function _0x4f1561() {
  _0x4f1561.superClass.call(this, 0x2);
}
window.BulletAnt = _0x4f1561;
_0x2b451a.setCustomClassForGameObjType(_0x4f1561, 0x2, _0x172e43);
var _0x53abbc = _0x472b99;
_0x2f04e8.prototype = Object.create(_0x53abbc.prototype);
_0x2f04e8.prototype.constructor = _0x2f04e8;
_0x2f04e8.superClass = _0x53abbc;
_0x2f04e8.prototype.FlytrapType = 0x0;
_0x2f04e8.prototype.updateZ = function () {
  this.z = 0x64;
};
_0x2f04e8.prototype.getSkinFolder = function (_0x36374d) {
  return "desert/flytrap";
};
_0x2f04e8.prototype.customDraw = function (_0x12ef0f) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0x1;
  var _0xbb5400 = this.getSkinImageObj("img/" + this.getSkinFolder() + "/base.png");
  if (_0xbb5400) {
    var _0xbff19c = this.rad * 1.25;
    _0x3b8ba2.drawImage(_0xbb5400, -_0xbff19c, -_0xbff19c, 0x2 * _0xbff19c, 0x2 * _0xbff19c);
  }
  _0x3b8ba2.restore();
};
function _0x2f04e8() {
  _0x2f04e8.superClass.call(this, 0x57);
  this.drawEffectScale_Slow = true;
}
window.Flytrap = _0x2f04e8;
_0x2b451a.setCustomClassForGameObjType(_0x2f04e8, 0x57);
var _0x53abbc = _0x472b99;
_0x4102d4.prototype = Object.create(_0x53abbc.prototype);
_0x4102d4.prototype.constructor = _0x4102d4;
_0x4102d4.superClass = _0x53abbc;
_0x4102d4.prototype.FlytrapMouthType = 0x0;
_0x4102d4.prototype.updateZ = function () {
  this.z = 0x44c + this.rad;
};
var _0x5b36d8 = -0xa0;
_0x4102d4.prototype.topA = 0xb4;
_0x4102d4.prototype.botA = 0xb4;
_0x4102d4.prototype.distBeforeAttack = 0x0;
_0x4102d4.prototype.maxDist = 0x0;
_0x4102d4.prototype.distCovered = 0x0;
_0x4102d4.prototype.isAttacking = false;
_0x4102d4.prototype.isMouthClosed = false;
_0x4102d4.prototype.grabbedAni = false;
_0x4102d4.prototype.getSkinFolder = function (_0x36bc3a) {
  return "desert/flytrap";
};
_0x4102d4.prototype.beforeCustomDraw = function (_0x2feea4) {
  if (!this.dead) {
    var _0x168972 = this.getSkinImageObj("img/" + this.getSkinFolder() + "/mouth/stem.png");
    if (_0x168972) {
      var _0x160ab2 = this.rad;
      _0x3b8ba2.save();
      _0x3b8ba2.translate(this.anchor_x, this.anchor_y);
      _0x3b8ba2.rotate(this.angle - 0xb4 * (Math.PI / 0xb4));
      var _0x310f03 = _0x527a6c({
        "x": this.x,
        "y": this.y
      }, {
        "x": this.anchor_x,
        "y": this.anchor_y
      });
      _0x3b8ba2.drawImage(_0x168972, -_0x160ab2 * 1.25, -_0x160ab2, 0x2 * _0x160ab2 * 1.25, 0x2 * _0x160ab2 + _0x310f03);
      _0x3b8ba2.restore();
    }
  }
};
_0x4102d4.prototype.customDraw = function (_0x3fc7be) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0x1;
  var _0x5f5cdd = "bottom" + (this.isKillable ? "_e" : '');
  var _0x45b2e8 = this.getSkinImageObj("img/" + this.getSkinFolder() + "/mouth/" + _0x5f5cdd + ".png");
  if (_0x45b2e8) {
    var _0x1185be = this.rad;
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.angle - this.botA * (Math.PI / 0xb4));
    _0x3b8ba2.drawImage(_0x45b2e8, -_0x1185be * 0x1, -_0x1185be * 0x1, 0x2 * _0x1185be, 0x2 * _0x1185be);
    _0x3b8ba2.restore();
  }
  if (!this.grabbedAni) {
    var _0xe4fc1b = this.isMouthClosed ? "closed" : "top";
    var _0x45b2e8 = this.getSkinImageObj("img/" + this.getSkinFolder() + "/mouth/" + _0xe4fc1b + ".png");
    if (_0x45b2e8) {
      var _0x1185be = this.rad;
      {
        _0x3b8ba2.save();
        _0x3b8ba2.rotate(this.angle - this.topA * (Math.PI / 0xb4));
        _0x3b8ba2.drawImage(_0x45b2e8, -_0x1185be * 0x1, -_0x1185be * 0x1, 0x2 * _0x1185be, 0x2 * _0x1185be);
        _0x3b8ba2.restore();
      }
    }
  }
  _0x3b8ba2.restore();
};
_0x4102d4.prototype.isAttacking = false;
_0x4102d4.prototype.isMouthClosed = false;
_0x4102d4.prototype.grabbedAni = false;
_0x4102d4.prototype.readCustomData_onNewlyVisible = function (_0xb629ce) {
  _0x4102d4.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0xb629ce);
  var _0x3025a7 = _0xb629ce.readBitGroup();
  this.isAttacking = _0x3025a7.getBool();
  this.isMouthClosed = _0x3025a7.getBool();
  this.grabbedAni = _0x3025a7.getBool();
  this.anchor_x = _0xb629ce.readUInt16() / 0x4;
  this.anchor_y = _0xb629ce.readUInt16() / 0x4;
};
_0x4102d4.prototype.readUpdatedProperty = function (_0x40316a, _0xc619f7) {
  if (_0x40316a == 0x16) {
    this.isAttacking = _0xc619f7.readUInt8() == 0x1;
  }
  if (_0x40316a == 0x17) {
    this.isMouthClosed = _0xc619f7.readUInt8() == 0x1;
  }
  if (_0x40316a == 0x18) {
    this.grabbedAni = _0xc619f7.readUInt8() == 0x1;
  }
};
function _0x4102d4() {
  _0x4102d4.superClass.call(this, 0x58);
  this.doesDrawEffectScale = this.drawEffectScale_Slow = true;
}
window.FlytrapMouth = _0x4102d4;
_0x2b451a.setCustomClassForGameObjType(_0x4102d4, 0x58);
var _0x53abbc = _0x472b99;
_0x448ba8.prototype = Object.create(_0x53abbc.prototype);
_0x448ba8.prototype.constructor = _0x448ba8;
_0x448ba8.superClass = _0x53abbc;
_0x448ba8.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x448ba8.prototype.customDraw = function (_0x299a65) {
  var _0x3372d4 = this.isEdibleOutlined() ? "e" : this.oType;
  var _0x4ce189 = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x3372d4 + ".png");
  if (_0x4ce189) {
    _0x3b8ba2.save();
    var _0xb6feb1 = this.rad * 1.2;
    _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x4ce189, -_0xb6feb1, -_0xb6feb1, _0xb6feb1 * 0x2, _0xb6feb1 * 0x2);
    _0x3b8ba2.restore();
  }
};
function _0x448ba8() {
  _0x448ba8.superClass.call(this, 0x61);
  this.doesDrawEffectScale = false;
}
window.AloeveraLeaf = _0x448ba8;
_0x2b451a.setCustomClassForGameObjType(_0x448ba8, 0x61);
var _0x53abbc = _0x472b99;
_0x3a157a.prototype = Object.create(_0x53abbc.prototype);
_0x3a157a.prototype.constructor = _0x3a157a;
_0x3a157a.superClass = _0x53abbc;
_0x3a157a.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x3a157a.prototype.customDraw = function (_0x3206ab) {
  var _0x35b871 = this.isEdibleOutlined() ? "e" : this.oType;
  var _0x868e71 = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x35b871 + ".png");
  if (_0x868e71) {
    _0x3b8ba2.save();
    var _0x2aa882 = this.rad * 1.15;
    _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x868e71, -_0x2aa882, -_0x2aa882, _0x2aa882 * 0x2, _0x2aa882 * 0x2);
    _0x3b8ba2.restore();
  }
};
function _0x3a157a() {
  _0x3a157a.superClass.call(this, 0x60);
  this.doesDrawEffectScale = this.drawEffectScale_Slow = false;
}
window.AloeveraPlant = _0x3a157a;
_0x2b451a.setCustomClassForGameObjType(_0x3a157a, 0x60);
var _0x53abbc = _0x472b99;
_0x5f150d.prototype = Object.create(_0x53abbc.prototype);
_0x5f150d.prototype.constructor = _0x5f150d;
_0x5f150d.superClass = _0x53abbc;
_0x5f150d.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x5f150d.prototype.customDraw = function (_0xb4cf87) {
  var _0x4a5767 = this.isEdibleOutlined() ? "e" : this.oType;
  var _0x2057af = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x4a5767 + ".png");
  if (_0x2057af) {
    _0x3b8ba2.save();
    var _0x4aee65 = this.rad * 1.15;
    _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x2057af, -_0x4aee65, -_0x4aee65, _0x4aee65 * 0x2, _0x4aee65 * 0x2);
    _0x3b8ba2.restore();
  }
};
function _0x5f150d() {
  _0x5f150d.superClass.call(this, 0x52);
  this.doesDrawEffectScale = this.drawEffectScale_Slow = false;
}
window.Cactus = _0x5f150d;
_0x2b451a.setCustomClassForGameObjType(_0x5f150d, 0x52);
var _0x53abbc = _0x472b99;
_0x4b926c.prototype = Object.create(_0x53abbc.prototype);
_0x4b926c.prototype.constructor = _0x4b926c;
_0x4b926c.superClass = _0x53abbc;
_0x4b926c.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x4b926c.prototype.customDraw = function (_0x1508cf) {
  var _0x204b80 = this.isEdibleOutlined() ? "e" : this.curBiome;
  _0x204b80 = "gameobj/" + this.oType + "/" + _0x204b80 + ".png";
  var _0x2a5e70 = this.getSkinImageObj(_0x204b80);
  if (_0x2a5e70) {
    _0x3b8ba2.save();
    var _0xbe0d60 = this.rad;
    _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x2a5e70, -_0xbe0d60, -_0xbe0d60, _0xbe0d60 * 0x2, _0xbe0d60 * 0x2);
    _0x3b8ba2.restore();
  }
};
function _0x4b926c() {
  _0x4b926c.superClass.call(this, 0x5d);
  this.doesDrawEffectScale = false;
}
window.CactusPear = _0x4b926c;
_0x2b451a.setCustomClassForGameObjType(_0x4b926c, 0x5d);
var _0x53abbc = _0x472b99;
_0x189445.prototype = Object.create(_0x53abbc.prototype);
_0x189445.prototype.constructor = _0x189445;
_0x189445.superClass = _0x53abbc;
_0x189445.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x189445.prototype.customDraw = function (_0x3e58c4) {
  var _0x53a68a = this.isEdibleOutlined() ? "e" : this.oType;
  var _0x32dd5f = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x53a68a + ".png");
  if (_0x32dd5f) {
    _0x3b8ba2.save();
    var _0x6fcd52 = this.rad;
    _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x32dd5f, -_0x6fcd52, -_0x6fcd52, _0x6fcd52 * 0x2, _0x6fcd52 * 0x2);
    _0x3b8ba2.restore();
  }
};
function _0x189445() {
  _0x189445.superClass.call(this, 0x5a);
  this.doesDrawEffectScale = false;
}
window.DateFruit = _0x189445;
_0x2b451a.setCustomClassForGameObjType(_0x189445, 0x5a);
var _0x53abbc = _0x472b99;
_0x208abd.prototype = Object.create(_0x53abbc.prototype);
_0x208abd.prototype.constructor = _0x208abd;
_0x208abd.superClass = _0x53abbc;
_0x208abd.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x208abd.prototype.customDraw = function (_0x4a3ee8) {
  var _0x202ad3 = this.isEdibleOutlined() ? "e" : this.oType;
  var _0x561c31 = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x202ad3 + ".png");
  if (_0x561c31) {
    _0x3b8ba2.save();
    var _0x32574a = this.rad;
    _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x561c31, -_0x32574a, -_0x32574a, _0x32574a * 0x2, _0x32574a * 0x2);
    _0x3b8ba2.restore();
  }
};
function _0x208abd() {
  _0x208abd.superClass.call(this, 0x59);
  this.doesDrawEffectScale = false;
}
window.Mango = _0x208abd;
_0x2b451a.setCustomClassForGameObjType(_0x208abd, 0x59);
var _0x53abbc = _0x472b99;
_0x123847.prototype = Object.create(_0x53abbc.prototype);
_0x123847.prototype.constructor = _0x123847;
_0x123847.superClass = _0x53abbc;
_0x123847.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x123847.prototype.customDraw = function (_0x5debd9) {
  var _0x518e16 = this.isEdibleOutlined() ? "e" : this.oType;
  var _0x193339 = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x518e16 + ".png");
  if (_0x193339) {
    _0x3b8ba2.save();
    var _0x478ed3 = this.rad;
    _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x193339, -_0x478ed3, -_0x478ed3, _0x478ed3 * 0x2, _0x478ed3 * 0x2);
    _0x3b8ba2.restore();
  }
};
function _0x123847() {
  _0x123847.superClass.call(this, 0x5b);
  this.doesDrawEffectScale = false;
}
window.Melon = _0x123847;
_0x2b451a.setCustomClassForGameObjType(_0x123847, 0x5b);
var _0x53abbc = _0x472b99;
_0x37c5fd.prototype = Object.create(_0x53abbc.prototype);
_0x37c5fd.prototype.constructor = _0x37c5fd;
_0x37c5fd.superClass = _0x53abbc;
_0x37c5fd.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x37c5fd.prototype.customDraw = function (_0x3269cb) {
  var _0x18be89 = this.isEdibleOutlined() ? "e" : this.oType;
  var _0x597d1c = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x18be89 + ".png");
  if (_0x597d1c) {
    _0x3b8ba2.save();
    var _0x549f1a = this.rad;
    _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x597d1c, -_0x549f1a, -_0x549f1a, _0x549f1a * 0x2, _0x549f1a * 0x2);
    _0x3b8ba2.restore();
  }
};
function _0x37c5fd() {
  _0x37c5fd.superClass.call(this, 0x5c);
  this.doesDrawEffectScale = false;
}
window.MelonSlice = _0x37c5fd;
_0x2b451a.setCustomClassForGameObjType(_0x37c5fd, 0x5c);
var _0x53abbc = _0x472b99;
_0x441f5e.prototype = Object.create(_0x53abbc.prototype);
_0x441f5e.prototype.constructor = _0x441f5e;
_0x441f5e.superClass = _0x53abbc;
_0x441f5e.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x441f5e.prototype.customDraw = function (_0x1031be) {
  var _0x55325b = this.isEdibleOutlined() ? "e" : this.oType;
  var _0x1b9ce9 = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x55325b + ".png");
  if (_0x1b9ce9) {
    _0x3b8ba2.save();
    var _0x33eb63 = this.rad;
    _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x1b9ce9, -_0x33eb63, -_0x33eb63, _0x33eb63 * 0x2, _0x33eb63 * 0x2);
    _0x3b8ba2.restore();
  }
};
_0x441f5e.prototype.updateZ = function () {
  this.z = 0x3e8 + this.rad;
};
function _0x441f5e() {
  _0x441f5e.superClass.call(this, 0x5f);
  this.doesDrawEffectScale = false;
}
window.Orange = _0x441f5e;
_0x2b451a.setCustomClassForGameObjType(_0x441f5e, 0x5f);
var _0x53abbc = _0x472b99;
_0x286f84.prototype = Object.create(_0x53abbc.prototype);
_0x286f84.prototype.constructor = _0x286f84;
_0x286f84.superClass = _0x53abbc;
_0x286f84.prototype.updateZ = function () {
  this.z = -0x9e;
};
_0x286f84.prototype.customDraw = function (_0x2e66db) {
  _0x3b8ba2.save();
  if (!(_0x4bda0b == 0x2)) {
    _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
  }
  var _0x540978 = 0x0;
  var _0x2304ca = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  _0x540978 = 1.5 * Math.sin(0x2 * Math.PI / 0x6 * _0x2304ca);
  if (_0x2e66db) {
    _0x3b8ba2.fillStyle = "#b0a13b";
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
  } else {
    _0x3b8ba2.fillStyle = "#bdae47";
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - 0x4 + _0x540978), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    if (!(_0x4bda0b == 0x2)) {
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(this.rad * 0.45, -this.rad * 0.45 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x540978), 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(this.rad * 0.5, this.rad * 0.5 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.4 + _0x540978), 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x540978), 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(-this.rad * 0.75, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.3 + _0x540978), 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      if (this.rad > 0x32) {
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0xa, 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
      }
    }
  }
  _0x3b8ba2.restore();
};
function _0x286f84() {
  _0x286f84.superClass.call(this, 0x63);
  this.animateRadOnSpawn = false;
}
window.Quicksand = _0x286f84;
_0x2b451a.setCustomClassForGameObjType(_0x286f84, 0x63);
var _0x53abbc = _0x472b99;
_0x406042.prototype = Object.create(_0x53abbc.prototype);
_0x406042.prototype.constructor = _0x406042;
_0x406042.superClass = _0x53abbc;
_0x406042.prototype.updateZ = function () {
  this.z = -0x9e;
};
_0x406042.prototype.customDraw = function (_0x55e339) {
  var _0x5eb75a = 0x4;
  _0x3b8ba2.save();
  if (!(_0x4bda0b == 0x2)) {
    _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
  }
  var _0x3f2053 = 0x0;
  var _0x485134 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  _0x3f2053 = 1.5 * Math.sin(0x2 * Math.PI / 0x6 * _0x485134);
  if (this.isOasisWater && _0x55e339) {
    _0x3b8ba2.fillStyle = "#AE9F43";
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
  } else {
    var _0x5eb75a = 0x4;
    _0x3b8ba2.fillStyle = this.isOasisWater ? "#3881C4" : "#AE9F43";
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    if (!(_0x4bda0b == 0x2)) {
      _0x3b8ba2.fillStyle = this.isOasisWater ? "#3881C4" : "#bdae47";
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - _0x5eb75a + _0x3f2053), 0x0, Math.PI * 0x2);
      _0x3b8ba2.fill();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(this.rad * 0.45, -this.rad * 0.45 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x3f2053), 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(this.rad * 0.5, this.rad * 0.5 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.4 + _0x3f2053), 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x3f2053), 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(-this.rad * 0.75, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.3 + _0x3f2053), 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      if (this.rad > 0x32) {
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
        _0x3b8ba2.beginPath();
        _0x3b8ba2.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0xa, 0x0, 0x2 * Math.PI);
        _0x3b8ba2.fill();
      }
    }
  }
  _0x3b8ba2.restore();
};
_0x406042.prototype.afterCustomDraw = function () {};
function _0x406042() {
  _0x406042.superClass.call(this, 0x64);
  this.animateRadOnSpawn = false;
}
_0x406042.prototype.readCustomData_onNewlyVisible = function (_0x5e97a5) {
  _0x406042.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x5e97a5);
  this.isOasisWater = _0x5e97a5.readUInt8() == 0x1;
};
_0x406042.prototype.readUpdatedProperty = function (_0x3d7747, _0x12c8e1) {
  if (_0x3d7747 == 0x24) {
    var _0x25af6d = _0x12c8e1.readUInt16() / 0xa;
    this.setNewRad(_0x25af6d);
  }
};
_0x406042.prototype.circles = new Array();
_0x406042.prototype.isOasisWater = false;
window.Oasis = _0x406042;
_0x2b451a.setCustomClassForGameObjType(_0x406042, 0x64);
var _0x45f475 = _0x45f475;
var _0x53abbc = _0xf4bb63;
_0x45f475.prototype = Object.create(_0x53abbc.prototype);
_0x45f475.prototype.constructor = _0x45f475;
_0x45f475.superClass = _0x53abbc;
_0x45f475.prototype.getSkinName = function () {
  let _0x40c076 = this.getSpeciesPath() + "/lion";
  _0x40c076 += this.specType == 0x0 ? '' : this.specType;
  return _0x40c076;
};
_0x45f475.prototype.getSpeciesPath = function () {
  return "land/lion/" + this.animalSpecies + this.getSubSpecies();
};
_0x45f475.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  var _0x2a294f = '';
  if (this.animalSpecies == 0x1 || this.animalSpecies == 0x2 || this.animalSpecies == 0xc8) {
    _0x2a294f = "/" + this.animalSubSpecies;
  }
  return _0x2a294f;
};
_0x45f475.prototype.getAbilityInfo = function (_0x6e24c6) {
  var _0x126600 = {
    "abilName": "Loud " + (this.animalSpecies == 0x2 ? "Meow" : "Noise")
  };
  if (this.animalSpecies == 0x1) {
    _0x126600.abilName += "\n& Camouflage";
  }
  _0x126600.abilImg = "abilities/Growl-Roar.svg";
  _0x126600.skinThemeID = this.skinThemeID;
  _0x126600.mopeSeasonID = this.mopeSeasonID;
  return _0x126600;
};
_0x45f475.prototype.animalInfo = function () {
  var _0x36315b = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x36315b.aniName = "Lion";
      break;
    case 0x1:
      _0x36315b.aniName = "Lioness";
      break;
    case 0x2:
      _0x36315b.aniName = "Lion Cub";
      break;
    case 0x3:
      _0x36315b.aniName = "Black-Maned\nLion";
      break;
    case 0x4:
      _0x36315b.aniName = "White Lion";
      break;
    case 0x5:
      _0x36315b.aniName = "Black Lion";
      break;
    case 0x64:
      _0x36315b.aniName = "The Mantalian";
      break;
    case 0xc8:
      if (this.animalSubSpecies == 0x0) {
        _0x36315b.aniName = "Clowoud Lion";
      } else {
        if (this.animalSubSpecies == 0x1) {
          _0x36315b.aniName = "Sunset Clowoud Lion";
        } else {
          if (this.animalSubSpecies == 0x2) {
            _0x36315b.aniName = "Storm Clowoud Lion";
          }
        }
      }
      break;
    case 0xca:
      _0x36315b.aniName = "Chimera Lion";
      break;
    case 0xdc:
      _0x36315b.aniName = "Ghastly Jade Lion";
      break;
  }
  _0x36315b.aniDesc = '';
  if (this.animalSpecies == 0x1) {
    _0x36315b.upgradeText = "UPGRADED to " + _0x36315b.aniName + "!\n Lioness are fast and can launch an ambush attack. (Stop moving to camouflage)!";
  } else {
    if (this.animalSpecies == 0x2) {
      _0x36315b.upgradeText = "UPGRADED to " + _0x36315b.aniName + "!\n Press W to release a mighty MEOW!";
    } else {
      _0x36315b.upgradeText = "UPGRADED to " + _0x36315b.aniName + "!\n Press W to release a mighty ROAR (Rawr!)!";
    }
  }
  _0x36315b.aniCol = "#FF9000";
  _0x36315b.skinName = this.getSkinName();
  return _0x36315b;
};
_0x45f475.prototype.setStealth = function () {
  _0x45f475.superClass.prototype.setStealth.call(this);
  if (this.flag_stealth) {
    if (this.animalSpecies == 0x1) {
      this.idealOp = _0x2bd878 == this.id ? 0.1 : 0x0;
    }
  }
};
_0x45f475.prototype.biteStart = 0x0;
_0x45f475.prototype.flapAmount = 0x3;
_0x45f475.prototype.flapDur = 1.5;
_0x45f475.prototype.roarStartT = -0x1f4;
_0x45f475.prototype.drawSkinCustomization = function () {
  this.setSkinScale();
  if (!this.flag_usingAbility) {
    this.biteStart = 0x0;
    return;
  } else {
    if (this.biteStart == 0x0) {
      this.biteStart = _0x1f4c9e + this.roarStartT;
    }
    if (this.specType != 0x0 && this.specType != undefined) {
      var _0xe0c206 = "skins/" + this.getSpeciesPath() + "/lion_head1.png";
      var _0x45f9ce = this.getSkinImageObj(_0xe0c206);
      var _0x57081f = (_0x1f4c9e - this.biteStart) / 0x3e8;
      var _0x2fad87 = this.skinScale * 1.07;
      var _0x5c1130 = this.skinRad;
      if (_0x45f9ce) {
        var _0x14bf29 = 0x0;
        var _0x2421c8 = this.flapAmount - (this.animalSpecies == 0x2 ? 0.5 : 0x0);
        _0x14bf29 = !(_0x4bda0b == 0x2) ? _0x7b826(_0x57081f, this.flapDur, _0x2421c8, 0x2) : this.flapAmount;
        _0x3b8ba2.save();
        var _0x5c1130 = this.rad;
        _0x3b8ba2.drawImage(_0x45f9ce, -_0x5c1130 * _0x2fad87, (-_0x5c1130 + _0x5c1130 * 0.1) * _0x2fad87 - _0x14bf29, 0x2 * _0x5c1130 * _0x2fad87, 0x2 * _0x5c1130 * _0x2fad87);
        _0x3b8ba2.restore();
      }
    }
  }
};
_0x45f475.prototype.drawNickName = function (_0x17d5d3) {
  if (this.flag_stealth) {
    _0x17d5d3 = 0x0;
  }
  _0x45f475.superClass.prototype.drawNickName.call(this, _0x17d5d3);
};
function _0x45f475() {
  _0x45f475.superClass.call(this, 0x2);
}
window.Lion = _0x45f475;
_0x2b451a.setCustomClassForGameObjType(_0x45f475, 0x2, _0x527d90);
var _0x53abbc = _0xf4bb63;
_0x264a50.prototype = Object.create(_0x53abbc.prototype);
_0x264a50.prototype.constructor = _0x264a50;
_0x264a50.superClass = _0x53abbc;
_0x264a50.prototype.animalInfo = function () {
  var _0x1e4943 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x1e4943.aniName = "Rhino";
      break;
    case 0x1:
      _0x1e4943.aniName = "White Rhino";
      break;
    case 0x2:
      _0x1e4943.aniName = "Black Rhino";
      break;
    case 0x3:
      _0x1e4943.aniName = "Woolly Rhino";
      break;
    case 0xc9:
      _0x1e4943.aniName = "Shrub Rhino";
      break;
    case 0xca:
      _0x1e4943.aniName = "Cotton Candy Rhino";
      break;
    case 0xcc:
      _0x1e4943.aniName = "Acuti Rhino";
      break;
    case 0xdc:
      _0x1e4943.aniName = "Ink Rhino";
      break;
  }
  _0x1e4943.skinName = this.getSkinName();
  _0x1e4943.aniDesc = '';
  _0x1e4943.upgradeText = "UPGRADED to " + _0x1e4943.aniName + "!\n Press W to CHARGE with your mighty horn!";
  _0x1e4943.aniCol = "#94a3a9";
  return _0x1e4943;
};
_0x264a50.prototype.getAbilityInfo = function (_0x4249cf) {
  var _0x329a47 = {
    abilName: "Charge!",
    abilImg: "abilities/Charge.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x329a47;
};
_0x264a50.prototype.getSkinName = function () {
  let _0x4748ac = this.getSpeciesPath() + "/rhino";
  _0x4748ac += this.specType == 0x0 ? '' : 0x1;
  return _0x4748ac;
};
_0x264a50.prototype.getSpeciesPath = function () {
  return "land/rhino/" + this.animalSpecies + this.getSubSpecies();
};
_0x264a50.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
var _0x44cc11 = 0.1;
_0x264a50.prototype.drawOnTopOfSkinImg = function () {
  if (_0x19056f) {
    _0x264a50.superClass.prototype.drawOnTopOfSkinImg.call(this);
  }
};
_0x264a50.prototype.drawSkinCustomization = function () {
  if (_0x19056f) {
    _0x264a50.superClass.prototype.drawSkinCustomization.call(this);
  } else {
    if (this.flag_usingAbility) {
      var _0x5ca55a = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/rhino_head1.png");
      var _0x345149 = this.skinScale * 0.98;
      var _0x748edd = this.skinRad;
      if (_0x5ca55a) {
        frame = 0x0;
        _0x3b8ba2.save();
        var _0x748edd = this.rad;
        _0x3b8ba2.drawImage(_0x5ca55a, -_0x748edd * _0x345149, (-_0x748edd + _0x748edd * _0x44cc11) * _0x345149 + frame, 0x2 * _0x748edd * _0x345149, 0x2 * _0x748edd * _0x345149);
        _0x3b8ba2.restore();
      }
    }
  }
};
function _0x264a50() {
  _0x264a50.superClass.call(this, 0x2);
}
window.Rhino = _0x264a50;
_0x2b451a.setCustomClassForGameObjType(_0x264a50, 0x2, _0x3040c9);
var _0x53abbc = _0xf4bb63;
_0xda828e.prototype = Object.create(_0x53abbc.prototype);
_0xda828e.prototype.constructor = _0xda828e;
_0xda828e.superClass = _0x53abbc;
_0xda828e.prototype.animalInfo = function () {
  var _0x5c32a7 = {
    skinName: "land/pig/" + this.animalSpecies + this.getSubSpecies() + "/pig",
    aniName: "Pig"
  };
  switch (this.animalSpecies) {
    case 0x0:
      _0x5c32a7.aniName = "Pig";
      _0x5c32a7.upgradeText = "UPGRADED to Pig!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
      break;
    case 0x1:
      _0x5c32a7.aniName = "Pinky Pig";
      _0x5c32a7.upgradeText = "UPGRADED to Pig!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
      break;
    case 0xc9:
      _0x5c32a7.aniName = "Floaty Pig";
      _0x5c32a7.upgradeText = "UPGRADED to Pig!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
      break;
    case 0xcc:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x5c32a7.aniName = "Butcher Pig";
          break;
        case 0x1:
          _0x5c32a7.aniName = "Hot Dog Pig";
      }
      _0x5c32a7.upgradeText = "UPGRADED to Pig!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
      break;
    case 0x2:
      {
        _0x5c32a7.aniName = "Stinky Pig";
        _0x5c32a7.upgradeText = "UPGRADED to Pig!\n Pig dives through MUD (can use stink everywhere!)";
      }
      break;
    case 0xca:
      _0x5c32a7.aniName = "Piggy Bank";
      _0x5c32a7.upgradeText = "UPGRADED to Pig!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
      break;
    case 0xdc:
      _0x5c32a7.aniName = "Fumigator Pig";
      _0x5c32a7.upgradeText = "UPGRADED to Pig!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)";
      break;
  }
  _0x5c32a7.aniCol = "#DD6BD4";
  return _0x5c32a7;
};
_0xda828e.prototype.getAbilityInfo = function (_0x12e383) {
  var _0x1bff82 = {
    abilName: "Stink cloud",
    abilImg: "abilities/StinkCloud.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x1bff82;
};
_0xda828e.prototype.getSkinName = function () {
  let _0x2da975 = this.getSpeciesPath() + "/pig";
  return _0x2da975;
};
_0xda828e.prototype.getSpeciesPath = function () {
  return "land/pig/" + this.animalSpecies + this.getSubSpecies();
};
_0xda828e.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return this.animalSpecies === 0xcc ? "/" + this.animalSubSpecies : '';
};
_0xda828e.prototype.animalDiveColor = function () {
  if (this.flag_underWater) {
    if (this.flag_eff_isInMud) {
      return "#7E6A35";
    } else {
      return "#4E71C3";
    }
  }
  return '';
};
_0xda828e.prototype.animalDivesInMud = function () {
  return true;
};
function _0xda828e() {
  _0xda828e.superClass.call(this, 0x2);
}
window.Pig = _0xda828e;
_0x2b451a.setCustomClassForGameObjType(_0xda828e, 0x2, _0x2e9b2f);
var _0x53abbc = _0xf4bb63;
_0x30d956.prototype = Object.create(_0x53abbc.prototype);
_0x30d956.prototype.constructor = _0x30d956;
_0x30d956.superClass = _0x53abbc;
_0x30d956.prototype.animalInfo = function () {
  var _0x40552f = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x40552f.aniName = "Deer";
      break;
    case 0x1:
      _0x40552f.aniName = "Doe";
      break;
    case 0x2:
      _0x40552f.aniName = "Marsh Deer";
      break;
    case 0x64:
      _0x40552f.aniName = "The Wendigo";
      break;
    case 0xca:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x40552f.aniName = "Mezavor";
          break;
        case 0x1:
          _0x40552f.aniName = "Divine Deer";
      }
      break;
  }
  _0x40552f.aniDesc = '';
  _0x40552f.upgradeText = "UPGRADED to " + _0x40552f.aniName + "! \nPress W to dig up food! \nDig in mud for better food!\n Hint:Check water areas for new food sources!";
  _0x40552f.aniCol = "#C4773E";
  _0x40552f.skinName = this.getSkinName();
  return _0x40552f;
};
_0x30d956.prototype.getSkinName = function () {
  let _0x23f4cd = this.getSpeciesPath() + "/deer";
  return _0x23f4cd;
};
_0x30d956.prototype.getSpeciesPath = function () {
  return "land/deer/" + this.animalSpecies + this.getSubSpecies();
};
_0x30d956.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return this.animalSpecies === 0xca ? "/" + this.animalSubSpecies : '';
};
_0x30d956.prototype.getAbilityInfo = function (_0x27f32e) {
  var _0x1e3894 = {
    abilName: "Dig Food!",
    abilImg: "abilities/Dig.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x1e3894;
};
_0x30d956.prototype.moveF = 0.08;
_0x30d956.prototype.jumpAnim = null;
_0x30d956.prototype.frame = 0x0;
_0x30d956.prototype.drawUnderSkinImg = function () {
  if (this.flag_usingAbility) {
    if (this.animalType == _0x356eb6 || this.animalType == _0x21e8e0) {
      var _0x44d701 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
      var _0x4f52af = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * _0x44d701);
      var _0x5f75d = _0x3b8ba2.globalAlpha;
      _0x3b8ba2.globalAlpha *= 0.8;
      _0x133658(0x0, this.rad * 0.3, this.rad * (0.9 + 0.12 * _0x4f52af), "#7F582B");
      _0x133658(0x0, -this.rad * 0.3, this.rad * (1.05 + 0.09 * _0x4f52af), "#7F582B");
      _0x3b8ba2.globalAlpha = _0x5f75d;
    }
  }
};
function _0x30d956() {
  _0x30d956.superClass.call(this, 0x2);
}
window.Deer = _0x30d956;
_0x2b451a.setCustomClassForGameObjType(_0x30d956, 0x2, _0x356eb6);
var _0x53abbc = _0xf4bb63;
_0x3c4e22.prototype = Object.create(_0x53abbc.prototype);
_0x3c4e22.prototype.constructor = _0x3c4e22;
_0x3c4e22.superClass = _0x53abbc;
_0x3c4e22.prototype.animalInfo = function () {
  var _0x539597 = {
    "aniCol": "#755A2A"
  };
  switch (this.animalSpecies) {
    case 0x0:
      _0x539597.aniName = "Donkey";
      _0x539597.upgradeText = "UPGRADED to " + _0x539597.aniName + "!\nPress 'W' to give RARE kick and stun your opponents";
      break;
    case 0x1:
      _0x539597.aniName = "Jackass";
      _0x539597.aniCol = "#000";
      _0x539597.upgradeText = "UPGRADED to " + _0x539597.aniName + "!\nPress 'W' to give RARE kick and stun your opponents.\n(Keep mouse close to your animal along with boosting to become a mad donkey!)";
      break;
    case 0x2:
      _0x539597.aniName = "Zonkey";
      _0x539597.aniCol = "#755A2A";
      _0x539597.upgradeText = "UPGRADED to " + _0x539597.aniName + "!\nPress 'W' to give RARE kick and stun your opponents";
      break;
    case 0x64:
      _0x539597.aniName = "Equusthulhu";
      _0x539597.aniCol = "#755A2A";
      _0x539597.upgradeText = "UPGRADED to " + _0x539597.aniName + "!\nPress 'W' to give RARE kick and stun your opponents";
      break;
    case 0xca:
      _0x539597.aniName = "Headless Mule";
      _0x539597.upgradeText = "UPGRADED to " + _0x539597.aniName + "!\nPress 'W' to give RARE kick and stun your opponents";
      break;
  }
  _0x539597.skinName = this.getSkinName();
  _0x539597.aniDesc = '';
  return _0x539597;
};
_0x3c4e22.prototype.getAbilityInfo = function (_0x2c365d) {
  var _0x40cbe8 = {
    abilName: "Back Kick!",
    abilImg: "abilities/Kick.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x40cbe8;
};
_0x3c4e22.prototype.getSkinName = function () {
  let _0x505920 = this.getSpeciesPath() + "/donkey";
  if (this.specType != 0x0) {
    if (this.specType > 0x2) {
      _0x505920 += 0x3;
    } else {
      _0x505920 += this.specType;
    }
  }
  return _0x505920;
};
_0x3c4e22.prototype.getSpeciesPath = function () {
  return "land/donkey/" + this.animalSpecies + this.getSubSpecies();
};
_0x3c4e22.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x3c4e22.prototype.drawUnderSkinImg = function () {
  if (this.flag_usingAbility && this.biteStart > 0x0) {
    _0x3b8ba2.save();
    var _0x58d9e5 = _0x3b8ba2.globalAlpha;
    _0x3b8ba2.globalAlpha = 0x1 * _0x58d9e5;
    var _0x5959ba = "skins/" + this.getSpeciesPath() + "/legs.png";
    var _0x230ab3 = this.getSkinImageObj(_0x5959ba);
    if (_0x230ab3) {
      var _0x2c19da = Math.min(0x1, (_0x1f4c9e - this.biteStart) / 0x546);
      var _0x2104d4 = this.rad;
      var _0x45b15a = this.rad * 0x1;
      var _0x30571c = _0x2104d4 * 0x2;
      var _0x3641ea = _0x2104d4 * 0x2 * _0x2c19da;
      _0x3b8ba2.drawImage(_0x230ab3, 0x0 + _0x30571c * -0.5, _0x45b15a + _0x3641ea * -2.5, _0x30571c, _0x3641ea);
    }
    _0x3b8ba2.restore();
  }
};
_0x3c4e22.prototype.biteStart = 0x0;
_0x3c4e22.prototype.flapAmount = 0.3;
_0x3c4e22.prototype.flapDur = 0x1;
_0x3c4e22.prototype.roarStartT = -0x1f4;
_0x3c4e22.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    this.biteStart = 0x0;
    if (this.specType == 0x0) {
      return;
    }
    var _0x2d9e0b = this.specType - 0x2;
    var _0x9e46e3 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/donkey_head" + _0x2d9e0b + ".png");
    var _0xa3e5e0 = this.skinRad;
    if (_0x9e46e3) {
      _0x3b8ba2.save();
      var _0xa3e5e0 = this.rad * 1.3;
      var _0x2fb9af = 0x0;
      var _0x58fdfd = this.rad;
      var _0x3e40b0 = 0x1;
      var _0x3365fc = _0xa3e5e0 * 0x2 * _0x3e40b0;
      var _0x10b3a1 = _0xa3e5e0 * 0x2 * _0x3e40b0;
      var _0x5dc133 = 0.5;
      var _0x237352 = 0.7;
      _0x3b8ba2.drawImage(_0x9e46e3, _0x2fb9af + _0x3365fc * -_0x5dc133, _0x58fdfd + _0x10b3a1 * -_0x237352, _0x3365fc, _0x10b3a1);
      _0x3b8ba2.restore();
    }
  } else {
    if (this.biteStart == 0x0) {
      this.biteStart = _0x1f4c9e + this.roarStartT;
    }
    var _0x297943 = (_0x1f4c9e - this.biteStart) / 0x3e8;
    var _0x50df1e = 0x0;
    _0x50df1e = _0x7b826(_0x297943, this.flapDur, this.flapAmount, 0x2);
    var _0x9e46e3 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/donkey_head" + this.specType + ".png");
    var _0xa3e5e0 = this.skinRad;
    if (_0x9e46e3) {
      _0x3b8ba2.save();
      var _0x3e40b0 = 0x0;
      var _0x4c034e = 0x1;
      var _0xa52da5 = 0.85;
      var _0x10f661 = 1.2;
      if (this.specType == 0x1) {
        _0x3e40b0 = -0x19;
        _0x4c034e = 1.2 - _0x50df1e * 0.3;
        _0xa52da5 = 0.8 + _0x50df1e * 0.3;
        _0x10f661 = 1.4 - _0x50df1e * 0.3;
      } else if (this.specType == 0x2) {
        _0x3e40b0 = 0x19;
        _0x4c034e = 0.8 - _0x50df1e * 0.3;
        _0xa52da5 = 0.8 + _0x50df1e * 0.3;
        _0x10f661 = 1.4 - _0x50df1e * 0.3;
        _0x50df1e *= -0x1;
      }
      var _0xa3e5e0 = this.rad * 0x1;
      var _0x2fb9af = 0x0;
      var _0x58fdfd = this.rad;
      var _0x3365fc = _0xa3e5e0 * 0x2 * _0x10f661;
      var _0x10b3a1 = _0xa3e5e0 * 0x2 * _0x10f661;
      var _0x5dc133 = 0.5 * _0x4c034e;
      var _0x237352 = 0x1 * _0xa52da5;
      _0x3b8ba2.rotate(_0x3e40b0 * (Math.PI / 0xb4) + _0x50df1e);
      _0x3b8ba2.drawImage(_0x9e46e3, _0x2fb9af + _0x3365fc * -_0x5dc133, _0x58fdfd + _0x10b3a1 * -_0x237352, _0x3365fc, _0x10b3a1);
      _0x3b8ba2.restore();
    }
  }
};
function _0x3c4e22() {
  _0x3c4e22.superClass.call(this, 0x2);
}
window.Donkey = _0x3c4e22;
_0x2b451a.setCustomClassForGameObjType(_0x3c4e22, 0x2, _0x39640d);
var _0x53abbc = _0xf4bb63;
_0x4507fb.prototype = Object.create(_0x53abbc.prototype);
_0x4507fb.prototype.constructor = _0x4507fb;
_0x4507fb.superClass = _0x53abbc;
_0x4507fb.prototype.animalInfo = function () {
  var _0x42eba2 = {
    "aniCol": "#755A2A"
  };
  switch (this.animalSpecies) {
    case 0x0:
      _0x42eba2.aniName = "Zebra";
      break;
    case 0x1:
      _0x42eba2.aniName = "Okapi";
      break;
    case 0x2:
      _0x42eba2.aniName = "Okapi";
      break;
    case 0x64:
      _0x42eba2.aniName = "Unicornze";
      break;
    case 0xc9:
      _0x42eba2.aniName = "Playground Zebra";
      break;
    case 0xca:
      _0x42eba2.aniName = "Synth Zebra";
      break;
  }
  _0x42eba2.aniCol = "#000";
  _0x42eba2.skinName = this.getSkinName();
  _0x42eba2.upgradeText = "UPGRADED to " + _0x42eba2.aniName + "!\n Press 'W' to give RARE kick and stun your opponents";
  _0x42eba2.aniDesc = '';
  return _0x42eba2;
};
_0x4507fb.prototype.getSkinImageObj = function (_0x122775) {
  var _0x38f147 = this.animalSpecies === 0xc9 || this.animalSpecies === 0x2 || this.animalSpecies === 0x1 || this.animalSpecies === 0x64 ? 0x1 : this.mopeSeasonID;
  return this.getSkinImageObjForSeason(_0x122775, _0x38f147);
};
_0x4507fb.prototype.getAbilityInfo = function (_0x1c9492) {
  var _0x2014c6 = {
    abilName: "Side Kick!",
    abilImg: "abilities/Kick.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x2014c6;
};
_0x4507fb.prototype.getSkinName = function () {
  let _0x5e80e5 = this.getSpeciesPath() + "/zebra";
  return _0x5e80e5;
};
_0x4507fb.prototype.getSpeciesPath = function () {
  return "land/zebra/" + this.animalSpecies + this.getSubSpecies();
};
_0x4507fb.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x4507fb() {
  _0x4507fb.superClass.call(this, 0x2);
}
window.Zebra = _0x4507fb;
_0x2b451a.setCustomClassForGameObjType(_0x4507fb, 0x2, _0x25dccf);
var _0x394bb5 = _0x394bb5;
var _0x53abbc = _0xf4bb63;
_0x394bb5.prototype = Object.create(_0x53abbc.prototype);
_0x394bb5.prototype.constructor = _0x394bb5;
_0x394bb5.superClass = _0x53abbc;
_0x394bb5.prototype.objSkinSpotsCanvas = null;
_0x394bb5.prototype.animalInfo = function () {
  var _0xc61970 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0xc61970.aniName = "Mouse";
      break;
    case 0x1:
      _0xc61970.aniName = "Golden Mouse";
      break;
    case 0x2:
      _0xc61970.aniName = "Purple Mouse";
      break;
    case 0x64:
      _0xc61970.aniName = "Robo Mouse";
      break;
    case 0xc9:
      _0xc61970.aniName = "Bubbly Mouse";
      break;
    case 0xca:
      _0xc61970.aniName = "Super Mouse";
      break;
    case 0xcc:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0xc61970.aniName = "Dark Plague Rat";
          break;
        case 0x1:
          _0xc61970.aniName = "Light Plague Rat";
      }
      break;
    case 0xfa:
      _0xc61970.aniName = "Sample Mouse";
      break;
  }
  _0xc61970.upgradeText = "You're a tiny " + _0xc61970.aniName + "- Eat food to grow!";
  _0xc61970.aniCol = "gray";
  _0xc61970.skinName = "land/mouse/" + this.animalSpecies + this.getSubSpecies() + "/mouse";
  return _0xc61970;
};
_0x394bb5.prototype.getSkinName = function () {
  return "land/mouse/" + this.animalSpecies + this.getSubSpecies() + "/mouse";
};
_0x394bb5.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return this.animalSpecies === 0xcc ? "/" + this.animalSubSpecies : '';
};
function _0x394bb5() {
  _0x394bb5.superClass.call(this, 0x2);
}
window.Mouse = _0x394bb5;
_0x2b451a.setCustomClassForGameObjType(_0x394bb5, 0x2, _0x2ebefb);
var _0x3bfe59 = _0x3bfe59;
var _0x53abbc = _0xf4bb63;
_0x3bfe59.prototype = Object.create(_0x53abbc.prototype);
_0x3bfe59.prototype.constructor = _0x3bfe59;
_0x3bfe59.superClass = _0x53abbc;
_0x3bfe59.prototype.objSkinSpotsCanvas = null;
_0x3bfe59.prototype.getSkinName = function () {
  let _0x4e37ec = this.getSpeciesPath() + "/bear";
  return _0x4e37ec;
};
_0x3bfe59.prototype.getSpeciesPath = function () {
  return "land/bear/" + this.animalSpecies + "/" + this.animalSubSpecies;
};
_0x3bfe59.prototype.animalInfo = function () {
  var _0x14a246 = {};
  var _0x3d7146 = '';
  switch (this.animalSubSpecies) {
    case 0x0:
      _0x14a246.aniName = "Bear";
      _0x14a246.upgradeText = "UPGRADED to BEAR!\n Bears climb through green hills! (Press W to use your claw!)";
      _0x14a246.aniCol = "#99591C";
      _0x3d7146 = "bear";
      break;
    case 0x1:
      _0x14a246.aniName = "Panda";
      _0x14a246.upgradeText = "UPGRADED to " + _0x14a246.aniName + "!\n " + _0x14a246.aniName + " climb through green hills! (Press W to use your claw!)";
      _0x14a246.aniCol = "#99591C";
      _0x3d7146 = "bear";
      break;
    case 0xca:
      _0x14a246.aniName = "Beekeeper Bear";
      _0x14a246.upgradeText = "UPGRADED to " + _0x14a246.aniName + "!\n " + _0x14a246.aniName + " climb through green hills! (Press W to use your claw!)";
      break;
    case 0x7e7:
      _0x14a246.aniName = "Spooky Bear";
      _0x14a246.upgradeText = "UPGRADED to " + _0x14a246.aniName + "!\n " + _0x14a246.aniName + " climb through green hills! (Press W to use your claw!)";
      break;
    case 0xcc:
      _0x14a246.aniName = "Mr. Teddy";
      _0x14a246.upgradeText = "UPGRADED to " + _0x14a246.aniName + "!\n " + _0x14a246.aniName + " climb through green hills! (Press W to use your claw!)";
      _0x14a246.aniCol = "#99591C";
      _0x3d7146 = "mr_teddy";
      break;
  }
  _0x14a246.aniCol = "#CAC05B";
  _0x14a246.skinName = this.getSkinName();
  return _0x14a246;
};
_0x3bfe59.prototype.getAbilityInfo = function (_0x20a368) {
  var _0x551445 = {
    abilName: "Claw Slash!",
    abilImg: "abilities/Slash-Claw.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x551445;
};
function _0x3bfe59() {
  _0x3bfe59.superClass.call(this, 0x2);
}
window.Bear = _0x3bfe59;
_0x2b451a.setCustomClassForGameObjType(_0x3bfe59, 0x2, _0x54ab20);
var _0x170621 = _0x170621;
var _0x53abbc = _0xf4bb63;
_0x170621.prototype = Object.create(_0x53abbc.prototype);
_0x170621.prototype.constructor = _0x170621;
_0x170621.superClass = _0x53abbc;
_0x170621.prototype.objSkinSpotsCanvas = null;
_0x170621.prototype.animalInfo = function () {
  var _0x89db0b = {};
  switch (this.animalSubSpecies) {
    case 0x0:
      _0x89db0b.aniName = "Crocodile";
      _0x89db0b.aniCol = "#30F51C";
      break;
    case 0x1:
      _0x89db0b.aniName = "Giant Crocodile";
      _0x89db0b.aniCol = "#757e71";
      break;
    case 0x64:
      _0x89db0b.aniName = "Uncle Sam";
      _0x89db0b.aniCol = "#757e71";
      break;
    case 0xc9:
      _0x89db0b.aniName = "Big Hoss";
      _0x89db0b.aniCol = "#757e71";
      break;
    case 0xca:
      _0x89db0b.aniName = "Croczilla";
      break;
    case 0xcb:
      _0x89db0b.aniName = "Ammit";
      break;
  }
  _0x89db0b.upgradeText = "UPGRADED to " + _0x89db0b.aniName + "!\n Press W to bite and drag around animals! \n+ (Now hide in water spots)+ Swim well in Mud, Lakes & Oceans!";
  _0x89db0b.skinName = this.getSkinName();
  return _0x89db0b;
};
_0x170621.prototype.getSkinName = function () {
  let _0xabe695 = this.getSpeciesPath() + "/croc";
  return _0xabe695;
};
_0x170621.prototype.getSpeciesPath = function () {
  return "land/croc/" + this.animalSpecies + "/" + this.animalSubSpecies;
};
_0x170621.prototype.setStealth = function () {
  _0x170621.superClass.prototype.setStealth.call(this);
  if (this.isCamouflage) {
    this.idealOp = _0x2bd878 == this.id ? 0.1 : 0x0;
  }
};
_0x170621.prototype.isCamouflage = false;
_0x170621.prototype.drawUnderSkinTail = function (_0x20aacf) {
  if (!this.isCamouflage) {
    _0x170621.superClass.prototype.drawUnderSkinTail.call(this, _0x20aacf);
  }
};
_0x170621.prototype.drawHealthBar = function () {
  if (!this.isCamouflage) {
    _0x170621.superClass.prototype.drawHealthBar.call(this);
  }
};
_0x170621.prototype.customUpdatedProperty = function (_0x5e8f53, _0x36503a) {
  if (_0x5e8f53 == 0x56) {
    this.isCamouflage = _0x36503a.readUInt8() == 0x1;
    this.setStealth();
  }
};
_0x170621.prototype.readCustomData_onNewlyVisible = function (_0x19ab45) {
  _0x170621.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x19ab45);
  this.isCamouflage = _0x19ab45.readUInt8() == 0x1;
  this.setStealth();
};
_0x170621.prototype.getAbilityInfo = function (_0x1900cc) {
  var _0x544615 = {
    abilName: "Bite Grab!",
    abilImg: "abilities/Bite.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x544615;
};
function _0x170621() {
  _0x170621.superClass.call(this, 0x2);
}
window.Croc = _0x170621;
_0x2b451a.setCustomClassForGameObjType(_0x170621, 0x2, _0x4bb269);
var _0x53abbc = _0xf4bb63;
_0x16d21f.prototype = Object.create(_0x53abbc.prototype);
_0x16d21f.prototype.constructor = _0x16d21f;
_0x16d21f.superClass = _0x53abbc;
_0x16d21f.prototype.updateZ = function () {
  this.z = 0x186a0;
};
_0x16d21f.prototype.canUseTailslap = false;
_0x16d21f.prototype.tailState = 0x0;
_0x16d21f.prototype.lava = 0x64;
_0x16d21f.prototype.getSkinName = function () {
  var _0x4d4864 = _0x11da90 || _0x4bda0b == 0x2 ? "kingdragon" : "kingdragon_body";
  return "volcano/kingdragon/" + this.animalSpecies + "/" + _0x4d4864;
};
_0x16d21f.prototype.customUpdatedProperty = function (_0x446483, _0x52f73c) {
  if (_0x446483 == 0x4b) {
    this.canUseTailslap = _0x52f73c.readUInt8() == 0x1;
  } else if (_0x446483 == 0x4c) {
    this.tailState = _0x52f73c.readUInt16() / 0x64;
  }
};
_0x16d21f.prototype.leftWingAnim = null;
_0x16d21f.prototype.flapAngleDiff = 0x3;
_0x16d21f.prototype.flapAngle = 0x3;
_0x16d21f.prototype.flapF = 0.1;
_0x16d21f.prototype.flapDur = 0x2;
_0x16d21f.prototype.sF = 0.02;
_0x16d21f.prototype.drawWings = function () {
  if (_0x4bda0b == 0x2 || _0x11da90) {
    return;
  }
  if (this.leftWingAnim == null) {
    this.leftWingAnim = new _0x1c8e57(this, this.flapDur, _0x1c8e57.wave);
    this.leftWingAnim.keepLastFrame = true;
    this.leftWingAnim.loop = true;
    this.leftWingAnim.onFrameEntered = function (_0x3112ba) {
      this.forObj.frame1 = _0x3112ba;
    };
  }
  if (this.leftWingAnim != null) {
    this.leftWingAnim.run();
  }
  var _0x2a567f = this.rad - this.outlineW;
  var _0x19ba00 = this.frame1 * this.sF * _0x2a567f;
  var _0x30eef7 = -(-this.flapF + this.frame1);
  var _0x2fce64 = _0x30eef7 * (this.flapAngle * (Math.PI / 0xb4));
  var _0x4cbe51 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/left_wing.png");
  var _0x3821bc = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/right_wing.png");
  if (_0x4cbe51 && _0x3821bc) {
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.flapAngleDiff * (Math.PI / 0xb4) + _0x2fce64);
    _0x3b8ba2.drawImage(_0x4cbe51, -_0x2a567f * 1.4705882352941178, -_0x2a567f * 1.4705882352941178 + _0x19ba00, 0x2 * _0x2a567f * 1.4705882352941178, 0x2 * _0x2a567f * 1.4705882352941178 + _0x19ba00 * 1.5);
    _0x3b8ba2.restore();
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(-(this.flapAngleDiff * (Math.PI / 0xb4) + _0x2fce64));
    _0x3b8ba2.drawImage(_0x3821bc, -_0x2a567f * 1.4705882352941178, -_0x2a567f * 1.4705882352941178 + _0x19ba00, 0x2 * _0x2a567f * 1.4705882352941178, 0x2 * _0x2a567f * 1.4705882352941178 + _0x19ba00 * 1.5);
    _0x3b8ba2.restore();
    if (this.animalSpecies == 0x4) {
      let _0x52a2fb = _0x1d1686("kd", this.spawnTime);
      if (_0x52a2fb !== undefined && _0x52a2fb != null) {
        this.theFrame = _0x52a2fb;
      }
      let _0x263c73 = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = Math.max(0x0, _0x263c73);
      var _0x287576 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/left_wing_tips.png");
      var _0x1d0f14 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/right_wing_tips.png");
      if (_0x287576 && _0x1d0f14) {
        _0x3b8ba2.save();
        _0x3b8ba2.rotate(this.flapAngleDiff * (Math.PI / 0xb4) + _0x2fce64);
        _0x3b8ba2.drawImage(_0x287576, -_0x2a567f * 1.4705882352941178, -_0x2a567f * 1.4705882352941178 + _0x19ba00, 0x2 * _0x2a567f * 1.4705882352941178, 0x2 * _0x2a567f * 1.4705882352941178 + _0x19ba00 * 1.5);
        _0x3b8ba2.restore();
        _0x3b8ba2.save();
        _0x3b8ba2.rotate(-(this.flapAngleDiff * (Math.PI / 0xb4) + _0x2fce64));
        _0x3b8ba2.drawImage(_0x1d0f14, -_0x2a567f * 1.4705882352941178, -_0x2a567f * 1.4705882352941178 + _0x19ba00, 0x2 * _0x2a567f * 1.4705882352941178, 0x2 * _0x2a567f * 1.4705882352941178 + _0x19ba00 * 1.5);
        _0x3b8ba2.restore();
      }
      _0x3b8ba2.restore();
    }
  }
  var _0x378446 = this.lava;
  if (_0x378446 < 0x32) {
    var _0x1cb492 = _0x378446 / 0x32;
    var _0x4f4fa8 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/left_wing1.png");
    var _0x284d3a = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/right_wing2.png");
    if (_0x4f4fa8 && _0x284d3a) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0x1 - _0x1cb492;
      _0x3b8ba2.save();
      _0x3b8ba2.rotate(this.flapAngleDiff * (Math.PI / 0xb4) + _0x2fce64);
      _0x3b8ba2.drawImage(_0x4f4fa8, -_0x2a567f * 1.4705882352941178, -_0x2a567f * 1.4705882352941178 + _0x19ba00, 0x2 * _0x2a567f * 1.4705882352941178, 0x2 * _0x2a567f * 1.4705882352941178 + _0x19ba00 * 1.5);
      _0x3b8ba2.restore();
      _0x3b8ba2.save();
      _0x3b8ba2.rotate(-(this.flapAngleDiff * (Math.PI / 0xb4) + _0x2fce64));
      _0x3b8ba2.drawImage(_0x284d3a, -_0x2a567f * 1.4705882352941178, -_0x2a567f * 1.4705882352941178 + _0x19ba00, 0x2 * _0x2a567f * 1.4705882352941178, 0x2 * _0x2a567f * 1.4705882352941178 + _0x19ba00 * 1.5);
      _0x3b8ba2.restore();
      _0x3b8ba2.restore();
    }
  }
};
_0x16d21f.prototype.drawSkinCustomization = function () {
  if (this.flag_underWater) {
    return;
  }
  if (_0x4bda0b == 0x2 || _0x11da90) {
    return;
  }
  let _0x1f157b = _0x1d1686("kd", this.spawnTime);
  if (_0x1f157b !== undefined && _0x1f157b != null) {
    this.theFrame = _0x1f157b;
  }
  let _0x33650c = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
  var _0x13bd37 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/nostrils.png");
  if (_0x13bd37) {
    _0x3b8ba2.save();
    var _0x1d61a8 = this.lava;
    var _0x5bcacc = _0x1d61a8 / 0x64;
    _0x3b8ba2.globalAlpha = Math.max(0x0, _0x33650c) * _0x5bcacc;
    var _0xba9420 = this.rad - this.outlineW;
    _0x3b8ba2.drawImage(_0x13bd37, -_0xba9420 * 1.4705882352941178, -_0xba9420 * 1.4705882352941178, 0x2 * _0xba9420 * 1.4705882352941178, 0x2 * _0xba9420 * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
  if (!this.canUseTailslap) {
    var _0x32315b = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/bone1.png");
    if (_0x32315b) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0x1;
      var _0xba9420 = this.rad - this.outlineW;
      _0x3b8ba2.drawImage(_0x32315b, -_0xba9420 * 1.4705882352941178, -_0xba9420 * 1.4705882352941178, 0x2 * _0xba9420 * 1.4705882352941178, 0x2 * _0xba9420 * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
    var _0x115551 = 0x0;
    if (this.tailState < 0xb && this.tailState > 0x5) {
      var _0xbc0277 = this.tailState - 0x5;
      _0x115551 = _0xbc0277 / 0x6;
    } else if (this.tailState <= 0x3) {
      _0x115551 = this.tailState / 0x3;
    }
    var _0x4b6f25 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/bone3.png");
    if (this.tailState < 0xb) {
      if (_0x4b6f25) {
        _0x3b8ba2.save();
        if (this.tailState > 0x5) {
          _0x3b8ba2.globalAlpha = 0x1 - _0x115551;
        } else {
          _0x3b8ba2.globalAlpha = 0x1;
        }
        var _0xba9420 = this.rad - this.outlineW;
        _0x3b8ba2.drawImage(_0x4b6f25, -_0xba9420 * 1.4705882352941178, -_0xba9420 * 1.4705882352941178, 0x2 * _0xba9420 * 1.4705882352941178, 0x2 * _0xba9420 * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
    }
    var _0x27478c = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/bone2.png");
    if (this.tailState < 0x3) {
      if (_0x27478c) {
        _0x3b8ba2.save();
        _0x3b8ba2.globalAlpha = 0x1 - _0x115551;
        var _0xba9420 = this.rad - this.outlineW;
        _0x3b8ba2.drawImage(_0x27478c, -_0xba9420 * 1.4705882352941178, -_0xba9420 * 1.4705882352941178, 0x2 * _0xba9420 * 1.4705882352941178, 0x2 * _0xba9420 * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
    }
  } else {
    var _0x27478c = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/bone2.png");
    if (_0x27478c) {
      _0x3b8ba2.save();
      var _0x413612 = Math.max(0.3, _0x33650c);
      _0x3b8ba2.globalAlpha = _0x413612;
      var _0xba9420 = this.rad - this.outlineW;
      _0x3b8ba2.drawImage(_0x27478c, -_0xba9420 * 1.4705882352941178, -_0xba9420 * 1.4705882352941178, 0x2 * _0xba9420 * 1.4705882352941178, 0x2 * _0xba9420 * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
  }
  this.drawWings();
};
_0x16d21f.prototype.drawLowWaterDrop = function () {
  if (this.flag_underWater) {
    return;
  }
  if (this.flag_lowWat) {
    var _0x26ea63 = 0.5 + 0.30000000000000004 * Math.sin(0x2 * Math.PI / 1.2 * (_0x1f4c9e / 0x3e8));
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = _0x26ea63;
    _0x3b8ba2.fillStyle = "#ff6000";
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, this.rad + 0x5, 0x5, 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.restore();
  }
};
_0x16d21f.prototype.animalInfo = function () {
  var _0x43065f = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x43065f.aniName = "King Dragon";
      break;
    case 0x1:
      _0x43065f.aniName = "Golden King Dragon";
      break;
    case 0x2:
      _0x43065f.aniName = "King Ripper";
      break;
    case 0x3:
      _0x43065f.aniName = "King Stan";
      break;
    case 0x4:
      _0x43065f.aniName = "King Shah";
      break;
    case 0x5:
      _0x43065f.aniName = "Queen Scarlet";
      break;
    case 0x6:
      _0x43065f.aniName = "Queen Celeste";
      break;
    case 0xc8:
      _0x43065f.aniName = "Queen Flame";
      break;
    case 0xca:
      _0x43065f.aniName = "King Graveyard";
      break;
  }
  _0x43065f.aniCol = "#FF9000";
  _0x43065f.skinName = this.getSkinName();
  _0x43065f.upgradeText = "UPGRADED to " + _0x43065f.aniName;
  _0x43065f.upgradeText += "!\nYou got firestream that burns your victim alive! Watch your tail and slap them hard.";
  _0x43065f.aniCol = "black";
  return _0x43065f;
};
_0x16d21f.prototype.getAbilityInfo = function (_0x407a6b) {
  var _0xa81f68 = {
    "abilName": "Firestream\n& Tail slap"
  };
  var _0x178272 = 0x0;
  switch (this.animalSpecies) {
    case 0x0:
      _0x178272 = 0x1;
      break;
    case 0x1:
      _0x178272 = 0x2;
      break;
    case 0x2:
      _0x178272 = 0x4;
      break;
    case 0x3:
      _0x178272 = 0x5;
      break;
    case 0x4:
      _0x178272 = 0x6;
      break;
    case 0x5:
      _0x178272 = 0x9;
      break;
    case 0x6:
      _0x178272 = 0x8;
      break;
  }
  _0xa81f68.speciesType = _0x178272;
  _0xa81f68.abilImg = "abilities/Fireball.svg";
  _0xa81f68.skinThemeID = this.skinThemeID;
  _0xa81f68.mopeSeasonID = this.mopeSeasonID;
  return _0xa81f68;
};
function _0x16d21f() {
  this.lava = 0x64;
  _0x16d21f.superClass.call(this, 0x2);
}
window.KingDragon = _0x16d21f;
_0x2b451a.setCustomClassForGameObjType(_0x16d21f, 0x2, _0x330b14);
var _0x53abbc = _0xf4bb63;
_0x4b4d4a.prototype = Object.create(_0x53abbc.prototype);
_0x4b4d4a.prototype.constructor = _0x4b4d4a;
_0x4b4d4a.superClass = _0x53abbc;
_0x4b4d4a.prototype.animalInfo = function () {
  var _0x40b989 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x40b989.aniName = "The Yeti!";
      break;
    case 0x1:
      _0x40b989.aniName = "Golden Yeti!";
      break;
    case 0x2:
      _0x40b989.aniName = "Emerald Yeti!";
      break;
    case 0x3:
      _0x40b989.aniName = "Aqua Yeti";
      break;
    case 0xc9:
      _0x40b989.aniName = "Squishy Yeti";
      break;
    case 0xca:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x40b989.aniName = "Lovely Yeti";
          break;
        case 0x1:
          _0x40b989.aniName = "Frosty Eye Demon";
      }
      break;
    case 0xcc:
      _0x40b989.aniName = "Frost Wolf";
      break;
    case 0xdc:
      _0x40b989.aniName = "Glacial Demon";
      break;
  }
  _0x40b989.skinName = this.getSkinName();
  _0x40b989.aniDesc = '';
  _0x40b989.upgradeText = "UPGRADED to " + _0x40b989.aniName + "!\n So it really exists... \n Hold W to turn into snow, release W to freeeeeze!";
  _0x40b989.aniCol = "#839eb5";
  return _0x40b989;
};
_0x4b4d4a.prototype.getAbilityInfo = function (_0x43a5e6) {
  var _0x4d2eb7 = {
    abilName: "Yeti Roar" + (this.animalSpecies == 0x3 ? " &\n Ice Statue" : '') + '',
    abilImg: "abilities/Growl-Roar.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x4d2eb7;
};
_0x4b4d4a.prototype.getSkinName = function () {
  var _0x56c1af = this.specType == 0x0 ? '' : 0x1;
  return this.getSpeciesPath("yeti") + "/yeti" + _0x56c1af;
};
_0x4b4d4a.prototype.getSubSpecies = function () {
  return this.animalSpecies === 0xca ? "/" + this.animalSubSpecies : '';
};
_0x4b4d4a.prototype.getSpeciesPath = function (_0x2c3b60) {
  return "arctic/" + _0x2c3b60 + "/" + this.animalSpecies + this.getSubSpecies();
};
_0x4b4d4a.prototype.drawOnTopOfSkinImg = function () {};
_0x4b4d4a.prototype.isTransforming = false;
_0x4b4d4a.prototype.readCustomData_onNewlyVisible = function (_0x104f81) {
  _0x4b4d4a.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x104f81);
  this.isTransforming = _0x104f81.readUInt8() == 0x1;
};
_0x4b4d4a.prototype.customUpdatedProperty = function (_0x49ea79, _0x36134b) {
  if (_0x49ea79 == 0x55) {
    this.isTransforming = _0x36134b.readUInt8() == 0x1;
  }
};
_0x4b4d4a.prototype.getIdealOpacity = function () {
  var _0x76e2c4 = this.flag_underWater || this.flag_usingAbility && this.isTransforming || this.isCamouflage ? 0x0 : 0x1;
  return _0x76e2c4;
};
_0x4b4d4a.prototype.biteStart = 0x0;
_0x4b4d4a.prototype.flapAmount = 0x3;
_0x4b4d4a.prototype.flapDur = 1.5;
_0x4b4d4a.prototype.roarStartT = -0x1f4;
_0x4b4d4a.prototype.drawSkinCustomization = function () {
  if (this.flag_usingAbility && this.isTransforming) {
    if (this.isTransforming) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0x1;
      var _0x3ca8c5 = this.getSkinImageObj("img/snowball.png");
      if (_0x3ca8c5) {
        var _0xa7a0f = this.rad;
        _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
        _0x3b8ba2.drawImage(_0x3ca8c5, -_0xa7a0f, -_0xa7a0f, 0x2 * _0xa7a0f, 0x2 * _0xa7a0f);
      } else {
        this.drawOutlinedCircle('', "white");
      }
      _0x3b8ba2.restore();
    }
  } else {
    if (this.animalSpecies == 0x4) {
      return;
    }
    this.setSkinScale();
    if (!this.flag_usingAbility) {
      this.biteStart = 0x0;
      return;
    } else {
      if (this.biteStart == 0x0) {
        this.biteStart = _0x1f4c9e + this.roarStartT;
      }
      if (this.specType != 0x0 && this.specType != undefined) {
        var _0x5ee8d9 = "skins/arctic/yeti/" + this.animalSpecies + "/yeti_head1.png";
        var _0x53cce9 = this.getSkinImageObj(_0x5ee8d9);
        var _0x5b57bb = (_0x1f4c9e - this.biteStart) / 0x3e8;
        var _0x2765cd = this.skinScale * 1.07;
        var _0xa7a0f = this.skinRad;
        if (_0x53cce9) {
          var _0x569009 = 0x0;
          var _0x4832a3 = this.flapAmount - (this.animalSpecies == 0x1 ? 0.5 : 0x0);
          _0x569009 = !(_0x4bda0b == 0x2) ? _0x7b826(_0x5b57bb, this.flapDur, _0x4832a3, 0x2) : this.flapAmount;
          _0x3b8ba2.save();
          var _0xa7a0f = this.rad;
          _0x3b8ba2.drawImage(_0x53cce9, -_0xa7a0f * _0x2765cd, (-_0xa7a0f + _0xa7a0f * 0.1) * _0x2765cd - _0x569009, 0x2 * _0xa7a0f * _0x2765cd, 0x2 * _0xa7a0f * _0x2765cd);
          _0x3b8ba2.restore();
        }
      }
    }
  }
};
function _0x4b4d4a() {
  _0x4b4d4a.superClass.call(this, 0x2);
}
window.Yeti = _0x4b4d4a;
_0x2b451a.setCustomClassForGameObjType(_0x4b4d4a, 0x2, _0x4b1170);
var _0x53abbc = _0xf4bb63;
_0x277716.prototype = Object.create(_0x53abbc.prototype);
_0x277716.prototype.constructor = _0x277716;
_0x277716.superClass = _0x53abbc;
_0x277716.prototype.animalInfo = function () {
  var _0x3be8fd = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x3be8fd.aniName = "Mammoth!";
      break;
    case 0x1:
      _0x3be8fd.aniName = "Golden Mammoth!";
      break;
    case 0x2:
      _0x3be8fd.aniName = "Black Mammoth!";
      break;
    case 0xc9:
      _0x3be8fd.aniName = "Lost Tourist!";
      break;
    case 0xca:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x3be8fd.aniName = "Acid Mammoth";
          break;
        case 0x1:
          _0x3be8fd.aniName = "Crystal Golem";
      }
      break;
    case 0xdc:
      _0x3be8fd.aniName = " Golem Mammoth";
      break;
  }
  _0x3be8fd.skinName = this.getSkinName();
  _0x3be8fd.aniDesc = '';
  _0x3be8fd.upgradeText = "UPGRADED to " + _0x3be8fd.aniName + "\n Press W to roll snowballs with your trunk!\n The bigger the snowball gets, the longer the freeze!";
  _0x3be8fd.aniCol = "#9d4717";
  return _0x3be8fd;
};
_0x277716.prototype.getAbilityInfo = function (_0x211040) {
  var _0x2051c9 = {
    abilName: "Roll snow",
    abilImg: "abilities/Roll-RollSnowball.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x2051c9;
};
_0x277716.prototype.getSkinName = function () {
  var _0x2e8b34 = this.specType == 0x0 ? '' : 0x1;
  return "arctic/mammoth/" + this.animalSpecies + this.getSubSpecies() + "/mammoth" + _0x2e8b34;
};
_0x277716.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return this.animalSpecies === 0xca ? "/" + this.animalSubSpecies : '';
};
function _0x277716() {
  _0x277716.superClass.call(this, 0x2);
}
window.Mammoth = _0x277716;
_0x2b451a.setCustomClassForGameObjType(_0x277716, 0x2, _0x3af7d1);
var _0x53abbc = _0xf4bb63;
_0x558c65.prototype = Object.create(_0x53abbc.prototype);
_0x558c65.prototype.constructor = _0x558c65;
_0x558c65.superClass = _0x53abbc;
_0x558c65.prototype.animalInfo = function () {
  var _0x33a1c7 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x33a1c7.aniName = "Sabertooth Tiger!";
      break;
    case 0x1:
      _0x33a1c7.aniName = "Golden Tiger!";
      break;
    case 0x2:
      _0x33a1c7.aniName = "Margala Sabertooth!";
      break;
    case 0xc8:
      _0x33a1c7.aniName = "Techno Saber!";
      break;
    case 0xc9:
      _0x33a1c7.aniName = "Strawbertooth!";
      break;
    case 0xca:
      _0x33a1c7.aniName = "Ice-Fang Sabertooth";
      break;
    case 0xcc:
      _0x33a1c7.aniName = "Shadow Sabeertooth!";
      break;
  }
  _0x33a1c7.skinName = this.getSkinName();
  _0x33a1c7.aniDesc = '';
  _0x33a1c7.upgradeText = "UPGRADED to " + _0x33a1c7.aniName + "\nSabertooth Tigers are great swimmers, dominate the Lakes/Oceans/Mud!";
  _0x33a1c7.aniCol = "#945A99";
  return _0x33a1c7;
};
_0x558c65.prototype.getAbilityInfo = function (_0x52a2ca) {
  var _0x2fc0f2 = {
    abilName: "Claw Slash!",
    abilImg: "abilities/Slash-Claw.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x2fc0f2;
};
_0x558c65.prototype.getSkinName = function () {
  return "arctic/sabertooth/" + this.animalSpecies + this.getSubSpecies() + "/sabertooth" + (this.specType == 0x0 ? '' : this.specType);
};
_0x558c65.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x558c65() {
  _0x558c65.superClass.call(this, 0x2);
}
window.Sabertooth = _0x558c65;
_0x2b451a.setCustomClassForGameObjType(_0x558c65, 0x2, _0x542f57);
var _0x53abbc = _0xf4bb63;
_0xe1b8da.prototype = Object.create(_0x53abbc.prototype);
_0xe1b8da.prototype.constructor = _0xe1b8da;
_0xe1b8da.superClass = _0x53abbc;
_0xe1b8da.prototype.animalInfo = function () {
  var _0x544ff1 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x544ff1.aniName = "Penguin";
      break;
    case 0xc9:
      _0x544ff1.aniName = "Surfer Penguin";
      break;
    case 0xca:
      _0x544ff1.aniName = "UFO Pigeon";
      break;
  }
  _0x544ff1.skinName = this.getSkinName();
  _0x544ff1.aniDesc = '';
  _0x544ff1.upgradeText = "UPGRADED to " + _0x544ff1.aniName + "!\n Left-click to run!\n (HOLD W to slide FAST on ice)!";
  _0x544ff1.aniCol = "#FFFFFF";
  return _0x544ff1;
};
_0xe1b8da.prototype.getAbilityInfo = function (_0xde0142) {
  var _0x30bba0 = {
    abilName: "Slide on ice",
    abilImg: "abilities/Slide.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x30bba0;
};
_0xe1b8da.prototype.getSkinName = function () {
  return "arctic/penguin/" + this.animalSpecies + this.getSubSpecies() + "/penguin" + (this.specType == 0x0 ? '' : 0x1);
};
_0xe1b8da.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0xe1b8da() {
  _0xe1b8da.superClass.call(this, 0x2);
}
window.Penguin = _0xe1b8da;
_0x2b451a.setCustomClassForGameObjType(_0xe1b8da, 0x2, _0x112e88);
var _0x53abbc = _0xf4bb63;
_0x176856.prototype = Object.create(_0x53abbc.prototype);
_0x176856.prototype.constructor = _0x176856;
_0x176856.superClass = _0x53abbc;
_0x176856.prototype.animalInfo = function () {
  var _0x87241e = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x87241e.aniName = "Seal";
      break;
    case 0xc9:
      _0x87241e.aniName = "Hawaiian Monk";
      break;
    case 0xca:
      _0x87241e.aniName = "Soapy Seal";
      break;
  }
  _0x87241e.skinName = this.getSkinName();
  _0x87241e.aniDesc = '';
  _0x87241e.upgradeText = "UPGRADED to " + _0x87241e.aniName + "!\n You can slide on ice (Hold W) + can climb hills (rocks too!)";
  _0x87241e.aniCol = "#633838";
  return _0x87241e;
};
_0x176856.prototype.getAbilityInfo = function (_0x223ec7) {
  var _0x1a3975 = {
    abilName: "Slide on ice",
    abilImg: "abilities/Slide.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x1a3975;
};
_0x176856.prototype.getSkinName = function () {
  return "arctic/seal/" + this.animalSpecies + this.getSubSpecies() + "/seal" + (this.specType == 0x0 ? '' : 0x1);
};
_0x176856.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x176856() {
  _0x176856.superClass.call(this, 0x2);
}
window.Seal = _0x176856;
_0x2b451a.setCustomClassForGameObjType(_0x176856, 0x2, _0x40a896);
var _0x53abbc = _0xf4bb63;
_0x3dee7b.prototype = Object.create(_0x53abbc.prototype);
_0x3dee7b.prototype.constructor = _0x3dee7b;
_0x3dee7b.superClass = _0x53abbc;
_0x3dee7b.prototype.animalInfo = function () {
  var _0x3981e3 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x3981e3.aniName = "Walrus!";
      break;
    case 0x64:
      _0x3981e3.aniName = "Candy Rus!";
      break;
    case 0xc9:
      _0x3981e3.aniName = "Walrusmelon!";
      break;
    case 0xca:
      _0x3981e3.aniName = "Potato Walrus";
      break;
  }
  _0x3981e3.skinName = this.getSkinName();
  _0x3981e3.aniDesc = '';
  _0x3981e3.upgradeText = "UPGRADED to " + _0x3981e3.aniName + "\n You can slide on ice (Hold W) + can climb hills (rocks too!)";
  _0x3981e3.aniCol = "#633838";
  return _0x3981e3;
};
_0x3dee7b.prototype.getAbilityInfo = function (_0x38f74c) {
  var _0x384472 = {
    abilName: "Slide on ice",
    abilImg: "abilities/Slide.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x384472;
};
_0x3dee7b.prototype.getSkinName = function () {
  return "arctic/walrus/" + this.animalSpecies + this.getSubSpecies() + "/walrus" + (this.specType == 0x0 ? '' : 0x1);
};
_0x3dee7b.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x3dee7b() {
  _0x3dee7b.superClass.call(this, 0x2);
}
window.Walrus = _0x3dee7b;
_0x2b451a.setCustomClassForGameObjType(_0x3dee7b, 0x2, _0x517417);
var _0x53abbc = _0xf4bb63;
_0x284a22.prototype = Object.create(_0x53abbc.prototype);
_0x284a22.prototype.constructor = _0x284a22;
_0x284a22.superClass = _0x53abbc;
_0x284a22.prototype.animalInfo = function () {
  var _0x241b61 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x241b61.aniName = "Wolf!";
      break;
    case 0xc9:
      _0x241b61.aniName = "Pineapple Wolf!";
      break;
    case 0xdc:
      _0x241b61.aniName = "Okami Wolf";
      break;
  }
  _0x241b61.skinName = this.getSkinName();
  _0x241b61.upgradeText = "UPGRADED to " + _0x241b61.aniName + "\n Wolf paws turn very well on ice!\n Press W to howl!";
  _0x241b61.aniCol = "#6B6B6B";
  return _0x241b61;
};
_0x284a22.prototype.getAbilityInfo = function (_0x23d675) {
  var _0x3f1281 = {
    abilName: "Howl!",
    abilImg: "abilities/Howl.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x3f1281;
};
_0x284a22.prototype.getSkinName = function () {
  var _0x47bde0 = this.specType == 0x0 ? '' : 0x1;
  return "arctic/wolf/" + this.animalSpecies + this.getSubSpecies() + "/wolf" + _0x47bde0;
};
_0x284a22.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x284a22() {
  _0x284a22.superClass.call(this, 0x2);
}
window.Wolf = _0x284a22;
_0x2b451a.setCustomClassForGameObjType(_0x284a22, 0x2, _0x26fb25);
var _0x53abbc = _0xf4bb63;
_0x14e13a.prototype = Object.create(_0x53abbc.prototype);
_0x14e13a.prototype.constructor = _0x14e13a;
_0x14e13a.superClass = _0x53abbc;
_0x14e13a.prototype.animalInfo = function () {
  var _0x8772c2 = {
    "aniName": "Wolverine!"
  };
  switch (this.animalSpecies) {
    case 0xca:
      _0x8772c2.aniName = "Floral Wolverine";
      break;
    case 0xdc:
      _0x8772c2.aniName = "Summoner Wolverine";
      break;
  }
  _0x8772c2.skinName = this.getSkinName();
  _0x8772c2.upgradeText = "UPGRADED to Wolverine!!\n Press W to Let out a Powerful GROWL! (Knocks back prey!)";
  _0x8772c2.aniCol = "#843A0F";
  return _0x8772c2;
};
_0x14e13a.prototype.getAbilityInfo = function (_0x1ff01f) {
  var _0x580f48 = {
    abilName: "Roar!",
    abilImg: "abilities/Howl-1.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x580f48;
};
_0x14e13a.prototype.getSkinName = function () {
  return "arctic/wolverine/" + this.animalSpecies + this.getSubSpecies() + "/wolverine" + (this.specType == 0x0 ? '' : this.specType);
};
_0x14e13a.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x14e13a() {
  _0x14e13a.superClass.call(this, 0x2);
}
window.Wolverine = _0x14e13a;
_0x2b451a.setCustomClassForGameObjType(_0x14e13a, 0x2, _0x3b55ee);
var _0x53abbc = _0xf4bb63;
_0x55fc89.prototype = Object.create(_0x53abbc.prototype);
_0x55fc89.prototype.constructor = _0x55fc89;
_0x55fc89.superClass = _0x53abbc;
_0x55fc89.prototype.animalInfo = function () {
  var _0xb01539 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0xb01539.aniName = "Muskox!";
      break;
    case 0xc8:
      _0xb01539.aniName = "Brazen Bull!";
      break;
    case 0xc9:
      _0xb01539.aniName = "Fireworks Ox!";
      break;
    case 0xca:
      _0xb01539.aniName = "Monitor Muskox";
      break;
  }
  _0xb01539.skinName = this.getSkinName();
  _0xb01539.aniDesc = '';
  _0xb01539.upgradeText = "UPGRADED to " + _0xb01539.aniName + "\n Press W to charge with your horns! \nPlus move decently on ice!";
  _0xb01539.aniCol = "#231f18";
  return _0xb01539;
};
_0x55fc89.prototype.getAbilityInfo = function (_0x3a63bc) {
  var _0x2aea0e = {
    abilName: "Charge!",
    abilImg: "abilities/Charge.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x2aea0e;
};
_0x55fc89.prototype.getSkinName = function () {
  return "arctic/muskox/" + this.animalSpecies + this.getSubSpecies() + "/muskox" + (this.flag_usingAbility ? "2" : '');
};
_0x55fc89.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x55fc89() {
  _0x55fc89.superClass.call(this, 0x2);
}
window.Muskox = _0x55fc89;
_0x2b451a.setCustomClassForGameObjType(_0x55fc89, 0x2, _0x89ca62);
var _0x53abbc = _0xf4bb63;
_0x26f304.prototype = Object.create(_0x53abbc.prototype);
_0x26f304.prototype.constructor = _0x26f304;
_0x26f304.superClass = _0x53abbc;
_0x26f304.prototype.animalInfo = function () {
  var _0x47214a = {};
  if (this.animalSpecies == 0x1) {
    _0x47214a.aniName = "The Snowman";
    _0x47214a.skinName = "arctic/snowman/" + this.animalSpecies + "/snowman";
  } else if (this.animalSpecies == 0x2) {
    _0x47214a.aniName = "The Snowgirl";
    _0x47214a.skinName = "arctic/snowman/" + this.animalSpecies + "/snowgirl";
  }
  _0x47214a.aniDesc = '';
  _0x47214a.upgradeText = "UPGRADED to " + _0x47214a.aniName + "!\n So it really exists... \n Hold W to turn into snow, release W to freeeeeze!";
  _0x47214a.aniCol = "#839eb5";
  return _0x47214a;
};
_0x26f304.prototype.getAbilityInfo = function (_0x403ea9) {
  var _0x51cc33 = {
    abilName: "Freeze Prey!",
    abilImg: "abilities/Ice-Freeze.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x51cc33;
};
_0x26f304.prototype.getSkinName = function () {
  var _0x3c9a9e = '';
  if (this.animalSpecies == 0x2) {
    _0x3c9a9e = "arctic/snowman/" + this.animalSpecies + "/snowgirl";
  } else {
    _0x3c9a9e = "arctic/snowman/" + this.animalSpecies + "/snowman";
  }
  _0x3c9a9e += this.specType == 0x0 ? '' : 0x1;
  return _0x3c9a9e;
};
_0x26f304.prototype.drawUnderSkinTail = function (_0x5015b0) {
  if (!this.isCamouflage) {
    _0x26f304.superClass.prototype.drawUnderSkinTail.call(this, _0x5015b0);
  }
};
_0x26f304.prototype.drawHealthBar = function () {
  if (!this.isCamouflage) {
    _0x26f304.superClass.prototype.drawHealthBar.call(this);
  }
};
_0x26f304.prototype.isTransforming = false;
_0x26f304.prototype.isCamouflage = false;
_0x26f304.prototype.carrotAlpha = 0x0;
_0x26f304.prototype.getIdealOpacity = function () {
  var _0x27ff88 = this.flag_underWater || this.flag_usingAbility && this.isTransforming || this.isCamouflage ? 0x0 : 0x1;
  return _0x27ff88;
};
_0x26f304.prototype.biteStart = 0x0;
_0x26f304.prototype.flapAmount = 0x3;
_0x26f304.prototype.flapDur = 1.5;
_0x26f304.prototype.roarStartT = -0x1f4;
_0x26f304.prototype.drawSkinCustomization = function () {
  if (this.flag_usingAbility && this.isTransforming) {
    if (this.isTransforming) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0x1;
      var _0x21d8b9 = this.getSkinImageObj("img/snowball.png");
      if (_0x21d8b9) {
        var _0xede2f4 = this.rad;
        _0x3b8ba2.rotate(this.rPer * Math.PI * 0x2);
        _0x3b8ba2.drawImage(_0x21d8b9, -_0xede2f4, -_0xede2f4, 0x2 * _0xede2f4, 0x2 * _0xede2f4);
      } else {
        this.drawOutlinedCircle('', "white");
      }
      _0x3b8ba2.restore();
    }
  } else {
    this.setSkinScale();
    if (!this.flag_usingAbility && !this.isCamouflage) {
      if (this.carrotAlpha > 0x0) {
        var _0x5571de = this.getSkinImageObj("skins/arctic/snowman/" + this.animalSpecies + "/carrot_nose.png");
        var _0x438ba8 = this.skinScale;
        var _0xede2f4 = this.skinRad;
        if (_0x5571de) {
          _0x3b8ba2.save();
          var _0xede2f4 = this.rad;
          _0x3b8ba2.globalAlpha = this.carrotAlpha;
          _0x3b8ba2.drawImage(_0x5571de, -_0xede2f4 * _0x438ba8, -_0xede2f4 * _0x438ba8, 0x2 * _0xede2f4 * _0x438ba8, 0x2 * _0xede2f4 * _0x438ba8);
          _0x3b8ba2.restore();
        }
      }
      this.biteStart = 0x0;
      return;
    } else {
      if (this.biteStart == 0x0) {
        this.biteStart = _0x1f4c9e + this.roarStartT;
      }
      if (this.specType != 0x0 && this.specType != undefined) {
        var _0xcc154d = this.animalSpecies == 0x2 ? "snowgirl" : "snowman";
        var _0x56f250 = "skins/arctic/snowman/" + this.animalSpecies + "/" + _0xcc154d + "_head1.png";
        var _0x5571de = this.getSkinImageObj(_0x56f250);
        var _0x11f68f = (_0x1f4c9e - this.biteStart) / 0x3e8;
        var _0x438ba8 = this.skinScale * 1.07;
        var _0xede2f4 = this.skinRad;
        if (_0x5571de) {
          var _0x42f3ad = 0x0;
          var _0x1899c7 = this.flapAmount - (this.animalSpecies == 0x1 ? 0.5 : 0x0);
          _0x42f3ad = !(_0x4bda0b == 0x2) ? _0x7b826(_0x11f68f, this.flapDur, _0x1899c7, 0x2) : this.flapAmount;
          _0x3b8ba2.save();
          var _0xede2f4 = this.rad;
          _0x3b8ba2.drawImage(_0x5571de, -_0xede2f4 * _0x438ba8, (-_0xede2f4 + _0xede2f4 * 0.1) * _0x438ba8 - _0x42f3ad, 0x2 * _0xede2f4 * _0x438ba8, 0x2 * _0xede2f4 * _0x438ba8);
          _0x3b8ba2.restore();
        }
      }
    }
  }
};
_0x26f304.prototype.customUpdatedProperty = function (_0x13bee1, _0x55b1be) {
  if (_0x13bee1 == 0x55) {
    this.isTransforming = _0x55b1be.readUInt8() == 0x1;
  } else {
    if (_0x13bee1 == 0x56) {
      this.isCamouflage = _0x55b1be.readUInt8() == 0x1;
    } else {
      if (_0x13bee1 == 0x57) {
        this.carrotAlpha = _0x55b1be.readUInt16() / 0x3e8;
      } else if (_0x13bee1 == 0x58) {
        this.lights = _0x55b1be.readUInt8();
      }
    }
  }
};
_0x26f304.prototype.readCustomData_onNewlyVisible = function (_0x3ea09d) {
  _0x26f304.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x3ea09d);
  this.isTransforming = _0x3ea09d.readUInt8() == 0x1;
  this.isCamouflage = _0x3ea09d.readUInt8() == 0x1;
  this.carrotAlpha = _0x3ea09d.readUInt16() / 0x3e8;
  this.lights = _0x3ea09d.readUInt8();
};
function _0x26f304() {
  _0x26f304.superClass.call(this, 0x2);
}
window.Snowman = _0x26f304;
_0x2b451a.setCustomClassForGameObjType(_0x26f304, 0x2, _0x356343);
var _0x53abbc = _0xf4bb63;
_0x90d72c.prototype = Object.create(_0x53abbc.prototype);
_0x90d72c.prototype.constructor = _0x90d72c;
_0x90d72c.superClass = _0x53abbc;
_0x90d72c.prototype.updateZ = function () {
  this.z = this.rad;
  if (this.flag_underWater) {
    this.z = -0x64;
  } else {
    if (this.flag_eff_tossedInAir) {
      this.z = 0x4b0 + this.rad;
    } else {
      if (this.flag_flying) {
        this.z = 0x186a0;
        if (this.flag_isGrabbed) {
          this.z -= this.rad;
        }
      } else {
        if (this.flag_canClimbHill) {
          this.z = 0x3eb;
        } else {
          this.z = this.rad;
        }
      }
    }
  }
};
_0x90d72c.prototype.animalInfo = function () {
  var _0x5a49f5 = {};
  switch (this.animalSpecies) {
    case 0xcc:
      switch (this.animalSubSpecies) {
        case 0x2:
          _0x5a49f5.aniName = "Golden Devil Goat";
          break;
      }
      break;
    case 0xc9:
      switch (this.animalSubSpecies) {
        case 0x1:
          _0x5a49f5.aniName = "Fruity Ice Markhor";
          break;
      }
      break;
    case 0x1:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x5a49f5.aniName = "Markhor";
          break;
      }
      break;
    case 0x2:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x5a49f5.aniName = "Big Goat";
      }
      break;
  }
  _0x5a49f5.aniCol = "#FF9000";
  _0x5a49f5.skinName = this.getSkinName();
  _0x5a49f5.upgradeText = "UPGRADED to " + _0x5a49f5.aniName + "!\nPress 'W' to Jump High from hills. Ram in the preys on land.";
  return _0x5a49f5;
};
_0x90d72c.prototype.moveF = 0.08;
_0x90d72c.prototype.jumpAnim = null;
_0x90d72c.prototype.frame = 0x0;
_0x90d72c.prototype.getSkinImageObj = function (_0x5d9df7) {
  var _0x57a30a = this.animalSpecies === 0xcc || this.animalSpecies === 0xc9 ? 0x1 : 0x2;
  return this.getSkinImageObjForSeason(_0x5d9df7, _0x57a30a);
};
_0x90d72c.prototype.getAbilityInfo = function (_0x3356a5) {
  var _0x5663c0 = {
    abilImg: "abilities/Headbutt.svg",
    abilName: "Head Butt",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x5663c0;
};
_0x90d72c.prototype.getSpeciesPath = function (_0x1a8ecc) {
  var _0x38e783 = "/" + this.animalSubSpecies;
  return "arctic/" + _0x1a8ecc + "/" + this.animalSpecies + _0x38e783 + "/";
};
_0x90d72c.prototype.moveF = 0.08;
_0x90d72c.prototype.jumpAnim = null;
_0x90d72c.prototype.frame = 0x0;
_0x90d72c.prototype.drawUnderSkinImg = function () {
  if (this.flag_usingAbility && this.specType > 0x2) {
    if (this.jumpAnim == null) {
      this.jumpAnim = new _0x1c8e57(this, 0.5, _0x1c8e57.halfWave);
      this.jumpAnim.keepLastFrame = true;
      this.jumpAnim.loop = true;
      this.jumpAnim.onFrameEntered = function (_0x3bea6f) {
        this.forObj.frame = _0x3bea6f;
      };
      this.jumpAnim.onStop = function () {};
    }
    if (this.jumpAnim != null) {
      this.jumpAnim.run();
    }
    var _0x4983a2 = this.rad - this.outlineW;
    var _0x2fe5a8 = 1.4705882352941178;
    this.setSkinScale();
    var _0x214824 = "skins/" + this.getSpeciesPath("markhor") + "/front_legs.png";
    var _0x1cc0ea = "skins/" + this.getSpeciesPath("markhor") + "/back_legs.png";
    var _0x498186 = this.getSkinImageObj(_0x214824);
    var _0x96c747 = this.getSkinImageObj(_0x1cc0ea);
    if (_0x498186 && _0x96c747) {
      var _0x2fe5a8 = this.skinScale + this.skinScale * 0.15 * this.frame;
      var _0x4983a2 = this.skinRad;
      if (this.specType == 0x3) {
        _0x3b8ba2.drawImage(_0x498186, -_0x4983a2 * _0x2fe5a8, -_0x4983a2 * _0x2fe5a8, 0x2 * _0x4983a2 * _0x2fe5a8, 0x2 * _0x4983a2 * _0x2fe5a8);
        _0x3b8ba2.drawImage(_0x96c747, -_0x4983a2 * _0x2fe5a8, (-_0x4983a2 - _0x4983a2 * this.moveF * this.frame) * _0x2fe5a8, 0x2 * _0x4983a2 * _0x2fe5a8, 0x2 * _0x4983a2 * _0x2fe5a8);
      } else {
        _0x3b8ba2.drawImage(_0x96c747, -_0x4983a2 * _0x2fe5a8, -_0x4983a2 * _0x2fe5a8, 0x2 * _0x4983a2 * _0x2fe5a8, 0x2 * _0x4983a2 * _0x2fe5a8);
        _0x3b8ba2.drawImage(_0x498186, -_0x4983a2 * _0x2fe5a8, (-_0x4983a2 + _0x4983a2 * this.moveF * this.frame) * _0x2fe5a8, 0x2 * _0x4983a2 * _0x2fe5a8, 0x2 * _0x4983a2 * _0x2fe5a8);
      }
    }
  } else {
    this.jumpAnim = null;
  }
};
_0x90d72c.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    return;
  }
  var _0x51f1f2 = 0.1;
  if (this.specType > 0x2) {
    _0x51f1f2 = 0.2 * this.frame;
  }
  {
    var _0x1019fd = this.getSkinImageObj(this.getHead("markhor", true));
    if (_0x1019fd) {
      _0x3b8ba2.save();
      var _0x3aa64b = this.rad;
      _0x3b8ba2.drawImage(_0x1019fd, -_0x3aa64b * 1.4705882352941178, (-_0x3aa64b + _0x3aa64b * _0x51f1f2) * 1.4705882352941178, 0x2 * _0x3aa64b * 1.4705882352941178, 0x2 * _0x3aa64b * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
  }
};
_0x90d72c.prototype.getHead = function (_0x1d7e6a, _0x398d0d) {
  var _0x13c310 = "skins/" + (_0x398d0d ? this.getSpeciesPath(_0x1d7e6a) + "/" : _0x1d7e6a + "/");
  _0x13c310 += _0x1d7e6a + "_head";
  if (this.specType == 0x2) {
    _0x13c310 += "_charging";
  }
  _0x13c310 += ".png";
  return _0x13c310;
};
_0x90d72c.prototype.getSkinName = function () {
  var _0x1f56de = this.getSpeciesPath("markhor") + "/markhor";
  _0x1f56de += this.specType == 0x0 ? '' : 0x1;
  return _0x1f56de;
};
function _0x90d72c() {
  _0x90d72c.superClass.call(this, 0x2);
}
window.Markhor = _0x90d72c;
_0x2b451a.setCustomClassForGameObjType(_0x90d72c, 0x2, _0xa31c83);
var _0x53abbc = _0xf4bb63;
_0x4aa5c3.prototype = Object.create(_0x53abbc.prototype);
_0x4aa5c3.prototype.constructor = _0x4aa5c3;
_0x4aa5c3.superClass = _0x53abbc;
_0x4aa5c3.prototype.animalInfo = function () {
  var _0x5d9818 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x5d9818.aniName = "Reindeer";
      break;
    case 0x1:
      _0x5d9818.aniName = "Musk Deer";
      break;
    case 0xc9:
      _0x5d9818.aniName = "Sunburn Reindeer";
      break;
    case 0xca:
      _0x5d9818.aniName = "Piebald Cosmos";
      break;
    case 0xcc:
      _0x5d9818.aniName = "Spideer";
      break;
  }
  _0x5d9818.aniDesc = '';
  _0x5d9818.upgradeText = "UPGRADED to " + _0x5d9818.aniName + "!\n Press W to dig up food! \n Your sharp hooves let you turn very well on ice!";
  _0x5d9818.aniCol = "#a68976";
  _0x5d9818.skinName = this.getSkinName();
  return _0x5d9818;
};
_0x4aa5c3.prototype.getAbilityInfo = function (_0xa8be6e) {
  var _0x4cf5b6 = {
    abilName: "Dig Food!",
    abilImg: "abilities/Dig.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x4cf5b6;
};
_0x4aa5c3.prototype.getSkinName = function () {
  return "arctic/reindeer/" + this.animalSpecies + this.getSubSpecies() + "/reindeer";
};
_0x4aa5c3.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x4aa5c3() {
  _0x4aa5c3.superClass.call(this, 0x2);
}
window.Reindeer = _0x4aa5c3;
_0x2b451a.setCustomClassForGameObjType(_0x4aa5c3, 0x2, _0x21e8e0);
var _0x53abbc = _0xf4bb63;
_0x15bcb7.prototype = Object.create(_0x53abbc.prototype);
_0x15bcb7.prototype.constructor = _0x15bcb7;
_0x15bcb7.superClass = _0x53abbc;
_0x15bcb7.prototype.getSkinName = function () {
  return this.getSpeciesPath("trex") + "/trex";
};
_0x15bcb7.prototype.animalInfo = function () {
  var _0x1a6ef3 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x1a6ef3.aniName = "The T.Rex";
      break;
    case 0x1:
      _0x1a6ef3.aniName = "Golden T.Rex";
      break;
    case 0x2:
      _0x1a6ef3.aniName = "Ember T.Rex";
      break;
    case 0x64:
      _0x1a6ef3.aniName = "Mr. Dollar";
      break;
    case 0xc8:
      _0x1a6ef3.aniName = "Kaiju Rex";
      break;
    case 0xca:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x1a6ef3.aniName = "Hyporevenant Rex";
          break;
      }
      break;
    case 0xcc:
      _0x1a6ef3.aniName = "Tartarus Rex";
      break;
    case 0xdc:
      _0x1a6ef3.aniName = "Bio Mutant T-rex";
      break;
  }
  _0x1a6ef3.skinName = this.getSkinName();
  _0x1a6ef3.upgradeText = "UPGRADED to " + _0x1a6ef3.aniName + " The Dinosaur!\n This ancient dinosaur has powerful jaws that can drag prey around!!";
  _0x1a6ef3.aniCol = "#862A2A";
  return _0x1a6ef3;
};
_0x15bcb7.prototype.getSubSpecies = function () {
  return this.animalSpecies === 0xca ? "/" + this.animalSubSpecies : '';
};
_0x15bcb7.prototype.getSpeciesPath = function (_0x250aed) {
  return "land/" + _0x250aed + "/" + this.animalSpecies + this.getSubSpecies();
};
_0x15bcb7.prototype.getAbilityInfo = function (_0x105d86) {
  var _0xde3405 = {
    abilName: "Jaws Bite",
    abilImg: "abilities/Bite.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0xde3405;
};
_0x15bcb7.prototype.getAniRadius = function (_0x2006ae) {
  if (this.flag_usingDiveAbility) {
    return _0x2006ae * 0.7;
  }
  return _0x2006ae;
};
_0x15bcb7.prototype.basicDrawSkinImg = function () {
  this.setSkinScale();
  var _0x32f714 = this.skinScale;
  var _0x47e0b5 = this.getAniRadius(this.skinRad);
  if (this.loadedSkinImg) {
    var _0x5ef93b = _0x47e0b5 / 0x2;
    _0x3b8ba2.drawImage(this.loadedSkinImg, -_0x47e0b5 - _0x5ef93b + 1.5, -_0x47e0b5 - _0x5ef93b + 1.5, 0x2 * _0x47e0b5 * _0x32f714, 0x2 * _0x47e0b5 * (_0x32f714 * 1.2));
  }
};
function _0x15bcb7() {
  _0x15bcb7.superClass.call(this, 0x2);
}
window.Trex = _0x15bcb7;
_0x2b451a.setCustomClassForGameObjType(_0x15bcb7, 0x2, _0x43c61f);
var _0x53abbc = _0xf4bb63;
_0x165f7a.prototype = Object.create(_0x53abbc.prototype);
_0x165f7a.prototype.constructor = _0x165f7a;
_0x165f7a.superClass = _0x53abbc;
_0x165f7a.prototype.getSkinName = function () {
  var _0x31a120 = "land/dragon/" + this.animalSpecies + "/" + this.animalSubSpecies + "/dragon";
  return _0x31a120;
};
_0x165f7a.prototype.animalInfo = function () {
  var _0xd2c8cc = {};
  switch (this.animalSubSpecies) {
    case 0x0:
      _0xd2c8cc.aniName = "Dragon!";
      break;
    case 0x1:
      _0xd2c8cc.aniName = "Golden Dragon!";
      break;
    case 0x2:
      _0xd2c8cc.aniName = "Knight Dragon!";
      break;
    case 0x3:
      _0xd2c8cc.aniName = "Boss Dragon!";
      break;
    case 0x64:
      _0xd2c8cc.aniName = "The Gargon!";
      break;
    case 0xca:
      _0xd2c8cc.aniName = "Aberrant Dragon";
      break;
    case 0xcb:
      _0xd2c8cc.aniName = "Ghoul Dragon";
      break;
    case 0xcc:
      _0xd2c8cc.aniName = "Magma Dragon!";
      break;
    case 0x65:
      _0xd2c8cc.aniName = "Goofy Dragon!";
      break;
    case 0x66:
      _0xd2c8cc.aniName = "Desert Dragon!";
      break;
    case 0x67:
      _0xd2c8cc.aniName = "Forge Dragon!";
      break;
    case 0x68:
      _0xd2c8cc.aniName = "Mythical Serpent!";
      break;
    case 0x69:
      _0xd2c8cc.aniName = "Firey Dragon!";
      break;
    case 0xc9:
      _0xd2c8cc.aniName = "Squishy Dragon!";
      break;
    case 0xce:
      _0xd2c8cc.aniName = "AG Dragon!";
      break;
    case 0xdc:
      _0xd2c8cc.aniName = "Behemoth Hive Dragon";
      break;
    case 0x7e7:
      _0xd2c8cc.aniName = "Storm Dragon";
      break;
  }
  _0xd2c8cc.aniCol = "#FF9000";
  _0xd2c8cc.skinName = this.getSkinName();
  _0xd2c8cc.upgradeText = "UPGRADED to " + _0xd2c8cc.aniName + "\n (You're amazing!) \nFly over everything, Hold W to shoot fire!";
  _0xd2c8cc.aniCol = "#22FF8A";
  return _0xd2c8cc;
};
_0x165f7a.prototype.getAbilityInfo = function (_0x4bf43d) {
  var _0x434817 = {
    abilName: "Fire",
    abilImg: "abilities/Firestorm.svg",
    speciesType: this.animalSpecies == 0x1 ? 0x2 : 0x0,
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x434817;
};
_0x165f7a.prototype.diveColor1 = "#64a034";
_0x165f7a.prototype.diveColor2 = "#598b30";
_0x165f7a.prototype.onAnimalSpeciesSet = function () {
  switch (this.animalSpecies) {
    case 0x1:
      this.diveColor1 = "#dbb300";
      this.diveColor2 = "#bf9d04";
      break;
    case 0x2:
      this.diveColor1 = "#79c9a8";
      this.diveColor2 = "#6fad9f";
      break;
  }
};
function _0x165f7a() {
  _0x165f7a.superClass.call(this, 0x2);
}
window.Dragon = _0x165f7a;
_0x2b451a.setCustomClassForGameObjType(_0x165f7a, 0x2, _0x578001);
var _0x53abbc = _0xf4bb63;
_0x2057fb.prototype = Object.create(_0x53abbc.prototype);
_0x2057fb.prototype.constructor = _0x2057fb;
_0x2057fb.superClass = _0x53abbc;
_0x2057fb.prototype.animalInfo = function () {
  var _0x1f653f = {
    "skinName": "land/elephant/" + this.animalSpecies + "/elephant"
  };
  switch (this.animalSubSpecies) {
    case 0x0:
      _0x1f653f.aniName = "Elephant!";
      break;
    case 0x7e7:
      _0x1f653f.aniName = "Carnival Elephant!";
      break;
    case 0x1:
      _0x1f653f.aniName = "Golden Elephant!";
      break;
    case 0x2:
      _0x1f653f.aniName = "Albino Elephant!";
      break;
    case 0xc9:
      _0x1f653f.aniName = "Leiphant!";
      break;
    case 0xca:
      _0x1f653f.aniName = "Ice Wizard Elephant";
      break;
    case 0xdc:
      _0x1f653f.aniName = "Lightwave Elephant";
      break;
  }
  _0x1f653f.skinName = "land/elephant/" + this.animalSpecies + "/" + this.animalSubSpecies + "/elephant";
  _0x1f653f.aniDesc = '';
  _0x1f653f.upgradeText = "UPGRADED to " + _0x1f653f.aniName + "\n Use your long trunk to attack and eat food!";
  _0x1f653f.aniCol = "#945A99";
  return _0x1f653f;
};
_0x2057fb.prototype.getAbilityInfo = function (_0xf3c13) {
  var _0xde8ae = {
    abilImg: "abilities/TrunkHit.svg",
    abilName: "Trunk Hit",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0xde8ae;
};
_0x2057fb.prototype.getSkinName = function () {
  let _0x447523 = this.getSpeciesPath() + "/elephant";
  _0x447523 += this.specType == 0x0 ? '' : 0x1;
  return _0x447523;
};
_0x2057fb.prototype.getSpeciesPath = function () {
  return "land/elephant/" + this.animalSpecies + this.getSubSpecies();
};
_0x2057fb.prototype.getSubSpecies = function () {
  return "/" + this.animalSubSpecies;
};
function _0x2057fb() {
  _0x2057fb.superClass.call(this, 0x2);
}
window.Elephant = _0x2057fb;
_0x2b451a.setCustomClassForGameObjType(_0x2057fb, 0x2, _0x166f22);
var _0x53abbc = _0xf4bb63;
_0x2754e9.prototype = Object.create(_0x53abbc.prototype);
_0x2754e9.prototype.constructor = _0x2754e9;
_0x2754e9.superClass = _0x53abbc;
_0x2754e9.prototype.animalInfo = function () {
  var _0x3586ff = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x3586ff.aniName = "Hippo!";
      break;
    case 0x1:
      _0x3586ff.aniName = "Golden Hippo!";
      break;
    case 0x2:
      _0x3586ff.aniName = "Pygmy Hippo!";
      break;
    case 0x64:
      _0x3586ff.aniName = "Swampster!";
      break;
    case 0xca:
      _0x3586ff.aniName = "Planet Hippo";
      break;
    case 0xcc:
      _0x3586ff.aniName = "Sun Hippo!";
      break;
  }
  _0x3586ff.skinName = this.getSkinName();
  _0x3586ff.upgradeText = "UPGRADED to " + _0x3586ff.aniName + "!\nHippos are great swimmers, dominate the Lakes/Oceans/Mud!";
  _0x3586ff.aniCol = "#945A99";
  return _0x3586ff;
};
_0x2754e9.prototype.getAbilityInfo = function (_0x5de26a) {
  var _0x19a759 = {
    abilName: "Loud Grown!",
    abilImg: "abilities/Howl-1.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x19a759;
};
_0x2754e9.prototype.getSkinName = function () {
  let _0x2228f8 = this.getSpeciesPath() + "/hippo";
  _0x2228f8 += this.specType == 0x0 ? '' : 0x1;
  return _0x2228f8;
};
_0x2754e9.prototype.getSpeciesPath = function () {
  return "land/hippo/" + this.animalSpecies + this.getSubSpecies();
};
_0x2754e9.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x2754e9() {
  _0x2754e9.superClass.call(this, 0x2);
}
window.Hippo = _0x2754e9;
_0x2b451a.setCustomClassForGameObjType(_0x2754e9, 0x2, _0x49fd90);
var _0x53abbc = _0xf4bb63;
_0x1e23f6.prototype = Object.create(_0x53abbc.prototype);
_0x1e23f6.prototype.constructor = _0x1e23f6;
_0x1e23f6.superClass = _0x53abbc;
_0x1e23f6.prototype.animalInfo = function () {
  var _0x37a773 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x37a773.aniName = "Giant Spider!";
      break;
    case 0x1:
      _0x37a773.aniName = "Golden Spider!";
      break;
    case 0x2:
      _0x37a773.aniName = "Goliath Spider!";
      break;
    case 0xca:
      _0x37a773.aniName = "Sapphire Cave Spider";
      break;
    case 0xcc:
      _0x37a773.aniName = "Smile Spider!";
      break;
  }
  _0x37a773.skinName = this.getSkinName();
  _0x37a773.upgradeText = "UPGRADED to " + _0x37a773.aniName + "!\n Place web around the game to catch prey!";
  _0x37a773.aniCol = "black";
  return _0x37a773;
};
_0x1e23f6.prototype.getAbilityInfo = function (_0xc425ae) {
  var _0x17f6f8 = {
    abilName: "Spin Web!",
    abilImg: "abilities/Web.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x17f6f8;
};
_0x1e23f6.prototype.getSkinName = function () {
  let _0x21707b = this.getSpeciesPath() + "/giantspider";
  return _0x21707b;
};
_0x1e23f6.prototype.getSpeciesPath = function () {
  return "land/giantspider/" + this.animalSpecies + this.getSubSpecies();
};
_0x1e23f6.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x1e23f6() {
  _0x1e23f6.superClass.call(this, 0x2);
}
window.GiantSpider = _0x1e23f6;
_0x2b451a.setCustomClassForGameObjType(_0x1e23f6, 0x2, _0x5b3559);
var _0x53abbc = _0xf4bb63;
_0x350548.prototype = Object.create(_0x53abbc.prototype);
_0x350548.prototype.constructor = _0x350548;
_0x350548.superClass = _0x53abbc;
_0x350548.prototype.animalInfo = function () {
  var _0x498566 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x498566.aniName = "Boa Constrictor!";
      break;
    case 0x1:
      _0x498566.aniName = "Golden Boa!";
      break;
    case 0x2:
      _0x498566.aniName = "Tree Boa!";
      break;
  }
  _0x498566.skinName = this.getSkinName();
  _0x498566.aniDesc = '';
  _0x498566.upgradeText = "UPGRADED to " + _0x498566.aniName + "!\n Coil and suffocate other animals!";
  _0x498566.aniCol = "black";
  return _0x498566;
};
_0x350548.prototype.getSkinName = function () {
  let _0x2d8d1c = this.getSpeciesPath() + "/boaconstrictor";
  return _0x2d8d1c;
};
_0x350548.prototype.getSpeciesPath = function () {
  return "land/boaconstrictor/" + this.animalSpecies + this.getSubSpecies();
};
_0x350548.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x350548.prototype.getAbilityInfo = function (_0x7ad3ad) {
  var _0x336d0a = {
    abilName: "Suffocate prey",
    abilImg: "abilities/Constrict.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x336d0a;
};
_0x350548.prototype.getSkinName = function () {
  var _0x532b80 = this.getSpeciesPath("boaconstrictor") + "/boaconstrictor";
  if (this.flag_usingAbility && this.specType == 0x1) {
    _0x532b80 += "2";
  } else {
    _0x532b80 += this.specType == 0x0 ? '' : 0x1;
  }
  return _0x532b80;
};
_0x350548.prototype.drawUnderSkinImg = function () {
  if (this.flag_usingAbility) {
    return;
  }
  var _0x290501 = this.rad - this.outlineW;
  var _0x47ce44 = this.getSkinImageObj("skins/" + this.getSpeciesPath("boaconstrictor") + "/tongue.png");
  var _0x18a323 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x204ad8 = _0x4bda0b == 0x2 ? 0x0 : _0x7b826(_0x18a323, 0.5, 0x5, 0.5);
  var _0x2d1190 = _0x4bda0b == 0x2 ? 0x0 : 0x5;
  if (_0x47ce44) {
    _0x3b8ba2.drawImage(_0x47ce44, -_0x290501 * 1.4705882352941178, -(_0x290501 + _0x2d1190 + _0x204ad8) * 1.4705882352941178, 0x2 * _0x290501 * 1.4705882352941178, 0x2 * _0x290501 * 1.4705882352941178);
  }
};
_0x350548.prototype.getSkinImageObj = function (_0x4ae9c4) {
  var _0x74e882 = this.animalSpecies === 0x1 || this.animalSpecies === 0x2 ? 0x1 : this.mopeSeasonID;
  return this.getSkinImageObjForSeason(_0x4ae9c4, _0x74e882);
};
function _0x350548() {
  _0x350548.superClass.call(this, 0x2);
}
window.BoaConstrictor = _0x350548;
_0x2b451a.setCustomClassForGameObjType(_0x350548, 0x2, _0x479786);
var _0x53abbc = _0xf4bb63;
_0x5e14d1.prototype = Object.create(_0x53abbc.prototype);
_0x5e14d1.prototype.constructor = _0x5e14d1;
_0x5e14d1.superClass = _0x53abbc;
_0x5e14d1.prototype.animalInfo = function () {
  var _0x31cf32 = {
    "aniName": "Gorilla!"
  };
  switch (this.animalSubSpecies) {
    case 0x7e7:
      _0x31cf32.aniName = "Mafia Gorilla";
      break;
    case 0x64:
      _0x31cf32.aniName = "Grim Reaper";
      break;
    case 0xc9:
      _0x31cf32.aniName = "Explorer Ape";
      break;
    case 0xca:
      _0x31cf32.aniName = "Kongrilla";
      break;
    case 0xcc:
      _0x31cf32.aniName = "Phantom Gorilla";
      break;
  }
  _0x31cf32.skinName = this.getSkinName();
  _0x31cf32.upgradeText = "UPGRADED to Gorilla!!\nGorilla!s are great swimmers, dominate the Lakes/Oceans/Mud!";
  _0x31cf32.aniCol = "#945A99";
  return _0x31cf32;
};
_0x5e14d1.prototype.getAbilityInfo = function (_0x2693d3) {
  var _0x234e03 = {
    abilName: "Fruit Throw!",
    abilImg: "abilities/Throw.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x234e03;
};
_0x5e14d1.prototype.getSkinName = function () {
  let _0x9a8bfc = this.getSpeciesPath() + "/gorilla";
  return _0x9a8bfc;
};
_0x5e14d1.prototype.getSpeciesPath = function () {
  return "land/gorilla/" + this.animalSpecies + "/" + this.animalSubSpecies;
};
_0x5e14d1.prototype.drawSkinCustomization = function () {
  this.setSkinScale();
  if (this.animalSubSpecies == 0xcc) {
    var _0x188da3 = "skins/" + this.getSpeciesPath();
    var _0x69550a = this.skinScale * 1.07;
    var _0x5f1cf5 = this.skinRad;
    var _0xc3c2fd = 0x1 + Math.trunc(_0x1f4c9e / 0x78) % 0x7;
    var _0x3c08ae = this.getSkinImageObj(_0x188da3 + "/gorilla_head.png");
    if (_0x3c08ae) {
      var _0x5bb40f = this.getSkinImageObj(_0x188da3 + "/fire" + _0xc3c2fd + ".png");
      if (_0x5bb40f) {
        _0x3b8ba2.save();
        _0x3b8ba2.drawImage(_0x5bb40f, -_0x5f1cf5 * _0x69550a, (-_0x5f1cf5 + _0x5f1cf5 * 0.05) * _0x69550a - 0x0, 0x2 * _0x5f1cf5 * _0x69550a, 0x2 * _0x5f1cf5 * _0x69550a);
        _0x3b8ba2.restore();
      }
      _0x3b8ba2.save();
      var _0x5f1cf5 = this.rad;
      _0x3b8ba2.drawImage(_0x3c08ae, -_0x5f1cf5 * _0x69550a, (-_0x5f1cf5 + _0x5f1cf5 * 0.05) * _0x69550a - 0x0, 0x2 * _0x5f1cf5 * _0x69550a, 0x2 * _0x5f1cf5 * _0x69550a);
      _0x3b8ba2.restore();
    }
  }
};
function _0x5e14d1() {
  _0x5e14d1.superClass.call(this, 0x2);
}
window.Gorilla = _0x5e14d1;
_0x2b451a.setCustomClassForGameObjType(_0x5e14d1, 0x2, _0x4dd4dc);
var _0x53abbc = _0xf4bb63;
_0x193273.prototype = Object.create(_0x53abbc.prototype);
_0x193273.prototype.constructor = _0x193273;
_0x193273.superClass = _0x53abbc;
_0x193273.prototype.animalInfo = function () {
  var _0x23943c = {};
  switch (this.animalSpecies) {
    case 0x0:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x23943c.aniName = "The Kraken!";
          break;
        case 0x7e7:
          _0x23943c.aniName = " Beach Battle Kraken!";
          break;
      }
      break;
    case 0x1:
      _0x23943c.aniName = "Golden Kraken!";
      break;
    case 0x2:
      _0x23943c.aniName = "Chromatic Kraken!";
      break;
    case 0xc9:
      _0x23943c.aniName = "Squishy Kraken!";
      break;
    case 0xca:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x23943c.aniName = "Giant Squid";
          break;
        case 0x1:
          _0x23943c.aniName = "Hydrothoth Kraken";
          break;
      }
      break;
    case 0xcc:
      _0x23943c.aniName = "Cthulhu Kraken!";
      break;
    case 0xdc:
      _0x23943c.aniName = "Dr. Brainiopod";
      break;
    case 0xde:
      _0x23943c.aniName = "Gingerbread Kraken";
      break;
  }
  _0x23943c.aniCol = "#FF9000";
  _0x23943c.skinName = this.getSkinName();
  _0x23943c.upgradeText = "UPGRADED to THE " + _0x23943c.aniName + "!\n Terrorize the oceans, and be feared by all!\n (Release W to use whirlpool ability!)";
  _0x23943c.aniCol = "#64a034";
  return _0x23943c;
};
_0x193273.prototype.getSkinName = function () {
  return this.getSpeciesPath("kraken") + "/kraken";
};
_0x193273.prototype.getSubSpecies = function () {
  return this.animalSpecies === 0xca || this.animalSpecies === 0x0 ? "/" + this.animalSubSpecies : '';
};
_0x193273.prototype.getSpeciesPath = function (_0x2ba267) {
  return "ocean/" + _0x2ba267 + "/" + this.animalSpecies + this.getSubSpecies();
};
_0x193273.prototype.getAbilityInfo = function (_0x109ab7) {
  var _0x3c0e2d = {
    abilName: "Whirlpool",
    abilImg: "abilities/Whirlpool.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x3c0e2d;
};
_0x193273.prototype.diveColor1 = "#64a034";
_0x193273.prototype.diveColor2 = "#598b30";
_0x193273.prototype.onAnimalSpeciesSet = function () {
  switch (this.animalSpecies) {
    case 0x1:
      this.diveColor1 = "#dbb300";
      this.diveColor2 = "#bf9d04";
      break;
    case 0x2:
      this.diveColor1 = "#79c9a8";
      this.diveColor2 = "#6fad9f";
      break;
  }
};
function _0x193273() {
  _0x193273.superClass.call(this, 0x2);
}
window.Kraken = _0x193273;
_0x2b451a.setCustomClassForGameObjType(_0x193273, 0x2, _0x301ddb);
var _0x53abbc = _0xf4bb63;
_0x2b06e2.prototype = Object.create(_0x53abbc.prototype);
_0x2b06e2.prototype.constructor = _0x2b06e2;
_0x2b06e2.superClass = _0x53abbc;
_0x2b06e2.prototype.animalInfo = function () {
  var _0x4d29c4 = {};
  switch (this.animalSubSpecies) {
    case 0x0:
      _0x4d29c4.aniName = "Bluewhale!";
      break;
    case 0x1:
      _0x4d29c4.aniName = "Golden Whale!";
      break;
    case 0x2:
      _0x4d29c4.aniName = "Albino Whale!";
      break;
    case 0xc9:
      _0x4d29c4.aniName = "Mermaid Whale!";
      break;
    case 0xca:
      _0x4d29c4.aniName = "Whale Boat";
      break;
    case 0xcb:
      _0x4d29c4.aniName = "Ancient Island Monster";
      break;
    case 0xdc:
      _0x4d29c4.aniName = "Sailor Whale";
      break;
    case 0xdf:
      _0x4d29c4.aniName = "Valentine Whale";
      break;
    case 0x7e7:
      _0x4d29c4.aniName = "Molten Frost Whale";
      break;
  }
  _0x4d29c4.skinName = this.getSkinName();
  _0x4d29c4.aniDesc = '';
  _0x4d29c4.upgradeText = "UPGRADED to " + _0x4d29c4.aniName + "\n Smash with your powerful tail!";
  _0x4d29c4.aniCol = "#945A99";
  return _0x4d29c4;
};
_0x2b06e2.prototype.getSkinName = function () {
  return this.getSpeciesPath() + "/bluewhale" + (this.specType == 0x0 ? '' : this.specType);
};
_0x2b06e2.prototype.getSpeciesPath = function () {
  return "ocean/bluewhale/" + this.animalSpecies + "/" + this.animalSubSpecies;
};
_0x2b06e2.prototype.getAbilityInfo = function (_0x2cd348) {
  var _0xa30114 = {
    abilName: "Tail Slap",
    abilImg: "abilities/TailHit.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0xa30114;
};
function _0x2b06e2() {
  _0x2b06e2.superClass.call(this, 0x2);
}
window.Bluewhale = _0x2b06e2;
_0x2b451a.setCustomClassForGameObjType(_0x2b06e2, 0x2, _0x351d94);
var _0x53abbc = _0xf4bb63;
_0x10e88d.prototype = Object.create(_0x53abbc.prototype);
_0x10e88d.prototype.constructor = _0x10e88d;
_0x10e88d.superClass = _0x53abbc;
_0x10e88d.prototype.animalInfo = function () {
  var _0x236fa5 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x236fa5.aniName = "King Crab!";
      break;
    case 0x1:
      _0x236fa5.aniName = "Golden Crab!";
      break;
    case 0x2:
      _0x236fa5.aniName = "Amethyst Crab!";
      break;
    case 0xca:
      _0x236fa5.aniName = "Abyssal King Crab";
      break;
    case 0xcc:
      _0x236fa5.aniName = "Plasma-core King Crab!";
      break;
    case 0xdc:
      _0x236fa5.aniName = "Star Crusher Crab";
      break;
  }
  _0x236fa5.skinName = "ocean/kingcrab/" + this.animalSpecies + "/kingcrab";
  _0x236fa5.aniDesc = '';
  _0x236fa5.upgradeText = "UPGRADED to " + _0x236fa5.aniName + "!\n Use your powerful arms to smack your prey!";
  _0x236fa5.aniCol = "#971f0e";
  return _0x236fa5;
};
_0x10e88d.prototype.getSkinImageObj = function (_0x49684c) {
  var _0x1c6d59 = this.animalSpecies === 0x1 || this.animalSpecies === 0x2 || this.animalSpecies === 0xcc ? 0x1 : 0x2;
  var _0x5689a4 = "./assets/s/" + _0x1c6d59 + "/" + _0x49684c;
  if (this.skinThemeID > 0x0) {
    _0x5689a4 = "./assets/t/" + this.skinThemeID + "/" + _0x49684c;
  }
  return _0x3df4ce(_0x5689a4, function (_0x44d9f0) {
    console.log(_0x44d9f0.src);
  });
};
_0x10e88d.prototype.getAbilityInfo = function (_0x7853fa) {
  var _0x37ef5d = {
    abilName: "Arm Smash",
    abilImg: "abilities/ArmSmash.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x37ef5d;
};
_0x10e88d.prototype.getSkinName = function () {
  return "ocean/kingcrab/" + this.animalSpecies + "/kingcrab";
};
function _0x10e88d() {
  _0x10e88d.superClass.call(this, 0x2);
}
window.KingCrab = _0x10e88d;
_0x2b451a.setCustomClassForGameObjType(_0x10e88d, 0x2, _0x3db2bf);
var _0x53abbc = _0xf4bb63;
_0x4c6e6a.prototype = Object.create(_0x53abbc.prototype);
_0x4c6e6a.prototype.constructor = _0x4c6e6a;
_0x4c6e6a.superClass = _0x53abbc;
_0x4c6e6a.prototype.animalInfo = function () {
  var _0x5e212f = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x5e212f.aniName = "Killerwhale!";
      break;
    case 0x1:
      _0x5e212f.aniName = "Golden Orca!";
      break;
    case 0x2:
      _0x5e212f.aniName = "Albino Orca!";
      break;
    case 0xc9:
      _0x5e212f.aniName = "Lifeguard Orca!";
      break;
    case 0xca:
      _0x5e212f.aniName = "Sea Angel Orca";
      break;
  }
  _0x5e212f.skinName = this.getSkinName();
  _0x5e212f.aniDesc = '';
  _0x5e212f.upgradeText = "UPGRADED to " + _0x5e212f.aniName + "\nWhales blow out water when diving! (And sometimes other loot!)";
  _0x5e212f.aniCol = "#141414";
  return _0x5e212f;
};
_0x4c6e6a.prototype.getAbilityInfo = function (_0x2d0be9) {
  var _0x24b92c = {
    abilName: "Cause Wave",
    abilImg: "abilities/Wave.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x24b92c;
};
_0x4c6e6a.prototype.getSkinName = function () {
  let _0x1f72a6 = this.getSpeciesPath() + "/killerwhale";
  _0x1f72a6 += this.specType == 0x0 ? '' : 0x1;
  return _0x1f72a6;
};
_0x4c6e6a.prototype.getSpeciesPath = function () {
  return "ocean/killerwhale/" + this.animalSpecies + this.getSubSpecies();
};
_0x4c6e6a.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x4c6e6a() {
  _0x4c6e6a.superClass.call(this, 0x2);
}
window.Killerwhale = _0x4c6e6a;
_0x2b451a.setCustomClassForGameObjType(_0x4c6e6a, 0x2, _0x267cc6);
var _0x53abbc = _0xf4bb63;
_0x103ae3.prototype = Object.create(_0x53abbc.prototype);
_0x103ae3.prototype.constructor = _0x103ae3;
_0x103ae3.superClass = _0x53abbc;
_0x103ae3.prototype.animalInfo = function () {
  var _0x438340 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x438340.aniName = "Jellyfish";
      break;
    case 0xc9:
      _0x438340.aniName = "Seafoam Jellyfish";
      break;
    case 0xca:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x438340.aniName = "Disco Jellyfish";
          break;
        case 0x1:
          _0x438340.aniName = "Twisted Horror";
      }
      break;
  }
  _0x438340.skinName = this.getSkinName();
  _0x438340.aniDesc = '';
  _0x438340.upgradeText = "UPGRADED to " + _0x438340.aniName + "!\n A slowly-turning animal that can grow quite large!";
  _0x438340.aniCol = "#FDB9BA";
  return _0x438340;
};
_0x103ae3.prototype.getAbilityInfo = function (_0x228c19) {
  var _0x522f54 = {
    abilName: "Touch prey to sting!",
    abilImg: "abilities/Sting.svg",
    isPassive: true,
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x522f54;
};
_0x103ae3.prototype.getSkinName = function () {
  let _0x480c2a = this.getSpeciesPath() + "/jellyfish";
  return _0x480c2a;
};
_0x103ae3.prototype.getSpeciesPath = function () {
  return "ocean/jellyfish/" + this.animalSpecies + this.getSubSpecies();
};
_0x103ae3.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return this.animalSpecies === 0xca ? "/" + this.animalSubSpecies : '';
};
_0x103ae3.prototype.getSkinImageObj = function (_0xb4886d) {
  var _0x1574ea = this.animalSpecies === 0xc9 ? 0x1 : this.mopeSeasonID;
  return this.getSkinImageObjForSeason(_0xb4886d, _0x1574ea);
};
_0x103ae3.prototype.basicDrawSkinImg = function () {
  this.setSkinScale();
  var _0x3182a1 = -0x0;
  var _0x3d9a8b = -0.4;
  var _0x1bcc56 = 0x1;
  if (this.animalSpecies == 0xc9) {
    _0x3d9a8b = -0.3;
    _0x1bcc56 = 1.05;
  }
  var _0x176df6 = this.skinScale * _0x1bcc56;
  var _0x399a1c = this.skinRad;
  console.log(this.animalSubSpecies + " : " + _0x176df6);
  if (this.loadedSkinImg) {
    _0x3b8ba2.drawImage(this.loadedSkinImg, -_0x399a1c * _0x176df6 + _0x399a1c * _0x3182a1, -_0x399a1c * _0x176df6 + _0x399a1c * _0x3d9a8b, 0x2 * _0x399a1c * _0x176df6, 0x2 * _0x399a1c * (_0x176df6 * 1.2));
  }
  if (this.animalSpecies == 0xca) {
    if (!(_0x4bda0b == 0x2) && !_0x11da90) {
      var _0x223c50 = Math.trunc(_0x1f4c9e / 0x1f4) % 0x2;
      if (_0x223c50 == 0x1) {
        var _0x264822 = this.getSkinImageObj("skins/" + this.getSkinName() + "_shine.png");
        if (_0x264822) {
          _0x3b8ba2.drawImage(_0x264822, -_0x399a1c * _0x176df6 + _0x399a1c * _0x3182a1, -_0x399a1c * _0x176df6 + _0x399a1c * _0x3d9a8b, 0x2 * _0x399a1c * _0x176df6, 0x2 * _0x399a1c * (_0x176df6 * 1.2));
        }
      }
    }
  }
};
function _0x103ae3() {
  _0x103ae3.superClass.call(this, 0x2);
}
window.Jellyfish = _0x103ae3;
_0x2b451a.setCustomClassForGameObjType(_0x103ae3, 0x2, _0x16cf7a);
var _0x53abbc = _0xf4bb63;
_0x23ccf3.prototype = Object.create(_0x53abbc.prototype);
_0x23ccf3.prototype.constructor = _0x23ccf3;
_0x23ccf3.superClass = _0x53abbc;
_0x23ccf3.prototype.animalInfo = function () {
  var _0x8e2388 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x8e2388.aniName = "Stingray!";
      break;
    case 0x64:
      _0x8e2388.aniName = "Phantom Ray!";
      break;
    case 0xc9:
      _0x8e2388.aniName = "Chocolate Ray!";
      break;
    case 0xca:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x8e2388.aniName = "Ether Stingray";
          break;
        case 0x1:
          _0x8e2388.aniName = "Pancake Stingray";
      }
      break;
  }
  _0x8e2388.skinName = this.getSkinName();
  _0x8e2388.upgradeText = "UPGRADED to " + _0x8e2388.aniName + "\n Use electic shock (Release W key!) to shock animals! \n(Takes time to recharge)";
  _0x8e2388.aniCol = "#164336";
  return _0x8e2388;
};
_0x23ccf3.prototype.getAbilityInfo = function (_0x23a4bb) {
  var _0x405d56 = {
    abilName: "Shock!",
    abilImg: "abilities/Shock.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x405d56;
};
_0x23ccf3.prototype.getSkinName = function () {
  let _0x12dd96 = this.getSpeciesPath() + "/stingray";
  return _0x12dd96;
};
_0x23ccf3.prototype.getSpeciesPath = function () {
  return "ocean/stingray/" + this.animalSpecies + this.getSubSpecies();
};
_0x23ccf3.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return this.animalSpecies === 0xca ? "/" + this.animalSubSpecies : '';
};
_0x23ccf3.prototype.drawUnderSkinImg = function () {
  var _0x580b40 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/tail.png");
  if (_0x580b40) {
    _0x3b8ba2.save();
    var _0xf9aa9e = this.rad - this.outlineW;
    _0x3b8ba2.drawImage(_0x580b40, -_0xf9aa9e * 1.4705882352941178, -_0xf9aa9e * 1.245 * 1.4705882352941178, 0x2 * _0xf9aa9e * 1.4705882352941178, 0x2 * _0xf9aa9e * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
  if (this.animalSpecies == 0x64) {
    var _0x39eb22 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x89282c = !(_0x4bda0b == 0x2 || _0x11da90) ? _0x7b826(_0x39eb22, 0x5, 0x1, 0x1) : this.birdNoAnimationFlyWingAngle;
    var _0x580b40 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/tail2.png");
    if (_0x580b40) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = Math.max(0x0, _0x89282c);
      var _0xf9aa9e = this.rad - this.outlineW;
      _0x3b8ba2.drawImage(_0x580b40, -_0xf9aa9e * 1.4705882352941178, -_0xf9aa9e * 1.245 * 1.4705882352941178, 0x2 * _0xf9aa9e * 1.4705882352941178, 0x2 * _0xf9aa9e * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
    return;
  }
  var _0x580b40 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/leftwing.png");
  if (_0x580b40) {
    _0x3b8ba2.save();
    var _0x83acf9 = 0x1;
    var _0xf9aa9e = this.rad - this.outlineW;
    _0x3b8ba2.drawImage(_0x580b40, -_0xf9aa9e * 1.2 * 1.4705882352941178, -_0xf9aa9e * 1.4705882352941178, 0x2 * _0xf9aa9e * 1.4705882352941178, 0x2 * _0xf9aa9e * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
  var _0x580b40 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/rightwing.png");
  if (_0x580b40) {
    _0x3b8ba2.save();
    var _0x83acf9 = 0x1;
    var _0xf9aa9e = this.rad - this.outlineW;
    _0x3b8ba2.drawImage(_0x580b40, -_0xf9aa9e * 0.8 * 1.4705882352941178, -_0xf9aa9e * 1.4705882352941178, 0x2 * _0xf9aa9e * 1.4705882352941178, 0x2 * _0xf9aa9e * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
};
function _0x23ccf3() {
  _0x23ccf3.superClass.call(this, 0x2);
}
window.Stingray = _0x23ccf3;
_0x2b451a.setCustomClassForGameObjType(_0x23ccf3, 0x2, _0x1bc4f4);
var _0x53abbc = _0xf4bb63;
_0x41ece8.prototype = Object.create(_0x53abbc.prototype);
_0x41ece8.prototype.constructor = _0x41ece8;
_0x41ece8.superClass = _0x53abbc;
_0x41ece8.prototype.animalInfo = function () {
  var _0x146a4e = {
    "aniName": "Puffer Fish"
  };
  switch (this.animalSpecies) {
    case 0x2:
      _0x146a4e.aniName = "Demon Fish";
      break;
    case 0x64:
      _0x146a4e.aniName = "Puffermace";
      break;
    case 0xc9:
      _0x146a4e.aniName = "Omniball Puffer";
      break;
    case 0xca:
      _0x146a4e.aniName = "Balloon Pufferfish";
      break;
  }
  _0x146a4e.skinName = this.getSkinName();
  _0x146a4e.aniDesc = '';
  _0x146a4e.upgradeText = "UPGRADED to Puffer Fish!\n(Hold W to inflate - become spiky, and dangerous to touch!)";
  _0x146a4e.aniCol = "#94a3a9";
  return _0x146a4e;
};
_0x41ece8.prototype.getAbilityInfo = function (_0x520de5) {
  var _0x36372e = {
    abilName: "Puff!",
    abilImg: "abilities/Puff.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x36372e;
};
_0x41ece8.prototype.getSkinName = function () {
  let _0x3c8132 = this.getSpeciesPath() + "/pufferfish";
  if (this.flag_usingAbility) {
    _0x3c8132 += "2";
  }
  return _0x3c8132;
};
_0x41ece8.prototype.getSpeciesPath = function () {
  return "ocean/pufferfish/" + this.animalSpecies + this.getSubSpecies();
};
_0x41ece8.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x41ece8.prototype.drawUnderSkinImg = function () {
  var _0x1b160b = '';
  if (this.animalSpecies == 0x64) {
    _0x1b160b = "/100";
    var _0x51cf92 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/tail.png");
    if (_0x51cf92) {
      _0x3b8ba2.save();
      var _0x3012de = this.rad - this.outlineW;
      _0x3b8ba2.drawImage(_0x51cf92, -_0x3012de * 1.4705882352941178, -_0x3012de * 1.6 * 1.4705882352941178, 0x2 * _0x3012de * 1.4705882352941178, 0x2 * _0x3012de * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
  }
};
function _0x41ece8() {
  _0x41ece8.superClass.call(this, 0x2);
}
window.PufferFish = _0x41ece8;
_0x2b451a.setCustomClassForGameObjType(_0x41ece8, 0x2, _0x3446ed);
var _0x53abbc = _0xf4bb63;
_0x38f9a9.prototype = Object.create(_0x53abbc.prototype);
_0x38f9a9.prototype.constructor = _0x38f9a9;
_0x38f9a9.superClass = _0x53abbc;
_0x38f9a9.prototype.animalInfo = function () {
  var _0x5737e3 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x5737e3.aniName = "Squid";
      break;
    case 0xc8:
      _0x5737e3.aniName = "Cuttle Fish";
      break;
    case 0xc9:
      _0x5737e3.aniName = "Seacoast Squid";
      break;
    case 0xca:
      _0x5737e3.aniName = "Psychedelic Squid";
      break;
    case 0xcc:
      _0x5737e3.aniName = "Void Scuttling Squid";
      break;
  }
  _0x5737e3.skinName = this.getSkinName();
  _0x5737e3.aniDesc = '';
  _0x5737e3.upgradeText = "UPGRADED to " + _0x5737e3.aniName + "!\n " + _0x5737e3.aniName + " can use INK when injured (press W!) \n+ you can hide in plankton bushes!";
  _0x5737e3.aniCol = "#40dda4";
  return _0x5737e3;
};
_0x38f9a9.prototype.getSkinName = function () {
  let _0x28e300 = this.getSpeciesPath() + "/squid";
  _0x28e300 += this.specType == 0x0 ? '' : 0x1;
  return _0x28e300;
};
_0x38f9a9.prototype.getSpeciesPath = function () {
  return "ocean/squid/" + this.animalSpecies + this.getSubSpecies();
};
_0x38f9a9.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x38f9a9.prototype.getAbilityInfo = function (_0x41bb72) {
  var _0x26bedb = {
    abilName: "INK!",
    abilImg: "abilities/Ink.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x26bedb;
};
_0x38f9a9.prototype.drawUnderSkinImg = function () {
  if (this.animalSpecies == 0x0 || this.animalSpecies == 0xc9) {
    var _0x51b5a3 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/cape.png");
    if (_0x51b5a3) {
      _0x3b8ba2.save();
      var _0x5c60ef = this.rad - this.outlineW;
      _0x3b8ba2.drawImage(_0x51b5a3, -_0x5c60ef * 1.4705882352941178, -_0x5c60ef * 1.1 * 1.4705882352941178, 0x2 * _0x5c60ef * 1.4705882352941178, 0x2 * _0x5c60ef * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
  }
};
function _0x38f9a9() {
  _0x38f9a9.superClass.call(this, 0x2);
}
window.Squid = _0x38f9a9;
_0x2b451a.setCustomClassForGameObjType(_0x38f9a9, 0x2, _0x50e755);
var _0x53abbc = _0xf4bb63;
_0x3a4e37.prototype = Object.create(_0x53abbc.prototype);
_0x3a4e37.prototype.constructor = _0x3a4e37;
_0x3a4e37.superClass = _0x53abbc;
_0x3a4e37.prototype.updateZ = function () {
  if (this.flag_underWater) {
    this.z = -0x97;
  } else {
    this.z = this.rad;
  }
};
_0x3a4e37.prototype.animalInfo = function () {
  var _0x542e68 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x542e68.aniName = "Shark!";
      break;
    case 0x1:
      _0x542e68.aniName = "Tiger Shark!";
      break;
    case 0x2:
      _0x542e68.aniName = "Hammarhead Shark!";
      break;
    case 0xc9:
      _0x542e68.aniName = "Surfboard Chomper!";
      break;
  }
  _0x542e68.skinName = this.getSkinName();
  _0x542e68.upgradeText = "UPGRADED to " + _0x542e68.aniName + "\n A vicious predator of the oceans!";
  _0x542e68.aniCol = "#999fc6";
  return _0x542e68;
};
_0x3a4e37.prototype.getAbilityInfo = function (_0x5269da) {
  var _0x596d21 = {
    abilName: "Jaws Bite",
    abilImg: "abilities/Bite.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x596d21;
};
_0x3a4e37.prototype.getSkinName = function () {
  let _0x40d01c = this.getSpeciesPath() + "/shark";
  return _0x40d01c;
};
_0x3a4e37.prototype.getSpeciesPath = function () {
  return "ocean/shark/" + this.animalSpecies + this.getSubSpecies();
};
_0x3a4e37.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x3a4e37.prototype.getSkinImageObj = function (_0x5f8016) {
  var _0x4b90a5 = this.animalSpecies === 0x1 || this.animalSpecies === 0x2 || this.animalSpecies === 0xc9 ? 0x1 : this.mopeSeasonID;
  return this.getSkinImageObjForSeason(_0x5f8016, _0x4b90a5);
};
_0x3a4e37.prototype.drawUnderSkinImg = function () {
  if (this.flag_underWater) {
    return;
  }
  var _0x4ab62d = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/tail.png");
  if (_0x4ab62d) {
    _0x3b8ba2.save();
    var _0x1ecfcc = this.rad - this.outlineW;
    _0x3b8ba2.drawImage(_0x4ab62d, -_0x1ecfcc * 1.4705882352941178, -_0x1ecfcc * 1.33 * 1.4705882352941178, 0x2 * _0x1ecfcc * 1.4705882352941178, 0x2 * _0x1ecfcc * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
};
function _0x3a4e37() {
  _0x3a4e37.superClass.call(this, 0x2);
}
window.Shark = _0x3a4e37;
_0x2b451a.setCustomClassForGameObjType(_0x3a4e37, 0x2, _0x4ebe0d);
var _0x53abbc = _0xf4bb63;
_0x46de2c.prototype = Object.create(_0x53abbc.prototype);
_0x46de2c.prototype.constructor = _0x46de2c;
_0x46de2c.superClass = _0x53abbc;
_0x46de2c.prototype.animalInfo = function () {
  var _0x26dd10 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x26dd10.aniName = "Turtle!";
      break;
    case 0xc8:
      _0x26dd10.aniName = "Leather Back Turtle!";
      break;
    case 0xc9:
      _0x26dd10.aniName = "Kiwi Turtle!";
      break;
    case 0xca:
      _0x26dd10.aniName = "Molten Lava Turtle";
      break;
  }
  _0x26dd10.skinName = this.getSkinName();
  _0x26dd10.aniDesc = '';
  _0x26dd10.upgradeText = "UPGRADED to " + _0x26dd10.aniName + "\n Lives well on land & water! (On land, Press W to go into your shell!)";
  _0x26dd10.aniCol = "#502E1A";
  return _0x26dd10;
};
_0x46de2c.prototype.getAbilityInfo = function (_0x507803) {
  var _0x260727 = {
    abilName: "Hide in Shell!",
    abilImg: "abilities/Hide.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x260727;
};
_0x46de2c.prototype.getSkinName = function () {
  let _0x1f9e95 = this.getSpeciesPath() + "/turtle";
  if (this.flag_usingAbility) {
    _0x1f9e95 += "2";
  } else {
    _0x1f9e95 += this.specType == 0x0 ? '' : 0x1;
  }
  return _0x1f9e95;
};
_0x46de2c.prototype.getSpeciesPath = function () {
  return "ocean/turtle/" + this.animalSpecies + this.getSubSpecies();
};
_0x46de2c.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x46de2c.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    if (this.specType == 0x1) {
      var _0x5673a2 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/head.png");
      if (_0x5673a2) {
        _0x3b8ba2.save();
        var _0x2b540b = this.rad - this.outlineW;
        _0x3b8ba2.drawImage(_0x5673a2, -_0x2b540b * 1.4705882352941178, -_0x2b540b * 0.88 * 1.4705882352941178, 0x2 * _0x2b540b * 1.4705882352941178, 0x2 * _0x2b540b * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
    }
  }
};
function _0x46de2c() {
  _0x46de2c.superClass.call(this, 0x2);
}
window.Turtle = _0x46de2c;
_0x2b451a.setCustomClassForGameObjType(_0x46de2c, 0x2, _0x1473db);
var _0x53abbc = _0xf4bb63;
_0x3dd10b.prototype = Object.create(_0x53abbc.prototype);
_0x3dd10b.prototype.constructor = _0x3dd10b;
_0x3dd10b.superClass = _0x53abbc;
_0x3dd10b.prototype.getAniRadius = function (_0x580c54) {
  if (this.flag_usingDiveAbility) {
    return _0x580c54 * 0.7;
  }
  return _0x580c54;
};
_0x3dd10b.prototype.animalInfo = function () {
  var _0x1447f2 = {};
  switch (this.animalSubSpecies) {
    case 0x0:
      _0x1447f2.aniName = "Swordfish!";
      break;
    case 0xc9:
      _0x1447f2.aniName = "Surfboardfish";
      break;
    case 0xca:
      _0x1447f2.aniName = "Rocket Swordfish";
      break;
    case 0xcc:
      _0x1447f2.aniName = "Chainsaw Fish";
    case 0x7e7:
      _0x1447f2.aniName = "Soda Fish";
      break;
  }
  _0x1447f2.skinName = this.getSkinName();
  _0x1447f2.upgradeText = "UPGRADED to " + _0x1447f2.aniName + "\n (Press W to rush with your sharp nose!)";
  _0x1447f2.aniCol = "#689CD7";
  return _0x1447f2;
};
_0x3dd10b.prototype.getAbilityInfo = function (_0x11fd97) {
  var _0x5d86f5 = {
    abilName: "Charge!",
    abilImg: "abilities/Charge.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x5d86f5;
};
_0x3dd10b.prototype.getSkinName = function () {
  let _0x394789 = this.getSpeciesPath() + "/swordfish";
  if (this.flag_usingAbility) {
    _0x394789 += "2";
  } else {
    _0x394789 += this.specType == 0x0 ? '' : 0x1;
  }
  return _0x394789;
};
_0x3dd10b.prototype.getSpeciesPath = function () {
  return "ocean/swordfish/" + this.animalSpecies + "/" + this.animalSubSpecies;
};
_0x3dd10b.prototype.drawSkinCustomization = function () {};
_0x3dd10b.prototype.basicDrawSkinImg = function () {
  this.setSkinScale();
  var _0x4f006e = this.skinScale;
  var _0x2b0e8f = this.rad;
  var _0x14c85a = -0.3;
  if (this.loadedSkinImg) {
    _0x3b8ba2.drawImage(this.loadedSkinImg, -_0x2b0e8f * _0x4f006e + _0x2b0e8f * 0x0, -_0x2b0e8f * _0x4f006e + _0x2b0e8f * _0x14c85a, 0x2 * _0x2b0e8f * _0x4f006e, 0x2 * _0x2b0e8f * (_0x4f006e * 1.2));
  }
};
_0x3dd10b.prototype.getSkinImageObj = function (_0x212020) {
  var _0x4dc0d2 = this.animalSpecies === 0xc9 ? 0x1 : this.mopeSeasonID;
  return this.getSkinImageObjForSeason(_0x212020, _0x4dc0d2);
};
function _0x3dd10b() {
  _0x3dd10b.superClass.call(this, 0x2);
}
window.Swordfish = _0x3dd10b;
_0x2b451a.setCustomClassForGameObjType(_0x3dd10b, 0x2, _0x5f4a90);
var _0x53abbc = _0xf4bb63;
_0x2dc07e.prototype = Object.create(_0x53abbc.prototype);
_0x2dc07e.prototype.constructor = _0x2dc07e;
_0x2dc07e.superClass = _0x53abbc;
_0x2dc07e.prototype.animalInfo = function () {
  var _0x31259e = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x31259e.aniName = "Crab!";
      break;
    case 0xc8:
      _0x31259e.aniName = "Metallic Crab!";
      break;
    case 0xc9:
      _0x31259e.aniName = "Coconut Crab!";
      break;
    case 0xcc:
      _0x31259e.aniName = "Dark Matter Crab!";
      break;
  }
  _0x31259e.skinName = this.getSkinName();
  _0x31259e.aniDesc = '';
  _0x31259e.upgradeText = "UPGRADED to " + _0x31259e.aniName + "\n Crabs can survive on dry land!\n (On land, Press W to go into your shell!)";
  _0x31259e.aniCol = "#bf2408";
  return _0x31259e;
};
_0x2dc07e.prototype.getAbilityInfo = function (_0x2d7a53) {
  var _0x10fe77 = {
    abilName: "Hide in Shell!",
    abilImg: "abilities/Hide.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x10fe77;
};
_0x2dc07e.prototype.getSkinName = function () {
  let _0x3fbd6d = this.getSpeciesPath() + "/crab";
  if (this.flag_usingAbility) {
    _0x3fbd6d += "2";
  } else {
    _0x3fbd6d += this.specType == 0x0 ? '' : 0x1;
  }
  return _0x3fbd6d;
};
_0x2dc07e.prototype.getSpeciesPath = function () {
  return "ocean/crab/" + this.animalSpecies + this.getSubSpecies();
};
_0x2dc07e.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x2dc07e.prototype.basicDrawSkinImg = function () {
  this.setSkinScale();
  var _0x5b603b = this.skinScale;
  var _0x18b5fb = this.skinRad;
  _0x3b8ba2.save();
  if (this.id > 0x0) {
    _0x3b8ba2.rotate(0x5a * (Math.PI / 0xb4));
  }
  if (this.loadedSkinImg) {
    _0x3b8ba2.drawImage(this.loadedSkinImg, -_0x18b5fb * _0x5b603b, -_0x18b5fb * _0x5b603b, 0x2 * _0x18b5fb * _0x5b603b, 0x2 * _0x18b5fb * _0x5b603b);
  } else {
    _0x3b8ba2.fillStyle = this.skinNotLoadedColor;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - this.outlineW), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
  }
  _0x3b8ba2.restore();
};
function _0x2dc07e() {
  _0x2dc07e.superClass.call(this, 0x2);
}
window.Crab = _0x2dc07e;
_0x2b451a.setCustomClassForGameObjType(_0x2dc07e, 0x2, _0x1515a4);
var _0x53abbc = _0xf4bb63;
_0x5ed2a4.prototype = Object.create(_0x53abbc.prototype);
_0x5ed2a4.prototype.constructor = _0x5ed2a4;
_0x5ed2a4.superClass = _0x53abbc;
_0x5ed2a4.prototype.animalInfo = function () {
  var _0x816319 = {
    aniName: "Snail",
    aniCol: "#FF9000",
    skinName: "ocean/snail/snail",
    upgradeText: "UPGRADED to Snail!\n Press W to hide in your shell!"
  };
  return _0x816319;
};
_0x5ed2a4.prototype.getSkinName = function () {
  return "ocean/snail/snail";
};
_0x5ed2a4.prototype.dir = 0x1;
_0x5ed2a4.prototype.snail_yOffset = 0.75;
_0x5ed2a4.prototype.wasUsingAbility = false;
_0x5ed2a4.prototype.animateHead = false;
_0x5ed2a4.prototype.animationIn = null;
_0x5ed2a4.prototype.animationOut = null;
_0x5ed2a4.prototype.offset = 0x0;
_0x5ed2a4.prototype.drawUnderSkinImg = function () {
  if (this.flag_usingAbility && !this.wasUsingAbility && this.animationIn == null) {
    this.wasUsingAbility = true;
    this.animationIn = new _0x1c8e57(this, 0x1, _0x1c8e57.arc);
    this.animationIn.keepLastFrame = true;
    this.animationIn.onFrameEntered = function (_0x4e0358) {
      if (!isNaN(_0x4e0358)) {
        if (this.forObj.offset < 0.35) {
          this.forObj.offset = 0.35 * _0x4e0358 * 0xa;
        }
      }
    };
    this.animationIn.onStop = function () {
      this.forObj.offset = 0.35;
      this.forObj.wasUsingAbility = true;
      this.forObj.animationIn = null;
    };
  } else if (!this.flag_usingAbility && this.wasUsingAbility && this.animationOut == null) {
    this.wasUsingAbility = true;
    this.animationOut = new _0x1c8e57(this, 0x3, _0x1c8e57.halfWave);
    this.animationOut.keepLastFrame = true;
    this.animationOut.onFrameEntered = function (_0x4019db) {
      if (!isNaN(_0x4019db)) {
        this.forObj.offset = 0.35 * (0x1 - _0x4019db);
      }
    };
    this.animationOut.onStop = function () {
      this.forObj.offset = 0x0;
      this.forObj.wasUsingAbility = false;
      this.forObj.animationOut = null;
    };
  }
  if (this.animationIn) {
    this.animationIn.run();
  }
  if (this.animationOut) {
    this.animationOut.run();
  }
  if (this.animationIn == null && this.animationOut == null && !this.wasUsingAbility) {
    this.offset = 0x0;
  }
  var _0x4625e9 = 0.75 + this.offset;
  var _0x4ad22e = this.getSkinImageObj("skins/ocean/snail/snail_head.png");
  if (_0x4ad22e) {
    _0x3b8ba2.save();
    var _0x418402 = this.rad - this.outlineW;
    _0x3b8ba2.drawImage(_0x4ad22e, -_0x418402 * 1.4705882352941178, -_0x418402 * _0x4625e9 * 1.4705882352941178, 0x2 * _0x418402 * 1.4705882352941178, 0x2 * _0x418402 * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
};
function _0x5ed2a4() {
  _0x5ed2a4.superClass.call(this, 0x2);
}
window.Snail = _0x5ed2a4;
_0x2b451a.setCustomClassForGameObjType(_0x5ed2a4, 0x2, _0x357f05);
var _0x53abbc = _0xf4bb63;
_0x16d21f.prototype = Object.create(_0x53abbc.prototype);
_0x16d21f.prototype.constructor = _0x16d21f;
_0x16d21f.superClass = _0x53abbc;
_0x16d21f.prototype.updateZ = function () {
  this.z = 0x186a0;
};
_0x16d21f.prototype.canUseTailslap = false;
_0x16d21f.prototype.tailState = 0x0;
_0x16d21f.prototype.lava = 0x64;
_0x16d21f.prototype.getSkinName = function () {
  var _0x33c052 = _0x11da90 || _0x4bda0b == 0x2 ? "kingdragon" : "kingdragon_body";
  return "volcano/kingdragon/" + this.animalSpecies + "/" + _0x33c052;
};
_0x16d21f.prototype.customUpdatedProperty = function (_0x4fed42, _0xcec8bc) {
  if (_0x4fed42 == 0x4b) {
    this.canUseTailslap = _0xcec8bc.readUInt8() == 0x1;
  } else if (_0x4fed42 == 0x4c) {
    this.tailState = _0xcec8bc.readUInt16() / 0x64;
  }
};
_0x16d21f.prototype.leftWingAnim = null;
_0x16d21f.prototype.flapAngleDiff = 0x3;
_0x16d21f.prototype.flapAngle = 0x3;
_0x16d21f.prototype.flapF = 0.1;
_0x16d21f.prototype.flapDur = 0x2;
_0x16d21f.prototype.sF = 0.02;
_0x16d21f.prototype.drawWings = function () {
  if (_0x4bda0b == 0x2 || _0x11da90) {
    return;
  }
  if (this.leftWingAnim == null) {
    this.leftWingAnim = new _0x1c8e57(this, this.flapDur, _0x1c8e57.wave);
    this.leftWingAnim.keepLastFrame = true;
    this.leftWingAnim.loop = true;
    this.leftWingAnim.onFrameEntered = function (_0x1c6e29) {
      this.forObj.frame1 = _0x1c6e29;
    };
  }
  if (this.leftWingAnim != null) {
    this.leftWingAnim.run();
  }
  var _0x5b41d9 = this.rad - this.outlineW;
  var _0x28b6df = this.frame1 * this.sF * _0x5b41d9;
  var _0x41fbab = -(-this.flapF + this.frame1);
  var _0x3fb64a = _0x41fbab * (this.flapAngle * (Math.PI / 0xb4));
  var _0x36ca6a = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/left_wing.png");
  var _0x2f47a3 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/right_wing.png");
  if (_0x36ca6a && _0x2f47a3) {
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.flapAngleDiff * (Math.PI / 0xb4) + _0x3fb64a);
    _0x3b8ba2.drawImage(_0x36ca6a, -_0x5b41d9 * 1.4705882352941178, -_0x5b41d9 * 1.4705882352941178 + _0x28b6df, 0x2 * _0x5b41d9 * 1.4705882352941178, 0x2 * _0x5b41d9 * 1.4705882352941178 + _0x28b6df * 1.5);
    _0x3b8ba2.restore();
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(-(this.flapAngleDiff * (Math.PI / 0xb4) + _0x3fb64a));
    _0x3b8ba2.drawImage(_0x2f47a3, -_0x5b41d9 * 1.4705882352941178, -_0x5b41d9 * 1.4705882352941178 + _0x28b6df, 0x2 * _0x5b41d9 * 1.4705882352941178, 0x2 * _0x5b41d9 * 1.4705882352941178 + _0x28b6df * 1.5);
    _0x3b8ba2.restore();
    if (this.animalSpecies == 0x4) {
      let _0x7a0137 = _0x1d1686("kd", this.spawnTime);
      if (_0x7a0137 !== undefined && _0x7a0137 != null) {
        this.theFrame = _0x7a0137;
      }
      let _0x35ba5e = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = Math.max(0x0, _0x35ba5e);
      var _0x473ac7 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/left_wing_tips.png");
      var _0x15394c = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/right_wing_tips.png");
      if (_0x473ac7 && _0x15394c) {
        _0x3b8ba2.save();
        _0x3b8ba2.rotate(this.flapAngleDiff * (Math.PI / 0xb4) + _0x3fb64a);
        _0x3b8ba2.drawImage(_0x473ac7, -_0x5b41d9 * 1.4705882352941178, -_0x5b41d9 * 1.4705882352941178 + _0x28b6df, 0x2 * _0x5b41d9 * 1.4705882352941178, 0x2 * _0x5b41d9 * 1.4705882352941178 + _0x28b6df * 1.5);
        _0x3b8ba2.restore();
        _0x3b8ba2.save();
        _0x3b8ba2.rotate(-(this.flapAngleDiff * (Math.PI / 0xb4) + _0x3fb64a));
        _0x3b8ba2.drawImage(_0x15394c, -_0x5b41d9 * 1.4705882352941178, -_0x5b41d9 * 1.4705882352941178 + _0x28b6df, 0x2 * _0x5b41d9 * 1.4705882352941178, 0x2 * _0x5b41d9 * 1.4705882352941178 + _0x28b6df * 1.5);
        _0x3b8ba2.restore();
      }
      _0x3b8ba2.restore();
    }
  }
  var _0x5a6659 = this.lava;
  if (_0x5a6659 < 0x32) {
    var _0x40e5ff = _0x5a6659 / 0x32;
    var _0x1e88d4 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/left_wing1.png");
    var _0x467a2b = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/right_wing2.png");
    if (_0x1e88d4 && _0x467a2b) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0x1 - _0x40e5ff;
      _0x3b8ba2.save();
      _0x3b8ba2.rotate(this.flapAngleDiff * (Math.PI / 0xb4) + _0x3fb64a);
      _0x3b8ba2.drawImage(_0x1e88d4, -_0x5b41d9 * 1.4705882352941178, -_0x5b41d9 * 1.4705882352941178 + _0x28b6df, 0x2 * _0x5b41d9 * 1.4705882352941178, 0x2 * _0x5b41d9 * 1.4705882352941178 + _0x28b6df * 1.5);
      _0x3b8ba2.restore();
      _0x3b8ba2.save();
      _0x3b8ba2.rotate(-(this.flapAngleDiff * (Math.PI / 0xb4) + _0x3fb64a));
      _0x3b8ba2.drawImage(_0x467a2b, -_0x5b41d9 * 1.4705882352941178, -_0x5b41d9 * 1.4705882352941178 + _0x28b6df, 0x2 * _0x5b41d9 * 1.4705882352941178, 0x2 * _0x5b41d9 * 1.4705882352941178 + _0x28b6df * 1.5);
      _0x3b8ba2.restore();
      _0x3b8ba2.restore();
    }
  }
};
_0x16d21f.prototype.drawSkinCustomization = function () {
  if (this.flag_underWater) {
    return;
  }
  if (_0x4bda0b == 0x2 || _0x11da90) {
    return;
  }
  let _0x43b804 = _0x1d1686("kd", this.spawnTime);
  if (_0x43b804 !== undefined && _0x43b804 != null) {
    this.theFrame = _0x43b804;
  }
  let _0x3faca0 = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
  var _0x1d95b3 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/nostrils.png");
  if (_0x1d95b3) {
    _0x3b8ba2.save();
    var _0x511fe8 = this.lava;
    var _0x5d2fb6 = _0x511fe8 / 0x64;
    _0x3b8ba2.globalAlpha = Math.max(0x0, _0x3faca0) * _0x5d2fb6;
    var _0x48b178 = this.rad - this.outlineW;
    _0x3b8ba2.drawImage(_0x1d95b3, -_0x48b178 * 1.4705882352941178, -_0x48b178 * 1.4705882352941178, 0x2 * _0x48b178 * 1.4705882352941178, 0x2 * _0x48b178 * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
  if (!this.canUseTailslap) {
    var _0x2450d8 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/bone1.png");
    if (_0x2450d8) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0x1;
      var _0x48b178 = this.rad - this.outlineW;
      _0x3b8ba2.drawImage(_0x2450d8, -_0x48b178 * 1.4705882352941178, -_0x48b178 * 1.4705882352941178, 0x2 * _0x48b178 * 1.4705882352941178, 0x2 * _0x48b178 * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
    var _0x1ac153 = 0x0;
    if (this.tailState < 0xb && this.tailState > 0x5) {
      var _0x1e1b8e = this.tailState - 0x5;
      _0x1ac153 = _0x1e1b8e / 0x6;
    } else if (this.tailState <= 0x3) {
      _0x1ac153 = this.tailState / 0x3;
    }
    var _0x4f3f37 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/bone3.png");
    if (this.tailState < 0xb) {
      if (_0x4f3f37) {
        _0x3b8ba2.save();
        if (this.tailState > 0x5) {
          _0x3b8ba2.globalAlpha = 0x1 - _0x1ac153;
        } else {
          _0x3b8ba2.globalAlpha = 0x1;
        }
        var _0x48b178 = this.rad - this.outlineW;
        _0x3b8ba2.drawImage(_0x4f3f37, -_0x48b178 * 1.4705882352941178, -_0x48b178 * 1.4705882352941178, 0x2 * _0x48b178 * 1.4705882352941178, 0x2 * _0x48b178 * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
    }
    var _0x10ad71 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/bone2.png");
    if (this.tailState < 0x3) {
      if (_0x10ad71) {
        _0x3b8ba2.save();
        _0x3b8ba2.globalAlpha = 0x1 - _0x1ac153;
        var _0x48b178 = this.rad - this.outlineW;
        _0x3b8ba2.drawImage(_0x10ad71, -_0x48b178 * 1.4705882352941178, -_0x48b178 * 1.4705882352941178, 0x2 * _0x48b178 * 1.4705882352941178, 0x2 * _0x48b178 * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
    }
  } else {
    var _0x10ad71 = this.getSkinImageObj("skins/volcano/kingdragon/" + this.animalSpecies + "/bone2.png");
    if (_0x10ad71) {
      _0x3b8ba2.save();
      var _0x257667 = Math.max(0.3, _0x3faca0);
      _0x3b8ba2.globalAlpha = _0x257667;
      var _0x48b178 = this.rad - this.outlineW;
      _0x3b8ba2.drawImage(_0x10ad71, -_0x48b178 * 1.4705882352941178, -_0x48b178 * 1.4705882352941178, 0x2 * _0x48b178 * 1.4705882352941178, 0x2 * _0x48b178 * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
  }
  this.drawWings();
};
_0x16d21f.prototype.drawLowWaterDrop = function () {
  if (this.flag_underWater) {
    return;
  }
  if (this.flag_lowWat) {
    var _0x2e135a = 0.5 + 0.30000000000000004 * Math.sin(0x2 * Math.PI / 1.2 * (_0x1f4c9e / 0x3e8));
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = _0x2e135a;
    _0x3b8ba2.fillStyle = "#ff6000";
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, this.rad + 0x5, 0x5, 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.restore();
  }
};
_0x16d21f.prototype.animalInfo = function () {
  var _0x9cc4b8 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x9cc4b8.aniName = "King Dragon";
      break;
    case 0x1:
      _0x9cc4b8.aniName = "Golden King Dragon";
      break;
    case 0x2:
      _0x9cc4b8.aniName = "King Ripper";
      break;
    case 0x3:
      _0x9cc4b8.aniName = "King Stan";
      break;
    case 0x4:
      _0x9cc4b8.aniName = "King Shah";
      break;
    case 0x5:
      _0x9cc4b8.aniName = "Queen Scarlet";
      break;
    case 0x6:
      _0x9cc4b8.aniName = "Queen Celeste";
      break;
    case 0xc8:
      _0x9cc4b8.aniName = "Queen Flame";
      break;
    case 0xca:
      _0x9cc4b8.aniName = "King Graveyard";
      break;
  }
  _0x9cc4b8.aniCol = "#FF9000";
  _0x9cc4b8.skinName = this.getSkinName();
  _0x9cc4b8.upgradeText = "UPGRADED to " + _0x9cc4b8.aniName;
  _0x9cc4b8.upgradeText += "!\nYou got firestream that burns your victim alive! Watch your tail and slap them hard.";
  _0x9cc4b8.aniCol = "black";
  return _0x9cc4b8;
};
_0x16d21f.prototype.getAbilityInfo = function (_0x5b4ea8) {
  var _0x502f6a = {
    "abilName": "Firestream\n& Tail slap"
  };
  var _0x1d2116 = 0x0;
  switch (this.animalSpecies) {
    case 0x0:
      _0x1d2116 = 0x1;
      break;
    case 0x1:
      _0x1d2116 = 0x2;
      break;
    case 0x2:
      _0x1d2116 = 0x4;
      break;
    case 0x3:
      _0x1d2116 = 0x5;
      break;
    case 0x4:
      _0x1d2116 = 0x6;
      break;
    case 0x5:
      _0x1d2116 = 0x9;
      break;
    case 0x6:
      _0x1d2116 = 0x8;
      break;
  }
  _0x502f6a.speciesType = _0x1d2116;
  _0x502f6a.abilImg = "abilities/Fireball.svg";
  _0x502f6a.skinThemeID = this.skinThemeID;
  _0x502f6a.mopeSeasonID = this.mopeSeasonID;
  return _0x502f6a;
};
function _0x16d21f() {
  this.lava = 0x64;
  _0x16d21f.superClass.call(this, 0x2);
}
window.KingDragon = _0x16d21f;
_0x2b451a.setCustomClassForGameObjType(_0x16d21f, 0x2, _0x330b14);
var _0x53abbc = _0x472b99;
_0x21df1e.prototype = Object.create(_0x53abbc.prototype);
_0x21df1e.prototype.constructor = _0x21df1e;
_0x21df1e.superClass = _0x53abbc;
_0x21df1e.prototype.updateZ = function () {
  this.z = -0x8c;
};
_0x21df1e.prototype.shiverF = 0.015;
_0x21df1e.prototype.drawTranslate = function () {
  _0x3b8ba2.translate(this.x, this.y);
  _0x3b8ba2.save();
  if (this.eruption >= this.shakeStart && this.eruption <= this.shakeEnd + 0x1) {
    if (this.eruption >= this.shakeStart + 0x2) {
      this.shiverF = 0.025;
    } else {
      this.shiverF = 0.015;
    }
    var _0x40faed = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    var _0x74a64c = 0.2;
    var _0x3a6aee = this.rad * this.shiverF;
    this.shakeOffsetX = _0x3a6aee * Math.sin(0x2 * Math.PI / _0x74a64c * _0x40faed);
    var _0x74a64c = 0.3;
    var _0x3a6aee = this.rad * this.shiverF;
    this.shakeOffsetY = _0x3a6aee * Math.sin(0x2 * Math.PI / _0x74a64c * _0x40faed);
    _0x3b8ba2.translate(-this.shakeOffsetX, -this.shakeOffsetY);
  }
};
_0x21df1e.prototype.drawHealthBar = function () {
  _0x3b8ba2.restore();
};
_0x21df1e.prototype.customDraw2 = function (_0x318752) {
  _0x3b8ba2.save();
  var _0x5b0849 = '' + this.oType;
  if (this.curBiome == 0x2 || this.curBiome == 0x4) {
    _0x5b0849 = '' + this.oType + "_" + this.curBiome;
  }
  var _0xc0645d = "gameobj/" + this.oType + "/" + _0x5b0849 + ".png";
  var _0x427839 = this.getSkinImageObj(_0xc0645d);
  if (_0x427839) {
    var _0x44f274 = this.rad;
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x427839, -_0x44f274, -_0x44f274, 0x2 * _0x44f274, 0x2 * _0x44f274);
  }
  _0x3b8ba2.restore();
  var _0x20dc6e = 0x0;
  switch (Math.round(this.eruption)) {
    case 0x0:
    case 0x1:
      _0x20dc6e = 0x0;
      break;
    case 0x2:
      _0x20dc6e = 0x1;
      break;
    case 0x3:
      _0x20dc6e = 0x2;
      break;
    case 0x4:
    case 0x5:
    case 0x6:
    case 0x7:
      _0x20dc6e = 0x3;
      break;
    case 0x8:
      _0x20dc6e = 0x2;
      break;
    case 0x9:
      _0x20dc6e = 0x1;
      break;
    case 0xa:
    default:
      _0x20dc6e = 0x0;
      break;
  }
  if (_0x20dc6e < 0x3) {
    _0x3b8ba2.save();
    var _0x5b0849 = _0x20dc6e;
    var _0xc0645d = "gameobj/" + this.oType + "/" + _0x5b0849 + ".png";
    var _0x427839 = this.getSkinImageObj(_0xc0645d);
    if (_0x427839) {
      var _0x44f274 = this.rad;
      _0x3b8ba2.rotate(this.angle);
      _0x3b8ba2.drawImage(_0x427839, -_0x44f274, -_0x44f274, 0x2 * _0x44f274, 0x2 * _0x44f274);
    }
    _0x3b8ba2.restore();
  }
};
_0x21df1e.prototype.customDraw = function (_0x5b6442) {
  this.customDraw2(_0x5b6442);
};
_0x21df1e.prototype.readCustomData_onNewlyVisible = function (_0x1a6106) {
  _0x21df1e.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x1a6106);
  this.maxLvl = _0x1a6106.readUInt8() / 0xa;
  this.shakeStart = _0x1a6106.readUInt8() / 0xa;
  this.shakeEnd = _0x1a6106.readUInt8() / 0xa;
  this.spitLevelMin = this.maxLvl * 0.2;
  this.spitLevelMax = this.maxLvl * 0.8;
};
_0x21df1e.prototype.readUpdatedProperty = function (_0x292e0c, _0x12f84f) {
  if (_0x292e0c == 0x14) {
    this.eruption = _0x12f84f.readUInt16();
  }
};
function _0x21df1e() {
  _0x21df1e.superClass.call(this, 0x2a);
}
window.Volcano = _0x21df1e;
_0x2b451a.setCustomClassForGameObjType(_0x21df1e, 0x2a);
var _0x2995b5 = _0x4ae00c;
var _0x53abbc = _0x472b99;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x4ae00c.prototype.customDraw = function (_0x3eda31) {
  _0x3b8ba2.save();
  _0x3b8ba2.rotate(this.angle + 0xb4 * (Math.PI / 0xb4));
  _0x3b8ba2.globalAlpha = 0x1;
  var _0x34a3ab = this.getSkinImageObj("img/raindrop.png");
  if (_0x34a3ab) {
    var _0x13f85b = this.rad * 0x2;
    _0x3b8ba2.drawImage(_0x34a3ab, -_0x13f85b, -_0x13f85b, 0x2 * _0x13f85b, 0x2 * _0x13f85b);
  }
  _0x3b8ba2.restore();
};
_0x4ae00c.prototype.updateZ = function () {
  this.z = 0x2710 + this.rad;
};
function _0x4ae00c() {
  _0x4ae00c.superClass.call(this);
  this.spawnTime = _0x1f4c9e;
}
window.RainDrop = _0x4ae00c;
_0x2b451a.setCustomClassForGameObjType(_0x4ae00c, 0x6f);
var _0x53abbc = _0x472b99;
_0x2ed025.prototype = Object.create(_0x53abbc.prototype);
_0x2ed025.prototype.constructor = _0x2ed025;
_0x2ed025.superClass = _0x53abbc;
_0x2ed025.prototype.updateZ = function () {
  this.z = 0x3ed;
};
_0x2ed025.prototype.customDraw = function (_0x1dcca4) {
  if (!(_0x4bda0b == 0x2)) {
    var _0x1b24fe = 0x1;
    var _0x1ce4c4 = 0.15;
    var _0x5abac3 = 0.8;
    var _0x3712e1 = 0.5 * (_0x5abac3 - _0x1ce4c4);
    var _0x2d7823 = _0x1ce4c4 + _0x3712e1 + _0x3712e1 * Math.sin(0x2 * Math.PI / _0x1b24fe * (_0x1f4c9e / 0x3e8));
    _0x3b8ba2.save();
    {
      _0x3b8ba2.globalAlpha *= _0x2d7823;
    }
    _0x3b8ba2.restore();
    var _0x1b24fe = 0x1;
    var _0x1ce4c4 = 0.85;
    var _0x5abac3 = 0x1;
    var _0x3712e1 = 0.5 * (_0x5abac3 - _0x1ce4c4);
    var _0x403192 = _0x1ce4c4 + _0x3712e1 + _0x3712e1 * Math.sin(0x2 * Math.PI / _0x1b24fe * (_0x1f4c9e / 0x3e8));
    var _0x3e2ed9 = Math.trunc(_0x1f4c9e / 0x78) % 0x5;
    var _0x39b707 = this.getSkinImageObj("gameobj/" + this.oType + "/" + _0x3e2ed9 + ".png");
    if (_0x39b707) {
      var _0x4bac0c = 0x0;
      var _0x5566d7 = this.rad * 0.4;
      var _0xab6499 = this.rad * 0x2 * (0x2 + _0x403192 * 0x2) / 0x3;
      var _0x333b24 = this.rad * 3.5 * _0x403192;
      var _0x3029e5 = 0.5;
      var _0x18932a = 0.95;
      _0x3b8ba2.save();
      {
        _0x3b8ba2.globalAlpha *= this.onFireEffA * _0x403192;
        _0x3b8ba2.rotate(this.angle);
        _0x3b8ba2.drawImage(_0x39b707, _0x4bac0c + _0xab6499 * -_0x3029e5, _0x5566d7 + _0x333b24 * -_0x18932a, _0xab6499, _0x333b24);
      }
      _0x3b8ba2.restore();
    } else {}
  } else {
    var _0x39b707 = this.getSkinImageObj("gameobj/" + this.oType + "/0.png");
    if (_0x39b707) {
      var _0x1b24fe = 0x1;
      var _0x1ce4c4 = 0.85;
      var _0x5abac3 = 0x1;
      var _0x3712e1 = 0.5 * (_0x5abac3 - _0x1ce4c4);
      var _0x403192 = _0x1ce4c4 + _0x3712e1 + _0x3712e1 * Math.sin(0x2 * Math.PI / _0x1b24fe * (_0x1f4c9e / 0x3e8));
      var _0x4bac0c = 0x0;
      var _0x5566d7 = this.rad * 0.4;
      var _0xab6499 = this.rad * 0x2 * (0x2 + _0x403192 * 0x2) / 0x3;
      var _0x333b24 = this.rad * 3.5 * _0x403192;
      var _0x3029e5 = 0.5;
      var _0x18932a = 0.95;
      _0x3b8ba2.save();
      {
        _0x3b8ba2.rotate(this.angle);
        _0x3b8ba2.drawImage(_0x39b707, _0x4bac0c + _0xab6499 * -_0x3029e5, _0x5566d7 + _0x333b24 * -_0x18932a, _0xab6499, _0x333b24);
      }
      _0x3b8ba2.restore();
    }
  }
};
function _0x2ed025() {
  _0x2ed025.superClass.call(this, 0x70);
}
window.Iceball = _0x2ed025;
_0x2b451a.setCustomClassForGameObjType(_0x2ed025, 0x70);
var _0x53abbc = _0xf4bb63;
_0x592444.prototype = Object.create(_0x53abbc.prototype);
_0x592444.prototype.constructor = _0x592444;
_0x592444.superClass = _0x53abbc;
_0x592444.prototype.animalInfo = function () {
  var _0x5e8945 = {};
  switch (this.animalSpecies) {
    case 0x1:
      _0x5e8945.aniName = "The BigFoot";
      break;
  }
  _0x5e8945.skinName = "land/bigfoot/" + this.animalSpecies + "/bigfoot";
  _0x5e8945.aniDesc = '';
  _0x5e8945.upgradeText = "UPGRADED to " + _0x5e8945.aniName + "! So it really exists... \n Right click/W to throw Spears. \nHold to make a fire (every 30s)";
  _0x5e8945.aniCol = "#839eb5";
  return _0x5e8945;
};
_0x592444.prototype.getAbilityInfo = function (_0x57f516) {
  var _0x1f87cd = {
    abilName: "Throw Spear\n (Hold for fire!)",
    abilImg: "abilities/ThrowSpear.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x1f87cd;
};
_0x592444.prototype.getSkinName = function () {
  var _0x2eb440 = '';
  _0x2eb440 = "land/bigfoot/" + this.animalSpecies + "/";
  if (this.flag_underWater || this.flag_isInArena) {
    _0x2eb440 += "thebigfoot";
  } else {
    _0x2eb440 += "bigfoot";
  }
  return _0x2eb440;
};
_0x592444.prototype.drawUnderSkinTail = function (_0x1469f1) {
  if (!this.isCamouflage) {
    _0x592444.superClass.prototype.drawUnderSkinTail.call(this, _0x1469f1);
  }
};
_0x592444.prototype.drawHealthBar = function () {
  if (!this.isCamouflage) {
    _0x592444.superClass.prototype.drawHealthBar.call(this);
  }
};
_0x592444.prototype.isTransforming = false;
_0x592444.prototype.isCamouflage = false;
_0x592444.prototype.carrotAlpha = 0x0;
_0x592444.prototype.getIdealOpacity = function () {
  var _0x477bd0 = this.flag_underWater || this.flag_usingAbility && this.isTransforming || this.isCamouflage ? 0x0 : 0x1;
  return _0x477bd0;
};
_0x592444.prototype.biteStart = 0x0;
_0x592444.prototype.flapAmount = 0x3;
_0x592444.prototype.flapDur = 1.5;
_0x592444.prototype.roarStartT = -0x1f4;
_0x592444.prototype.spearThrow = function () {
  _0x3b8ba2.save();
  var _0x5893b1 = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/arm21.png");
  if (_0x5893b1) {
    var _0x3777ce = Math.min(0x1, (_0x1f4c9e - this.biteStart) / 0xc8);
    var _0x53232c = Math.min(0x1, Math.max(0x0, (_0x1f4c9e - this.biteStart) / 0x12c));
    var _0x37f023 = -_0x53232c * _0x4bb70c;
    _0x3b8ba2.rotate(this.angle + _0x37f023);
    var _0x2eb503 = -this.rad * 1.75;
    var _0x50097e = this.rad / 0x2;
    var _0x46c13c = this.rad;
    var _0x94cd2f = _0x2eb503 * 0x2;
    var _0x41a734 = _0x2eb503 * 0x2 * _0x3777ce;
    _0x3b8ba2.drawImage(_0x5893b1, _0x50097e + _0x94cd2f * -0.3, _0x46c13c + _0x41a734 * -0.8 + _0x2eb503, _0x94cd2f, _0x41a734);
  }
  _0x3b8ba2.restore();
};
_0x592444.prototype.showSpear = false;
_0x592444.prototype.showHand = true;
_0x592444.prototype.drawSkinCustomization = function () {
  if (this.flag_underWater || this.flag_isInArena) {
    return;
  }
  this.setSkinScale();
  if (!this.flag_usingAbility) {
    this.biteStart = 0x0;
  }
  if (this.showSpear) {
    this.spearHandAnimation(0x0);
  } else {
    if (this.showHand || this.id == 0x0) {
      this.leftHandAnimation(0x0);
    }
  }
  this.rightHandAnimation(0x0);
  this.bigfootHead(0x0);
  if (!this.flag_usingAbility && !this.flag_inHidingHole) {
    this.oogaBoogaAnimation(0x0);
  }
};
_0x592444.prototype.oogaBoogaNextT = +new Date() + 0x3a98;
_0x592444.prototype.oogaBoogaFrame = 0x0;
_0x592444.prototype.oogaBoogaFrameT = 0x0;
_0x592444.prototype.oogaBoogaAnimation = function (_0x39f368) {
  if (_0x1f4c9e > this.oogaBoogaNextT) {
    if (_0x1f4c9e > this.oogaBoogaFrameT) {
      this.oogaBoogaFrameT = _0x1f4c9e + 0x12c;
      this.oogaBoogaFrame += 0x1;
      if (this.oogaBoogaFrame == 0x1) {
        this.gotChat("OOGA!");
      } else {
        if (this.oogaBoogaFrame == 0x3) {
          this.gotChat("BOOGA!");
        }
      }
    }
    if (this.oogaBoogaFrame > 0x4) {
      this.oogaBoogaFrame = 0x0;
      this.oogaBoogaNextT = +new Date() + 0x3a98;
    }
  }
  if (this.oogaBoogaFrame > 0x0) {
    var _0x5d89af = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/head" + this.oogaBoogaFrame + ".png");
    if (_0x5d89af) {
      _0x3b8ba2.save();
      var _0x5e0281 = this.rad;
      _0x3b8ba2.drawImage(_0x5d89af, -_0x5e0281 * 1.4705882352941178, (-_0x5e0281 + _0x5e0281 * 0x0) * 1.4705882352941178, 0x2 * _0x5e0281 * 1.4705882352941178, 0x2 * _0x5e0281 * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
  }
};
_0x592444.prototype.spearInHand = false;
_0x592444.prototype.canCreateFire = false;
_0x592444.prototype.readCustomData_onUpdate = function (_0x3367aa) {
  _0x592444.superClass.prototype.readCustomData_onUpdate.call(this, _0x3367aa);
  var _0x4c12bb = _0x3367aa.readBitGroup();
  this.showHand = _0x4c12bb.getBool();
  this.showSpear = this.showHand && _0x4c12bb.getBool();
  this.canCreateFire = _0x4c12bb.getBool();
};
var _0x2cbd24 = 0.84;
var _0x43cd91 = 0.47;
var _0x46ac4c = 0x2d;
var _0x30dd06 = -0x1e;
var _0x28cc03 = 1.3;
var _0x46baf8 = 1.5;
var _0x272ff1 = 0.3;
_0x592444.prototype.bigfootHead = function (_0x5d34bf) {
  var _0x10ed96 = 0x0;
  var _0x2548f2 = this.flag_usingAbility ? "head2" : "head";
  if (!this.flag_usingAbility) {
    _0x10ed96 = 0x0;
  }
  var _0x1a71f0 = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/" + _0x2548f2 + ".png");
  if (_0x1a71f0) {
    _0x3b8ba2.save();
    var _0x48cdad = this.rad;
    _0x3b8ba2.drawImage(_0x1a71f0, -_0x48cdad * 1.4705882352941178, (-_0x48cdad + _0x48cdad * _0x10ed96) * 1.4705882352941178, 0x2 * _0x48cdad * 1.4705882352941178, 0x2 * _0x48cdad * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
};
_0x592444.prototype.spearHandAnimation = function (_0x249db4) {
  var _0x68a485 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x372782 = 0x0;
  if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
    _0x372782 = _0x7b826(_0x68a485, _0x46baf8, _0x272ff1, 0x2);
  }
  var _0x8ebc22 = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/arm2.png");
  if (_0x8ebc22) {
    _0x3b8ba2.save();
    var _0x2e55cf = -(-0.2 + _0x372782) * (_0x46ac4c * (Math.PI / 0xb4));
    var _0x1abc7c = this.rad * _0x28cc03;
    _0x3b8ba2.rotate(_0x30dd06 * (Math.PI / 0xb4) + _0x2e55cf);
    var _0x5a0040 = this.rad;
    var _0x4af103 = _0x1abc7c * 0x2;
    var _0x3e57c2 = _0x1abc7c * 0x2;
    var _0x2790d0 = _0x43cd91;
    var _0x2a28e9 = _0x2cbd24;
    _0x3b8ba2.drawImage(_0x8ebc22, 0x0 + _0x4af103 * -_0x2790d0, _0x5a0040 + _0x3e57c2 * -_0x2a28e9, _0x4af103, _0x3e57c2);
    if (this.canCreateFire) {
      var _0x53345a = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/arm2-fire.png");
      if (_0x53345a) {
        var _0x68a485 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
        var _0x372782 = _0x7b826(_0x68a485, 0x5, 0x1, 0x1);
        _0x3b8ba2.globalAlpha = Math.max(0x0, _0x372782);
        _0x3b8ba2.drawImage(_0x53345a, 0x0 + _0x4af103 * -_0x2790d0, _0x5a0040 + _0x3e57c2 * -_0x2a28e9, _0x4af103, _0x3e57c2);
      }
    }
    _0x3b8ba2.restore();
  }
};
_0x592444.prototype.rightHandAnimation = function (_0x50fea0) {
  var _0x3021eb = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x2c096f = 0x0;
  if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
    _0x2c096f = _0x7b826(_0x3021eb, _0x46baf8, _0x272ff1, 0x2);
  }
  var _0x5b136f = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/arm1.png");
  if (_0x5b136f) {
    _0x3b8ba2.save();
    var _0x1e5452 = -_0x2c096f * (-0xa * (Math.PI / 0xb4));
    var _0x507490 = this.rad * _0x28cc03;
    _0x3b8ba2.rotate(-0x5 * (Math.PI / 0xb4) + _0x1e5452);
    var _0x2ebc13 = this.rad;
    var _0xedfd00 = _0x507490 * 0x2;
    var _0x2c2150 = _0x507490 * 0x2;
    _0x3b8ba2.drawImage(_0x5b136f, 0x0 + _0xedfd00 * -0.55, _0x2ebc13 + _0x2c2150 * -0.85, _0xedfd00, _0x2c2150);
    _0x3b8ba2.restore();
  }
};
_0x592444.prototype.leftHandAnimation = function (_0x4e75ea) {
  var _0x37174d = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x3f5576 = 0x0;
  if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
    if (!(this.id == _0x2bd878 && _0x11da90)) {
      _0x3f5576 = _0x7b826(_0x37174d, _0x46baf8, _0x272ff1, 0x2);
    }
  }
  var _0x1e7614 = this.getSkinImageObj("skins/land/bigfoot/" + this.animalSpecies + "/arm21.png");
  if (_0x1e7614) {
    _0x3b8ba2.save();
    var _0x24144f = -_0x3f5576 * (-0xa * (Math.PI / 0xb4));
    var _0x35e4cc = this.rad * _0x28cc03;
    _0x3b8ba2.rotate(-0x5 * (Math.PI / 0xb4) + _0x24144f);
    var _0x10b044 = this.rad;
    var _0x970df3 = _0x35e4cc * 0x2;
    var _0x1c066a = _0x35e4cc * 0x2;
    _0x3b8ba2.drawImage(_0x1e7614, 0x0 + _0x970df3 * -0.47, _0x10b044 + _0x1c066a * -0.8, _0x970df3, _0x1c066a);
    _0x3b8ba2.restore();
  }
};
function _0x592444() {
  _0x592444.superClass.call(this, 0x2);
  this.oogaBoogaNextT = +new Date() + 0x3a98;
}
window.BigFoot = _0x592444;
_0x2b451a.setCustomClassForGameObjType(_0x592444, 0x2, _0xb061ee);
var _0x2995b5 = _0x33c60f;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x33c60f.prototype.victimID = 0x0;
_0x33c60f.prototype.updateZ = function () {
  if (this.effect_flying) {
    this.z = 0x186a0;
  } else if (this.victimID == 0x0) {
    this.z = 0x44c;
  }
};
_0x33c60f.prototype.customDraw = function (_0x13d339) {
  _0x3b8ba2.save();
  if (this.spearState == 0x2) {
    var _0x1137d0 = this.getSkinImageObj("skins/land/bigfoot/" + this.speciesType + "/spear.png");
    if (_0x1137d0) {
      _0x3b8ba2.save();
      var _0x31de22 = this.rad * 0x2;
      _0x3b8ba2.rotate(this.angle + _0x4bb70c);
      _0x3b8ba2.drawImage(_0x1137d0, -_0x31de22 / 0x2, -_0x31de22 / 0x2, _0x31de22, _0x31de22 * 0x4);
      _0x3b8ba2.restore();
    }
  } else {
    if (this.spearState == 0x3) {
      _0x3b8ba2.save();
      var _0x1137d0 = this.getSkinImageObj("skins/land/bigfoot/" + this.speciesType + "/spear2.png");
      if (_0x1137d0) {
        var _0x31de22 = this.rad * 0x2;
        _0x3b8ba2.rotate(this.angle + _0x4bb70c);
        _0x3b8ba2.drawImage(_0x1137d0, -_0x31de22 / 0x2, -_0x31de22 / 0x2, _0x31de22, _0x31de22 * 0x4);
      }
      _0x3b8ba2.restore();
    } else {
      if (this.spearState == 0x1) {
        var _0x1137d0 = this.getSkinImageObj("skins/land/bigfoot/" + this.speciesType + "/arm2.png");
        if (_0x1137d0) {
          var _0x3ee355 = Math.min(0x1, (_0x1f4c9e - this.spawnTime) / 0xc8);
          var _0x52eb4f = Math.min(0x1, Math.max(0x0, (_0x1f4c9e - this.spawnTime) / 0x12c));
          var _0x5d47cd = -_0x52eb4f * _0x4bb70c;
          _0x3b8ba2.rotate(this.angle + _0x5d47cd * (this.specType == 0x1 ? 0x1 : -0x1));
          var _0x31de22 = -this.rad * 1.5;
          var _0x53bc4b = this.rad / 0x2;
          var _0xc15b41 = this.rad;
          var _0x487f80 = _0x31de22 * 0x2;
          var _0x24ef7b = _0x31de22 * 0x2 * _0x3ee355;
          _0x3b8ba2.drawImage(_0x1137d0, _0x53bc4b + _0x487f80 * -0.3, _0xc15b41 + _0x24ef7b * -0.8 + _0x31de22, _0x487f80, _0x24ef7b);
        }
      }
    }
  }
  _0x3b8ba2.restore();
};
_0x33c60f.prototype.spearState = 0x0;
_0x33c60f.prototype.effect_flying = false;
_0x33c60f.prototype.readUpdatedProperty = function (_0x19e9bc, _0x4eb40e) {
  if (_0x19e9bc == 0x22) {
    this.spearState = _0x4eb40e.readUInt8();
  } else {
    if (_0x19e9bc == 0x23) {
      this.victimID = _0x4eb40e.readUInt32();
      if (this.victimID != 0x0) {
        if (_0x5c52f8[this.victimID]) {
          this.z = _0x5c52f8[this.victimID].z + 0x1;
        }
      }
    } else if (_0x19e9bc == 0x25) {
      this.effect_flying = _0x4eb40e.readUInt8() == 0x1;
    }
  }
};
_0x33c60f.prototype.readCustomData_onNewlyVisible = function (_0x5ab478) {
  _0x33c60f.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x5ab478);
  this.spearState = _0x5ab478.readUInt8();
  this.victimID = _0x5ab478.readUInt32();
  if (this.victimID != 0x0) {
    if (_0x5c52f8[this.victimID]) {
      this.z = _0x5c52f8[this.victimID].z + 0x1;
    }
  }
  this.effect_flying = _0x5ab478.readUInt8() == 0x1;
};
function _0x33c60f() {
  _0x33c60f.superClass.call(this);
  _0x33c60f.prototype.easeAngleChanges = true;
}
window.BigfootSpear = _0x33c60f;
_0x2b451a.setCustomClassForGameObjType(_0x33c60f, 0xe, 0x70);
var _0x53abbc = _0x472b99;
_0x4f76bd.prototype = Object.create(_0x53abbc.prototype);
_0x4f76bd.prototype.constructor = _0x4f76bd;
_0x4f76bd.superClass = _0x53abbc;
_0x4f76bd.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x4f76bd.prototype.setSkinPath = function () {
  this.objSkinPath = "skins/land/bigfoot/" + this.speciesType + "/firewood.png";
};
_0x4f76bd.prototype.customDraw = function (_0x59f6e7) {
  _0x3b8ba2.save();
  var _0x5835f8 = this.rad * 2.2;
  var _0x3d13f1 = this.getSkinImageObj(this.objSkinPath);
  if (_0x3d13f1) {
    _0x3b8ba2.drawImage(_0x3d13f1, -_0x5835f8 / 0x2, -_0x5835f8 / 0x2, _0x5835f8, _0x5835f8);
  }
  _0x3b8ba2.restore();
};
function _0x4f76bd() {
  _0x4f76bd.superClass.call(this, 0x79);
}
window.FireWood = _0x4f76bd;
_0x2b451a.setCustomClassForGameObjType(_0x4f76bd, 0x79);
var _0x53abbc = _0x472b99;
_0x59c754.prototype = Object.create(_0x53abbc.prototype);
_0x59c754.prototype.constructor = _0x59c754;
_0x59c754.superClass = _0x53abbc;
_0x59c754.prototype.updateZ = function () {
  this.z = 0x44c;
};
_0x59c754.prototype.alpha = 0x1;
_0x59c754.prototype.trunkW = 0.5;
_0x59c754.prototype.customDraw = function (_0x4d6961) {
  _0x3b8ba2.save();
  let _0x5f5a1a = _0x5727ca[this.id] == 0x1;
  try {
    if (_0x5f5a1a) {
      this.alpha += (0.4 - this.alpha) * 0.1;
    } else {
      this.alpha += (0x1 - this.alpha) * 0.1;
      if (this.alpha > 0.99) {
        this.alpha = 0x1;
      }
    }
  } catch (_0x10c4ab) {}
  var _0x3abb48 = this.getTreeName();
  if (!(_0x4bda0b == 0x2)) {
    var _0x140b33 = this.getSkinImageObj("gameobj/101/" + _0x3abb48 + "/" + this.getTrunk() + ".png");
    if (_0x140b33) {
      var _0x361538 = this.rad;
      var _0x39b31f = this.rPer * Math.PI * 0x2;
      _0x3b8ba2.rotate(this.angle);
      _0x3b8ba2.drawImage(_0x140b33, -_0x361538, -_0x361538, 0x2 * _0x361538, 0x2 * _0x361538);
    }
  }
  if (this.canopy) {
    var _0x313329 = "canopy";
    if (_0x3abb48 == "default") {
      _0x313329 += this.curBiome;
      if (this.curBiome == 0x4) {
        _0x313329 = _0x313329 + "_" + this.speciesType;
      }
    }
    var _0x361538 = (this.foodType == 0x1e ? this.rad * 1.25 : this.rad) + 0x0;
    if (this.eventType == 0x2 && this.treeType != "default") {
      this.drawEventDecorations(_0x3abb48, _0x313329, _0x361538, _0x39b31f);
    } else {
      if (this.xmasTree) {
        this.drawXmasProp(_0x3abb48, _0x361538, _0x39b31f, "ornament", 0x0);
      }
      if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
        var _0x140b33 = this.getSkinImageObj(this.getCanopySkin(_0x3abb48, _0x313329));
        if (_0x140b33) {
          _0x3b8ba2.save();
          _0x3b8ba2.globalAlpha *= this.alpha;
          if (!(this.curBiome === 0x4 && this.speciesType === 0x1)) {
            _0x3b8ba2.rotate(this.angle);
          }
          _0x3b8ba2.drawImage(_0x140b33, -_0x361538 + 0x0, -_0x361538 - 0x0, 0x2 * _0x361538, 0x2 * _0x361538);
          _0x3b8ba2.restore();
        } else {}
      } else {
        _0x3b8ba2.save();
        _0x133658(0x0, 0x0, this.rad * 0.2, "brown");
        this.drawNoImageTree(this.rad);
        _0x3b8ba2.restore();
      }
      if (this.xmasTree) {
        this.drawXmasProps(_0x3abb48, _0x361538, _0x39b31f, 0x0);
      }
    }
  }
  _0x3b8ba2.restore();
};
_0x59c754.prototype.drawNoImageTree = function (_0x23879d) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = this.alpha;
  var _0x1ff60a = this.getBiomeColors();
  _0x133658(-_0x23879d * 0.5, -_0x23879d * 0.5, _0x23879d * 0.65, _0x1ff60a.dark);
  _0x133658(_0x23879d * 0.5, -_0x23879d * 0.5, _0x23879d * 0.73, _0x1ff60a.dark);
  _0x133658(_0x23879d * 0.6, _0x23879d * 0.4, Math.max(0x0, _0x23879d * 0.78), _0x1ff60a.dark);
  _0x133658(-_0x23879d * 0.5, _0x23879d * 0.5, Math.max(0x0, _0x23879d * 0.6), _0x1ff60a.dark);
  _0x133658(-_0x23879d * 0.5, -_0x23879d * 0.5, (_0x23879d - 0x2) * 0.65, _0x1ff60a.light);
  _0x133658(_0x23879d * 0.5, -_0x23879d * 0.5, (_0x23879d - 0x2) * 0.73, _0x1ff60a.light);
  _0x133658(_0x23879d * 0.6, _0x23879d * 0.4, (_0x23879d - 0x2) * 0.78, _0x1ff60a.light);
  _0x133658(-_0x23879d * 0.5, _0x23879d * 0.5, (_0x23879d - 0x2) * 0.6, _0x1ff60a.light);
  _0x3b8ba2.restore();
  return;
  _0x3b8ba2.save();
  this.rPer = 0x0;
  _0x3b8ba2.fillStyle = color;
  _0x3b8ba2.globalAlpha = this.alpha;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(_0x23879d * 0.5, -_0x23879d * 0.5, Math.max(0x0, _0x23879d * 0.73), 0x0, 0x2 * Math.PI);
  _0x3b8ba2.fill();
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(_0x23879d * 0.6, _0x23879d * 0.4, Math.max(0x0, _0x23879d * 0.78), 0x0, 0x2 * Math.PI);
  _0x3b8ba2.fill();
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(-_0x23879d * 0.5, _0x23879d * 0.5, Math.max(0x0, _0x23879d * 0.6), 0x0, 0x2 * Math.PI);
  _0x3b8ba2.fill();
  _0x3b8ba2.restore();
};
_0x59c754.prototype.lights = 0x0;
_0x59c754.prototype.drawXmasProps = function (_0x263d65, _0x56ac79, _0x5bc6d2, _0x96fdaf) {
  this.drawXmasProp(_0x263d65, _0x56ac79, _0x5bc6d2, "decoration", _0x96fdaf);
  if (this.lights == 0x1 || this.lights == 0x3) {
    this.drawXmasProp(_0x263d65, _0x56ac79, _0x5bc6d2, "light", _0x96fdaf);
  }
  if (this.lights == 0x2 || this.lights == 0x3) {
    this.drawXmasProp(_0x263d65, _0x56ac79, _0x5bc6d2, "light1", _0x96fdaf);
  }
};
_0x59c754.prototype.drawXmasProp = function (_0x29c63b, _0x209338, _0x24b55f, _0x125a2f, _0x122d39) {
  var _0x2de81c = "img/tree/" + _0x29c63b + "/xmas/" + _0x125a2f + ".png";
  var _0x23e88a = this.getSkinImageObj(_0x2de81c);
  if (_0x23e88a) {
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x23e88a, -_0x209338 + _0x122d39, -_0x209338 - _0x122d39, 0x2 * _0x209338, 0x2 * _0x209338);
    _0x3b8ba2.restore();
  } else {
    console.log("not found: " + _0x2de81c);
  }
};
_0x59c754.prototype.drawEventDecorations = function (_0x238562, _0x560220, _0x17edee, _0x485b11) {
  let _0x5e3532 = "gameobj/101/" + _0x238562 + "/" + _0x560220 + "_" + this.eventType + ".png";
  var _0x5a20ab = this.getSkinImageObj(_0x5e3532);
  if (_0x5a20ab) {
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x5a20ab, -_0x17edee + _0x485b11, -_0x17edee - _0x485b11, 0x2 * _0x17edee, 0x2 * _0x17edee);
    _0x3b8ba2.restore();
  } else {
    console.log("not found: " + _0x5e3532);
  }
};
_0x59c754.prototype.drawEventDecorations = function (_0x127209, _0x377168, _0x1ea900, _0x5f50d9) {
  let _0x5400a6 = "gameobj/101/" + _0x127209 + "/" + _0x377168 + "_" + this.eventType + ".png";
  var _0x1bd64f = this.getSkinImageObj(_0x5400a6);
  console.log(_0x5400a6);
  if (_0x1bd64f) {
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x1bd64f, -_0x1ea900 + _0x5f50d9, -_0x1ea900 - _0x5f50d9, 0x2 * _0x1ea900, 0x2 * _0x1ea900);
    _0x3b8ba2.restore();
  }
};
_0x59c754.prototype.getTreeName = function () {
  switch (this.foodType) {
    case 0x1e:
      return "coco";
    case 0x1d:
      return "banana";
    case 0x30:
      return "fir";
  }
  return "default";
};
_0x59c754.prototype.getBiomeColors = function () {
  var _0x28a71d = {
    "dark": "#09992f",
    "light": "#1cba34"
  };
  switch (this.curBiome) {
    case 0x2:
      _0x28a71d = {
        "dark": "#808080",
        "light": "#f7f7f7"
      };
      break;
    case 0x3:
    case 0x4:
      _0x28a71d = {
        "dark": "#a59215",
        "light": "#fffff"
      };
      break;
    case 0x5:
      _0x28a71d = {
        "dark": "#09992f",
        "light": "#1cba34"
      };
      break;
    case 0x0:
      _0x28a71d = {
        "dark": "#09992f",
        "light": "limegreen"
      };
      break;
    case 0x1:
      _0x28a71d = {
        "dark": "#1aae31",
        "light": "limegreen"
      };
      break;
    default:
  }
  return _0x28a71d;
};
_0x59c754.prototype.getTrunk = function () {
  if (this.curBiome == 0x4) {
    return "trunk4_" + this.speciesType;
  }
  return "trunk";
};
_0x59c754.prototype.foodType = 0x0;
_0x59c754.prototype.canopy = true;
_0x59c754.prototype.readCustomData_onNewlyVisible = function (_0x577b9f) {
  this.foodType = _0x577b9f.readUInt16();
  this.canopy = _0x577b9f.readUInt8() == 0x1;
  this.eventType = _0x577b9f.readUInt8();
  this.xmasTree = this.eventType == 0x3;
};
_0x59c754.prototype.readUpdatedProperty = function (_0x1016b9, _0xe49b0f) {
  if (_0x1016b9 == 0x13) {
    this.lights = _0xe49b0f.readUInt8();
  }
};
_0x59c754.prototype.treeCanopySkin = null;
_0x59c754.prototype.getCanopySkin = function (_0x59ee7e, _0x4f4d15) {
  if (this.treeCanopySkin == null) {
    this.treeCanopySkin = "gameobj/101/" + _0x59ee7e + "/" + _0x4f4d15 + ".png";
  }
  return this.treeCanopySkin;
};
function _0x59c754() {
  _0x59c754.superClass.call(this, 0x65);
}
window.Tree = _0x59c754;
_0x2b451a.setCustomClassForGameObjType(_0x59c754, 0x65);
var _0x2995b5 = _0x504d62;
var _0x53abbc = _0x472b99;
_0x504d62.prototype = Object.create(_0x53abbc.prototype);
_0x504d62.prototype.constructor = _0x504d62;
_0x504d62.superClass = _0x53abbc;
_0x504d62.prototype.updateZ = function () {
  this.z = -0xd7;
};
_0x504d62.prototype.customDraw = function (_0x41f16d) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0.5;
  {
    _0x3b8ba2.fillStyle = "#09992F";
    var _0x38c53e = -this.rectW / 0x2;
    var _0x41da8f = this.rectW / 0x2;
    var _0x32af18 = -this.rectH / 0x2;
    var _0x3685db = this.rectH / 0x2;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.moveTo(_0x38c53e, _0x32af18);
    var _0x1f7284 = [-0xf, 0xa, -0xa, 0xc, 0x0, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
    var _0x3c1e96 = 0x0;
    var _0x429c8f = _0x1f0c0a - this.x;
    var _0x4bf182 = 0x0 - this.x;
    var _0x3dc6ab = _0x578943 - this.y;
    var _0x59420 = 0x0 - this.y;
    var _0x4bc980;
    var _0x1b0e08 = _0x38c53e - 0x14;
    for (_0x4bc980 = _0x32af18; _0x4bc980 < _0x3685db; _0x4bc980 += 0x2d) {
      _0x3b8ba2.lineTo(Math.min(_0x429c8f, Math.max(_0x4bf182, _0x1b0e08 + _0x1f7284[_0x3c1e96])), _0x4bc980);
      _0x3c1e96 = (_0x3c1e96 + 0x1) % _0x1f7284.length;
    }
    _0x3b8ba2.lineTo(_0x38c53e, _0x3685db);
    _0x4bc980 = _0x3685db + 0x14;
    for (_0x1b0e08 = _0x38c53e; _0x1b0e08 < _0x41da8f; _0x1b0e08 += 0x2d) {
      _0x3b8ba2.lineTo(_0x1b0e08, Math.min(_0x3dc6ab, Math.max(_0x59420, _0x4bc980 + _0x1f7284[_0x3c1e96])));
      _0x3c1e96 = (_0x3c1e96 + 0x1) % _0x1f7284.length;
    }
    _0x3b8ba2.lineTo(_0x41da8f, _0x3685db);
    _0x1b0e08 = _0x41da8f + 0x14;
    for (_0x4bc980 = _0x3685db; _0x4bc980 > _0x32af18; _0x4bc980 -= 0x2d) {
      _0x3b8ba2.lineTo(Math.min(_0x429c8f, Math.max(_0x4bf182, _0x1b0e08 + _0x1f7284[_0x3c1e96])), _0x4bc980);
      _0x3c1e96 = (_0x3c1e96 + 0x1) % _0x1f7284.length;
    }
    _0x3b8ba2.lineTo(_0x41da8f, _0x32af18);
    _0x4bc980 = _0x32af18 - 0x14;
    for (_0x1b0e08 = _0x41da8f; _0x1b0e08 > _0x38c53e; _0x1b0e08 -= 0x2d) {
      _0x3b8ba2.lineTo(_0x1b0e08, Math.min(_0x3dc6ab, Math.max(_0x59420, _0x4bc980 + _0x1f7284[_0x3c1e96])));
      _0x3c1e96 = (_0x3c1e96 + 0x1) % _0x1f7284.length;
    }
    _0x3b8ba2.closePath();
    _0x3b8ba2.fill();
  }
  _0x3b8ba2.restore();
};
_0x504d62.prototype.edge = function () {
  _0x3b8ba2.save();
  {
    _0x3b8ba2.fillStyle = "red";
    var _0x35904c = -this.rectW / 0x2;
    var _0x27e20c = this.rectW / 0x2;
    var _0x2578b8 = -this.rectH / 0x2 + 0x3;
    var _0x2e87fe = -this.rectH / 0x2 - 0xf;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.moveTo(_0x35904c, _0x2578b8);
    var _0x337ca7 = [-0xf, 0x5, 0xa, 0x0, -0xa, 0x3, 0xc, 0x4, 0x0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
    var _0x4ab88 = 0x0;
    var _0x1f6012 = _0x578943 - this.y;
    var _0x1bce17 = 0x0 - this.y;
    var _0x3f8b06;
    var _0x5de783 = _0x35904c - 0x0;
    _0x3b8ba2.lineTo(_0x35904c, _0x2e87fe);
    _0x3f8b06 = _0x2e87fe + 0x0;
    for (_0x5de783 = _0x35904c; _0x5de783 < _0x27e20c; _0x5de783 += 0x3c) {
      _0x3b8ba2.lineTo(_0x5de783, Math.min(_0x1f6012, Math.max(_0x1bce17, _0x3f8b06 + _0x337ca7[_0x4ab88])));
      _0x4ab88 = (_0x4ab88 + 0x1) % _0x337ca7.length;
    }
    _0x3b8ba2.lineTo(_0x27e20c, _0x2e87fe);
    _0x3b8ba2.lineTo(_0x27e20c, _0x2578b8);
    _0x3b8ba2.closePath();
  }
  _0x3b8ba2.restore();
};
function _0x504d62() {
  _0x504d62.superClass.call(this, 0x76);
}
window.RainForest = _0x504d62;
_0x2b451a.setCustomClassForGameObjType(_0x504d62, 0x76);
var _0x53abbc = _0x472b99;
_0x329f18.prototype = Object.create(_0x53abbc.prototype);
_0x329f18.prototype.constructor = _0x329f18;
_0x329f18.superClass = _0x53abbc;
_0x329f18.prototype.updateZ = function () {
  this.z = 0x3ed;
};
_0x329f18.prototype.customDraw = function (_0x47e777) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0x1;
  _0x133658(0x0, 0x0, this.rad, "#000");
  _0x3b8ba2.restore();
};
function _0x329f18() {
  _0x329f18.superClass.call(this, 0x77);
}
window.FOV = _0x329f18;
_0x2b451a.setCustomClassForGameObjType(_0x329f18, 0x77);
var _0x53abbc = _0x472b99;
_0x38bf5a.prototype = Object.create(_0x53abbc.prototype);
_0x38bf5a.prototype.constructor = _0x38bf5a;
_0x38bf5a.superClass = _0x53abbc;
_0x38bf5a.prototype.updateZ = function () {
  this.z = -0x9f;
  if (this.specType == 0x0 || 0x1) {
    this.z = -0x9e;
  }
};
_0x38bf5a.prototype.currentWidth = 0x5a;
_0x38bf5a.prototype.currentPadding = 0x0;
_0x38bf5a.prototype.padding = 0x32;
_0x38bf5a.prototype.isFloatingRiver = false;
_0x38bf5a.prototype.customDraw = function (_0x2a3ef1) {
  if (_0x2a3ef1) {
    this.jaggedSidesForRect("#bfaf43", this.getStreamMargin());
    if (!_0x39811a.noTextures) {
      this.drawTerrainFeatures();
    }
  } else {}
  this.drawStream("#4854a2");
  this.drawCurrent(this.isFloatingRiver, this.riverSize);
};
_0x38bf5a.prototype.drawCurrent = function (_0x5b85ac, _0x139eba) {
  if (_0x5b85ac) {
    this.currentPadding = this.padding * _0x139eba / 0x2;
    if (this.specType == 0x0) {
      var _0x37992c = this.getSkinImageObj("gameobj/40/currentRight.png");
      if (_0x37992c) {
        var _0x3014f5 = -this.rectW / 0x2 + 0x32;
        var _0x10565b = this.currentWidth;
        _0x3b8ba2.save();
        _0x3b8ba2.globalAlpha = 0x1;
        maxWaves = Math.round(this.rectW / _0x10565b) - 0x1;
        for (i = 0x0; i < maxWaves; i++) {
          var _0x49e1ee = this.speedX * (_0x10565b / 0x3c) * 0x3e8;
          var _0x465c45 = (_0x1f4c9e - this.spawnTime) % _0x49e1ee / _0x49e1ee;
          var _0x55585c = _0x10565b;
          var _0xe73c01 = _0x3014f5 + _0x55585c * _0x465c45;
          _0x3b8ba2.drawImage(_0x37992c, _0xe73c01, this.currentPadding + -this.rectH * _0x139eba / 0x2, _0x10565b * _0x139eba, this.riverStreamHeight * _0x139eba - 0x8);
          _0x3014f5 += _0x10565b;
        }
        _0x3b8ba2.restore();
      }
    } else {
      if (this.specType == 0x1) {
        var _0x37992c = this.getSkinImageObj("gameobj/40/currentLeft.png");
        if (_0x37992c) {
          var _0x3014f5 = this.rectW / 0x2 - 0x64;
          var _0x10565b = this.currentWidth;
          _0x3b8ba2.save();
          _0x3b8ba2.globalAlpha = 0x1;
          maxWaves = Math.round(this.rectW / _0x10565b) - 0x1;
          for (i = 0x0; i < maxWaves; i++) {
            var _0x49e1ee = this.speedX * (_0x10565b / 0x3c) * 0x3e8;
            var _0x465c45 = (_0x1f4c9e - this.spawnTime) % _0x49e1ee / _0x49e1ee;
            var _0x55585c = _0x10565b;
            var _0xe73c01 = _0x3014f5 + _0x55585c * _0x465c45;
            _0x3b8ba2.drawImage(_0x37992c, _0xe73c01, this.currentPadding + -this.rectH * _0x139eba / 0x2, _0x10565b * _0x139eba, this.riverStreamHeight * _0x139eba - 0x8);
            _0x3014f5 -= _0x10565b;
          }
          _0x3b8ba2.restore();
        }
      } else {
        if (this.specType == 0x2) {
          var _0x37992c = this.getSkinImageObj("gameobj/40/currentDown.png");
          if (_0x37992c) {
            var _0xa18276 = -this.rectH / 0x2 - 0x32;
            var _0x3c2900 = this.currentWidth;
            _0x3b8ba2.save();
            _0x3b8ba2.globalAlpha = 0x1;
            maxWaves = Math.round(this.rectH / _0x3c2900) - 0x1;
            for (i = 0x0; i < maxWaves; i++) {
              var _0x49e1ee = this.speedY * (_0x3c2900 / 0x3c) * 0x3e8;
              var _0x465c45 = (_0x1f4c9e - this.spawnTime) % _0x49e1ee / _0x49e1ee;
              var _0x55585c = _0x3c2900;
              var _0x52d101 = _0xa18276 + _0x55585c * _0x465c45;
              if (i > 0x0) {
                _0x3b8ba2.drawImage(_0x37992c, this.currentPadding + -this.rectW * _0x139eba / 0x2, _0x52d101, this.riverStreamHeight * _0x139eba - 0x8, _0x3c2900 * _0x139eba);
              }
              _0xa18276 += _0x3c2900;
            }
            _0x3b8ba2.restore();
          }
        } else {
          if (this.specType == 0x3) {
            var _0x37992c = this.getSkinImageObj("gameobj/40/currentUp.png");
            if (_0x37992c) {
              var _0xa18276 = this.rectH / 0x2 + 0x32;
              var _0x3c2900 = this.currentWidth;
              _0x3b8ba2.save();
              _0x3b8ba2.globalAlpha = 0x1;
              maxWaves = Math.round(this.rectH / _0x3c2900) - 0x1;
              for (i = 0x0; i < maxWaves; i++) {
                var _0x49e1ee = this.speedY * (_0x3c2900 / 0x3c) * 0x3e8;
                var _0x465c45 = (_0x1f4c9e - this.spawnTime) % _0x49e1ee / _0x49e1ee;
                var _0x55585c = _0x3c2900;
                var _0x52d101 = _0xa18276 + _0x55585c * _0x465c45;
                if (i > 0x0) {
                  _0x3b8ba2.drawImage(_0x37992c, this.currentPadding + -this.rectW * _0x139eba / 0x2, _0x52d101, this.riverStreamHeight * _0x139eba - 0x8, _0x3c2900 * _0x139eba);
                }
                _0xa18276 -= _0x3c2900;
              }
              _0x3b8ba2.restore();
            }
          }
        }
      }
    }
  }
};
_0x38bf5a.prototype.getStreamMargin = function () {
  return this.margin;
};
_0x38bf5a.prototype.getRectWidth = function () {
  var _0x51a5ba = this.rectW;
  return _0x51a5ba;
};
_0x38bf5a.prototype.getRectHeight = function () {
  var _0x183bae = this.rectH;
  return _0x183bae;
};
_0x38bf5a.prototype.jaggedSidesForRect = function (_0xb5420b, _0x174d6c) {
  _0x3b8ba2.fillStyle = _0xb5420b;
  var _0x39d2f2 = false;
  if (_0x174d6c) {
    _0x39d2f2 = true;
  }
  var _0x2cee1b = -this.getRectWidth() / 0x2 + (_0x39d2f2 ? _0x174d6c.x_min : 0x0);
  var _0x58f7c3 = this.getRectWidth() / 0x2 + (_0x39d2f2 ? _0x174d6c.x_max : 0x0);
  var _0x4ab582 = -this.getRectHeight() / 0x2 + (_0x39d2f2 ? _0x174d6c.y_min : 0x0);
  var _0x30ce83 = this.getRectHeight() / 0x2 + (_0x39d2f2 ? _0x174d6c.y_max : 0x0);
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(_0x2cee1b, _0x4ab582);
  var _0xc4198a = [-0x8, 0xa, -0xa, 0xc, 0x0, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
  var _0x31ec0f = 0x0;
  var _0x126203 = _0x1f0c0a - this.x;
  var _0x401797 = 0x0 - this.x;
  var _0xed4b22 = _0x578943 - this.y;
  var _0x49d5aa = 0x0 - this.y;
  var _0x381e1e;
  var _0x378895 = _0x2cee1b - 0x1e;
  for (_0x381e1e = _0x4ab582; _0x381e1e < _0x30ce83; _0x381e1e += 0x2d) {
    _0x3b8ba2.lineTo(Math.min(_0x126203, Math.max(_0x401797, _0x378895 + _0xc4198a[_0x31ec0f])), _0x381e1e);
    _0x31ec0f = (_0x31ec0f + 0x1) % _0xc4198a.length;
  }
  _0x3b8ba2.lineTo(_0x2cee1b, _0x30ce83);
  _0x381e1e = _0x30ce83 + 0x1e;
  for (_0x378895 = _0x2cee1b; _0x378895 < _0x58f7c3; _0x378895 += 0x2d) {
    _0x3b8ba2.lineTo(_0x378895, Math.min(_0xed4b22, Math.max(_0x49d5aa, _0x381e1e + _0xc4198a[_0x31ec0f])));
    _0x31ec0f = (_0x31ec0f + 0x1) % _0xc4198a.length;
  }
  _0x3b8ba2.lineTo(_0x58f7c3, _0x30ce83);
  _0x378895 = _0x58f7c3 + 0x1e;
  for (_0x381e1e = _0x30ce83; _0x381e1e > _0x4ab582; _0x381e1e -= 0x2d) {
    _0x3b8ba2.lineTo(Math.min(_0x126203, Math.max(_0x401797, _0x378895 + _0xc4198a[_0x31ec0f])), _0x381e1e);
    _0x31ec0f = (_0x31ec0f + 0x1) % _0xc4198a.length;
  }
  _0x3b8ba2.lineTo(_0x58f7c3, _0x4ab582);
  _0x381e1e = _0x4ab582 - 0x1e;
  for (_0x378895 = _0x58f7c3; _0x378895 > _0x2cee1b; _0x378895 -= 0x2d) {
    _0x3b8ba2.lineTo(_0x378895, Math.min(_0xed4b22, Math.max(_0x49d5aa, _0x381e1e + _0xc4198a[_0x31ec0f])));
    _0x31ec0f = (_0x31ec0f + 0x1) % _0xc4198a.length;
  }
  _0x3b8ba2.closePath();
  _0x3b8ba2.fill();
};
_0x38bf5a.prototype.drawStream = function (_0x38c300) {
  _0x3b8ba2.save();
  if (this.specType < 0x2) {
    var _0x11a760 = -this.rectW / 0x2;
    var _0x1ccffd = this.rectW;
    var _0x292d60 = -this.riverStreamHeight / 0x2 * this.riverSize;
    var _0x212606 = this.riverStreamHeight * this.riverSize;
    _0x3b8ba2.fillStyle = _0x38c300;
    this.drawRandomEdges(_0x11a760, _0x292d60, _0x1ccffd / 0x2, _0x212606 / 0x2);
  } else {
    var _0x11a760 = -this.riverStreamHeight / 0x2 * this.riverSize;
    var _0x1ccffd = this.riverStreamHeight * this.riverSize;
    var _0x292d60 = -this.rectH / 0x2;
    var _0x212606 = this.rectH;
    _0x3b8ba2.fillStyle = _0x38c300;
    this.drawRandomEdges(_0x11a760, _0x292d60, _0x1ccffd / 0x2, _0x212606 / 0x2);
  }
  _0x3b8ba2.restore();
};
_0x38bf5a.prototype.drawRandomEdges = function (_0x110aea, _0x516a02, _0x2a5f00, _0x4f60ee) {
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(_0x110aea, _0x516a02);
  var _0x5ecf0b = [-0x8, 0xa, -0xa, 0xc, 0x0, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
  var _0x1e2a10 = 0x0;
  var _0x5cd924;
  var _0x2e65b9 = _0x110aea - 0xa;
  if (this.specType == 0x2 || this.specType == 0x3) {
    for (_0x5cd924 = _0x516a02; _0x5cd924 < _0x4f60ee; _0x5cd924 += 0x2d) {
      _0x3b8ba2.lineTo(_0x2e65b9 + _0x5ecf0b[_0x1e2a10], _0x5cd924);
      _0x1e2a10 = (_0x1e2a10 + 0x1) % _0x5ecf0b.length;
    }
  }
  _0x3b8ba2.lineTo(_0x110aea, _0x4f60ee);
  _0x5cd924 = _0x4f60ee + 0xa;
  if (this.specType == 0x0 || this.specType == 0x1) {
    for (_0x2e65b9 = _0x110aea; _0x2e65b9 < _0x2a5f00; _0x2e65b9 += 0x2d) {
      _0x3b8ba2.lineTo(_0x2e65b9, _0x5cd924 + _0x5ecf0b[_0x1e2a10]);
      _0x1e2a10 = (_0x1e2a10 + 0x1) % _0x5ecf0b.length;
    }
  }
  _0x3b8ba2.lineTo(_0x2a5f00, _0x4f60ee);
  if (this.specType == 0x2 || this.specType == 0x3) {
    _0x2e65b9 = _0x2a5f00 + 0xa;
    for (_0x5cd924 = _0x4f60ee; _0x5cd924 > _0x516a02; _0x5cd924 -= 0x2d) {
      _0x3b8ba2.lineTo(_0x2e65b9 + _0x5ecf0b[_0x1e2a10], _0x5cd924);
      _0x1e2a10 = (_0x1e2a10 + 0x1) % _0x5ecf0b.length;
    }
  }
  _0x3b8ba2.lineTo(_0x2a5f00, _0x516a02);
  if (this.specType == 0x0 || this.specType == 0x1) {
    _0x5cd924 = _0x516a02 - 0xa;
    for (_0x2e65b9 = _0x2a5f00; _0x2e65b9 > _0x110aea; _0x2e65b9 -= 0x2d) {
      _0x3b8ba2.lineTo(_0x2e65b9, _0x5cd924 + _0x5ecf0b[_0x1e2a10]);
      _0x1e2a10 = (_0x1e2a10 + 0x1) % _0x5ecf0b.length;
    }
  }
  _0x3b8ba2.closePath();
  _0x3b8ba2.fill();
};
_0x38bf5a.prototype.drawBody = function (_0x169b30, _0x544cb2, _0x5d8171) {
  {
    _0x3b8ba2.fillStyle = _0x169b30;
    var _0x438a08 = 0x0;
    if (_0x544cb2 > 0x1) {
      _0x438a08 = 0x64;
    }
    if (this.specType < 0x2) {
      _0x3b8ba2.fillRect(-this.rectW / 0x2, -this.riverStreamHeight / 0x2 * _0x544cb2, this.rectW, this.riverStreamHeight * _0x544cb2);
    } else {
      _0x3b8ba2.fillRect(-this.riverStreamHeight / 0x2 * _0x544cb2, -this.rectH / 0x2, this.riverStreamHeight * _0x544cb2, this.rectH);
    }
    if (this.specType < 0x2) {
      {
        _0x3b8ba2.fillStyle = _0x169b30;
        var _0x90a099 = -this.rectW / 0x2;
        var _0x11cc7e = this.rectW / 0x2;
        var _0x181a8a = (-this.riverStreamHeight / 0x2 + 0x3) * _0x544cb2;
        var _0x2416ab = (-this.riverStreamHeight / 0x2 - 0xf) * _0x544cb2;
        _0x3b8ba2.beginPath();
        _0x3b8ba2.moveTo(_0x90a099, _0x181a8a);
        var _0x421e99 = 0x0;
        var _0x4ac59a = [-0xf, 0x5, 0xa, 0x0, -0xa, 0x3, 0xc, 0x4, 0x0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
        var _0x98fd7c = 0x3c;
        var _0x371607 = 0x0;
        var _0xcd5d06 = _0x1f0c0a - this.x;
        var _0x1c2b00 = 0x0 - this.x;
        var _0x437f94 = _0x578943 - this.y;
        var _0x21bf8c = 0x0 - this.y;
        var _0x2ac715;
        var _0x4e6888 = _0x90a099 - _0x421e99;
        _0x3b8ba2.lineTo(_0x90a099, _0x2416ab);
        _0x2ac715 = _0x2416ab + _0x421e99;
        for (_0x4e6888 = _0x90a099; _0x4e6888 < _0x11cc7e; _0x4e6888 += _0x98fd7c) {
          _0x3b8ba2.lineTo(_0x4e6888, Math.min(_0x437f94, Math.max(_0x21bf8c, _0x2ac715 + _0x4ac59a[_0x371607])));
          _0x371607 = (_0x371607 + 0x1) % _0x4ac59a.length;
        }
        _0x3b8ba2.lineTo(_0x11cc7e, _0x2416ab);
        _0x3b8ba2.lineTo(_0x11cc7e, _0x181a8a);
        _0x3b8ba2.closePath();
        _0x3b8ba2.fill();
      }
      {
        _0x3b8ba2.fillStyle = _0x169b30;
        var _0x90a099 = -this.rectW / 0x2;
        var _0x11cc7e = this.rectW / 0x2;
        var _0x181a8a = (this.riverStreamHeight / 0x2 - 0x3) * _0x544cb2;
        var _0x2416ab = (this.riverStreamHeight / 0x2 + 0xf) * _0x544cb2;
        _0x3b8ba2.beginPath();
        _0x3b8ba2.moveTo(_0x90a099, _0x181a8a);
        var _0x421e99 = 0x0;
        var _0x4ac59a = [-0xf, 0x5, 0xa, 0x0, -0xa, 0x3, 0xc, 0x4, 0x0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
        var _0x98fd7c = 0x3c;
        var _0x371607 = 0x0;
        var _0xcd5d06 = _0x1f0c0a - this.x;
        var _0x1c2b00 = 0x0 - this.x;
        var _0x437f94 = _0x578943 - this.y;
        var _0x21bf8c = 0x0 - this.y;
        var _0x2ac715;
        var _0x4e6888 = _0x90a099 - _0x421e99;
        _0x3b8ba2.lineTo(_0x90a099, _0x2416ab);
        _0x2ac715 = _0x2416ab + _0x421e99;
        for (_0x4e6888 = _0x90a099; _0x4e6888 < _0x11cc7e; _0x4e6888 += _0x98fd7c) {
          _0x3b8ba2.lineTo(_0x4e6888, Math.min(_0x437f94, Math.max(_0x21bf8c, _0x2ac715 + _0x4ac59a[_0x371607])));
          _0x371607 = (_0x371607 + 0x1) % _0x4ac59a.length;
        }
        _0x3b8ba2.lineTo(_0x11cc7e, _0x2416ab);
        _0x3b8ba2.lineTo(_0x11cc7e, _0x181a8a);
        _0x3b8ba2.closePath();
        _0x3b8ba2.fill();
      }
    }
  }
  if (_0x5d8171 && _0x544cb2 > 0.3) {
    var _0x4e9795 = this.getSkinImageObj("img/riverCurrent" + this.specType + ".png");
    if (_0x4e9795) {
      var _0xfdfede = -this.rectW / 0x2;
      _0x3b8ba2.save();
      _0x3b8ba2.fillStyle = "yellow";
      _0x3b8ba2.globalAlpha = 0x1;
      for (i = 0x0; i < 0x50; i++) {
        var _0x2ad454 = this.speedX * 1.6666666666666667 * 0x3e8;
        var _0x133b25 = (_0x1f4c9e - this.spawnTime) % _0x2ad454 / _0x2ad454;
        var _0x5a31d0 = _0xfdfede + 0x64 * _0x133b25;
        _0x3b8ba2.drawImage(_0x4e9795, _0x5a31d0, 0xf + -this.rectH * _0x544cb2 / 0x2, 0x64 * _0x544cb2, this.riverStreamHeight * _0x544cb2 - 0x8);
        _0xfdfede += 0x64;
      }
      _0x3b8ba2.restore();
    }
  }
};
_0x38bf5a.prototype.speedX = 0x1;
_0x38bf5a.prototype.speedY = 0x1;
_0x38bf5a.prototype.onLerpUpdate = function (_0x49e2f8) {
  this.riverSize = _0x49e2f8 * (this.n_riverSize - this.o_riverSize) + this.o_riverSize;
};
_0x38bf5a.prototype.readUpdatedProperty = function (_0x1d1efe, _0x18c778) {
  if (_0x1d1efe == 0xa) {
    this.n_riverSize = _0x18c778.readUInt16() / 0x3e8;
    this.o_riverSize = this.riverSize;
  }
};
_0x38bf5a.prototype.worldUpd_readMsgNewlyVisible = function (_0x281eee, _0x459c4f, _0x5679c0) {
  this.setObjTypes(_0x459c4f, _0x5679c0);
  this.id = _0x281eee.readUInt32();
  var _0x2c2722 = _0x281eee.readUInt16() / 0x4;
  var _0x115cbb = _0x281eee.readUInt16() / 0x4;
  this.rectW = _0x281eee.readUInt16();
  this.rectH = _0x281eee.readUInt16();
  this.curBiome = _0x281eee.readUInt8();
  this.clientBatchDrawID = _0x281eee.readUInt16();
  this.specType = _0x281eee.readUInt8();
  this.riverStreamHeight = _0x281eee.readUInt16();
  this.isRectangle = true;
  this.ox = this.x = this.nx = _0x2c2722;
  this.oy = this.y = this.ny = _0x115cbb;
  this.clientBatchDraw = true;
  this.isFloatingRiver = _0x281eee.readUInt8() == 0x1;
  if (this.specType == 0x1) {
    this.speedX = -0x1;
  }
  if (this.specType == 0x3) {
    this.speedY = -0x1;
  }
  this.riverSize = this.o_riverSize = this.n_riverSize = 0x1;
  var _0x4daca9 = 0x0;
  var _0x203a52 = 0x0;
  var _0x2f5650 = 0x0;
  var _0xb546c5 = 0x0;
  if (this.specType == 0x2) {
    _0xb546c5 = -0x78;
  } else if (this.specType == 0x3) {
    _0x2f5650 = 0x78;
  } else {
    _0x4daca9 = 0x78;
    _0x203a52 = -0x78;
  }
  this.margin = {
    "x_min": _0x4daca9,
    "x_max": _0x203a52,
    "y_min": _0x2f5650,
    "y_max": _0xb546c5
  };
  this.generateTerrainFeatures();
};
_0x38bf5a.prototype.biomePattern = null;
_0x38bf5a.prototype.generateTerrainFeatures = function () {
  var _0x1b877b = [];
  if (this.specType == 0x2 || this.specType == 0x3) {
    var _0x35d391 = 0x0;
    var _0x50092a = -this.rectH / 0x2;
    for (; _0x50092a + 0x12c < this.rectH / 0x2;) {
      _0x35d391 = -150;
      var _0x15e69b = Math.max(0x0, Math.round(_0x4421b3(0x0, 0x3)) - 0x1);
      _0x1b877b.push({
        "x": _0x35d391,
        "y": _0x50092a,
        "w": 0x12c,
        "h": 0x12c,
        "img": _0x15e69b,
        "r": _0x4421b3(0x0, 0xb4)
      });
      _0x50092a += 450;
    }
  } else {
    var _0x50092a = 0x0;
    var _0x35d391 = 75 - this.rectW / 0x2;
    for (; _0x35d391 + 0x12c < this.rectW / 0x2;) {
      _0x50092a = -150;
      var _0x15e69b = Math.max(0x0, Math.round(_0x4421b3(0x0, 0x3)) - 0x1);
      _0x1b877b.push({
        "x": _0x35d391,
        "y": _0x50092a,
        "w": 0x12c,
        "h": 0x12c,
        "img": _0x15e69b,
        "r": _0x4421b3(0x0, 0xb4)
      });
      _0x35d391 += 450;
    }
  }
  this.biomePattern = _0x1b877b;
};
_0x38bf5a.prototype.drawTerrainFeatures = function () {
  if (this.biomePattern && this.biomePattern.length > 0x0) {
    for (i = 0x0; i < this.biomePattern.length; i++) {
      var _0xb3fa0e = this.biomePattern[i];
      _0x3b8ba2.save();
      _0x3b8ba2.translate(_0xb3fa0e.x, _0xb3fa0e.y);
      var _0x4d89f8 = _0xb3fa0e.w;
      var _0x2a9006 = _0xb3fa0e.h;
      var _0x34a010 = "0_" + _0xb3fa0e.img;
      var _0x47c6fc = "gameobj/" + this.oType + "/" + _0x34a010 + ".png";
      var _0x2cc3de = this.getSkinImageObj(_0x47c6fc);
      if (_0x2cc3de) {
        _0x3b8ba2.drawImage(_0x2cc3de, 0x0, 0x0, _0x4d89f8, _0x2a9006);
      }
      _0x3b8ba2.restore();
    }
  }
};
_0x38bf5a.prototype.drawBox = function (_0x48f8dc, _0x42c029, _0xcc72ca, _0x42757a) {
  _0x3b8ba2.beginPath();
  _0x3b8ba2.fillStyle = "red";
  _0x3b8ba2.moveTo(_0x48f8dc, _0x42c029);
  _0x3b8ba2.lineTo(_0x48f8dc, _0x42757a);
  _0x3b8ba2.lineTo(_0xcc72ca, _0x42757a);
  _0x3b8ba2.lineTo(_0xcc72ca, _0x42c029);
  _0x3b8ba2.closePath();
  _0x3b8ba2.fill();
};
function _0x38bf5a() {
  _0x38bf5a.superClass.call(this, 0x28);
  this.clientBatchDraw = true;
}
window.River = _0x38bf5a;
_0x2b451a.setCustomClassForGameObjType(_0x38bf5a, 0x28);
var _0x53abbc = _0x472b99;
_0x5e3724.prototype = Object.create(_0x53abbc.prototype);
_0x5e3724.prototype.constructor = _0x5e3724;
_0x5e3724.superClass = _0x53abbc;
_0x5e3724.prototype.LakeSize = 0x1;
_0x5e3724.prototype.isEmptyLake = false;
_0x5e3724.prototype.isDeathLake = false;
_0x5e3724.prototype.updateZ = function () {
  if (this.isEmptyLake) {
    this.z = -0x9d;
  } else {
    this.z = -0xa0;
  }
};
_0x5e3724.prototype.customDraw = function (_0x4ad125) {
  if (this.isDeathLake) {
    _0x3b8ba2.fillStyle = "#bfaf43";
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    this.poisonBody("#4854a2", this.LakeSize, this.poison);
  } else {
    this.drawBody("#4854a2", 0x1);
  }
};
_0x5e3724.prototype.poisonBody = function (_0x55c03a, _0x3c75ad, _0x26b92b) {
  {
    var _0x28ebd1 = this.rad * _0x3c75ad;
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0x1;
    if (!(_0x4bda0b == 0x2)) {
      _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
    }
    var _0x35021d = 5.5;
    var _0x49c720 = _0x1d1686("lake", this.spawnTime);
    if (_0x49c720 !== undefined && _0x49c720 != null) {
      this.theFrame = _0x49c720;
    }
    _0x35021d = this.theFrame;
    _0x3b8ba2.fillStyle = "#bfaf43";
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, _0x28ebd1, 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.fillStyle = _0x55c03a;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, _0x28ebd1 - 0x4 + _0x35021d), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.save();
    _0x3b8ba2.fillStyle = "#547d24";
    _0x3b8ba2.globalAlpha = _0x26b92b;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, _0x28ebd1 - 0x4 + _0x35021d), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.restore();
    _0x3b8ba2.restore();
  }
};
_0x5e3724.prototype.drawBody = function (_0x50fa04, _0x1f2841, _0x4292f8) {
  {
    var _0x12adac = this.rad * _0x1f2841;
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = _0x4292f8;
    if (!_0x11da90) {
      if (!(_0x4bda0b == 0x2)) {
        _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
      }
    }
    var _0x22de0c = 0x0;
    if (!_0x11da90 && !this.isEmptyLake) {
      var _0x46cf01 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
      _0x22de0c = 5.5 * Math.sin(0x2 * Math.PI / 0x4 * _0x46cf01);
    }
    if (!this.isEmptyLake) {
      _0x3b8ba2.fillStyle = "#bfaf43";
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(0x0, 0x0, _0x12adac, 0x0, Math.PI * 0x2);
      _0x3b8ba2.fill();
    }
    if (this.curBiome == 0x2) {
      _0x3b8ba2.fillStyle = "#8da0d6";
    } else {
      _0x3b8ba2.fillStyle = "#4854a2";
    }
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, _0x12adac - 0x4 + _0x22de0c), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    if (!(_0x11da90 && _0x4bda0b == 0x2)) {
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(_0x12adac * 0.45, -_0x12adac * 0.45 + 0xf * this.rPer, Math.max(0x0, _0x12adac * 0.5 + _0x22de0c), 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(_0x12adac * 0.5, _0x12adac * 0.5 + 0xf * this.rPer, Math.max(0x0, _0x12adac * 0.4 + _0x22de0c), 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(-_0x12adac * 0.55 * 0.707, +_0x12adac * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, _0x12adac * 0.5 + _0x22de0c), 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(-_0x12adac * 0.75, -_0x12adac * 0.35 + 0xf * this.rPer, Math.max(0x0, _0x12adac * 0.3 + _0x22de0c), 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(_0x12adac + 0xa * this.rPer, 0x32 * this.rPer, this.specType == 0x0 ? 0x8 : 0x4, 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(_0x12adac - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0x0, 0x2 * Math.PI);
      _0x3b8ba2.fill();
    }
    _0x3b8ba2.restore();
  }
};
_0x5e3724.prototype.onLerpUpdate = function (_0x503e7c) {
  this.LakeSize = _0x503e7c * (this.n_LakeSize - this.o_LakeSize) + this.o_LakeSize;
};
_0x5e3724.prototype.readUpdatedProperty = function (_0x536baf, _0x28b116) {
  if (_0x536baf == 0xf) {
    this.n_LakeSize = _0x28b116.readUInt16() / 0x3e8;
    this.o_LakeSize = this.LakeSize;
  } else {
    if (_0x536baf == 0x10) {
      this.poison = _0x28b116.readUInt16() / 0x3e8;
    } else if (_0x536baf == 0x76) {
      this.isEmptyLake = _0x28b116.readUInt8() == 0x1;
    }
  }
};
_0x5e3724.prototype.readCustomData_onNewlyVisible = function (_0x25647e) {
  this.isEmptyLake = _0x25647e.readUInt8() == 0x1;
  this.isDeathLake = _0x25647e.readUInt8() == 0x1;
  if (this.isDeathLake) {
    this.LakeSize = this.o_LakeSize = this.n_LakeSize = 0x1;
    this.LakeStream = _0x25647e.readUInt16();
  }
};
function _0x5e3724() {
  _0x5e3724.superClass.call(this, 0xa);
}
window.Lake = _0x5e3724;
_0x2b451a.setCustomClassForGameObjType(_0x5e3724, 0xa);
var _0x53abbc = _0x472b99;
_0x40267c.prototype = Object.create(_0x53abbc.prototype);
_0x40267c.prototype.constructor = _0x40267c;
_0x40267c.superClass = _0x53abbc;
_0x40267c.prototype.updateZ = function () {
  this.z = 0x3f2;
};
_0x40267c.prototype.customDraw = function (_0x17ef96) {
  var _0x302ea5 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x508440 = _0x7b826(_0x302ea5, 0x1, 0.3, 0x2);
  var _0x291c6b = this.getSkinImageObj("img/viralpandemic/virus.png");
  if (_0x291c6b) {
    var _0x2a2dce = this.rad * 1.2 + _0x508440;
    if (this.stickyVirus) {
      _0x3b8ba2.rotate(this.angle);
    } else {
      if (this.angleR == undefined) {
        this.angleR = Math.random() * 0.08 + 0.01;
      }
      this.angleR += 0.01;
      _0x3b8ba2.rotate(this.angleR);
    }
    _0x3b8ba2.drawImage(_0x291c6b, -_0x2a2dce, -_0x2a2dce, 0x2 * _0x2a2dce, 0x2 * _0x2a2dce);
  } else {
    this.drawOutlinedCircle('', "white");
  }
};
_0x40267c.prototype.stickyVirus = false;
_0x40267c.prototype.readUpdatedProperty = function (_0x1a6573, _0x4cd9c7) {
  if (_0x1a6573 == 0x1c) {
    this.stickyVirus = _0x4cd9c7.readUInt8() == 0x1;
  }
};
function _0x40267c() {
  _0x40267c.superClass.call(this, 0x7b);
  _0x40267c.prototype.easeAngleChanges = true;
}
window.Virus = _0x40267c;
_0x2b451a.setCustomClassForGameObjType(_0x40267c, 0x7b);
var _0x53abbc = _0x472b99;
_0x5af6a6.prototype = Object.create(_0x53abbc.prototype);
_0x5af6a6.prototype.constructor = _0x5af6a6;
_0x5af6a6.superClass = _0x53abbc;
_0x5af6a6.prototype.foodType = 0x0;
_0x5af6a6.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x5af6a6.prototype.customDraw = function (_0x807553) {
  _0x3b8ba2.save();
  var _0x445915 = this.getImmunityFoodName();
  var _0x5e2d4f = this.getSkinImageObj("img/viralpandemic/" + _0x445915 + "_e.png");
  if (_0x5e2d4f) {
    var _0xaca7c9 = this.rad;
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.rPer * 0.5 * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x5e2d4f, -_0xaca7c9, -_0xaca7c9, 0x2 * _0xaca7c9, 0x2 * _0xaca7c9);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
_0x5af6a6.prototype.getImmunityFoodName = function () {
  var _0xba022c = "cabbage";
  switch (this.foodType) {
    case 0x1:
      _0xba022c = "cabbage";
      break;
    case 0x2:
      _0xba022c = "dragonfruit";
      break;
    case 0x3:
      _0xba022c = "onion";
      break;
    case 0x4:
      _0xba022c = "papaya";
      break;
    case 0x5:
      _0xba022c = "papayaslice";
      break;
    case 0x6:
      _0xba022c = "peach";
      break;
    case 0x7:
      _0xba022c = "peapod";
      break;
    case 0x8:
      _0xba022c = "peapod1";
      break;
  }
  return _0xba022c;
};
_0x5af6a6.prototype.readCustomData_onNewlyVisible = function (_0x2aa0be) {
  this.foodType = _0x2aa0be.readUInt8();
};
function _0x5af6a6() {
  _0x5af6a6.superClass.call(this, 0x7d);
  this.doesDrawEffectScale = true;
}
window.ImmunityFood = _0x5af6a6;
_0x2b451a.setCustomClassForGameObjType(_0x5af6a6, 0x7d);
var _0x53abbc = _0x472b99;
_0x26c39b.prototype = Object.create(_0x53abbc.prototype);
_0x26c39b.prototype.constructor = _0x26c39b;
_0x26c39b.superClass = _0x53abbc;
var _0x274629 = 0x0;
var _0x54d9a6 = 0x0;
_0x26c39b.prototype.updateZ = function () {
  this.z = 0x18706;
};
_0x26c39b.prototype.customDraw = function (_0x461c76) {
  _0x3b8ba2.save();
  if (this.isEnabled) {
    _0x3b8ba2.globalAlpha = 0.4;
  } else {
    _0x3b8ba2.globalAlpha = 0.2;
  }
  _0x3b8ba2.fillStyle = "black";
  _0x3b8ba2.fillRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
  _0x3b8ba2.strokeRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
  if (this.isEnabled) {
    _0x3b8ba2.globalAlpha = this.opacity * 0.5;
  } else {
    _0x3b8ba2.globalAlpha = this.opacity * 0.2;
  }
  _0x3b8ba2.fillStyle = this.color;
  _0x3b8ba2.fillRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
  _0x3b8ba2.lineWidth = "3";
  if (this.btnStroke > 0x0) {
    _0x3b8ba2.globalAlpha = this.opacity * 0.9;
    _0x3b8ba2.strokeStyle = this.color;
    _0x3b8ba2.strokeRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
  }
  _0x3b8ba2.restore();
  if (this.isEnabled) {
    var _0xa75523 = this.x - this.rectW / 0x2;
    var _0x4701df = this.x + this.rectW / 0x2;
    var _0x153a88 = this.y - this.rectH / 0x2;
    var _0x2b524a = this.y + this.rectH / 0x2;
    var _0xa3707d = false;
    if (_0x84fdf7 > _0xa75523 && _0x84fdf7 < _0x4701df && _0x2cc7d6 > _0x153a88 && _0x2cc7d6 < _0x2b524a || _0x19792a == this.hotkey) {
      _0xa3707d = true;
      _0x54d9a6 = _0x274629 = this.id;
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = this.opacity;
      _0x3b8ba2.fillStyle = this.color;
      _0x3b8ba2.fillRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
      if (this.hoverStroke > 0x0) {
        _0x3b8ba2.globalAlpha = 0x1;
        _0x3b8ba2.lineWidth = this.hoverStroke;
        _0x3b8ba2.strokeStyle = "#4AE05E";
        _0x3b8ba2.strokeRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
      }
      _0x3b8ba2.restore();
    } else {
      if (_0x54d9a6 == this.id) {
        _0x274629 = 0x0;
      }
    }
  }
  if (null != this.txtLabel) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = _0xa3707d ? 0x1 : 0.6;
    if (_0xa3707d) {
      this.txtLabel.setFontSize(0xc);
      this.txtLabel.setColor("white");
      this.txtLabel.setStroke(0x2);
    } else {
      this.txtLabel.setColor(this.isEnabled ? "white" : "black");
      this.txtLabel.setStroke(0x0);
    }
    this.txtLabel.draw();
    _0x3b8ba2.restore();
  }
  if (this.isEnabled && this.hotkey != '') {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0.2;
    _0x3b8ba2.fillStyle = "white";
    var _0xa044 = -this.rectW / 0x2 + 0x2;
    var _0x5e4179 = this.rectH / 0x2 - 0xc;
    _0x3b8ba2.fillRect(_0xa044, _0x5e4179, 0xa, 0xa);
    this.txtHotkey.x = _0xa044 + 0x5;
    this.txtHotkey.y = _0x5e4179 + 0x5;
    _0x3b8ba2.globalAlpha = 0.7;
    this.txtHotkey.draw();
    _0x3b8ba2.restore();
  }
};
_0x26c39b.prototype.optionID = 0x0;
_0x26c39b.prototype.optionType = 0x0;
_0x26c39b.prototype.label = 0x0;
_0x26c39b.prototype.highlight = 0x0;
_0x26c39b.prototype.txtLabel = null;
_0x26c39b.prototype.txtHotkey = null;
_0x26c39b.prototype.isEnabled = true;
_0x26c39b.prototype.hotkey = '';
_0x26c39b.prototype.readCustomData_onNewlyVisible = function (_0x30bd36) {
  _0x19792a = null;
  _0xb3a425 = +new Date() + 0x3e8;
  this.optionID = _0x30bd36.readUInt32();
  var _0x516881 = _0x30bd36.readString();
  _0x516881 = _0x516881.replace("\n", "newline");
  console.log(_0x516881);
  var _0x2d40f6 = JSON.parse(_0x516881);
  this.label = _0x2d40f6.label.replace("newline", "\n");
  this.optionType = _0x2d40f6.value;
  this.color = _0x2d40f6.color;
  this.opacity = _0x2d40f6.opacity / 0x64;
  this.hoverStroke = _0x2d40f6.hoverStroke;
  this.btnStroke = _0x2d40f6.btnStroke;
  this.isEnabled = Number(_0x2d40f6.enabled) == 0x1;
  this.hotkey = _0x2d40f6.hotkey;
  if (!this.isEnabled) {
    this.opacity *= 0.5;
  }
  if (null == this.txtLabel) {
    this.txtLabel = new _0x4e6b66(0xc, "#FFFFFF");
    this.txtLabel.x = 0x0;
    this.txtLabel.y = 0x0;
    this.txtLabel.strokeW = 0x0;
    this.txtLabel.multiLine = true;
    this.txtLabel.renderScale = 0x2;
    this.txtLabel.setText(this.label);
  }
  if (this.isEnabled && this.hotkey != '' && null == this.txtHotkey) {
    this.txtHotkey = new _0x4e6b66(0x8, "#FFFFFF");
    this.txtHotkey.x = 0x0;
    this.txtHotkey.y = 0x0;
    this.txtHotkey.strokeW = 0x0;
    this.txtHotkey.multiLine = false;
    this.txtHotkey.renderScale = 0x2;
    this.txtHotkey.setText(this.hotkey);
    this.txtHotkey.setColor("white");
    this.txtHotkey.setStroke(0x0);
  }
};
function _0x26c39b() {
  _0x26c39b.superClass.call(this, 0x81);
}
window.GameOptionButton = _0x26c39b;
_0x2b451a.setCustomClassForGameObjType(_0x26c39b, 0x81);
var _0x53abbc = _0x472b99;
_0x294478.prototype = Object.create(_0x53abbc.prototype);
_0x294478.prototype.constructor = _0x294478;
_0x294478.superClass = _0x53abbc;
_0x294478.prototype.updateZ = function () {
  this.z = 0x18706;
};
_0x294478.prototype.customDraw = function (_0xc2923f) {
  _0x3b8ba2.save();
  var _0x3fd78f = this.rectW;
  var _0x31c9c7 = this.rectH;
  _0x3b8ba2.globalAlpha = 0.3;
  _0x3b8ba2.fillStyle = "black";
  _0x3b8ba2.fillRect(-_0x3fd78f / 0x2, -_0x31c9c7 / 0x2, _0x3fd78f, _0x31c9c7);
  _0x3b8ba2.globalAlpha = 0.15;
  _0x3b8ba2.fillStyle = "white";
  _0x3fd78f -= 0x3;
  _0x31c9c7 -= 0x3;
  _0x3b8ba2.fillRect(-_0x3fd78f / 0x2, -_0x31c9c7 / 0x2, _0x3fd78f, _0x31c9c7);
  _0x3b8ba2.stroke();
  _0x3b8ba2.restore();
  if (null != this.txtTitle) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0x1;
    this.txtTitle.setFontSize(0x12);
    this.txtTitle.setColor("white");
    this.txtTitle.setStroke(0x2);
    this.txtTitle.draw();
    _0x3b8ba2.restore();
  }
  if (null != this.txtMessage) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0x1;
    this.txtMessage.draw();
    _0x3b8ba2.restore();
  }
  if (null != this.timerTxt) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0x1;
    var _0x3fd78f = 0x19;
    var _0x31c9c7 = 0x19;
    _0x3b8ba2.globalAlpha = 0.5;
    _0x3b8ba2.fillStyle = "red";
    var _0x19e31c = this.rectW / 0x2 - _0x3fd78f - 1.5;
    var _0x5d105f = -this.rectH / 0x2 + 1.5;
    _0x3b8ba2.fillRect(_0x19e31c, _0x5d105f, _0x3fd78f, _0x31c9c7);
    _0x3b8ba2.globalAlpha = 0x1;
    this.timerTxt.setFontSize(0x10);
    this.timerTxt.setColor("white");
    this.timerTxt.setStroke(0x2);
    var _0x27a37b = this.timeoutTime - Math.round((+new Date() - this.spawnTime) / 0x3e8);
    this.timerTxt.setText(_0x27a37b);
    this.timerTxt.x = _0x19e31c + 12.5;
    this.timerTxt.y = _0x5d105f + 12.5;
    this.timerTxt.draw();
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.save();
  _0x4f5f85(this);
  _0x3b8ba2.restore();
};
_0x294478.prototype.option1 = null;
_0x294478.prototype.option2 = null;
_0x294478.prototype.option3 = null;
_0x294478.prototype.option4 = null;
function _0x4f5f85(_0xd5281b) {
  var _0x303227 = _0xd5281b.rectW * 0.5;
  var _0x532ffb = _0xd5281b.rectH * 0.35;
  var _0x2ca122 = -_0x303227 / 0x2;
  var _0x3207a2 = -0x14;
  _0x3b8ba2.globalAlpha = 0.2;
  _0x3b8ba2.fillStyle = "black";
  _0x3b8ba2.fillRect(_0x2ca122, _0x3207a2, _0x303227, _0x532ffb);
  _0x3b8ba2.globalAlpha = 0.7;
  _0x3b8ba2.fillStyle = "limegreen";
  _0x3b8ba2.fillRect(_0x2ca122, _0x3207a2, _0x303227, 0x14);
  _0x348dc4("options", _0xd5281b, _0x2ca122, _0x3207a2 + 2.5, _0x303227, _0x532ffb, "ARENA OPTIONS", "white", 0x2);
  _0x303227 = 0x64;
  _0x532ffb = 0xf;
  _0x2ca122 = -_0x303227 / 0x2;
  _0x3207a2 += 0x7;
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.fillStyle = "green";
  _0x3207a2 += _0x532ffb + 0x5;
  _0x3b8ba2.globalAlpha = 0.7;
  _0x348dc4("option2", _0xd5281b, _0x2ca122, _0x3207a2, _0x303227, _0x532ffb, (_0xd5281b.data.watr == Number(0x1) ? "INFINITE" : "LIMITED") + " WATER", "white", 0x0);
  _0x3207a2 += _0x532ffb;
  _0x348dc4("option3", _0xd5281b, _0x2ca122, _0x3207a2, _0x303227, _0x532ffb, (_0xd5281b.data.hp == Number(0x1) ? "INFINITE" : "LIMITED") + " HEALTH", "white", 0x0);
  _0x3207a2 += _0x532ffb;
  _0x348dc4("option4", _0xd5281b, _0x2ca122, _0x3207a2, _0x303227, _0x532ffb, "TURN " + (_0xd5281b.data.speed == Number(0x1) ? "NORMAL" : "FAST"), "white", 0x0);
  _0x3207a2 += _0x532ffb;
  _0x348dc4("option5", _0xd5281b, _0x2ca122, _0x3207a2, _0x303227, _0x532ffb, _0xd5281b.data.climax == Number(0x1) ? "LAST MAN STANDING" : _0xd5281b.data.bites + " BITES WINS", "white", 0x0);
  _0x3207a2 += _0x532ffb;
  _0x348dc4("option6", _0xd5281b, _0x2ca122, _0x3207a2, _0x303227, _0x532ffb, _0xd5281b.data.wall == Number(0x1) ? "WALL DAMAGE" : "NO WALL DAMAGE", "white", 0x0);
}
function _0x348dc4(_0x10005c, _0x360035, _0x111ff1, _0x4f208c, _0x9dc44, _0x41d3d1, _0xee9c0d, _0x3073dc, _0x4fbea1) {
  if (_0x4fbea1 == undefined) {
    _0x4fbea1 = 0x0;
  }
  if (null == _0x360035[_0x10005c]) {
    _0x360035[_0x10005c] = new _0x4e6b66(0xa, _0x3073dc);
    _0x360035[_0x10005c].x = _0x111ff1;
    _0x360035[_0x10005c].y = _0x4f208c;
    _0x360035[_0x10005c].strokeW = 0x0;
    _0x360035[_0x10005c].multiLine = true;
    _0x360035[_0x10005c].renderScale = 0x2;
    _0x360035[_0x10005c].setStroke(_0x4fbea1);
    _0x360035[_0x10005c].setText(_0xee9c0d);
  } else {
    _0x360035[_0x10005c].x = _0x111ff1 + _0x9dc44 / 0x2;
    _0x360035[_0x10005c].y = _0x4f208c + 0x7;
    _0x360035[_0x10005c].draw();
  }
}
_0x294478.prototype.timeoutTime = 0x0;
_0x294478.prototype.optionType = 0x0;
_0x294478.prototype.label = 0x0;
_0x294478.prototype.highlight = 0x0;
_0x294478.prototype.txtTitle = null;
_0x294478.prototype.txtMessage = null;
_0x294478.prototype.timerTxt = null;
_0x294478.prototype.screenMsg = null;
_0x294478.prototype.screenTitle = null;
_0x294478.prototype.invitee_id = null;
_0x294478.prototype.spiderX = null;
_0x294478.prototype.spiderY = null;
_0x294478.prototype.beforeCustomDraw = function (_0xc04a60) {
  _0x3b8ba2.save();
  _0x3b8ba2.strokeStyle = "white";
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(this.x, this.y);
  _0x3b8ba2.lineTo(this.spiderX, this.spiderY);
  _0x3b8ba2.stroke();
  _0x3b8ba2.restore();
};
_0x294478.prototype.worldUpd_readMsgUpdate = function (_0x30c0e5) {
  var _0x9f9c9d = _0x30c0e5.readUInt16() / 0x4;
  var _0x95d088 = _0x30c0e5.readUInt16() / 0x4;
  this.setMovedToPos(_0x9f9c9d, _0x95d088);
  var _0x1f6c76 = _0x30c0e5.readUInt32() / 0x64;
  var _0x2417ea = _0x30c0e5.readUInt32() / 0x64;
  this.spider_ox = this.spiderX;
  this.spider_oy = this.spiderY;
  this.spider_nx = _0x1f6c76;
  this.spider_ny = _0x2417ea;
};
_0x294478.prototype.onLerpUpdate = function (_0x4e1fd9) {
  this.spiderX = _0x4e1fd9 * (this.spider_nx - this.spider_ox) + this.spider_ox;
  this.spiderY = _0x4e1fd9 * (this.spider_ny - this.spider_oy) + this.spider_oy;
};
_0x294478.prototype.data = null;
_0x294478.prototype.readCustomData_onNewlyVisible = function (_0x285898) {
  var _0x5dc104 = _0x285898.readString();
  var _0x884bca = _0x285898.readString();
  var _0x3fbb09 = _0x285898.readUInt8();
  var _0x180b81 = _0x285898.readBitGroup();
  var _0xcf672f = _0x180b81.getBool() ? 0x1 : 0x0;
  var _0x3cf4f9 = _0x180b81.getBool() ? 0x1 : 0x0;
  var _0x50981a = _0x180b81.getBool() ? 0x1 : 0x0;
  var _0x1cdaaf = _0x180b81.getBool() ? 0x1 : 0x0;
  var _0x50306c = _0x180b81.getBool() ? 0x1 : 0x0;
  var _0x112cb6 = 0x0;
  if (!_0x50306c) {
    _0x112cb6 = _0x285898.readUInt8();
  }
  var _0x2d0e3f = {
    "title": _0x5dc104,
    "invtedBy": _0x884bca,
    "watr": _0xcf672f,
    "hp": _0x3cf4f9,
    "speed": _0x50981a,
    "climax": _0x50306c,
    "wall": _0x1cdaaf,
    "time": _0x3fbb09,
    "bites": _0x112cb6
  };
  this.spider_ox = this.spiderX = this.spider_nx = this.x;
  this.spider_oy = this.spiderY = this.spider_ny = this.y;
  this.data = _0x2d0e3f;
  this.timeoutTime = Number(_0x2d0e3f.time);
  if (null == this.txtTitle) {
    this.txtTitle = new _0x4e6b66(0x12, "#FFFFFF");
    this.txtTitle.x = 0x0;
    this.txtTitle.y = this.rectH / 0x2 * -0.85;
    this.txtTitle.strokeW = 0x0;
    this.txtTitle.multiLine = true;
    this.txtTitle.renderScale = 0x2;
    this.txtTitle.setText(this.data.title);
  }
  if (null == this.txtMessage) {
    this.txtMessage = new _0x4e6b66(0x10, "#FFFFFF");
    this.txtMessage.x = 0x0;
    this.txtMessage.y = this.txtTitle.y + 0x28;
    this.txtMessage.strokeW = 0x0;
    this.txtMessage.multiLine = true;
    this.txtMessage.renderScale = 0x2;
    if (this.data.invtedBy == '') {
      this.data.invtedBy = "mope.io";
    }
    this.txtMessage.setText(this.data.invtedBy + "\ninvites you for 1v1 fight!");
  }
  if (null == this.timerTxt) {
    this.timerTxt = new _0x4e6b66(0x10, "#FFFFFF");
    this.timerTxt.x = 0x0;
    this.timerTxt.y = 0x0;
    this.timerTxt.strokeW = 0x0;
    this.timerTxt.multiLine = false;
    this.timerTxt.renderScale = 0x2;
    this.timerTxt.setText("15");
  }
};
function _0x294478() {
  _0x294478.superClass.call(this, 0x82);
}
window.ScreenMessage = _0x294478;
_0x2b451a.setCustomClassForGameObjType(_0x294478, 0x82);
var _0x2995b5 = _0x3677e4;
var _0x53abbc = _0x472b99;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x3677e4.prototype.customType = 0x0;
_0x3677e4.prototype.updateZ = function () {
  this.z = 0x3e9;
};
_0x3677e4.prototype.customDraw = function (_0x177150) {};
_0x3677e4.prototype.setObjTypes = function (_0x53cdc0, _0x296dfe) {
  this.oType = _0x53cdc0;
  this.customType = _0x296dfe;
};
_0x3677e4.prototype.readCustomData_onNewlyVisible = function (_0x3843b8) {
  _0x3677e4.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x3843b8);
};
_0x3677e4.prototype.readCustomData_onUpdate = function (_0x401d03) {
  _0x3677e4.superClass.prototype.readCustomData_onUpdate.call(this, _0x401d03);
};
function _0x3677e4() {
  _0x3677e4.superClass.call(this, 0x80);
  _0x3677e4.prototype.easeAngleChanges = false;
}
window.CustomObj = _0x3677e4;
_0x2b451a.setCustomClassForGameObjType(_0x3677e4, 0x80);
_0x2b451a.addCustomClassType(0x80);
var _0x2995b5 = _0x363bc7;
var _0x53abbc = _0x3677e4;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x363bc7.prototype.customDraw = function (_0x4db7ce) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0.095;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, 0x2 * Math.PI, false);
  _0x3b8ba2.arc(0x0, 0x0, this.rad * 0.9, 0x0, 0x2 * Math.PI, true);
  _0x3b8ba2.fillStyle = "red";
  _0x3b8ba2.closePath();
  _0x3b8ba2.fill();
  _0x3b8ba2.restore();
  _0x3b8ba2.save();
  _0x3b8ba2.rotate(this.angle + -0x5a * (Math.PI / 0xb4));
  var _0xee4d57 = this.getSkinImageObj("img/custom/trunk2.png");
  if (_0xee4d57) {
    var _0x5d62f6 = 0x3c;
    _0x3b8ba2.save();
    _0x3b8ba2.drawImage(_0xee4d57, -_0x5d62f6, this.rad - _0x5d62f6 + 0xf, 0x2 * _0x5d62f6, 0x2 * _0x5d62f6);
    _0x3b8ba2.restore();
  }
  var _0xee4d57 = this.getSkinImageObj("img/custom/trunk1.png");
  if (_0xee4d57) {
    var _0x5d62f6 = 0x3c;
    _0x3b8ba2.save();
    _0x3b8ba2.drawImage(_0xee4d57, -_0x5d62f6, -this.rad - _0x5d62f6 - 0xf, 0x2 * _0x5d62f6, 0x2 * _0x5d62f6);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
_0x363bc7.prototype.readCustomData_onNewlyVisible = function (_0x30d78b) {
  _0x363bc7.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x30d78b);
};
function _0x363bc7() {
  _0x363bc7.superClass.call(this);
}
window.Slingshot = _0x363bc7;
_0x2b451a.setCustomClassForGameObjType(_0x363bc7, 0x80, 0x1);
var _0x2995b5 = _0x5c5d96;
var _0x53abbc = _0x3677e4;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x5c5d96.prototype.updateZ = function () {
  this.z = 0x3f2 + this.rad;
};
_0x5c5d96.prototype.customDraw = function (_0x27e5e0) {
  _0x3b8ba2.save();
  var _0x3ccca5 = this.getSkinImageObj("img/custom/pad.png");
  if (_0x3ccca5) {
    var _0x2f9ec8 = this.rad;
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.angle + -0x5a * (Math.PI / 0xb4));
    _0x3b8ba2.drawImage(_0x3ccca5, -_0x2f9ec8, -_0x2f9ec8, 0x2 * _0x2f9ec8, 0x2 * _0x2f9ec8);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
_0x5c5d96.prototype.ropeMargin = 0x0;
_0x5c5d96.prototype.beforeCustomDraw = function (_0x1321b1) {
  _0x3b8ba2.save();
  _0x3b8ba2.strokeStyle = "#4f4f4f";
  _0x3b8ba2.lineWidth = 0xa;
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(this.x, this.y);
  _0x3b8ba2.lineTo(this.base1_X, this.base1_Y);
  _0x3b8ba2.stroke();
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(this.x, this.y);
  _0x3b8ba2.lineTo(this.base2_X, this.base2_Y);
  _0x3b8ba2.stroke();
  _0x3b8ba2.restore();
  _0x3b8ba2.save();
  _0x3b8ba2.strokeStyle = "#222222";
  _0x3b8ba2.lineWidth = 6;
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(this.x, this.y);
  _0x3b8ba2.lineTo(this.base1_X, this.base1_Y);
  _0x3b8ba2.stroke();
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(this.x, this.y);
  _0x3b8ba2.lineTo(this.base2_X, this.base2_Y);
  _0x3b8ba2.stroke();
  _0x3b8ba2.restore();
};
_0x5c5d96.prototype.readCustomData_onNewlyVisible = function (_0x536b75) {
  _0x5c5d96.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x536b75);
  this.base1_ox = this.base1_X = this.base1_nx = this.x;
  this.base1_oy = this.base1_Y = this.base1_ny = this.y;
  this.base2_ox = this.base2_X = this.base2_nx = this.x;
  this.base2_oy = this.base2_Y = this.base2_ny = this.y;
  this.readBaseData(_0x536b75);
};
_0x5c5d96.prototype.readBaseData = function (_0x3a24f0) {
  var _0x261aa1 = _0x3a24f0.readUInt32() / 0x64;
  var _0x4e4c0c = _0x3a24f0.readUInt32() / 0x64;
  var _0x13b764 = _0x3a24f0.readUInt32() / 0x64;
  var _0x1fa114 = _0x3a24f0.readUInt32() / 0x64;
  this.base1_ox = this.base1_X;
  this.base1_oy = this.base1_Y;
  this.base1_nx = _0x261aa1;
  this.base1_ny = _0x4e4c0c;
  this.base2_ox = this.base2_X;
  this.base2_oy = this.base2_Y;
  this.base2_nx = _0x13b764;
  this.base2_ny = _0x1fa114;
};
_0x5c5d96.prototype.base1_X = 0x0;
_0x5c5d96.prototype.base1_Y = 0x0;
_0x5c5d96.prototype.base2_X = 0x0;
_0x5c5d96.prototype.base2_Y = 0x0;
_0x5c5d96.prototype.onLerpUpdate = function (_0x204686) {
  this.base1_X = _0x204686 * (this.base1_nx - this.base1_ox) + this.base1_ox;
  this.base1_Y = _0x204686 * (this.base1_ny - this.base1_oy) + this.base1_oy;
  this.base2_X = _0x204686 * (this.base2_nx - this.base2_ox) + this.base2_ox;
  this.base2_Y = _0x204686 * (this.base2_ny - this.base2_oy) + this.base2_oy;
};
function _0x5c5d96() {
  _0x5c5d96.superClass.call(this);
}
window.SlingshotPad = _0x5c5d96;
_0x2b451a.setCustomClassForGameObjType(_0x5c5d96, 0x80, 0x2);
var _0x2995b5 = _0x174aa7;
var _0x53abbc = _0x3677e4;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x174aa7.prototype.customDraw = function (_0x20004a) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0.095;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, 0x2 * Math.PI, false);
  _0x3b8ba2.arc(0x0, 0x0, this.rad * 0.9, 0x0, 0x2 * Math.PI, true);
  _0x3b8ba2.fillStyle = "red";
  _0x3b8ba2.closePath();
  _0x3b8ba2.fill();
  _0x3b8ba2.restore();
};
function _0x174aa7() {
  _0x174aa7.superClass.call(this);
}
window.Trampoline = _0x174aa7;
_0x2b451a.setCustomClassForGameObjType(_0x174aa7, 0x80, 0x4);
var _0x2995b5 = _0x157470;
var _0x53abbc = _0x3677e4;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x157470.prototype.updateZ = function () {
  this.z = 0x3f2 + this.rad;
};
_0x157470.prototype.customDraw = function (_0x11f2f6) {
  this.drawLeg(_0x4c74e7);
  this.drawLeg(0x32);
  this.drawLeg(0x87);
  this.drawLeg(0xe1);
  _0x3b8ba2.save();
  var _0x1f8ff2 = this.getSkinImageObj("img/custom/trampoline/rug_zebra.png");
  if (_0x1f8ff2) {
    var _0x52287e = this.rad * (this.stretch / 0x64);
    var _0x3e7b9a = _0x52287e + 0xf;
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x1f8ff2, -_0x52287e, -_0x3e7b9a, 0x2 * _0x52287e, 0x2 * _0x3e7b9a);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
var _0x4c74e7 = -0x2b;
function _0x25e32b(_0x11d7e6) {
  return 0x1 + (0x1 - _0x11d7e6.stretch / 0x64);
}
_0x157470.prototype.drawLeg = function (_0x582825) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0x1;
  var _0x402e50 = this.getSkinImageObj("img/custom/trampoline/leg_zebra.png");
  if (_0x402e50) {
    var _0x1a0125 = this.rad * 0.3;
    var _0x1adf7a = 0x2 * this.rad * 0.4 * (0x1 + (0x1 - this.stretch / 0x64));
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.angle + _0x582825 * (Math.PI / 0xb4));
    _0x3b8ba2.drawImage(_0x402e50, -_0x1a0125, this.rad * (0x1 + (0x1 - this.stretch / 0x64)), 0x2 * _0x1a0125, _0x1adf7a);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
_0x157470.prototype.readCustomData_onNewlyVisible = function (_0x3a5802) {
  _0x157470.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x3a5802);
  this.o_stretch = this.nw_strech = this.n_strech = this.stretch;
  this.readBaseData(_0x3a5802);
};
_0x157470.prototype.baseStrech = 0x0;
_0x157470.prototype.readCustomData_onUpdate = function (_0x5d178a) {
  _0x157470.superClass.prototype.readCustomData_onUpdate.call(this, _0x5d178a);
  this.readBaseData(_0x5d178a);
};
_0x157470.prototype.stretch = 0x64;
_0x157470.prototype.readBaseData = function (_0x4d6984) {
  var _0x13f42c = _0x4d6984.readUInt32() / 0x64;
  this.o_stretch = this.stretch;
  this.n_strech = _0x13f42c;
};
_0x157470.prototype.base1_X = 0x0;
_0x157470.prototype.base1_Y = 0x0;
_0x157470.prototype.base2_X = 0x0;
_0x157470.prototype.base2_Y = 0x0;
_0x157470.prototype.base3_X = 0x0;
_0x157470.prototype.base3_Y = 0x0;
_0x157470.prototype.base4_X = 0x0;
_0x157470.prototype.base4_Y = 0x0;
_0x157470.prototype.onLerpUpdate = function (_0x1888f8) {
  this.stretch = _0x1888f8 * (this.n_strech - this.o_stretch) + this.o_stretch;
};
function _0x157470() {
  _0x157470.superClass.call(this);
}
window.TrampolinePad = _0x157470;
_0x2b451a.setCustomClassForGameObjType(_0x157470, 0x80, 0x5);
var _0x53abbc = _0xf4bb63;
_0x3a3c21.prototype = Object.create(_0x53abbc.prototype);
_0x3a3c21.prototype.constructor = _0x3a3c21;
_0x3a3c21.superClass = _0x53abbc;
_0x3a3c21.prototype.updateZ = function () {
  this.z = 0x186a0;
};
_0x3a3c21.prototype.getSkinName = function () {
  var _0x5dcfe5 = this.animalInfo();
  if (this.animalSpecies == 0x8 || this.animalSpecies == 0x6) {
    return _0x5dcfe5.skinName + "_body";
  }
  return _0x5dcfe5.skinName;
};
_0x3a3c21.prototype.animalInfo = function () {
  var _0x444470 = {};
  var _0xc39411 = '';
  switch (this.animalSpecies) {
    case 0x0:
      _0xc39411 = "jagga";
      _0x444470.aniName = "Jagga";
      break;
    case 0x1:
      _0xc39411 = "bali";
      _0x444470.aniName = "Bali";
      break;
    case 0x2:
      _0xc39411 = "jutt";
      _0x444470.aniName = "Jutt";
      break;
    case 0x3:
      _0xc39411 = "bhollaa";
      _0x444470.aniName = "Bhollaa";
      break;
    case 0x4:
      _0xc39411 = "butt";
      _0x444470.aniName = "Butt";
      break;
    case 0x5:
      _0xc39411 = "khattak";
      _0x444470.aniName = "Khattak";
      break;
    case 0x6:
      _0xc39411 = "chandyo/chandyo";
      _0x444470.aniName = "Chandyo";
      break;
    case 0x7:
      _0xc39411 = "abysmal";
      _0x444470.aniName = "Abysmal";
      break;
    case 0x8:
      _0xc39411 = "sultan/sultan";
      _0x444470.aniName = "Sultan";
      break;
    case 0x9:
      _0xc39411 = "gujjar";
      _0x444470.aniName = "Gujjar";
      break;
  }
  _0x444470.aniCol = "#FF9000";
  _0x444470.skinName = "land/aiboss/" + _0xc39411;
  _0x444470.upgradeText = "UPGRADED to " + _0x444470.aniName + " the A.I BOSS!";
  _0x444470.aniCol = "#22FF8A";
  return _0x444470;
};
_0x3a3c21.prototype.getAbilityInfo = function (_0x14c449) {
  var _0x382281 = {};
  var _0x2401b8 = this.animalInfo();
  _0x382281.abilName = "AI";
  _0x382281.abilImg = "skins/" + _0x2401b8.skinName + ".png";
  _0x382281.speciesType = this.animalSpecies;
  _0x382281.skinThemeID = this.skinThemeID;
  _0x382281.mopeSeasonID = this.mopeSeasonID;
  return _0x382281;
};
_0x3a3c21.prototype.diveColor1 = "#64a034";
_0x3a3c21.prototype.diveColor2 = "#598b30";
_0x3a3c21.prototype.onAnimalSpeciesSet = function () {
  switch (this.animalSpecies) {
    case 0x1:
      this.diveColor1 = "#dbb300";
      this.diveColor2 = "#bf9d04";
      break;
    case 0x2:
      this.diveColor1 = "#79c9a8";
      this.diveColor2 = "#6fad9f";
      break;
  }
};
_0x3a3c21.prototype.leftWingAnim = null;
_0x3a3c21.prototype.flapAngleDiff = 0x3;
_0x3a3c21.prototype.flapAngle = 0x3;
_0x3a3c21.prototype.flapF = 0.1;
_0x3a3c21.prototype.flapDur = 0x2;
_0x3a3c21.prototype.sF = 0.02;
_0x3a3c21.prototype.drawWings = function () {
  if (this.leftWingAnim == null) {
    this.leftWingAnim = new _0x1c8e57(this, this.flapDur, _0x1c8e57.wave);
    this.leftWingAnim.keepLastFrame = true;
    this.leftWingAnim.loop = true;
    this.leftWingAnim.onFrameEntered = function (_0x5016bf) {
      this.forObj.frame1 = _0x5016bf;
    };
  }
  if (this.leftWingAnim != null) {
    this.leftWingAnim.run();
  }
  var _0x186656 = this.rad - this.outlineW;
  var _0x29ccdd = this.frame1 * this.sF * _0x186656;
  var _0x3a17d7 = -(-this.flapF + this.frame1);
  var _0x320692 = _0x3a17d7 * (this.flapAngle * (Math.PI / 0xb4));
  var _0x3180a3 = this.getSkinImageObj("skins/land/aiboss/sultan/left_wing.png");
  var _0xbc2265 = this.getSkinImageObj("skins/land/aiboss/sultan/right_wing.png");
  if (_0x3180a3 && _0xbc2265) {
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.flapAngleDiff * (Math.PI / 0xb4) + _0x320692);
    _0x3b8ba2.drawImage(_0x3180a3, -_0x186656 * 1.4705882352941178 - 0.2 * _0x186656, -_0x186656 * 1.4705882352941178 + _0x29ccdd, 0x2 * _0x186656 * 1.4705882352941178, 0x2 * _0x186656 * 1.4705882352941178 + _0x29ccdd * 1.5);
    _0x3b8ba2.restore();
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(-(this.flapAngleDiff * (Math.PI / 0xb4) + _0x320692));
    _0x3b8ba2.drawImage(_0xbc2265, -_0x186656 * 1.4705882352941178 + 0.2 * _0x186656, -_0x186656 * 1.4705882352941178 + _0x29ccdd, 0x2 * _0x186656 * 1.4705882352941178, 0x2 * _0x186656 * 1.4705882352941178 + _0x29ccdd * 1.5);
    _0x3b8ba2.restore();
  }
};
_0x3a3c21.prototype.drawSkinCustomization = function () {
  if (this.animalSpecies == 0x8) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = _0x11da90 ? 0.5 : 0x1;
    var _0xa001fa = this.getSkinImageObj("skins/land/aiboss/sultan/sultan_head.png");
    if (_0xa001fa) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = _0x11da90 ? 0.2 : 0x1;
      var _0x4190b8 = this.rad - this.outlineW;
      _0x3b8ba2.drawImage(_0xa001fa, -_0x4190b8 * 1.4705882352941178, -_0x4190b8 * 1.4705882352941178, 0x2 * _0x4190b8 * 1.4705882352941178, 0x2 * _0x4190b8 * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
    this.drawWings();
    var _0x359ac1 = -1.25;
    var _0x1c5946 = this.getSkinImageObj("skins/land/aiboss/sultan/tail.png");
    if (_0x1c5946) {
      _0x3b8ba2.save();
      var _0x4190b8 = this.rad - this.outlineW;
      _0x3b8ba2.drawImage(_0x1c5946, -_0x4190b8 * 0.4, -_0x4190b8 * 0.4 + _0x359ac1 * _0x4190b8, 0x2 * _0x4190b8 * 0.4, 0x2 * _0x4190b8 * 0.4);
      _0x3b8ba2.restore();
    }
    _0x3b8ba2.restore();
  } else {
    if (this.animalSpecies == 0x6) {
      var _0x1c5946 = this.getSkinImageObj("skins/land/aiboss/chandyo/chandyo_back.png");
      if (_0x1c5946) {
        _0x3b8ba2.save();
        var _0x4190b8 = this.rad - this.outlineW;
        _0x3b8ba2.drawImage(_0x1c5946, -_0x4190b8 * 1.4705882352941178, -_0x4190b8 * 1.4705882352941178 + 0x0 * _0x4190b8, 0x2 * _0x4190b8 * 1.4705882352941178, 0x2 * _0x4190b8 * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
      var _0xa001fa = this.getSkinImageObj("skins/land/aiboss/chandyo/chandyo_head.png");
      if (_0xa001fa) {
        _0x3b8ba2.save();
        var _0x4190b8 = this.rad - this.outlineW;
        _0x3b8ba2.drawImage(_0xa001fa, -_0x4190b8 * 1.4705882352941178, -_0x4190b8 * 1.4705882352941178 + 0.42 * _0x4190b8, 0x2 * _0x4190b8 * 1.4705882352941178, 0x2 * _0x4190b8 * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
    }
  }
};
function _0x3a3c21() {
  _0x3a3c21.superClass.call(this, 0x2);
}
window.AiBoss = _0x3a3c21;
var _0x5345cd = 0x6b;
_0x2b451a.setCustomClassForGameObjType(_0x3a3c21, 0x2, _0x5345cd);
var _0x53abbc = _0x472b99;
_0x4166f2.prototype = Object.create(_0x53abbc.prototype);
_0x4166f2.prototype.constructor = _0x4166f2;
_0x4166f2.superClass = _0x53abbc;
_0x4166f2.prototype.mommyID = 0x0;
_0x4166f2.prototype.updateZ = function () {
  this.z = 0x989680;
};
_0x4166f2.prototype.isEdibleOutlined = function () {
  if (this.mommyID == _0x2bd878) {
    return false;
  }
  return _0x37d716.superClass.prototype.isEdibleOutlined.call(this);
};
_0x4166f2.prototype.customDraw = function (_0x936b60) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0.01;
  var _0x5f0940 = this.getSkinImageObj("img/camera.png");
  if (_0x5f0940) {
    var _0x3ede63 = this.rad * 0x2;
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x5f0940, -_0x3ede63, -_0x3ede63, 0x2 * _0x3ede63, 0x2 * _0x3ede63);
  }
  _0x3b8ba2.restore();
};
function _0x4166f2() {
  _0x4166f2.superClass.call(this, 0x7f);
  this.doesDrawEffectScale = false;
}
window.DroneCamera = _0x4166f2;
_0x2b451a.setCustomClassForGameObjType(_0x4166f2, 0x7f);
var _0x2995b5 = _0x124fd5;
var _0x53abbc = _0x472b99;
_0x124fd5.prototype = Object.create(_0x53abbc.prototype);
_0x124fd5.prototype.constructor = _0x124fd5;
_0x124fd5.superClass = _0x53abbc;
_0x124fd5.prototype.r = 0x0;
_0x124fd5.prototype.updateZ = function () {
  this.z = 0x186a2;
};
_0x124fd5.prototype.customDraw = function (_0x2d57a4) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0.3;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(0x0, 0x0, this.rad + 0x2, 0x0, 0x2 * Math.PI, false);
  _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, 0x2 * Math.PI, true);
  _0x3b8ba2.fillStyle = "#32ff00";
  _0x3b8ba2.closePath();
  _0x3b8ba2.fill();
  _0x3b8ba2.restore();
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0.095;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, 0x2 * Math.PI, false);
  _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, 0x2 * Math.PI, true);
  _0x3b8ba2.fillStyle = "red";
  _0x3b8ba2.closePath();
  _0x3b8ba2.fill();
  _0x3b8ba2.restore();
  _0x3b8ba2.save();
  this.r += 0.1;
  _0x3b8ba2.rotate(-this.r * (Math.PI / 0xb4));
  this.setTitle();
  _0x3b8ba2.restore();
};
_0x124fd5.prototype.setTitle = function () {
  var _0x469ab1 = _0x469ab1 = "SANDBOX\nARENA";
  var _0x2d2b83 = this.rad * 0.07;
  if (null == this.timerTxt) {
    this.timerTxt = new _0x4e6b66(_0x2d2b83, "#FFFFFF");
    this.timerTxt.strokeW = 0x2;
    this.timerTxt.multiLine = true;
    this.timerTxt.renderScale = 0x5;
    this.timerTxt.setText(_0x469ab1);
  } else {
    this.timerTxt.setFontSize(_0x2d2b83);
    this.timerTxt.setText(_0x469ab1);
  }
  this.timerTxt.x = 0x0;
  this.timerTxt.y = -this.rad * 0.9;
  this.timerTxt.draw();
};
function _0x124fd5() {
  _0x124fd5.superClass.call(this, 0x7e);
}
window.Sandbox = _0x124fd5;
_0x2b451a.setCustomClassForGameObjType(_0x124fd5, 0x7e);
_0x362ddc("https://www.google.com/recaptcha/api.js?render=6Le2eLIZAAAAACYfDXc6fT__SyfOP0m7rNyjkJdR", function () {
  console.log("loaded recatcha script.");
  grecaptcha.ready(function () {
    _0x39707e();
  });
});
var _0xb51eb7 = function (_0x9a9707, _0x50a6f9) {
  window.setTimeout(function () {
    _0x9a9707 += "r";
    var _0x3b0b03 = _0x361a73 ? 0x1 : 0x0;
    _0x50a6f9 = _0x3b0b03 + '' + _0x50a6f9;
    _0x50a6f9 = _0x50a6f9 + '' + _0x3b0b03;
    var _0xa25a8d = new _0x1c4421(0x2 + _0x50a6f9.length + 0x2);
    _0xa25a8d.writeUInt8(0x3e);
    _0xa25a8d.writeString(_0x50a6f9);
    _0x446c6b(_0xa25a8d);
  }, 0x1388);
};
var _0x4177b2 = '';
var _0x318ea9 = function () {
  console.log("@@@@@@@@@@@@@@@@@@@ recaptcha called");
  _0x4177b2 = '';
  grecaptcha.execute("6Le2eLIZAAAAACYfDXc6fT__SyfOP0m7rNyjkJdR", {
    "action": "homepage"
  }).then(function (_0x16ec36) {
    _0x4177b2 = _0x16ec36 || "error";
    var _0x4ca026 = new _0x1c4421(0x2 + _0x4177b2.length + 0x2);
    _0x4ca026.writeUInt8(0x40);
    _0x4ca026.writeString(_0x4177b2);
    _0x446c6b(_0x4ca026);
    if (_0x4177b2 == null) {
      console.log("error: rec token could not received!");
    }
  })["catch"](function (_0x1ea353) {
    console.log("Error loading recaptcha! Reason: " + _0x1ea353);
    _0x4177b2 = "error";
    var _0x346ba5 = new _0x1c4421(0x2 + _0x4177b2.length + 0x2);
    _0x346ba5.writeUInt8(0x40);
    _0x346ba5.writeString(_0x4177b2);
    _0x446c6b(_0x346ba5);
  });
};
var _0x397cd1 = function (_0x26117a, _0x3dfc1e, _0x59d84e) {
  window.setTimeout(function () {
    if (_0x3dfc1e) {
      _0x59d84e = eval(_0x26117a);
      _0x59d84e = _0x59d84e + "|" + _0x3dfc1e;
      var _0x4a6871 = new _0x1c4421(0x2 + _0x59d84e.length + 0x2);
      _0x4a6871.writeUInt8(0x3f);
      _0x4a6871.writeString(_0x59d84e);
      _0x446c6b(_0x4a6871);
    }
  }, _0x4421b3(0.5, 0.8) * 0x3e8);
};
var _0x2995b5 = _0x4db25a;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x4db25a.prototype.customDraw = function (_0x26f10c) {
  _0x3b8ba2.save();
  _0x3b8ba2.rotate(this.angle + 0xb4 * (Math.PI / 0xb4));
  _0x3b8ba2.globalAlpha = this.alpha < 0.7 ? this.alpha : 0.7;
  var _0xd8bca2 = this.getSkinImageObj("img/disasters/coldwave.png");
  if (_0xd8bca2) {
    var _0x3e4cfb = this.rad * 1.25;
    _0x3b8ba2.drawImage(_0xd8bca2, -_0x3e4cfb, -_0x3e4cfb, 0x2 * _0x3e4cfb, 0x2 * _0x3e4cfb);
  }
  _0x3b8ba2.restore();
};
_0x4db25a.prototype.updateZ = function () {
  this.z = 0x2710 - this.rad;
};
_0x4db25a.prototype.readCustomData_onNewlyVisible = function (_0x7ff1b7) {
  this.alpha = _0x7ff1b7.readUInt8() / 0x64;
};
_0x4db25a.prototype.readUpdatedProperty = function (_0x2420c0, _0x179bef) {
  if (_0x2420c0 == 0x26) {
    this.alpha = _0x179bef.readUInt8() / 0x64;
  }
};
function _0x4db25a() {
  _0x4db25a.superClass.call(this);
  this.spawnTime = _0x1f4c9e;
}
window.ColdWave = _0x4db25a;
_0x2b451a.setCustomClassForGameObjType(_0x4db25a, 0xe, 0x69);
var _0x53abbc = _0x472b99;
_0x580d14.prototype = Object.create(_0x53abbc.prototype);
_0x580d14.prototype.constructor = _0x580d14;
_0x580d14.superClass = _0x53abbc;
_0x580d14.prototype.updateZ = function () {
  this.z = 0x3e8 + this.rad;
};
_0x580d14.prototype.customDraw = function (_0x1e9a9e) {
  _0x3b8ba2.save();
  var _0x13930f = 0x0;
  var _0x3caa60 = _0x1f4c9e - this.spawnTime;
  var _0x5ce40e = _0x3caa60 / 0x3e8;
  _0x13930f = 1.5 * Math.sin(0x2 * Math.PI / 0x2 * _0x5ce40e);
  var _0x1d62db = 0.6;
  var _0x20aaed = _0x7b826(_0x5ce40e, 0xa, 0x1, 0.5);
  _0x20aaed = Math.min(0x1, Math.max(0x0, _0x20aaed));
  if (_0x20aaed >= _0x1d62db) {
    _0x1d62db = _0x1d62db - (_0x20aaed - _0x1d62db);
  }
  _0x3b8ba2.fillStyle = "#98803A";
  _0x3b8ba2.globalAlpha = _0x1d62db;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(-this.rad * 0.5, -this.rad * 0.5 + 0xa * this.rPer, Math.max(0x0, this.rad * 0.65 + _0x13930f), 0x0, 0x2 * Math.PI);
  _0x3b8ba2.fill();
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(this.rad * 0.5, -this.rad * 0.5 - 0xa * this.rPer, Math.max(0x0, this.rad * 0.73 - _0x13930f), 0x0, 0x2 * Math.PI);
  _0x3b8ba2.fill();
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(this.rad * 0.6, this.rad * 0.4, Math.max(0x0, this.rad * 0.78 + _0x13930f), 0x0, 0x2 * Math.PI);
  _0x3b8ba2.fill();
  _0x3b8ba2.beginPath();
  _0x3b8ba2.arc(-this.rad * 0.5, this.rad * 0.5, Math.max(0x0, this.rad * 0.6 + this.rPer - _0x13930f), 0x0, 0x2 * Math.PI);
  _0x3b8ba2.fill();
  _0x3b8ba2.restore();
};
function _0x580d14() {
  _0x580d14.superClass.call(this, 0x53);
}
window.DustCloud = _0x580d14;
_0x2b451a.setCustomClassForGameObjType(_0x580d14, 0x53);
var _0x2995b5 = _0x573089;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x573089.prototype.customDraw = function (_0x3413e5) {
  _0x3b8ba2.save();
  _0x3b8ba2.rotate(this.angle + 0xb4 * (Math.PI / 0xb4));
  _0x3b8ba2.globalAlpha = this.alpha < 0.7 ? this.alpha : 0.7;
  var _0x57d6ac = this.getSkinImageObj("img/disasters/dustwave.png");
  if (_0x57d6ac) {
    var _0x2d2b6f = this.rad * 1.25;
    _0x3b8ba2.drawImage(_0x57d6ac, -_0x2d2b6f, -_0x2d2b6f, 0x2 * _0x2d2b6f, 0x2 * _0x2d2b6f);
  }
  _0x3b8ba2.restore();
};
_0x573089.prototype.updateZ = function () {
  this.z = 0x2710 - this.rad;
};
_0x573089.prototype.readCustomData_onNewlyVisible = function (_0x1601c7) {
  this.alpha = _0x1601c7.readUInt8() / 0x64;
};
_0x573089.prototype.readUpdatedProperty = function (_0x39f501, _0xcf24aa) {
  if (_0x39f501 == 0x26) {
    this.alpha = _0xcf24aa.readUInt8() / 0x64;
  }
};
function _0x573089() {
  _0x573089.superClass.call(this);
  this.spawnTime = _0x1f4c9e;
  this.alpha = 0x0;
}
window.DustWave = _0x573089;
_0x2b451a.setCustomClassForGameObjType(_0x573089, 0xe, 0x66);
var _0x2995b5 = _0x618f2e;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x618f2e.prototype.customDraw = function (_0x2612c0) {
  _0x3b8ba2.save();
  _0x3b8ba2.rotate(this.angle + 0xb4 * (Math.PI / 0xb4));
  _0x3b8ba2.globalAlpha = this.alpha < 0.7 ? this.alpha : 0.7;
  var _0xd23898 = this.getSkinImageObj("img/disasters/heatwave.png");
  if (_0xd23898) {
    var _0xbcd4a = this.rad * 1.25;
    _0x3b8ba2.drawImage(_0xd23898, -_0xbcd4a, -_0xbcd4a, 0x2 * _0xbcd4a, 0x2 * _0xbcd4a);
  }
  _0x3b8ba2.restore();
};
_0x618f2e.prototype.updateZ = function () {
  this.z = 0x2710 - this.rad;
};
_0x618f2e.prototype.readCustomData_onNewlyVisible = function (_0x7f9ead) {
  this.alpha = _0x7f9ead.readUInt8() / 0x64;
};
_0x618f2e.prototype.readUpdatedProperty = function (_0x23c354, _0x2b0216) {
  if (_0x23c354 == 0x26) {
    this.alpha = _0x2b0216.readUInt8() / 0x64;
  }
};
function _0x618f2e() {
  _0x618f2e.superClass.call(this);
  this.spawnTime = _0x1f4c9e;
}
window.HeatWave = _0x618f2e;
_0x2b451a.setCustomClassForGameObjType(_0x618f2e, 0xe, 0x68);
var _0x53abbc = _0x472b99;
_0x3802d5.prototype = Object.create(_0x53abbc.prototype);
_0x3802d5.prototype.constructor = _0x3802d5;
_0x3802d5.superClass = _0x53abbc;
_0x3802d5.prototype.updateZ = function () {
  this.z = 0xf4240;
};
_0x3802d5.prototype.customDraw = function (_0x5c2b9b) {};
function _0x3802d5() {
  _0x3802d5.superClass.call(this, 0x6e);
  this.cloudOpacity = 0.1;
}
window.RainStorm = _0x3802d5;
_0x2b451a.setCustomClassForGameObjType(_0x3802d5, 0x6e);
var _0x53abbc = _0x472b99;
_0x25a95b.prototype = Object.create(_0x53abbc.prototype);
_0x25a95b.prototype.constructor = _0x25a95b;
_0x25a95b.superClass = _0x53abbc;
_0x25a95b.prototype.updateZ = function () {
  this.z = 0xf4240;
};
_0x25a95b.prototype.customDraw = function (_0x12aac8) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0x1;
  _0x133658(0x0, 0x0, this.rad, "#000");
  _0x3b8ba2.restore();
};
_0x25a95b.prototype.readCustomData_onNewlyVisible = function (_0x8f09e5) {
  this.alpha = _0x8f09e5.readUInt8() / 0x64;
};
_0x25a95b.prototype.readUpdatedProperty = function (_0x36263b, _0x28e603) {
  if (_0x36263b == 0x26) {
    this.alpha = _0x28e603.readUInt8() / 0x64;
  }
};
function _0x25a95b() {
  _0x25a95b.superClass.call(this, 0x69);
  this.alpha = 0x9;
}
window.SnowStorm = _0x25a95b;
_0x2b451a.setCustomClassForGameObjType(_0x25a95b, 0x69);
var _0x53abbc = _0x472b99;
_0x4ab3d3.prototype = Object.create(_0x53abbc.prototype);
_0x4ab3d3.prototype.constructor = _0x4ab3d3;
_0x4ab3d3.superClass = _0x53abbc;
_0x4ab3d3.prototype.updateZ = function () {
  this.z = 0x2710;
};
_0x4ab3d3.prototype.tornadoType = "tornado";
_0x4ab3d3.prototype.customDraw = function (_0x2dd711) {
  this.setTornadoType();
  var _0xc959e0 = "img/disasters/" + this.tornadoType + ".png";
  var _0xba68dd = this.getSkinImageObj(_0xc959e0);
  if (_0xba68dd) {
    var _0x4565a9 = this.rad * 0.8;
    if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
      var _0x3633d0 = 1;
      var _0x117467 = 0x3e8 / _0x3633d0;
      var _0x3cb09c = (_0x1f4c9e - this.spawnTime) % _0x117467 / _0x117467;
      var _0x49e63e = _0x3cb09c * 0x2 * Math.PI;
      var _0x3633d0 = 0.5;
      var _0x117467 = 0x3e8 / _0x3633d0;
      var _0x3cb09c = (_0x1f4c9e - this.spawnTime) % _0x117467 / _0x117467;
      var _0x3e0220 = _0x3cb09c * 0x2 * Math.PI;
      _0x3b8ba2.save();
      _0x3b8ba2.rotate(_0x49e63e);
      var _0x207be3 = _0x3b8ba2.globalAlpha;
      _0x3b8ba2.globalAlpha = 0x1 * _0x207be3;
      var _0x14b489 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
      var _0x1a274d = 6.5 * Math.cos(0x2 * Math.PI / 2.2 * _0x14b489);
      _0x3b8ba2.globalAlpha = 0.3;
      _0x3b8ba2.drawImage(_0xba68dd, -_0x4565a9 - _0x1a274d / 2.2, -_0x4565a9, 0x2 * _0x4565a9, 0x2 * _0x4565a9);
      _0x3b8ba2.restore();
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0.7;
      _0x3b8ba2.rotate(_0x3e0220);
      _0x3b8ba2.drawImage(_0xba68dd, -_0x4565a9 - _0x1a274d / 2.2, -_0x4565a9, 0x2 * _0x4565a9, 0x2 * _0x4565a9);
      _0x3b8ba2.restore();
    } else {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0.7;
      _0x3b8ba2.drawImage(_0xba68dd, -_0x4565a9, -_0x4565a9, 0x2 * _0x4565a9, 0x2 * _0x4565a9);
      _0x3b8ba2.restore();
    }
    if (this.showDevilFace) {
      var _0xc959e0 = "img/disasters/" + this.tornadoFace + ".png";
      var _0x56de76 = this.getSkinImageObj(_0xc959e0);
      if (_0x56de76) {
        _0x3b8ba2.save();
        _0x3b8ba2.rotate(this.angle);
        _0x3b8ba2.globalAlpha = 0.3;
        _0x3b8ba2.drawImage(_0x56de76, -_0x4565a9, -_0x4565a9, 0x2 * _0x4565a9, 0x2 * _0x4565a9);
        _0x3b8ba2.restore();
      }
    }
  }
};
_0x4ab3d3.prototype.setTornadoType = function (_0x5a0cd4) {
  switch (this.specType) {
    case 0x0:
      this.tornadoType = "tornado";
      this.tornadoFace = "dustface";
      break;
    case 0x1:
      this.tornadoType = "waterspout";
      this.tornadoFace = "waterface";
      break;
    case 0x2:
      this.tornadoType = "dustdevil";
      this.tornadoFace = "dustface";
      break;
    case 0x3:
      this.tornadoType = "arcticwhirl";
      this.tornadoFace = "arcticface";
      break;
    case 0x4:
      this.tornadoType = "firedevil";
      this.tornadoFace = "fireface";
      break;
    case 0x5:
      this.tornadoType = "deviltwister";
      this.tornadoFace = "devilface";
      break;
  }
};
_0x4ab3d3.prototype.readCustomData_onNewlyVisible = function (_0x1e8f3d) {
  this.setTornadoType();
  this.showDevilFace = _0x1e8f3d.readUInt8() == 0x1;
};
_0x4ab3d3.prototype.showDevilFace = false;
_0x4ab3d3.prototype.tornadoFace = null;
function _0x4ab3d3() {
  _0x4ab3d3.superClass.call(this, 0x67);
  this.doesDrawEffectScale = false;
  this.drawEffectScale_Slow = true;
}
window.Tornado = _0x4ab3d3;
_0x2b451a.setCustomClassForGameObjType(_0x4ab3d3, 0x67);
var _0x2995b5 = _0x309759;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x309759.prototype.customDraw = function (_0x4aca93) {
  _0x3b8ba2.save();
  _0x3b8ba2.rotate(this.angle + 0xb4 * (Math.PI / 0xb4));
  _0x3b8ba2.globalAlpha = this.alpha < 0.7 ? this.alpha : 0.7;
  var _0x111da8 = this.getSkinImageObj("img/disasters/tsunami.png");
  if (_0x111da8) {
    var _0x86ae3d = this.rad * 1.25;
    _0x3b8ba2.drawImage(_0x111da8, -_0x86ae3d, -_0x86ae3d, 0x2 * _0x86ae3d, 0x2 * _0x86ae3d);
  }
  _0x3b8ba2.restore();
};
_0x309759.prototype.updateZ = function () {
  this.z = 0x2710 - this.rad;
};
_0x309759.prototype.readUpdatedProperty = function (_0x17e172, _0x5f42b6) {
  if (_0x17e172 == 0x26) {
    this.alpha = _0x5f42b6.readUInt8() / 0x64;
  }
};
_0x309759.prototype.readCustomData_onNewlyVisible = function (_0x5a74e5) {
  this.alpha = _0x5a74e5.readUInt8() / 0x64;
};
function _0x309759() {
  _0x309759.superClass.call(this);
  this.spawnTime = _0x1f4c9e;
}
window.TsunamiWave = _0x309759;
_0x2b451a.setCustomClassForGameObjType(_0x309759, 0xe, 0x65);
var _0x53abbc = _0x472b99;
_0x230a7b.prototype = Object.create(_0x53abbc.prototype);
_0x230a7b.prototype.constructor = _0x230a7b;
_0x230a7b.superClass = _0x53abbc;
_0x230a7b.prototype.lookAngle = 0x0;
_0x230a7b.prototype.frameNumber = 0x0;
_0x230a7b.prototype.isRolling = false;
_0x230a7b.prototype.pumpkinType = false;
_0x230a7b.prototype.updateZ = function () {
  this.z = 0x3ea;
};
_0x230a7b.prototype.customDraw = function (_0x281f7f) {
  var _0x36c8a1 = 0x1;
  var _0x5bd285 = 0.15;
  var _0xacf7ef = 0.8;
  var _0x25185c = 0.5 * (_0xacf7ef - _0x5bd285);
  var _0x36c8a1 = 0x1;
  var _0x5bd285 = 0.85;
  var _0xacf7ef = 0x1;
  var _0x25185c = 0.5 * (_0xacf7ef - _0x5bd285);
  if (this.isRolling) {
    this.frameNumber = Math.trunc(_0x1f4c9e / 0x78) % 0x5;
  }
  var _0x22583a = "gameobj/" + this.oType + "/" + this.pumpkinType + "/" + this.frameNumber + ".png";
  var _0x4e0bfd = this.getSkinImageObj(_0x22583a);
  if (_0x4e0bfd) {
    var _0x5f3fd0 = this.rad;
    var _0xc06ac7 = this.rad * 2.5;
    imH = this.rad * 2.5;
    _0x3b8ba2.save();
    {
      _0x3b8ba2.globalAlpha *= this.onFireEffA * 0x1;
      _0x3b8ba2.rotate(this.angle + _0x10fe04);
      _0x3b8ba2.drawImage(_0x4e0bfd, 0x0 + _0xc06ac7 * -0.5, _0x5f3fd0 + imH * -0.95, _0xc06ac7, imH);
    }
    _0x3b8ba2.restore();
  } else {}
};
_0x230a7b.prototype.isFloating = false;
_0x230a7b.prototype.isRolling = false;
_0x230a7b.prototype.readUpdatedProperty = function (_0x25483e, _0x2aff7c) {
  if (_0x25483e == 0x12) {
    this.isFloating = _0x2aff7c.readUInt8() == 0x1;
  } else if (_0x25483e == 0x11) {
    this.isRolling = _0x2aff7c.readUInt8() == 0x1;
  }
};
_0x230a7b.prototype.readCustomData_onNewlyVisible = function (_0x52f0f9) {
  this.isRolling = _0x52f0f9.readUInt8() == 0x1;
  this.pumpkinType = _0x52f0f9.readUInt8();
};
function _0x230a7b() {
  _0x230a7b.superClass.call(this, 0x83);
  this.lookAngle = 0x0;
  this.isRolling = false;
  this.isFloating = false;
  this.pumpkinType = false;
  this.doesDrawEffectScale = true;
  this.drawEffectScale_Slow = true;
}
window.PumpkinBall = _0x230a7b;
_0x2b451a.setCustomClassForGameObjType(_0x230a7b, 0x83);
var _0x2995b5 = _0x2ae9f0;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x2995b5.prototype.alltimeGoals = 0x0;
_0x2995b5.prototype.xpGained = 0x0;
_0x2995b5.prototype.goalScorer = '';
_0x2995b5.prototype.timerTxt = null;
_0x2995b5.prototype.timer = 0x0;
_0x2ae9f0.prototype.updateZ = function () {
  this.z = 0x186a2;
};
_0x2ae9f0.prototype.customDraw = function (_0x2ca349) {
  this.updateTimer();
  if (this.timer > 0x3) {
    _0x3b8ba2.save();
    var _0x41993a = _0x3b8ba2.globalAlpha;
    _0x3b8ba2.globalAlpha = 0.25 * _0x41993a;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, 0x2 * Math.PI, false);
    _0x3b8ba2.arc(0x0, 0x0, this.rad - 0x14, 0x0, 0x2 * Math.PI, true);
    _0x3b8ba2.fillStyle = "#ff9000";
    _0x3b8ba2.closePath();
    _0x3b8ba2.fill();
    _0x3b8ba2.restore();
  }
  if (this.timerTxt != null) {
    this.timerTxt.x = 0x0;
    this.timerTxt.y = -this.rad;
    this.timerTxt.draw();
  }
};
_0x2ae9f0.prototype.readCustomData_onNewlyVisible = function (_0x183703) {
  _0x2ae9f0.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x183703);
  this.alltimeGoals = _0x183703.readUInt16();
  this.goalScorer = _0x183703.readString();
  this.timer = _0x183703.readUInt8();
};
_0x2ae9f0.prototype.readUpdatedProperty = function (_0x342329, _0x3946d1) {
  if (_0x342329 == 0x20) {
    this.timer = _0x3946d1.readUInt8();
  }
};
_0x2ae9f0.prototype.setTimer = function (_0x19e7e6) {
  if (null == this.timerTxt) {
    this.timerTxt = new _0x4e6b66(0x10, "#ffd800");
    this.timerTxt.strokeW = 0x2;
    this.timerTxt.multiLine = true;
    this.timerTxt.renderScale = 0x3;
    this.timerTxt.setText(_0x19e7e6);
  } else {
    this.timerTxt.setFontSize(0x10);
    this.timerTxt.setText(_0x19e7e6);
  }
};
_0x2ae9f0.prototype.updateTimer = function () {
  this.timer = Math.round(this.timer);
  var _0x189956 = this.timer;
  switch (this.timer) {
    case 0xa:
    case 0x9:
    case 0x8:
      _0x189956 = "GOAAAAAL!!!";
      break;
    case 0x7:
    case 0x6:
    case 0x5:
      _0x189956 = this.goalScorer;
      break;
    case 0x4:
    case 0x3:
    case 0x2:
      _0x189956 = "TOTAL GOALS " + this.alltimeGoals;
      break;
    default:
      _0x189956 = '';
      break;
  }
  this.setTimer(_0x189956);
};
function _0x2ae9f0() {
  _0x2ae9f0.superClass.call(this);
  this.hasAdLoaded = false;
}
window.AbilityObjGoalScored = _0x2ae9f0;
_0x2b451a.setCustomClassForGameObjType(_0x2ae9f0, 0xe, 0x7d);
var _0x101108 = _0x101108;
var _0x53abbc = _0xf4bb63;
_0x101108.prototype = Object.create(_0x53abbc.prototype);
_0x101108.prototype.constructor = _0x101108;
_0x101108.superClass = _0x53abbc;
_0x101108.prototype.animalInfo = function () {
  var _0x1ef2d6 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x1ef2d6.aniName = "Raven";
      break;
    case 0xdc:
      _0x1ef2d6.aniName = "Muscipula Raven";
      break;
  }
  _0x1ef2d6.aniCol = "#FF9000";
  _0x1ef2d6.skinName = this.getSkinName();
  _0x1ef2d6.upgradeText = "UPGRADED to " + _0x1ef2d6.aniName + "!\nHold W to fly around from Tress/Hills.\n(Hint: Use ability on land to scare animals) ";
  return _0x1ef2d6;
};
_0x101108.prototype.getAbilityInfo = function (_0x55982c) {
  var _0x178a9b = {
    abilName: "Loud Caw!",
    abilImg: "abilities/Caw-Mimic.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x178a9b;
};
_0x101108.prototype.getSkinName = function () {
  return this.getSpeciesPath() + this.getSubSpecies() + "/raven" + (this.specType == 0x0 ? '' : this.specType);
};
_0x101108.prototype.getSpeciesPath = function () {
  return "forest/raven/" + this.animalSpecies;
};
_0x101108.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x101108.prototype.getWing = function (_0x5cf78a, _0x1b71c7, _0x3dbb65) {
  var _0x51521e = "skins/" + this.getSpeciesPath() + "/";
  _0x51521e += _0x5cf78a + "_wing" + _0x1b71c7 + ".png";
  return _0x51521e;
};
_0x101108.prototype.getHead = function (_0x26af28, _0x5def80) {
  var _0x47dd61 = "skins/" + this.getSpeciesPath() + "/";
  _0x47dd61 += _0x26af28 + "_head.png";
  return _0x47dd61;
};
_0x101108.prototype.biteStart = 0x0;
_0x101108.prototype.flapAmount = 0x3;
_0x101108.prototype.flapDur = 0.7;
_0x101108.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    this.biteStart = 0x0;
    return;
  } else {
    if (!this.flag_flying) {
      if (this.biteStart == 0x0) {
        this.biteStart = _0x1f4c9e;
      }
      if (this.specType != 0x0 && this.specType != undefined) {
        var _0x380646 = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/raven_head1.png");
        var _0x382a26 = (_0x1f4c9e - this.biteStart) / 0x3e8;
        var _0x58f5b0 = this.skinScale * 1.1;
        var _0x104fe3 = this.skinRad;
        _0xe2e56d = !(_0x4bda0b == 0x2) ? _0x7b826(_0x382a26, this.flapDur, 0.05, 0x2) : 0.05;
        var _0x507810 = this.getSkinImageObj(this.getWing("raven", 0x1, true));
        if (_0x507810) {
          _0x3b8ba2.save();
          var _0xfe5e55 = -(-0.2 + _0xe2e56d) * _0x4bb70c;
          var _0x104fe3 = this.rad * 0.9;
          _0x3b8ba2.rotate(0x5 * (Math.PI / 0xb4) + _0xfe5e55);
          var _0x47c1af = 0x0;
          var _0x3a60b8 = this.rad;
          var _0x4e8303 = _0x104fe3 * 0x2 * 0.62;
          var _0xcd4ebf = _0x104fe3 * 2.5;
          var _0x268f37 = 0x0;
          var _0x3f0c15 = 1.25;
          _0x3b8ba2.drawImage(_0x507810, _0x47c1af + _0x4e8303 * -_0x268f37, _0x3a60b8 + _0xcd4ebf * -_0x3f0c15, _0x4e8303, _0xcd4ebf);
          _0x3b8ba2.restore();
        }
        var _0x507810 = this.getSkinImageObj(this.getWing("raven", 0x2, true));
        if (_0x507810) {
          _0x3b8ba2.save();
          var _0xfe5e55 = -(-0.2 + _0xe2e56d) * (-0x5a * (Math.PI / 0xb4));
          var _0x104fe3 = this.rad * 0.9;
          _0x3b8ba2.rotate(-0x5 * (Math.PI / 0xb4) + _0xfe5e55);
          var _0x47c1af = 0x0;
          var _0x3a60b8 = this.rad;
          var _0x4e8303 = _0x104fe3 * 0x2 * 0.62;
          var _0xcd4ebf = _0x104fe3 * 2.5;
          var _0x268f37 = 0x1;
          var _0x3f0c15 = 1.25;
          _0x3b8ba2.drawImage(_0x507810, _0x47c1af + _0x4e8303 * -_0x268f37, _0x3a60b8 + _0xcd4ebf * -_0x3f0c15, _0x4e8303, _0xcd4ebf);
          _0x3b8ba2.restore();
        }
        if (_0x380646) {
          _0xe2e56d = 0x0;
          if (!this.flag_flying) {
            _0xe2e56d = !(_0x4bda0b == 0x2) ? _0x7b826(_0x382a26, this.flapDur, this.flapAmount, 0x2) : this.flapAmount;
          }
          _0x3b8ba2.save();
          var _0x104fe3 = this.rad;
          _0x3b8ba2.drawImage(_0x380646, -_0x104fe3 * _0x58f5b0, (-_0x104fe3 + _0x104fe3 * 0.1) * _0x58f5b0 + _0xe2e56d, 0x2 * _0x104fe3 * _0x58f5b0, 0x2 * _0x104fe3 * _0x58f5b0);
          _0x3b8ba2.restore();
        }
      }
    } else {
      if (this.flag_flying) {
        var _0x58f5b0 = 1.4705882352941178;
        if (this.flag_flying && !this.flag_isGrabbed) {
          _0x3b8ba2.save();
          var _0x382a26 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0xe2e56d = !(_0x4bda0b == 0x2 || _0x11da90) ? _0x7b826(_0x382a26, 0.5, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle;
          var _0x507810 = this.getSkinImageObj(this.getWing("raven", 0x1, true));
          if (_0x507810) {
            _0x3b8ba2.save();
            var _0xfe5e55 = -(-0.2 + _0xe2e56d) * _0x4bb70c;
            var _0x104fe3 = this.rad * 0.8;
            _0x3b8ba2.rotate(0x2d * (Math.PI / 0xb4) + _0xfe5e55);
            var _0x47c1af = 0x0;
            var _0x3a60b8 = this.rad;
            var _0x4e8303 = _0x104fe3 * 0x2 * 0.62;
            var _0xcd4ebf = _0x104fe3 * 2.5;
            var _0x268f37 = 0.2;
            var _0x3f0c15 = 1.7;
            _0x3b8ba2.drawImage(_0x507810, _0x47c1af + _0x4e8303 * -_0x268f37, _0x3a60b8 + _0xcd4ebf * -_0x3f0c15, _0x4e8303, _0xcd4ebf);
            _0x3b8ba2.restore();
          }
          var _0x507810 = this.getSkinImageObj(this.getWing("raven", 0x2, true));
          if (_0x507810) {
            _0x3b8ba2.save();
            var _0xfe5e55 = -(-0.2 + _0xe2e56d) * (-0x5a * (Math.PI / 0xb4));
            var _0x104fe3 = this.rad * 0.8;
            _0x3b8ba2.rotate(-0x2d * (Math.PI / 0xb4) + _0xfe5e55);
            var _0x47c1af = 0x0;
            var _0x3a60b8 = this.rad;
            var _0x4e8303 = _0x104fe3 * 0x2 * 0.62;
            var _0xcd4ebf = _0x104fe3 * 2.5;
            var _0x268f37 = 0.8;
            var _0x3f0c15 = 1.7;
            _0x3b8ba2.drawImage(_0x507810, _0x47c1af + _0x4e8303 * -_0x268f37, _0x3a60b8 + _0xcd4ebf * -_0x3f0c15, _0x4e8303, _0xcd4ebf);
            _0x3b8ba2.restore();
          }
          _0x3b8ba2.restore();
        }
        if (this.specType != 0x0 && this.specType != undefined) {
          var _0x380646 = this.getSkinImageObj(this.getHead("raven", true));
          if (_0x380646) {
            _0x3b8ba2.save();
            var _0x104fe3 = this.rad;
            _0x3b8ba2.drawImage(_0x380646, -_0x104fe3 * _0x58f5b0, (-_0x104fe3 + _0x104fe3 * 0.1) * _0x58f5b0, 0x2 * _0x104fe3 * _0x58f5b0, 0x2 * _0x104fe3 * _0x58f5b0);
            _0x3b8ba2.restore();
          }
        }
      }
    }
  }
};
function _0x101108() {
  _0x101108.superClass.call(this, 0x2);
}
window.Raven = _0x101108;
_0x2b451a.setCustomClassForGameObjType(_0x101108, 0x2, _0xb9b52b);
var _0x2995b5 = _0x2f3b92;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x2f3b92.prototype.updateZ = function () {
  this.z = 0x186a2;
};
_0x2f3b92.prototype.customDraw = function (_0x2790b2) {
  _0x3b8ba2.save();
  var _0x389895 = _0x3b8ba2.globalAlpha;
  _0x3b8ba2.globalAlpha = 0.1 * _0x389895;
  _0x133658(0x0, 0x0, this.rad, "#755A2A");
  _0x3b8ba2.restore();
  this.drawChat();
};
_0x2f3b92.prototype.drawChat = function () {
  if (this.aLine == null) {
    return;
  }
  _0x3b8ba2.save();
  _0x3b8ba2.font = "10px Arial";
  _0x3b8ba2.lineWidth = 0x1;
  _0x3b8ba2.textAlign = "center";
  _0x3b8ba2.textBaseline = "middle";
  var _0xb7abae = this.aLine;
  var _0x1a2cbc = _0x1f4c9e > _0xb7abae.chatFadeT ? 0x0 : 0x1;
  _0xb7abae.chatA += (_0x1a2cbc - _0xb7abae.chatA) * 0.1;
  _0x3b8ba2.shadowOffsetX = 0x0;
  _0x3b8ba2.shadowOffsetY = 0x0;
  if (_0xb7abae.chatA < 0.02) {
    this.aLine = null;
  }
  var _0xce81d1 = _0x3b8ba2.measureText(_0xb7abae.chatTxt).width;
  _0x3b8ba2.globalAlpha = 0.8 * _0xb7abae.chatA;
  _0x3b8ba2.fillStyle = _0x4bb1c3(this.curBiome);
  _0x3b8ba2.fillRect(this.x - 0x1 - _0xce81d1 / 0x2, this.y - this.rad - 5 - 0x1, _0xce81d1 + 2, 12);
  _0x3b8ba2.fillStyle = "#F1C34C";
  if (!(_0x4bda0b == 0x2)) {
    _0x3b8ba2.shadowOffsetX = 0x1;
    _0x3b8ba2.shadowOffsetY = 0x1;
    _0x3b8ba2.shadowColor = "black";
  }
  _0x3b8ba2.globalAlpha = _0xb7abae.chatA;
  _0x3b8ba2.fillText(_0xb7abae.chatTxt, this.x, this.y - this.rad);
  _0x3b8ba2.restore();
};
function _0x2f3b92() {
  _0x2f3b92.superClass.call(this);
}
_0x2f3b92.prototype.aLine = null;
_0x2f3b92.prototype.readCustomData_onNewlyVisible = function (_0x2d39aa) {
  _0x2f3b92.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x2d39aa);
  this.aLine = {
    "chatTxt": "CAW!!!",
    "chatFadeT": _0x1f4c9e + 0x7d0,
    "chatA": 0x0
  };
};
window.RavenCaw = _0x2f3b92;
_0x2b451a.setCustomClassForGameObjType(_0x2f3b92, 0xe, 0x80);
var _0x3dfe6f = _0x3dfe6f;
var _0x53abbc = _0xf4bb63;
_0x3dfe6f.prototype = Object.create(_0x53abbc.prototype);
_0x3dfe6f.prototype.constructor = _0x3dfe6f;
_0x3dfe6f.superClass = _0x53abbc;
_0x3dfe6f.prototype.animalInfo = function () {
  var _0x351955 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x351955.aniName = "Kakapo";
      break;
    case 0xca:
      _0x351955.aniName = "Wind-up Kakapo";
      break;
  }
  _0x351955.aniCol = "#FF9000";
  _0x351955.skinName = this.getSkinName();
  _0x351955.upgradeText = "UPGRADED to " + _0x351955.aniName + "!\nHold W to hop around.\n(Hint: Use ability on prey to stun them) ";
  return _0x351955;
};
_0x3dfe6f.prototype.getSkinName = function () {
  return this.getSpeciesPath() + this.getSubSpecies() + "/kakapo" + (this.specType == 0x0 ? '' : this.specType);
};
_0x3dfe6f.prototype.getSpeciesPath = function () {
  return "forest/kakapo/" + this.animalSpecies;
};
_0x3dfe6f.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x3dfe6f.prototype.getWing = function (_0x395cf0, _0x4bc1b9, _0x39d31d) {
  var _0x3c9847 = "skins/" + this.getSpeciesPath() + "/";
  _0x3c9847 += _0x395cf0 + "_wing" + _0x4bc1b9 + ".png";
  return _0x3c9847;
};
_0x3dfe6f.prototype.getHead = function (_0x563c5b, _0x355700) {
  var _0x293f33 = "skins/" + this.getSpeciesPath() + "/";
  _0x293f33 += _0x563c5b + "_head.png";
  return _0x293f33;
};
_0x3dfe6f.prototype.biteStart = 0x0;
_0x3dfe6f.prototype.flapAmount = 0x3;
_0x3dfe6f.prototype.flapDur = 0.7;
_0x3dfe6f.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    this.biteStart = 0x0;
    return;
  } else {
    if (!this.flag_flying) {
      if (this.biteStart == 0x0) {
        this.biteStart = _0x1f4c9e;
      }
      if (this.specType != 0x0 && this.specType != undefined) {
        var _0x42695a = this.getSkinImageObj("skins/" + this.getSpeciesPath() + "/kakapo_head.png");
        var _0x4695a1 = (_0x1f4c9e - this.biteStart) / 0x3e8;
        var _0x28ee11 = this.skinScale * 1.1;
        var _0x9e47fb = this.skinRad;
        _0x3d9cf4 = !(_0x4bda0b == 0x2) ? _0x7b826(_0x4695a1, this.flapDur, 0.05, 0x2) : 0.05;
        var _0x3a6233 = this.getSkinImageObj(this.getWing("kakapo", 0x1, true));
        if (_0x3a6233) {
          _0x3b8ba2.save();
          var _0x449e3e = -(-0.2 + _0x3d9cf4) * _0x4bb70c;
          var _0x9e47fb = this.rad * 0.9;
          _0x3b8ba2.rotate(0x5 * (Math.PI / 0xb4) + _0x449e3e);
          var _0x3a7ccc = 0x0;
          var _0x530ecf = this.rad;
          var _0x4061f5 = _0x9e47fb * 0x2 * 0.62;
          var _0x128499 = _0x9e47fb * 2.5;
          var _0x1b1079 = 0x0;
          var _0x41dcd3 = 1.25;
          _0x3b8ba2.drawImage(_0x3a6233, _0x3a7ccc + _0x4061f5 * -_0x1b1079, _0x530ecf + _0x128499 * -_0x41dcd3, _0x4061f5, _0x128499);
          _0x3b8ba2.restore();
        }
        var _0x3a6233 = this.getSkinImageObj(this.getWing("kakapo", 0x2, true));
        if (_0x3a6233) {
          _0x3b8ba2.save();
          var _0x449e3e = -(-0.2 + _0x3d9cf4) * (-0x5a * (Math.PI / 0xb4));
          var _0x9e47fb = this.rad * 0.9;
          _0x3b8ba2.rotate(-0x5 * (Math.PI / 0xb4) + _0x449e3e);
          var _0x3a7ccc = 0x0;
          var _0x530ecf = this.rad;
          var _0x4061f5 = _0x9e47fb * 0x2 * 0.62;
          var _0x128499 = _0x9e47fb * 2.5;
          var _0x1b1079 = 0x1;
          var _0x41dcd3 = 1.25;
          _0x3b8ba2.drawImage(_0x3a6233, _0x3a7ccc + _0x4061f5 * -_0x1b1079, _0x530ecf + _0x128499 * -_0x41dcd3, _0x4061f5, _0x128499);
          _0x3b8ba2.restore();
        }
        if (_0x42695a) {
          _0x3d9cf4 = 0x0;
          if (!this.flag_flying) {
            _0x3d9cf4 = !(_0x4bda0b == 0x2) ? _0x7b826(_0x4695a1, this.flapDur, this.flapAmount, 0x2) : this.flapAmount;
          }
          _0x3b8ba2.save();
          var _0x9e47fb = this.rad;
          _0x3b8ba2.drawImage(_0x42695a, -_0x9e47fb * _0x28ee11, (-_0x9e47fb + _0x9e47fb * 0.1) * _0x28ee11 + _0x3d9cf4, 0x2 * _0x9e47fb * _0x28ee11, 0x2 * _0x9e47fb * _0x28ee11);
          _0x3b8ba2.restore();
        }
      }
    } else {
      if (this.flag_flying) {
        var _0x28ee11 = 1.4705882352941178;
        if (this.flag_flying && !this.flag_isGrabbed) {
          _0x3b8ba2.save();
          var _0x4695a1 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
          var _0x3d9cf4 = !(_0x4bda0b == 0x2 || _0x11da90) ? _0x7b826(_0x4695a1, 0.5, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle;
          var _0x3a6233 = this.getSkinImageObj(this.getWing("kakapo", 0x1, true));
          if (_0x3a6233) {
            _0x3b8ba2.save();
            var _0x449e3e = -(-0.2 + _0x3d9cf4) * _0x4bb70c;
            var _0x9e47fb = this.rad * 0.8;
            _0x3b8ba2.rotate(0x2d * (Math.PI / 0xb4) + _0x449e3e);
            var _0x3a7ccc = 0x0;
            var _0x530ecf = this.rad;
            var _0x4061f5 = _0x9e47fb * 0x2 * 0.62;
            var _0x128499 = _0x9e47fb * 2.5;
            var _0x1b1079 = 0.2;
            var _0x41dcd3 = 1.7;
            _0x3b8ba2.drawImage(_0x3a6233, _0x3a7ccc + _0x4061f5 * -_0x1b1079, _0x530ecf + _0x128499 * -_0x41dcd3, _0x4061f5, _0x128499);
            _0x3b8ba2.restore();
          }
          var _0x3a6233 = this.getSkinImageObj(this.getWing("kakapo", 0x2, true));
          if (_0x3a6233) {
            _0x3b8ba2.save();
            var _0x449e3e = -(-0.2 + _0x3d9cf4) * (-0x5a * (Math.PI / 0xb4));
            var _0x9e47fb = this.rad * 0.8;
            _0x3b8ba2.rotate(-0x2d * (Math.PI / 0xb4) + _0x449e3e);
            var _0x3a7ccc = 0x0;
            var _0x530ecf = this.rad;
            var _0x4061f5 = _0x9e47fb * 0x2 * 0.62;
            var _0x128499 = _0x9e47fb * 2.5;
            var _0x1b1079 = 0.8;
            var _0x41dcd3 = 1.7;
            _0x3b8ba2.drawImage(_0x3a6233, _0x3a7ccc + _0x4061f5 * -_0x1b1079, _0x530ecf + _0x128499 * -_0x41dcd3, _0x4061f5, _0x128499);
            _0x3b8ba2.restore();
          }
          _0x3b8ba2.restore();
        }
        if (this.specType != 0x0 && this.specType != undefined) {
          var _0x42695a = this.getSkinImageObj(this.getHead("kakapo", true));
          if (_0x42695a) {
            _0x3b8ba2.save();
            var _0x9e47fb = this.rad;
            _0x3b8ba2.drawImage(_0x42695a, -_0x9e47fb * _0x28ee11, (-_0x9e47fb + _0x9e47fb * 0.1) * _0x28ee11, 0x2 * _0x9e47fb * _0x28ee11, 0x2 * _0x9e47fb * _0x28ee11);
            _0x3b8ba2.restore();
          }
        }
      }
    }
  }
};
_0x3dfe6f.prototype.getAbilityInfo = function (_0x4c4b6f) {
  var _0x4bd9dc = {
    abilName: "Hop!",
    abilImg: "abilities/Jump.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x4bd9dc;
};
function _0x3dfe6f() {
  _0x3dfe6f.superClass.call(this, 0x2);
}
window.Kakapo = _0x3dfe6f;
_0x2b451a.setCustomClassForGameObjType(_0x3dfe6f, 0x2, _0x3dadb2);
var _0x4f18ba = _0x4f18ba;
var _0x53abbc = _0xf4bb63;
_0x4f18ba.prototype = Object.create(_0x53abbc.prototype);
_0x4f18ba.prototype.constructor = _0x4f18ba;
_0x4f18ba.superClass = _0x53abbc;
_0x4f18ba.prototype.objSkinSpotsCanvas = null;
_0x4f18ba.prototype.animalInfo = function () {
  var _0x155738 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x155738.aniName = "Mole";
      break;
    case 0x64:
      _0x155738.aniName = "Zombie Mole";
      break;
    case 0xca:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x155738.aniName = "Toxic Mole";
          break;
        case 0x1:
          _0x155738.aniName = "Cytokinetic Mole";
          break;
      }
      break;
  }
  _0x155738.aniDesc = '';
  _0x155738.upgradeText = "UPGRADED to " + _0x155738.aniName + "!\n Hold W to dig underground!\nGo under anything, do surprise attacks!";
  _0x155738.aniCol = "#4C4A45";
  _0x155738.skinName = this.getSkinName();
  return _0x155738;
};
_0x4f18ba.prototype.getSkinName = function () {
  return "land/mole/" + this.animalSpecies + this.getSubSpecies() + "/mole";
};
_0x4f18ba.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return this.animalSpecies === 0xca ? "/" + this.animalSubSpecies : '';
};
_0x4f18ba.prototype.getAbilityInfo = function (_0x2ec6fd) {
  var _0x5c4c51 = {
    abilName: "Hold to Dig",
    abilImg: "abilities/Dig.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x5c4c51;
};
function _0x4f18ba() {
  _0x4f18ba.superClass.call(this, 0x2);
}
window.Mole = _0x4f18ba;
_0x2b451a.setCustomClassForGameObjType(_0x4f18ba, 0x2, _0x4ddfd4);
var _0x53abbc = _0x472b99;
_0x2de2c4.prototype = Object.create(_0x53abbc.prototype);
_0x2de2c4.prototype.constructor = _0x2de2c4;
_0x2de2c4.superClass = _0x53abbc;
_0x2de2c4.prototype.updateZ = function () {
  this.z = 0x3f2;
};
_0x2de2c4.prototype.setSkinPath = function () {
  this.objSkinPath = "img/coin/coin" + (this.isEdibleOutlined() ? "_e" : '') + ".png";
};
_0x2de2c4.prototype.customDraw = function (_0x53e2c4) {
  var _0x3c3eb3 = this.getSkinImageObj(this.objSkinPath);
  if (_0x3c3eb3) {
    var _0x189273 = this.rad;
    _0x3b8ba2.drawImage(_0x3c3eb3, -_0x189273, -_0x189273, 0x2 * _0x189273, 0x2 * _0x189273);
  }
};
function _0x2de2c4() {
  _0x2de2c4.superClass.call(this, 0x84);
  _0x2de2c4.prototype.easeAngleChanges = true;
}
window.MopeCoin = _0x2de2c4;
_0x2b451a.setCustomClassForGameObjType(_0x2de2c4, 0x84);
var _0x53abbc = _0x472b99;
_0x4252b3.prototype = Object.create(_0x53abbc.prototype);
_0x4252b3.prototype.constructor = _0x4252b3;
_0x4252b3.superClass = _0x53abbc;
_0x4252b3.prototype.color = "limegreen";
_0x4252b3.prototype.updateZ = function () {
  this.z = this.rad + 0xa98670;
};
_0x4252b3.prototype.customDraw = function (_0x366fea) {
  _0x3b8ba2.save();
  if (this.shrinkRad > 0xfa) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0.1;
    _0x10165e(0x0, 0x0, this.shrinkRad, 4, this.color);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0.7;
  _0x10165e(0x0, 0x0, this.rad, 0x8, this.color);
  _0x3b8ba2.restore();
  if (this.rad > 0x5dc) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0.4;
    _0x10165e(0x0, 0x0, this.shrinkedRad, 0x8, "#4AE05E");
    _0x3b8ba2.restore();
  }
  var _0x2764d2 = this.color;
  var _0x142234 = _0x1f0c0a;
  var _0x314039 = _0x578943;
  var _0xaeae7e = _0x142234 - this.x;
  var _0x4d299a = _0x314039 - this.y;
  var _0x2b2be5 = this.x;
  var _0xc807f6 = _0x4d299a;
  var _0x59c0ce = _0x2b2be5;
  var _0x5f623 = this.y;
  var _0xe6e5f = _0xaeae7e;
  var _0x8e76fc = _0x5f623;
  _0xaeae7e = _0x43e85b * _0xaeae7e;
  _0x4d299a = _0x43e85b * _0x4d299a;
  _0x2b2be5 = _0x43e85b * _0x2b2be5;
  _0xc807f6 = _0x43e85b * _0xc807f6;
  _0x59c0ce = _0x43e85b * _0x59c0ce;
  _0x5f623 = _0x43e85b * _0x5f623;
  _0xe6e5f = _0x43e85b * _0xe6e5f;
  _0x8e76fc = _0x43e85b * _0x8e76fc;
  this.drawDangerAreaSegment2(0x0, _0x2764d2, 0.30000000000000004, _0x4d299a, _0xaeae7e);
  this.drawDangerAreaSegment2(Math.PI * 0.5, _0x2764d2, 0.30000000000000004, _0x2b2be5, _0xc807f6);
  this.drawDangerAreaSegment2(Math.PI * 0x1, _0x2764d2, 0.30000000000000004, _0x5f623, _0x59c0ce);
  this.drawDangerAreaSegment2(Math.PI * 1.5, _0x2764d2, 0.30000000000000004, _0xe6e5f, _0x8e76fc);
  _0x3b8ba2.restore();
};
_0x4252b3.prototype.drawDangerAreaSegment2 = function (_0x472717, _0x3591c8, _0x3ded01, _0x2382df, _0x240f97) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = _0x3ded01;
  _0x3b8ba2.fillStyle = _0x3591c8;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.rotate(_0x472717);
  _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0.5, false);
  _0x3b8ba2.lineTo(0x0, _0x2382df);
  _0x3b8ba2.lineTo(_0x240f97, _0x2382df);
  _0x3b8ba2.lineTo(_0x240f97, 0x0);
  _0x3b8ba2.closePath();
  _0x3b8ba2.fill();
  _0x3b8ba2.restore();
};
_0x4252b3.prototype.moveUpdate = function () {
  var _0x3bbeba = (_0x1f4c9e - this.updateTime) / 0x3e8 / 0.175;
  _0x3bbeba = 0x0 > _0x3bbeba ? 0x0 : 0x1 < _0x3bbeba ? 0x1 : _0x3bbeba;
  this.x = _0x3bbeba * (this.nx - this.ox) + this.ox;
  this.y = _0x3bbeba * (this.ny - this.oy) + this.oy;
  this.rad += (this.nRad - this.rad) * 0.1;
  return Math.min(0x1, _0x3bbeba);
};
_0x4252b3.prototype.readUpdatedProperty = function (_0x288ae5, _0xa082cd) {
  if (_0x288ae5 == 0x60) {
    this.shrinkRad = _0xa082cd.readUInt32() / 0x4;
  }
};
_0x4252b3.prototype.readCustomData_onNewlyVisible = function (_0x4fa48c) {
  this.shrinkRad = _0x4fa48c.readUInt32() / 0x4;
};
function _0x4252b3() {
  _0x4252b3.superClass.call(this, 0x4c);
  _0x4252b3.prototype.easeAngleChanges = true;
  this.color = _0x16c921 == 0x5 ? "limegreen" : "red";
}
window.SafeArea = _0x4252b3;
_0x2b451a.setCustomClassForGameObjType(_0x4252b3, 0x4c);
var _0x53abbc = _0xf4bb63;
_0x2635f0.prototype = Object.create(_0x53abbc.prototype);
_0x2635f0.prototype.constructor = _0x2635f0;
_0x2635f0.superClass = _0x53abbc;
_0x2635f0.prototype.animalInfo = function () {
  var _0x2eccd4 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x2eccd4.aniName = "Snow Leopard!";
      break;
    case 0x64:
      _0x2eccd4.aniName = "Frostaline";
      break;
    case 0xc9:
      _0x2eccd4.aniName = "Coral Queen";
      break;
    case 0xca:
      _0x2eccd4.aniName = "Astral Leopard";
      break;
    case 0xcc:
      _0x2eccd4.aniName = "Martian Leopard";
      break;
  }
  _0x2eccd4.skinName = this.getSkinName();
  _0x2eccd4.aniDesc = '';
  _0x2eccd4.upgradeText = "UPGRADED to " + _0x2eccd4.aniName + "!\n Press W to get a speed boost! (Every 8 seconds)!";
  _0x2eccd4.aniCol = "#cfcfcf";
  return _0x2eccd4;
};
_0x2635f0.prototype.getSkinName = function () {
  return "arctic/snowleopard/" + this.animalSpecies + this.getSubSpecies() + "/snowleopard";
};
_0x2635f0.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x2635f0.prototype.getAbilityInfo = function (_0x2c6d79) {
  var _0x4740c5 = {
    abilName: "Extra Boost",
    abilImg: "abilities/Dash-Boost.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x4740c5;
};
function _0x2635f0() {
  _0x2635f0.superClass.call(this, 0x2);
}
window.SnowLeopard = _0x2635f0;
_0x2b451a.setCustomClassForGameObjType(_0x2635f0, 0x2, _0x42d03d);
var _0x53abbc = _0x472b99;
_0x2906bb.prototype = Object.create(_0x53abbc.prototype);
_0x2906bb.prototype.constructor = _0x2906bb;
_0x2906bb.superClass = _0x53abbc;
_0x2906bb.prototype.updateZ = function () {
  this.z = 0xf4240;
};
var _0x576d82 = -0.3;
var _0x434a62 = -0.2;
var _0x23b7ff = -0.2;
_0x2906bb.prototype.customDraw = function (_0x16fb00) {
  _0x3b8ba2.save();
  _0x3b8ba2.rotate(this.angle);
  var _0x252471 = this.rad;
  var _0x335d6e = this.getSkinImageObj(this.getBody("battleduck", true));
  if (_0x335d6e) {
    _0x3b8ba2.save();
    _0x3b8ba2.drawImage(_0x335d6e, -_0x252471 * 1.4705882352941178, -_0x252471 * 1.4705882352941178, 0x2 * _0x252471 * 1.4705882352941178, 0x2 * _0x252471 * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
  var _0x43ed49 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x1c1dc6 = !(_0x4bda0b == 0x2 || _0x11da90) ? _0x7b826(_0x43ed49, 2.5, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle;
  var _0x3c3d21 = this.getSkinImageObj(this.getWing("battleduck", 0x1, true));
  if (_0x3c3d21) {
    _0x3b8ba2.save();
    var _0x2d577d = -(-0.2 + _0x1c1dc6) * _0x4bb70c;
    var _0x252471 = this.rad * 0x1;
    _0x3b8ba2.rotate(0x2d * (Math.PI / 0xb4) + _0x2d577d);
    var _0x329b90 = 0x0;
    var _0x463c5b = this.rad;
    var _0x41e04e = _0x252471 * 0x2 * 0.62;
    var _0x56e5ac = _0x252471 * 2.5;
    var _0x2a4669 = 0.2 + _0x576d82;
    var _0x4e8a6b = 1.7 + _0x434a62;
    _0x3b8ba2.drawImage(_0x3c3d21, _0x329b90 + _0x41e04e * -_0x2a4669, _0x463c5b + _0x56e5ac * -_0x4e8a6b, _0x41e04e, _0x56e5ac);
    _0x3b8ba2.restore();
  }
  var _0x3c3d21 = this.getSkinImageObj(this.getWing("battleduck", 0x2, true));
  if (_0x3c3d21) {
    _0x3b8ba2.save();
    var _0x2d577d = -(-0.2 + _0x1c1dc6) * (-0x5a * (Math.PI / 0xb4));
    var _0x252471 = this.rad * 0x1;
    _0x3b8ba2.rotate(-0x2d * (Math.PI / 0xb4) + _0x2d577d);
    var _0x329b90 = 0x0;
    var _0x463c5b = this.rad;
    var _0x41e04e = _0x252471 * 0x2 * 0.62;
    var _0x56e5ac = _0x252471 * 2.5;
    var _0x2a4669 = 1.1;
    var _0x4e8a6b = 1.7 + _0x23b7ff;
    _0x3b8ba2.drawImage(_0x3c3d21, _0x329b90 + _0x41e04e * -_0x2a4669, _0x463c5b + _0x56e5ac * -_0x4e8a6b, _0x41e04e, _0x56e5ac);
    _0x3b8ba2.restore();
  }
  var _0x23a680 = this.getSkinImageObj(this.getHead("battleduck", true));
  if (_0x23a680) {
    _0x3b8ba2.save();
    var _0x252471 = this.rad;
    _0x3b8ba2.drawImage(_0x23a680, -_0x252471 * 1.4705882352941178, (-_0x252471 + _0x252471 * 0.2) * 1.4705882352941178, 0x2 * _0x252471 * 1.4705882352941178, 0x2 * _0x252471 * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
_0x2906bb.prototype.getSpeciesPath = function (_0x47a9a0) {
  return _0x47a9a0 + "/" + this.speciesType;
};
_0x2906bb.prototype.getWing = function (_0x48fc25, _0x3ffb59, _0x5819c6) {
  var _0x59d824 = "skins/" + (_0x5819c6 ? this.getSpeciesPath(_0x48fc25) + "/" : _0x48fc25 + "/");
  _0x59d824 += _0x48fc25 + "_wing" + _0x3ffb59 + ".png";
  return _0x59d824;
};
_0x2906bb.prototype.getBody = function (_0x16bfb7, _0x2de899) {
  var _0x57053b = "skins/" + (_0x2de899 ? this.getSpeciesPath(_0x16bfb7) + "/" : _0x16bfb7 + "/");
  _0x57053b += _0x16bfb7 + "_body.png";
  return _0x57053b;
};
_0x2906bb.prototype.getHead = function (_0x316cd0, _0x777c7c) {
  var _0x3b82ed = "skins/" + (_0x777c7c ? this.getSpeciesPath(_0x316cd0) + "/" : _0x316cd0 + "/");
  _0x3b82ed += _0x316cd0 + "_head.png";
  return _0x3b82ed;
};
function _0x2906bb() {
  _0x2906bb.superClass.call(this, 0x85);
  console.log("@@@@@@@@@@@@ BATTLE DUCK SPAWNED @@@@@@@@@");
}
window.BattleDuck = _0x2906bb;
_0x2b451a.setCustomClassForGameObjType(_0x2906bb, 0x85);
var _0xbcf639 = _0xbcf639;
var _0x53abbc = _0xf4bb63;
_0xbcf639.prototype = Object.create(_0x53abbc.prototype);
_0xbcf639.prototype.constructor = _0xbcf639;
_0xbcf639.superClass = _0x53abbc;
_0xbcf639.prototype.objSkinSpotsCanvas = null;
_0xbcf639.prototype.animalInfo = function () {
  var _0x535d03 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x535d03.aniName = "Giraffe";
      break;
    case 0x1:
      _0x535d03.aniName = "Momaffie";
      break;
    case 0x2:
      _0x535d03.aniName = "Girabie";
      break;
    case 0x3:
      _0x535d03.aniName = "Momaffie Family";
      break;
    case 0xca:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x535d03.aniName = "Quilin Giraffe";
          break;
        case 0x1:
          _0x535d03.aniName = "Draquorum";
      }
      break;
  }
  _0x535d03.upgradeText = "UPGRADED to " + _0x535d03.aniName + "!\nGiraffe have huge legs and stomp anyone in their way!";
  _0x535d03.aniCol = "#E9BD23";
  _0x535d03.skinName = this.getSkinName();
  return _0x535d03;
};
_0xbcf639.prototype.getSkinName = function () {
  let _0x359cfc = this.getSpeciesPath() + "/giraffe";
  if (this.id == 0x0 && this.animalSpecies == 0x3) {
    _0x359cfc += "_family";
  }
  return _0x359cfc;
};
_0xbcf639.prototype.getSpeciesPath = function () {
  return "land/giraffe/" + this.animalSpecies + this.getSubSpecies();
};
_0xbcf639.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return this.animalSpecies === 0xca ? "/" + this.animalSubSpecies : '';
};
_0xbcf639.prototype.getAbilityInfo = function (_0x1d682f) {
  var _0x4d5fee = {
    abilName: "Stomp!",
    abilImg: "abilities/Stomp.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x4d5fee;
};
_0xbcf639.prototype.isEdibleOutlined = function () {
  if (this.mommyID == _0x2bd878) {
    return false;
  }
  return _0xbcf639.superClass.prototype.isEdibleOutlined.call(this);
};
_0xbcf639.prototype.readCustomData_onNewlyVisible = function (_0x2ea7f3) {
  _0xbcf639.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x2ea7f3);
  this.mommyID = _0x2ea7f3.readUInt32();
};
function _0xbcf639() {
  _0xbcf639.superClass.call(this, 0x2);
}
window.Giraffe = _0xbcf639;
_0x2b451a.setCustomClassForGameObjType(_0xbcf639, 0x2, _0x5294bc);
var _0x5c7bb9 = _0x5c7bb9;
var _0x53abbc = _0xf4bb63;
_0x5c7bb9.prototype = Object.create(_0x53abbc.prototype);
_0x5c7bb9.prototype.constructor = _0x5c7bb9;
_0x5c7bb9.superClass = _0x53abbc;
_0x5c7bb9.prototype.objSkinSpotsCanvas = null;
_0x5c7bb9.prototype.getSkinName = function () {
  let _0x426d56 = this.getSpeciesPath() + "/giraffe";
  if (this.specType > 0x0) {
    _0x426d56 += '' + this.specType;
  }
  if (this.id == 0x0 && this.animalSpecies == 0x2) {
    _0x426d56 += "_family";
  }
  return _0x426d56;
};
_0x5c7bb9.prototype.getSpeciesPath = function () {
  return "forest/whitegiraffe/" + this.animalSpecies + this.getSubSpecies();
};
_0x5c7bb9.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x5c7bb9.prototype.animalInfo = function () {
  var _0x404ff3 = {};
  switch (this.animalSpecies) {
    case 0x1:
      _0x404ff3.aniName = "White Giraffe";
      break;
    case 0x2:
      _0x404ff3.aniName = "Giraffe Family";
      break;
  }
  _0x404ff3.aniDesc = '';
  _0x404ff3.upgradeText = "UPGRADED to " + _0x404ff3.aniName + "!\nWhite Giraffe are very aggressive and have huge legs and stomp anyone in their way!";
  _0x404ff3.aniCol = "#E9BD23";
  _0x404ff3.skinName = this.getSkinName();
  return _0x404ff3;
};
_0x5c7bb9.prototype.getAbilityInfo = function (_0x1ecddd) {
  var _0x361e3a = {
    abilName: "Stomp!",
    abilImg: "abilities/Stomp.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x361e3a;
};
function _0x5c7bb9() {
  _0x5c7bb9.superClass.call(this, 0x2);
}
window.WhiteGiraffe = _0x5c7bb9;
_0x2b451a.setCustomClassForGameObjType(_0x5c7bb9, 0x2, _0x3d408f);
var _0x53abbc = _0xf4bb63;
_0xc827d0.prototype = Object.create(_0x53abbc.prototype);
_0xc827d0.prototype.constructor = _0xc827d0;
_0xc827d0.superClass = _0x53abbc;
_0xc827d0.prototype.getSkinName = function () {
  return this.getSpeciesPath() + "/turkey" + (this.specType == 0x0 ? '' : this.specType);
};
_0xc827d0.prototype.getSpeciesPath = function () {
  return "forest/turkey/" + this.animalSpecies;
};
_0xc827d0.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0xc827d0.prototype.getWing = function (_0x498612, _0x40a82b, _0x2f2992) {
  var _0x8544cd = "skins/" + this.getSpeciesPath() + "/turkey";
  _0x8544cd += "_wing" + _0x40a82b + ".png";
  return _0x8544cd;
};
_0xc827d0.prototype.getHead = function (_0x582402, _0x1eb33d) {
  var _0x9251a3 = "skins/" + this.getSpeciesPath() + "/turkey";
  _0x9251a3 += "_head.png";
  return _0x9251a3;
};
_0xc827d0.prototype.getAbilityInfo = function (_0x5b5cfe) {
  var _0x56a0d6 = {};
  if (this.flag_eff_isOnTree || this.flag_flying && this.flag_usingAbility) {
    _0x56a0d6.abilName = "Hold to Fly";
    _0x56a0d6.abilImg = "abilities/Fly.svg";
  } else if (this.flag_isClimbingHill) {
    _0x56a0d6.abilName = "Shoots Eggs!";
    _0x56a0d6.abilImg = "abilities/Spit.svg";
  } else {
    _0x56a0d6.abilName = "Front Kick\n(Hold to Charge)";
    _0x56a0d6.abilImg = "abilities/Kick.svg";
  }
  _0x56a0d6.skinThemeID = this.skinThemeID;
  _0x56a0d6.mopeSeasonID = this.mopeSeasonID;
  return _0x56a0d6;
};
_0xc827d0.prototype.animalInfo = function () {
  var _0x3a7b01 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x3a7b01.aniName = "Turkey!";
      break;
  }
  _0x3a7b01.aniCol = "#FF9000";
  _0x3a7b01.skinName = this.getSkinName();
  _0x3a7b01.upgradeText = "UPGRADED to " + _0x3a7b01.aniName + "!\nHold W to charge up a kick, fly from tree and shoot eggs from hill!";
  return _0x3a7b01;
};
var _0x19f7df = -1.5;
var _0x3af7b6 = -0x2;
_0xc827d0.prototype.drawUnderSkinImg = function () {
  _0x3b8ba2.save();
  var _0x15e20e = this.rad * 0.6;
  var _0xf7047d = "tail";
  if (this.flag_usingAbility) {
    if (!this.flag_flying) {
      _0xf7047d = "tail1";
    }
    _0x19f7df = _0x3af7b6;
  } else {
    _0x19f7df = -1.5;
  }
  _0xf7047d = "skins/" + this.getSpeciesPath() + "/" + _0xf7047d + ".png";
  var _0x2f357f = this.getSkinImageObj(_0xf7047d);
  if (_0x2f357f) {
    _0x3b8ba2.drawImage(_0x2f357f, -_0x15e20e * this.skinScale * 0x2, -_0x15e20e * this.skinScale * 0x2 + _0x15e20e * _0x19f7df, 0x2 * _0x15e20e * this.skinScale * 0x2, 0x3 * _0x15e20e * this.skinScale);
  }
  _0x3b8ba2.restore();
};
_0xc827d0.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    return;
  }
  _0x3b8ba2.save();
  var _0x2c4a19 = this.flag_flying ? 0x2d : 0x14;
  var _0x12870a = this.flag_flying ? 0x5a : 0x2d;
  var _0x926915 = this.flag_flying ? 0.2 : 0.01;
  var _0x1d4663 = this.flag_flying ? 2.5 : 2.2;
  var _0x1b9451 = this.flag_flying ? 2.5 : 2.2;
  var _0x41cee1 = this.flag_flying ? 0x0 : -0.4;
  var _0x26fae8 = this.flag_flying ? 0x0 : -0.2;
  var _0x2aa32c = this.flag_flying ? 0.5 : 1.2;
  var _0x53aa50 = this.flag_flying ? 0.3 : 0.1;
  var _0x4d303c = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x47ac9b = !(_0x4bda0b == 0x2 || _0x11da90) ? _0x7b826(_0x4d303c, _0x2aa32c, _0x53aa50, 0x2) : this.birdNoAnimationFlyWingAngle;
  var _0x5c4cc9 = this.getSkinImageObj(this.getWing("turkey", 0x1, true));
  if (_0x5c4cc9) {
    _0x3b8ba2.save();
    var _0x382447 = -(-_0x926915 + _0x47ac9b) * (_0x12870a * (Math.PI / 0xb4));
    var _0x44e0bd = this.rad * 0.8;
    _0x3b8ba2.rotate(_0x2c4a19 * (Math.PI / 0xb4) + _0x382447);
    var _0x184b8d = 0x0;
    var _0x3f2546 = this.rad;
    var _0x573e7b = _0x44e0bd * _0x1b9451 * 0.62;
    var _0x3d45f9 = _0x44e0bd * _0x1d4663;
    var _0x231f36 = 0.2 + _0x41cee1;
    var _0x3ffad5 = 1.7 + _0x26fae8;
    _0x3b8ba2.drawImage(_0x5c4cc9, _0x184b8d + _0x573e7b * -_0x231f36, _0x3f2546 + _0x3d45f9 * -_0x3ffad5, _0x573e7b, _0x3d45f9);
    _0x3b8ba2.restore();
  }
  var _0x5c4cc9 = this.getSkinImageObj(this.getWing("turkey", 0x2, true));
  if (_0x5c4cc9) {
    _0x3b8ba2.save();
    var _0x382447 = -(-_0x926915 + _0x47ac9b) * (-_0x12870a * (Math.PI / 0xb4));
    var _0x44e0bd = this.rad * 0.8;
    _0x3b8ba2.rotate(-_0x2c4a19 * (Math.PI / 0xb4) + _0x382447);
    var _0x184b8d = 0x0;
    var _0x3f2546 = this.rad;
    var _0x573e7b = _0x44e0bd * _0x1b9451 * 0.62;
    var _0x3d45f9 = _0x44e0bd * _0x1d4663;
    var _0x231f36 = 0.8 - _0x41cee1;
    var _0x3ffad5 = 1.7 + _0x26fae8;
    _0x3b8ba2.drawImage(_0x5c4cc9, _0x184b8d + _0x573e7b * -_0x231f36, _0x3f2546 + _0x3d45f9 * -_0x3ffad5, _0x573e7b, _0x3d45f9);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
  var _0x8acc1d = 0.1;
  if (this.specType == 0x2) {
    _0x8acc1d = -0.1;
  }
  var _0x56dc61 = this.getSkinImageObj(this.getHead("turkey", true));
  if (_0x56dc61) {
    _0x3b8ba2.save();
    var _0x44e0bd = this.rad;
    _0x3b8ba2.drawImage(_0x56dc61, -_0x44e0bd * 1.4705882352941178, (-_0x44e0bd + _0x44e0bd * _0x8acc1d) * 1.4705882352941178, 0x2 * _0x44e0bd * 1.4705882352941178, 0x2 * _0x44e0bd * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
};
function _0xc827d0() {
  _0xc827d0.superClass.call(this, 0x2);
}
window.Turkey = _0xc827d0;
_0x2b451a.setCustomClassForGameObjType(_0xc827d0, 0x2, 0x70);
var _0x53abbc = _0x472b99;
_0x12c524.prototype = Object.create(_0x53abbc.prototype);
_0x12c524.prototype.constructor = _0x12c524;
_0x12c524.superClass = _0x53abbc;
_0x12c524.prototype.mommyID = 0x0;
_0x12c524.prototype.updateZ = function () {
  this.z = this.flag_flying ? 0x3e8 : this.rad;
};
_0x12c524.prototype.customDraw = function (_0x2b11ba) {
  _0x3b8ba2.save();
  var _0x9fb540 = this.getSkinImageObj("skins/forest/turkey/" + this.speciesType + "/turkeyegg" + (this.isEdibleOutlined() ? "_e" : '') + ".png");
  if (_0x9fb540) {
    var _0x7e3764 = this.rad;
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x9fb540, -_0x7e3764, -_0x7e3764, 0x2 * _0x7e3764, 0x2 * _0x7e3764);
  }
  _0x3b8ba2.restore();
};
function _0x12c524() {
  _0x12c524.superClass.call(this, 0x86);
  this.doesDrawEffectScale = true;
}
window.TurkeyEgg = _0x12c524;
_0x2b451a.setCustomClassForGameObjType(_0x12c524, 0x86);
var _0x53abbc = _0x472b99;
_0x425734.prototype = Object.create(_0x53abbc.prototype);
_0x425734.prototype.constructor = _0x425734;
_0x425734.superClass = _0x53abbc;
_0x425734.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x425734.prototype.customDraw = function (_0x5934c5) {
  _0x3b8ba2.save();
  var _0x4595b9 = "gameobj/" + this.oType + "/" + this.oType + (this.isEdibleOutlined() ? "_e" : '') + ".png";
  var _0x1ed8a6 = this.getSkinImageObj(_0x4595b9);
  if (_0x1ed8a6) {
    var _0x4122c1 = this.rad;
    this.angle = this.rPer * Math.PI * 0x2;
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x1ed8a6, -_0x4122c1, -_0x4122c1, 0x2 * _0x4122c1, 0x2 * _0x4122c1);
  }
  _0x3b8ba2.restore();
};
function _0x425734() {
  _0x425734.superClass.call(this, 0x87);
  this.doesDrawEffectScale = true;
}
window.TurkeyLeg = _0x425734;
_0x2b451a.setCustomClassForGameObjType(_0x425734, 0x87);
var _0x53abbc = _0x472b99;
_0x1052cd.prototype = Object.create(_0x53abbc.prototype);
_0x1052cd.prototype.constructor = _0x1052cd;
_0x1052cd.superClass = _0x53abbc;
_0x1052cd.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x1052cd.prototype.customDraw = function (_0xdb2b4a) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0x1;
  var _0x4d344a = "gameobj/" + this.oType + "/" + this.oType + (this.isEdibleOutlined() ? "_e" : '') + ".png";
  var _0xb621ca = this.getSkinImageObj(_0x4d344a);
  if (_0xb621ca) {
    var _0x1aac7a = this.rad * 1.2;
    this.angle = this.rPer * Math.PI * 0x2;
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0xb621ca, -_0x1aac7a, -_0x1aac7a + _0x1aac7a * 0.15, 0x2 * _0x1aac7a, 0x2 * _0x1aac7a);
  }
  _0x3b8ba2.restore();
};
function _0x1052cd() {
  _0x1052cd.superClass.call(this, 0x88);
  this.doesDrawEffectScale = true;
}
window.TurkeyBaked = _0x1052cd;
_0x2b451a.setCustomClassForGameObjType(_0x1052cd, 0x88);
var _0x53abbc = _0x472b99;
_0x1c56bb.prototype = Object.create(_0x53abbc.prototype);
_0x1c56bb.prototype.constructor = _0x1c56bb;
_0x1c56bb.superClass = _0x53abbc;
_0x1c56bb.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x1c56bb.prototype.customDraw = function (_0x57a8f4) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0x1;
  var _0x3f4db1 = "gameobj/" + this.oType + "/" + this.oType + (this.isEdibleOutlined() ? "_e" : '') + ".png";
  var _0x5c1b7d = this.getSkinImageObj(_0x3f4db1);
  if (_0x5c1b7d) {
    var _0x471d41 = this.rad * 1.1;
    this.angle = this.rPer * Math.PI * 0x2;
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x5c1b7d, -_0x471d41, -_0x471d41, 0x2 * _0x471d41, 0x2 * _0x471d41);
  }
  _0x3b8ba2.restore();
};
function _0x1c56bb() {
  _0x1c56bb.superClass.call(this, 0x89);
  this.doesDrawEffectScale = true;
}
window.PumpkinPie = _0x1c56bb;
_0x2b451a.setCustomClassForGameObjType(_0x1c56bb, 0x89);
var _0x53abbc = _0x472b99;
_0x169bcb.prototype = Object.create(_0x53abbc.prototype);
_0x169bcb.prototype.constructor = _0x169bcb;
_0x169bcb.superClass = _0x53abbc;
_0x169bcb.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x169bcb.prototype.customDraw = function (_0x59f1b1) {
  var _0x59fad3 = false;
  var _0x4b11d0 = _0x5c52f8[_0x2bd878];
  if (_0x4b11d0 && _0x4b11d0.lastHidingHoleID == this.id || _0x27f307 == this.id) {
    _0x59fad3 = true;
  }
  if (_0x59f1b1) {} else {
    var _0xc64eb3 = this.getSkinImageObj("gameobj/" + this.oType + "/" + this.oType + ".png");
    if (_0xc64eb3) {
      _0x3b8ba2.save();
      var _0x4b11d0 = _0x5c52f8[_0x2bd878];
      if (_0x4b11d0 && _0x4b11d0.lastHidingHoleID == this.id) {
        _0x3b8ba2.globalAlpha = 0.5;
      }
      var _0x24e97c = this.rad * 1.4;
      _0x3b8ba2.rotate(this.angle);
      _0x3b8ba2.drawImage(_0xc64eb3, -_0x24e97c, -_0x24e97c + 0.05 * _0x24e97c, _0x24e97c * 0x2, _0x24e97c * 0x2);
      _0x3b8ba2.restore();
    }
  }
  if (_0x59fad3) {
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.angle + 0x73 * (Math.PI / 0xb4));
    _0x3b8ba2.globalAlpha = 0x1;
    var _0x393a6c = Math.PI * 0x2 * this.timerAngle;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.lineWidth = 0x7;
    _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - 0x4), 0x0, _0x393a6c);
    _0x3b8ba2.strokeStyle = "#8CCEF4";
    _0x3b8ba2.stroke();
    _0x3b8ba2.restore();
  }
};
_0x169bcb.prototype.timerAngle = 0x0;
_0x169bcb.prototype.nTimerAngle = 0x0;
_0x169bcb.prototype.onLerpUpdate = function (_0x51afc2) {
  _0x169bcb.superClass.prototype.onLerpUpdate.call(this, _0x51afc2);
  this.timerAngle += (this.nTimerAngle - this.timerAngle) * 0.1;
};
_0x169bcb.prototype.readUpdatedProperty = function (_0x3cebbc, _0xe752a9) {
  if (_0x3cebbc == 0xe) {
    this.timeLeft = _0xe752a9.readUInt16() / 0x64;
    this.nTimerAngle = this.timeLeft / 0x64;
  }
};
function _0x169bcb() {
  _0x169bcb.superClass.call(this, 0x8a);
  this.doesDrawEffectScale = false;
}
window.Igloo = _0x169bcb;
_0x2b451a.setCustomClassForGameObjType(_0x169bcb, 0x8a);
var _0x53abbc = _0x472b99;
_0xe09ba1.prototype = Object.create(_0x53abbc.prototype);
_0xe09ba1.prototype.constructor = _0xe09ba1;
_0xe09ba1.superClass = _0x53abbc;
_0xe09ba1.prototype.updateZ = function () {
  this.z = this.rad;
};
_0xe09ba1.prototype.customDraw = function (_0x52eb0a) {};
function _0xe09ba1() {
  _0xe09ba1.superClass.call(this, 0x8b);
  this.doesDrawEffectScale = false;
}
window.IglooOpening = _0xe09ba1;
_0x2b451a.setCustomClassForGameObjType(_0xe09ba1, 0x8b);
var _0x53abbc = _0x472b99;
_0x39d664.prototype = Object.create(_0x53abbc.prototype);
_0x39d664.prototype.constructor = _0x39d664;
_0x39d664.superClass = _0x53abbc;
_0x39d664.prototype.updateZ = function () {
  this.z = -0x63;
};
_0x39d664.prototype.customDraw = function (_0x22a550) {
  _0x3b8ba2.save();
  var _0x5c3bd2 = false;
  var _0x2eb011 = _0x5c52f8[_0x2bd878];
  if (_0x2eb011 && _0x2eb011.lastHidingHoleID == this.id || _0x27f307 == this.id) {
    _0x5c3bd2 = true;
  }
  if (_0x22a550) {} else {
    _0x3b8ba2.save();
    {
      if (_0x5c3bd2) {
        _0x3b8ba2.globalAlpha = 0x1;
        var _0x1c8b74 = this.rad;
        this.drawOutlinedCircleRad('', "#9F8641", _0x1c8b74);
        _0x133658(0x0 - this.rPer, 0x0 - this.rPer, Math.max(0x0, _0x1c8b74 - 0x7), "#735e28");
        _0x133658(0x0 + this.rPer, 0x1, Math.max(0x0, _0x1c8b74 - 0xc), "#63501d");
        _0x3b8ba2.globalAlpha = this.alpha * 0.7;
        _0x1c8b74 = _0x1c8b74 * 0.7;
        _0x133658(0x0 - this.rPer, 0x0 - this.rPer, Math.max(0x0, _0x1c8b74 - 0x7), "#735e28");
        _0x1c8b74 = _0x1c8b74 * 0.5;
        _0x3b8ba2.globalAlpha = this.alpha * 0.3;
        _0x133658(0x0 - this.rPer, 0x0 - this.rPer, Math.max(0x0, _0x1c8b74), "#806a30");
      }
      if (this.curBiome == 0x1) {
        if (!_0x5c3bd2) {
          var _0x37612c = "gameobj/" + this.oType + "/" + this.curBiome + ".png";
          var _0x3ad0ec = this.getSkinImageObj(_0x37612c);
          if (_0x3ad0ec) {
            _0x3b8ba2.save();
            var _0x28f6fa = this.rad;
            _0x3b8ba2.rotate(this.angle);
            _0x3b8ba2.drawImage(_0x3ad0ec, -_0x28f6fa, -_0x28f6fa, _0x28f6fa * 0x2, _0x28f6fa * 0x2);
            _0x3b8ba2.restore();
          }
        }
      }
    }
    _0x3b8ba2.restore();
    if (this.curBiome == 0x1) {
      var _0x37612c = "gameobj/" + this.oType + "/cave_bottom_" + this.curBiome + ".png";
      var _0x3ad0ec = this.getSkinImageObj(_0x37612c);
      if (_0x3ad0ec) {
        _0x3b8ba2.save();
        var _0x28f6fa = this.rad * 0.5;
        _0x3b8ba2.rotate(this.angle);
        _0x3b8ba2.drawImage(_0x3ad0ec, -_0x28f6fa, -_0x28f6fa + 1.7 * _0x28f6fa, _0x28f6fa * 0x2, _0x28f6fa * 0x2);
        _0x3b8ba2.restore();
      }
      if (!_0x5c3bd2) {
        var _0x37612c = "gameobj/" + this.oType + "/cave_top_" + this.curBiome + ".png";
        var _0x3ad0ec = this.getSkinImageObj(_0x37612c);
        if (_0x3ad0ec) {
          _0x3b8ba2.save();
          var _0x28f6fa = this.rad * 0.5;
          _0x3b8ba2.rotate(this.angle);
          _0x3b8ba2.drawImage(_0x3ad0ec, -_0x28f6fa, -_0x28f6fa + 1.7 * _0x28f6fa, _0x28f6fa * 0x2, _0x28f6fa * 0x2);
          _0x3b8ba2.restore();
        }
      }
    } else {
      var _0x3ad0ec = this.getSkinImageObj("img/cave/" + this.curBiome + "/cave_bottom.png");
      if (_0x3ad0ec) {
        _0x3b8ba2.save();
        var _0x28f6fa = this.rad * 0.5;
        _0x3b8ba2.rotate(this.angle);
        _0x3b8ba2.drawImage(_0x3ad0ec, -_0x28f6fa, -_0x28f6fa + 1.7 * _0x28f6fa, _0x28f6fa * 0x2, _0x28f6fa * 0x2);
        _0x3b8ba2.restore();
      }
      if (!_0x5c3bd2) {
        var _0x3ad0ec = this.getSkinImageObj("img/cave/" + this.curBiome + "/cave_top.png");
        if (_0x3ad0ec) {
          _0x3b8ba2.save();
          var _0x28f6fa = this.rad * 0.5;
          _0x3b8ba2.rotate(this.angle);
          _0x3b8ba2.drawImage(_0x3ad0ec, -_0x28f6fa, -_0x28f6fa + 1.7 * _0x28f6fa, _0x28f6fa * 0x2, _0x28f6fa * 0x2);
          _0x3b8ba2.restore();
        }
      }
    }
  }
  _0x3b8ba2.restore();
  if (_0x5c3bd2) {
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.angle + 0x73 * (Math.PI / 0xb4));
    _0x3b8ba2.globalAlpha = 0.5;
    var _0x1c8b74 = Math.PI * 0x2 * this.timerAngle;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.lineWidth = 0x6;
    _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - 0x4), 0x0, _0x1c8b74);
    _0x3b8ba2.strokeStyle = "#8CCEF4";
    _0x3b8ba2.stroke();
    _0x3b8ba2.restore();
  }
};
_0x39d664.prototype.timerAngle = 0x0;
_0x39d664.prototype.nTimerAngle = 0x0;
_0x39d664.prototype.onLerpUpdate = function (_0x136a70) {
  _0x39d664.superClass.prototype.onLerpUpdate.call(this, _0x136a70);
  this.timerAngle += (this.nTimerAngle - this.timerAngle) * 0.1;
};
_0x39d664.prototype.readUpdatedProperty = function (_0x443ca9, _0x58f288) {
  if (_0x443ca9 == 0xe) {
    this.timeLeft = _0x58f288.readUInt16() / 0x64;
    this.nTimerAngle = this.timeLeft / 0x64;
  }
};
function _0x39d664() {
  _0x39d664.superClass.call(this, 0x8c);
  this.doesDrawEffectScale = false;
}
window.Cave = _0x39d664;
_0x2b451a.setCustomClassForGameObjType(_0x39d664, 0x8c);
var _0x53abbc = _0x472b99;
_0x463d05.prototype = Object.create(_0x53abbc.prototype);
_0x463d05.prototype.constructor = _0x463d05;
_0x463d05.superClass = _0x53abbc;
_0x463d05.prototype.updateZ = function () {
  this.z = 0x64;
};
_0x463d05.prototype.customDraw = function (_0x50335b) {};
function _0x463d05() {
  _0x463d05.superClass.call(this, 0x8d);
  this.doesDrawEffectScale = false;
}
window.CaveOpening = _0x463d05;
_0x2b451a.setCustomClassForGameObjType(_0x463d05, 0x8d);
var _0x53abbc = _0xf4bb63;
_0x1012d9.prototype = Object.create(_0x53abbc.prototype);
_0x1012d9.prototype.constructor = _0x1012d9;
_0x1012d9.superClass = _0x53abbc;
_0x1012d9.prototype.animalInfo = function () {
  var _0x661654 = {
    aniName: "Santa!",
    skinName: "santa/" + this.animalSpecies + "/santa",
    aniDesc: '',
    upgradeText: "UPGRADED to Santa!\n Santa distributes gifts to everyone!",
    aniCol: "#231f18"
  };
  return _0x661654;
};
var _0x2cbd24 = 0.84;
var _0x43cd91 = 0.47;
var _0x46ac4c = 0x2d;
var _0x30dd06 = -0x1e;
var _0x28cc03 = 1.3;
var _0x46baf8 = 1.5;
var _0x272ff1 = 0.3;
_0x1012d9.prototype.updateZ = function () {
  this.z = 0x3f2 + this.rad;
  if (this.flag_flying) {
    this.z += 0x18704;
  }
};
_0x1012d9.prototype.calculateZIndex = function () {
  this.updateZ();
};
_0x1012d9.prototype.drawUnderSkinTail = function (_0x3d68af) {};
_0x1012d9.prototype.flyingHatAnimation = function () {
  if (!this.hideFeatures || this.flag_flying) {
    this.santaHead(0x0);
    this.hohohoAnimation(0x0);
  }
  var _0x433ef0 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x40b148 = _0x7b826(_0x433ef0, 0.3, 0.1, 0x2);
  var _0x1129c9 = this.getSkinImageObj("skins/santa/" + this.animalSpecies + "/hat.png");
  if (_0x1129c9) {
    _0x3b8ba2.save();
    var _0x455674 = -(-0.2 + _0x40b148) * (0x2d * (Math.PI / 0xb4));
    var _0x17eeb4 = this.rad * 1.2;
    _0x3b8ba2.rotate(0x0 * (Math.PI / 0xb4) + _0x455674);
    var _0x4f8387 = this.rad;
    var _0x3d0e46 = _0x17eeb4 * 0x2;
    var _0x3777bd = _0x17eeb4 * 0x2;
    _0x3b8ba2.drawImage(_0x1129c9, 0x0 + _0x3d0e46 * -0.5, _0x4f8387 + _0x3777bd * -0.95, _0x3d0e46, _0x3777bd);
    _0x3b8ba2.restore();
  }
};
_0x1012d9.prototype.drawSkinCustomization = function () {
  if (this.flag_flying) {
    this.flyingHatAnimation();
  } else {
    if (!this.hideFeatures || this.flag_flying) {
      if (this.specType == 0x0) {
        this.bellhandAnimation(0x0);
      }
      this.santaHead(0x0);
      this.hohohoAnimation(0x0);
    }
  }
};
_0x1012d9.prototype.hideFeatures = false;
_0x1012d9.prototype.bellhandAnimation = function (_0x1fff34) {
  var _0x7831d3 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x484b2b = _0x7b826(_0x7831d3, _0x46baf8, _0x272ff1, 0x2);
  var _0x2cbb13 = this.getSkinImageObj("skins/santa/" + this.animalSpecies + "/bellhand.png");
  if (_0x2cbb13) {
    _0x3b8ba2.save();
    var _0xa897c5 = -(-0.2 + _0x484b2b) * (_0x46ac4c * (Math.PI / 0xb4));
    var _0x4e013c = this.rad * _0x28cc03;
    _0x3b8ba2.rotate(_0x30dd06 * (Math.PI / 0xb4) + _0xa897c5);
    var _0x2f80b1 = this.rad;
    var _0x333c7b = _0x4e013c * 0x2;
    var _0x2ce474 = _0x4e013c * 0x2;
    var _0x1e77f6 = _0x43cd91;
    var _0x50b9b8 = _0x2cbd24;
    _0x3b8ba2.drawImage(_0x2cbb13, 0x0 + _0x333c7b * -_0x1e77f6, _0x2f80b1 + _0x2ce474 * -_0x50b9b8, _0x333c7b, _0x2ce474);
    _0x3b8ba2.restore();
  }
};
_0x1012d9.prototype.hohohoNextT = +new Date() + 0x1388;
_0x1012d9.prototype.hohohoAnimation = function (_0x40c618) {
  if (_0x1f4c9e > this.hohohoNextT) {
    var _0x367ae7 = -0.1 + _0x40c618;
    var _0x58b3d4 = Math.trunc(_0x1f4c9e / 0xb4) % 0x3;
    var _0x8717d6 = this.getSkinImageObj("skins/santa/" + this.animalSpecies + "/santa_mouth" + _0x58b3d4 + ".png");
    if (_0x8717d6) {
      _0x3b8ba2.save();
      var _0x5c045a = this.rad;
      _0x3b8ba2.drawImage(_0x8717d6, -_0x5c045a * 1.4705882352941178, (-_0x5c045a + _0x5c045a * _0x367ae7) * 1.4705882352941178, 0x2 * _0x5c045a * 1.4705882352941178, 0x2 * _0x5c045a * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
    if (_0x1f4c9e > this.hohohoNextT + 0x5dc) {
      this.hohohoNextT = +new Date() + 0x2710;
    }
  }
};
_0x1012d9.prototype.getSkinImageObj = function (_0x1d88e7) {
  this.skinThemeID = 0x0;
  return _0x1012d9.superClass.prototype.getSkinImageObj.call(this, _0x1d88e7);
};
_0x1012d9.prototype.santaHead = function (_0x5ad3d2) {
  var _0x5a70d2 = this.flag_flying ? "2" : '';
  if (this.specType == 0x2) {
    _0x5a70d2 = "3";
  }
  var _0x3bc65d = this.getSkinImageObj("skins/santa/" + this.animalSpecies + "/santa_head" + _0x5a70d2 + ".png");
  if (_0x3bc65d) {
    _0x3b8ba2.save();
    var _0x46df70 = this.rad;
    _0x3b8ba2.drawImage(_0x3bc65d, -_0x46df70 * 1.4705882352941178, (-_0x46df70 + _0x46df70 * 0.1) * 1.4705882352941178, 0x2 * _0x46df70 * 1.4705882352941178, 0x2 * _0x46df70 * 1.4705882352941178);
    _0x3b8ba2.restore();
  }
};
_0x1012d9.prototype.getAbilityInfo = function (_0x1cb782) {
  var _0x2f5064 = {};
  switch (_0x1cb782) {
    case 0x6a:
      _0x2f5064.abilName = "Fly High!";
      _0x2f5064.abilImg = "skins/santa/" + this.animalSpecies + "/ability_santa_flying.png";
      break;
    case 0x6b:
      _0x2f5064.abilName = "Gives Gifts!";
      _0x2f5064.abilImg = "skins/santa/" + this.animalSpecies + "/ability_santa_throwgifts.png";
      break;
    case 0x6c:
      _0x2f5064.abilName = "Flying Sleigh!";
      _0x2f5064.abilImg = "skins/santa/" + this.animalSpecies + "/ability_santa_flyingsleigh.png";
      break;
  }
  _0x2f5064.skinThemeID = this.skinThemeID;
  _0x2f5064.mopeSeasonID = this.mopeSeasonID;
  return _0x2f5064;
};
_0x1012d9.prototype.getSkinName = function () {
  var _0x2718e0 = '';
  _0x2718e0 = "santa/" + this.animalSpecies + "/santa" + (this.specType == 0x0 ? '' : this.specType);
  return _0x2718e0;
};
function _0x1012d9() {
  _0x1012d9.superClass.call(this, 0x2);
}
window.Santa = _0x1012d9;
_0x2b451a.setCustomClassForGameObjType(_0x1012d9, 0x2, _0x44f00a);
var _0x53abbc = _0x472b99;
_0x360bcd.prototype = Object.create(_0x53abbc.prototype);
_0x360bcd.prototype.constructor = _0x360bcd;
_0x360bcd.superClass = _0x53abbc;
_0x360bcd.prototype.updateZ = function () {
  this.z = 0x3f2;
  if (this.flag_flying) {
    this.z += 0x186a0;
  }
};
_0x360bcd.prototype.customDraw = function (_0x4c1f61) {
  var _0x229d2c = this.getSkinImageObj("skins/santa/0/sleigh.png");
  if (_0x229d2c) {
    _0x3b8ba2.save();
    var _0x52c2cd = this.rad * 0x1;
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x229d2c, -_0x52c2cd, -_0x52c2cd, _0x52c2cd * 0x2, _0x52c2cd * 0x2);
    _0x3b8ba2.restore();
  }
};
function _0x360bcd() {
  _0x360bcd.superClass.call(this, 0x40);
}
window.Sleigh = _0x360bcd;
_0x2b451a.setCustomClassForGameObjType(_0x360bcd, 0x40);
var _0x53abbc = _0xf4bb63;
_0x2da989.prototype = Object.create(_0x53abbc.prototype);
_0x2da989.prototype.constructor = _0x2da989;
_0x2da989.superClass = _0x53abbc;
_0x2da989.prototype.updateZ = function () {
  this.z = 0x3e8 + this.rad + this.rowNumber;
  if (this.flag_flying) {
    this.z += 0x186a0;
  }
};
_0x2da989.prototype.calculateZIndex = function () {
  this.updateZ();
};
_0x2da989.prototype.animalInfo = function () {
  var _0xa1905b = {
    aniName: "Rudolph!",
    skinName: "santa/rudolph",
    upgradeText: "UPGRADED to Rudolph!\n Rudolph paws turn very well on ice!\n Press W to howl!",
    aniCol: "#6B6B6B"
  };
  return _0xa1905b;
};
_0x2da989.prototype.getAbilityInfo = function (_0x2d9033) {
  var _0x5c339b = {
    abilName: "Howl!",
    abilImg: "abilities/Howl.svg"
  };
  return _0x5c339b;
};
_0x2da989.prototype.getSkinName = function () {
  var _0x5b5c79 = '';
  _0x5b5c79 = "santa/0/" + (this.isRudolph ? "rudolph" : "deer");
  _0x5b5c79 += this.specType == 0x0 ? '' : 0x1;
  return _0x5b5c79;
};
_0x2da989.prototype.drawAnimalUnderSkinCircle = function (_0xa26274, _0x5eb919) {
  if (!this.flag_isGrabbed) {
    if (this.playerNum == 0x1) {
      _0xa26274 = "cyan";
    } else {
      if (this.playerNum == 0x2) {
        _0xa26274 = "yellow";
      } else if (this.flag_eff_isOnSpiderWeb) {
        _0xa26274 = "white";
      }
    }
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = this.isAnimalInside1v1Arena() ? 0.3 : this.idealOp;
    _0x133658(0x0, 0x0, this.rad, _0xa26274);
    _0x3b8ba2.restore();
  }
};
_0x2da989.prototype.drawLights = function () {};
_0x2da989.prototype.afterCustomDraw = function (_0xfe0bf5) {
  if (this.isRudolph) {
    this.drawLights();
  }
  var _0x441ac4 = -0x1;
  var _0x3aef47 = "#b84831";
  var _0x4cff48 = 0x4 * (this.curRad / this.startRad);
  var _0x5454ef = 0x1;
  this.drawRope(this.rope1_x, this.rope1_y, this.deerPos1_x, this.deerPos1_y, _0x3aef47, _0x4cff48, _0x441ac4, _0x5454ef);
  this.drawRope(this.rope2_x, this.rope2_y, this.deerPos2_x, this.deerPos2_y, _0x3aef47, _0x4cff48, _0x441ac4, _0x5454ef);
  _0x3aef47 = "white";
  _0x4cff48 = 0x1 * (this.curRad / this.startRad);
  _0x5454ef = 0.3;
  this.drawRope(this.rope1_x, this.rope1_y, this.deerPos1_x, this.deerPos1_y, _0x3aef47, _0x4cff48, _0x441ac4, _0x5454ef);
  this.drawRope(this.rope2_x, this.rope2_y, this.deerPos2_x, this.deerPos2_y, _0x3aef47, _0x4cff48, _0x441ac4, _0x5454ef);
};
_0x2da989.prototype.drawRope = function (_0x1ea7b1, _0x1c59cf, _0x502515, _0x42a8ed, _0xe60360, _0x219b46, _0x4791ab, _0x4644cb) {
  _0x3b8ba2.save();
  _0x3b8ba2.strokeStyle = _0xe60360;
  _0x3b8ba2.lineWidth = _0x219b46 * (this.curRad / this.startRad);
  _0x3b8ba2.globalAlpha = _0x4644cb;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(_0x1ea7b1, _0x1c59cf);
  _0x3b8ba2.quadraticCurveTo(_0x1ea7b1, _0x42a8ed - _0x4791ab, _0x502515, _0x42a8ed);
  _0x3b8ba2.stroke();
  _0x3b8ba2.restore();
};
_0x2da989.prototype.setOpacityForFlyingAnimals = function (_0x44c2d3) {
  if (!(this.id == _0x2bd878 || this.santaID == _0x2bd878)) {
    this.idealOp = 0.6;
  }
};
_0x2da989.prototype.onLerpUpdate = function (_0x57d050) {
  this.rope1_x = _0x57d050 * (this.rope1_nx - this.rope1_ox) + this.rope1_ox;
  this.rope1_y = _0x57d050 * (this.rope1_ny - this.rope1_oy) + this.rope1_oy;
  this.deerPos1_x = _0x57d050 * (this.deerpos1_nx - this.deerpos1_ox) + this.deerpos1_ox;
  this.deerPos1_y = _0x57d050 * (this.deerpos1_ny - this.deerpos1_oy) + this.deerpos1_oy;
  this.rope2_x = _0x57d050 * (this.rope2_nx - this.rope2_ox) + this.rope2_ox;
  this.rope2_y = _0x57d050 * (this.rope2_ny - this.rope2_oy) + this.rope2_oy;
  this.deerPos2_x = _0x57d050 * (this.deerpos2_nx - this.deerpos2_ox) + this.deerpos2_ox;
  this.deerPos2_y = _0x57d050 * (this.deerpos2_ny - this.deerpos2_oy) + this.deerpos2_oy;
};
_0x2da989.prototype.readCustomData_onNewlyVisible = function (_0x5a9c9a) {
  _0x2da989.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x5a9c9a);
  this.santaID = _0x5a9c9a.readUInt32();
  this.rowNumber = _0x5a9c9a.readUInt8();
  this.isRudolph = _0x5a9c9a.readUInt8() == 0x1;
  this.startRad = _0x5a9c9a.readUInt16() / 0x64;
  this.curRad = _0x5a9c9a.readUInt16() / 0x64;
  this.readInfo(_0x5a9c9a);
  this.rope1_nx = this.rope1_ox = this.rope1_x = this.x;
  this.rope1_ny = this.rope1_oy = this.rope1_y = this.y;
  this.deerpos1_ox = this.deerPos1_x = this.deerpos1_nx = this.x;
  this.deerpos1_oy = this.deerPos1_y = this.deerpos1_ny = this.y;
  this.rope2_nx = this.rope2_ox = this.rope2_x = this.x;
  this.rope2_ny = this.rope2_oy = this.rope2_y = this.y;
  this.deerpos2_ox = this.deerPos2_x = this.deerpos2_nx = this.x;
  this.deerpos2_oy = this.deerPos2_y = this.deerpos2_ny = this.y;
};
_0x2da989.prototype.rope1_x = 0x0;
_0x2da989.prototype.rope1_y = 0x0;
_0x2da989.prototype.deerPos1_x = 0x0;
_0x2da989.prototype.deerPos1_y = 0x0;
_0x2da989.prototype.rope2_x = 0x0;
_0x2da989.prototype.rope2_y = 0x0;
_0x2da989.prototype.deerPos2_x = 0x0;
_0x2da989.prototype.deerPos2_y = 0x0;
_0x2da989.prototype.webState = 0x0;
_0x2da989.prototype.readInfo = function (_0x38e059) {
  this.customUpdatedProperty(0x61, _0x38e059);
  this.customUpdatedProperty(0x62, _0x38e059);
  this.customUpdatedProperty(0x63, _0x38e059);
  this.customUpdatedProperty(0x64, _0x38e059);
};
_0x2da989.prototype.customUpdatedProperty = function (_0x393ebb, _0x4d9660) {
  if (_0x393ebb == 0x61) {
    var _0x4e6f39 = _0x4d9660.readUInt16() / 0x4;
    var _0x313633 = _0x4d9660.readUInt16() / 0x4;
    this.rope1_ox = this.rope1_x;
    this.rope1_oy = this.rope1_y;
    this.rope1_nx = _0x4e6f39;
    this.rope1_ny = _0x313633;
  } else {
    if (_0x393ebb == 0x62) {
      var _0x196b6a = _0x4d9660.readUInt16() / 0x4;
      var _0x25715d = _0x4d9660.readUInt16() / 0x4;
      this.rope2_ox = this.rope2_x;
      this.rope2_oy = this.rope2_y;
      this.rope2_nx = _0x196b6a;
      this.rope2_ny = _0x25715d;
    } else {
      if (_0x393ebb == 0x63) {
        var _0xf76cf7 = _0x4d9660.readUInt16() / 0x4;
        var _0x1a01ab = _0x4d9660.readUInt16() / 0x4;
        this.deerpos1_ox = this.deerPos1_x;
        this.deerpos1_oy = this.deerPos1_y;
        this.deerpos1_nx = _0xf76cf7;
        this.deerpos1_ny = _0x1a01ab;
      } else {
        if (_0x393ebb == 0x64) {
          var _0x1e7d16 = _0x4d9660.readUInt16() / 0x4;
          var _0x3d6c6c = _0x4d9660.readUInt16() / 0x4;
          this.deerpos2_ox = this.deerPos2_x;
          this.deerpos2_oy = this.deerPos2_y;
          this.deerpos2_nx = _0x1e7d16;
          this.deerpos2_ny = _0x3d6c6c;
        }
      }
    }
  }
};
function _0x2da989() {
  _0x2da989.superClass.call(this, 0x2);
}
window.Rudolph = _0x2da989;
_0x2b451a.setCustomClassForGameObjType(_0x2da989, 0x2, _0x5bb5bb);
var _0x53abbc = _0x472b99;
_0x11bb48.prototype = Object.create(_0x53abbc.prototype);
_0x11bb48.prototype.constructor = _0x11bb48;
_0x11bb48.superClass = _0x53abbc;
_0x11bb48.prototype.updateZ = function () {
  this.z = 0x3f0;
  if (this.flag_flying) {
    this.z += 0x186a0;
  }
};
_0x11bb48.prototype.customDraw = function (_0x3a0187) {
  _0x133658(0x0, 0x0, this.curRad, "#ebac2d");
  _0x133658(0x0, 0x0, this.curRad * 0.6, "#ffbc33");
};
_0x11bb48.prototype.beforeCustomDraw = function (_0x23f291) {
  _0x3b8ba2.save();
  _0x3b8ba2.strokeStyle = "#ffbc33";
  _0x3b8ba2.lineWidth = 0xa * (this.curRad / this.startRad);
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(this.webX, this.webY);
  _0x3b8ba2.lineTo(this.spiderX, this.spiderY);
  _0x3b8ba2.stroke();
  _0x3b8ba2.restore();
  _0x3b8ba2.save();
  _0x3b8ba2.strokeStyle = "gold";
  _0x3b8ba2.lineWidth = 0x6 * (this.curRad / this.startRad);
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(this.webX, this.webY);
  _0x3b8ba2.lineTo(this.spiderX, this.spiderY);
  _0x3b8ba2.stroke();
  _0x3b8ba2.restore();
};
_0x11bb48.prototype.onLerpUpdate = function (_0x252e55) {
  this.webX = _0x252e55 * (this.web_nx - this.web_ox) + this.web_ox;
  this.webY = _0x252e55 * (this.web_ny - this.web_oy) + this.web_oy;
  this.spiderX = _0x252e55 * (this.spider_nx - this.spider_ox) + this.spider_ox;
  this.spiderY = _0x252e55 * (this.spider_ny - this.spider_oy) + this.spider_oy;
};
_0x11bb48.prototype.readCustomData_onUpdate = function (_0x131fc8) {
  _0x11bb48.superClass.prototype.readCustomData_onUpdate.call(this, _0x131fc8);
  this.readInfo(_0x131fc8);
};
_0x11bb48.prototype.readCustomData_onNewlyVisible = function (_0x31a42f) {
  _0x11bb48.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x31a42f);
  this.startRad = _0x31a42f.readUInt16() / 0x64;
  this.readInfo(_0x31a42f);
  this.web_nx = this.web_ox = this.webX = this.x;
  this.web_ny = this.web_oy = this.webY = this.y;
  this.spider_ox = this.spiderX = this.spider_nx = this.x;
  this.spider_oy = this.spiderY = this.spider_ny = this.y;
};
_0x11bb48.prototype.startRad = 0x0;
_0x11bb48.prototype.webX = 0x0;
_0x11bb48.prototype.webY = 0x0;
_0x11bb48.prototype.spiderX = 0x0;
_0x11bb48.prototype.spiderY = 0x0;
_0x11bb48.prototype.webState = 0x0;
_0x11bb48.prototype.readInfo = function (_0x4c3b3e) {
  this.curRad = _0x4c3b3e.readUInt16() / 0x64;
  var _0x6dd322 = _0x4c3b3e.readUInt16() / 0x4;
  var _0x24453c = _0x4c3b3e.readUInt16() / 0x4;
  this.web_ox = this.webX;
  this.web_oy = this.webY;
  this.web_nx = _0x6dd322;
  this.web_ny = _0x24453c;
  var _0xee2511 = _0x4c3b3e.readUInt16() / 0x4;
  var _0x104d56 = _0x4c3b3e.readUInt16() / 0x4;
  this.spider_ox = this.spiderX;
  this.spider_oy = this.spiderY;
  this.spider_nx = _0xee2511;
  this.spider_ny = _0x104d56;
};
function _0x11bb48() {
  _0x11bb48.superClass.call(this, 0x72);
  this.spawnTime = +new Date();
}
window.CartSaddle = _0x11bb48;
_0x2b451a.setCustomClassForGameObjType(_0x11bb48, 0x72);
var _0x53abbc = _0x472b99;
_0x28e20c.prototype = Object.create(_0x53abbc.prototype);
_0x28e20c.prototype.constructor = _0x28e20c;
_0x28e20c.superClass = _0x53abbc;
_0x28e20c.prototype.updateZ = function () {
  this.z = 0x3ef;
  if (this.flag_flying) {
    this.z += 0x186a0;
  }
};
_0x28e20c.prototype.customDraw = function (_0x2e17da) {
  _0x133658(0x0, 0x0, this.rad, "#ebac2d");
  _0x133658(0x0, 0x0, this.rad * 0.9, "#e9ae34");
};
_0x28e20c.prototype.beforeCustomDraw = function (_0x4915ce) {
  _0x3b8ba2.save();
  _0x3b8ba2.strokeStyle = "#ffbc33";
  _0x3b8ba2.lineWidth = 0xa * (this.curRad / this.startRad);
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(this.webX, this.webY);
  _0x3b8ba2.lineTo(this.spiderX, this.spiderY);
  _0x3b8ba2.stroke();
  _0x3b8ba2.restore();
  _0x3b8ba2.save();
  _0x3b8ba2.strokeStyle = "gold";
  _0x3b8ba2.lineWidth = 0x6 * (this.curRad / this.startRad);
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(this.webX, this.webY);
  _0x3b8ba2.lineTo(this.spiderX, this.spiderY);
  _0x3b8ba2.stroke();
  _0x3b8ba2.restore();
};
_0x28e20c.prototype.onLerpUpdate = function (_0x35b96e) {
  this.webX = _0x35b96e * (this.web_nx - this.web_ox) + this.web_ox;
  this.webY = _0x35b96e * (this.web_ny - this.web_oy) + this.web_oy;
  this.spiderX = _0x35b96e * (this.spider_nx - this.spider_ox) + this.spider_ox;
  this.spiderY = _0x35b96e * (this.spider_ny - this.spider_oy) + this.spider_oy;
};
_0x28e20c.prototype.readCustomData_onUpdate = function (_0x4f97dd) {
  _0x28e20c.superClass.prototype.readCustomData_onUpdate.call(this, _0x4f97dd);
  this.readInfo(_0x4f97dd);
};
_0x28e20c.prototype.readCustomData_onNewlyVisible = function (_0x341b00) {
  _0x28e20c.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x341b00);
  this.startRad = _0x341b00.readUInt16() / 0x64;
  this.readInfo(_0x341b00);
  this.curRad = this.rad;
  this.web_nx = this.web_ox = this.webX = this.x;
  this.web_ny = this.web_oy = this.webY = this.y;
  this.spider_ox = this.spiderX = this.spider_nx = this.x;
  this.spider_oy = this.spiderY = this.spider_ny = this.y;
};
_0x28e20c.prototype.webX = 0x0;
_0x28e20c.prototype.webY = 0x0;
_0x28e20c.prototype.spiderX = 0x0;
_0x28e20c.prototype.spiderY = 0x0;
_0x28e20c.prototype.webState = 0x0;
_0x28e20c.prototype.readInfo = function (_0x4d2c8c) {
  this.curRad = _0x4d2c8c.readUInt16() / 0x64;
  var _0x5a2ac4 = _0x4d2c8c.readUInt16() / 0x4;
  var _0x51e06f = _0x4d2c8c.readUInt16() / 0x4;
  this.web_ox = this.webX;
  this.web_oy = this.webY;
  this.web_nx = _0x5a2ac4;
  this.web_ny = _0x51e06f;
  var _0x28717a = _0x4d2c8c.readUInt16() / 0x4;
  var _0x4aa39 = _0x4d2c8c.readUInt16() / 0x4;
  this.spider_ox = this.spiderX;
  this.spider_oy = this.spiderY;
  this.spider_nx = _0x28717a;
  this.spider_ny = _0x4aa39;
};
function _0x28e20c() {
  _0x28e20c.superClass.call(this, 0x73);
}
window.Saddle = _0x28e20c;
_0x2b451a.setCustomClassForGameObjType(_0x28e20c, 0x73);
var _0x53abbc = _0x472b99;
_0x5492e4.prototype = Object.create(_0x53abbc.prototype);
_0x5492e4.prototype.constructor = _0x5492e4;
_0x5492e4.superClass = _0x53abbc;
_0x5492e4.prototype.foodType = 0x0;
_0x5492e4.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x5492e4.prototype.customDraw = function (_0x57f68c) {
  _0x3b8ba2.save();
  var _0x1188dc = "gameobj/" + this.oType + "/" + this.oType + "_" + this.foodType + '' + (this.isEdibleOutlined() ? "_e" : '') + ".png";
  var _0x346aed = this.getSkinImageObj(_0x1188dc);
  if (_0x346aed) {
    var _0x8a2a53 = this.rad;
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.rPer * 0.5 * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x346aed, -_0x8a2a53, -_0x8a2a53, 0x2 * _0x8a2a53, 0x2 * _0x8a2a53);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
_0x5492e4.prototype.readCustomData_onNewlyVisible = function (_0x2f1699) {
  this.foodType = _0x2f1699.readUInt8();
};
function _0x5492e4() {
  _0x5492e4.superClass.call(this, 0x8e);
  this.doesDrawEffectScale = true;
}
window.XmasFood = _0x5492e4;
_0x2b451a.setCustomClassForGameObjType(_0x5492e4, 0x8e);
var _0x53abbc = _0x472b99;
_0x465b9e.prototype = Object.create(_0x53abbc.prototype);
_0x465b9e.prototype.constructor = _0x465b9e;
_0x465b9e.superClass = _0x53abbc;
_0x465b9e.prototype.giftColor = 0x0;
_0x465b9e.prototype.giftType = 0x0;
_0x465b9e.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x465b9e.prototype.customDraw = function (_0x300084) {
  _0x3b8ba2.save();
  var _0x40ee05 = this.getSkinImageObj("img/xmasgifts/" + this.giftColor + "/gift_e.png");
  if (_0x40ee05) {
    var _0x34d3e0 = this.rad;
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.rPer * 0.5 * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x40ee05, -_0x34d3e0, -_0x34d3e0, 0x2 * _0x34d3e0, 0x2 * _0x34d3e0);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
_0x465b9e.prototype.readCustomData_onNewlyVisible = function (_0x4e48db) {
  this.giftColor = _0x4e48db.readUInt8();
  this.giftType = _0x4e48db.readUInt8();
};
function _0x465b9e() {
  _0x465b9e.superClass.call(this, 0x8f);
  this.doesDrawEffectScale = true;
}
window.XmasGift = _0x465b9e;
_0x2b451a.setCustomClassForGameObjType(_0x465b9e, 0x8f);
var _0x212bc8 = +new Date() + 0x1388;
var _0x1be83a = false;
let _0x708066;
let _0x4d0eaa = _0x578943 - 0x546 + 0x32;
var _0x158edf = null;
var _0x24dbe6 = {
  "particleCount": 0x2bc,
  "particleSize": 0x3,
  "fallingSpeed": 0.5,
  "color": "#fff",
  "xspeed": 0x1,
  "yspeed": 0.5,
  "yspeedF": 0x1,
  "angle": 0x5a
};
var _0x827d43 = {
  "particleCount": 0x5dc,
  "particleSize": 0x4,
  "fallingSpeed": 0x1,
  "color": "#fff",
  "xspeed": 1.5,
  "yspeed": 0x1,
  "yspeedF": 1.5,
  "angle": 0x5a
};
var _0x46e062 = {
  "particleCount": 0x5dc,
  "particleSize": 0x5,
  "fallingSpeed": 1.5,
  "color": "#fff",
  "xspeed": 0x2,
  "yspeed": 1.5,
  "yspeedF": 0x3,
  "angle": 0x5a
};
function _0x32b74e(_0x127eaf, _0x839f46) {
  return Math.floor(Math.random() * (_0x839f46 - _0x127eaf + 0x1) + _0x127eaf);
}
function _0x1e1e36(_0x49732b, _0x31f78c, _0x47241d, _0x548711, _0xa6dfa2) {
  this.x = _0x49732b;
  this.y = _0x31f78c;
  this.nx = _0x49732b;
  this.ny = _0x31f78c;
  this.radius = _0x47241d;
  this.color = _0x548711;
  this.radians = _0xa6dfa2;
  this.velocity = Math.max(0.001, Math.random() * 0.004);
  this.t = 0x0;
  this.update = () => {
    this.radians += this.velocity;
    this.y += Math.pow(this.velocity, _0x158edf.yspeed) + _0x158edf.yspeed * _0x158edf.yspeedF;
    this.x += Math.sin(this.radians) * 0.5 * _0x158edf.xspeed;
    this.draw();
  };
  this.lerp = () => {};
  this.draw = () => {
    this.lerp();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.x, this.y, this.radius, 0x0, Math.PI * 0x2, false);
    _0x3b8ba2.fillStyle = this.color;
    _0x3b8ba2.fill();
    _0x3b8ba2.closePath();
    this.reset();
  };
  this.reset = () => {
    if (this.x < -0x32 || this.y < -0x32 || this.x > _0x1f0c0a + 0x32 || this.y > _0x4d0eaa || this.t == 0x0 || +new Date() > this.t) {
      this.x = Math.floor(Math.random() * (_0x1f0c0a - 0x64 - 0x0 + 0x1) + 0x0);
      this.y = Math.floor(Math.random() * (_0x578943 - 0x546 - 0x0 + 0x1) + 0x0);
      this.t = +new Date() + Math.random() * 30000;
    }
  };
}
function _0x674f0e() {
  _0x4d0eaa = _0x578943 - 0x546 + 0x32;
  _0x708066 = [];
  for (let _0x2a234a = 0x0; _0x2a234a < _0x158edf.particleCount; _0x2a234a++) {
    _0x708066.push(new _0x1e1e36(Math.floor(Math.random() * (_0x1f0c0a - 0x64 - 0x0 + 0x1) + 0x0), Math.floor(Math.random() * (_0x578943 - 0x546 - 0x0 + 0x1) + 0x0), Math.floor(Math.random() * (_0x158edf.particleSize - 0.5 + 0x1) + 0.5), _0x158edf.color, 0x5a));
  }
  _0x37e8e4 = true;
  _0x1be83a = false;
  _0x212bc8 = +new Date() + 0x2710;
}
var _0x37e8e4 = false;
function _0x19d5fb() {
  if (_0x37e8e4 && _0x158edf != null) {
    _0x708066.forEach(_0x317348 => {
      _0x317348.update();
    });
  }
}
function _0x4b0363() {
  if (_0x158edf == null) {
    return;
  }
  if (!_0x1be83a) {
    if (_0x212bc8 < +new Date()) {
      _0x1be83a = true;
    }
    return;
  }
  if (_0x2a8e3f && !(_0x4bda0b == 0x2)) {
    _0x19d5fb();
  }
}
var _0x53abbc = _0xf4bb63;
_0x2faf2e.prototype = Object.create(_0x53abbc.prototype);
_0x2faf2e.prototype.constructor = _0x2faf2e;
_0x2faf2e.superClass = _0x53abbc;
_0x2faf2e.prototype.animalInfo = function () {
  var _0x575247 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x575247.aniName = "Seahorse!";
      break;
    case 0xc8:
      _0x575247.aniName = "Tully Monster!";
      break;
    case 0xc9:
      _0x575247.aniName = "Water Gun Horse!";
      break;
    case 0xca:
      _0x575247.aniName = "Leafy Seadragon";
      break;
  }
  _0x575247.skinName = this.getSkinName();
  _0x575247.aniDesc = '';
  _0x575247.upgradeText = "UPGRADED to " + _0x575247.aniName;
  _0x575247.aniCol = "#502E1A";
  return _0x575247;
};
_0x2faf2e.prototype.getSkinName = function () {
  let _0x239a78 = this.getSpeciesPath() + "/seahorse";
  return _0x239a78;
};
_0x2faf2e.prototype.getSpeciesPath = function () {
  return "ocean/seahorse/" + this.animalSpecies + this.getSubSpecies();
};
_0x2faf2e.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x2faf2e.prototype.getAbilityInfo = function (_0x360a03) {
  var _0x10cf0a = {
    abilName: "Dash!",
    abilImg: "abilities/Dash-Boost.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x10cf0a;
};
_0x2faf2e.prototype.basicDrawSkinImg = function () {
  this.setSkinScale();
  var _0x3a1c7c = this.skinRad;
  let _0x5576e7 = 1.5;
  var _0x30062d = 0x0;
  if (this.mopeSeasonID == 0x1) {
    if (this.animalSpecies == 0xc8 || this.animalSpecies == 0xc9) {
      _0x5576e7 = 1.8;
    }
    if (this.animalSpecies == 0xc9) {
      _0x30062d = -0.1;
    }
  }
  if (this.loadedSkinImg) {
    _0x3b8ba2.drawImage(this.loadedSkinImg, -_0x3a1c7c * _0x5576e7, -_0x3a1c7c * _0x5576e7 + _0x3a1c7c * _0x30062d, 0x2 * _0x3a1c7c * _0x5576e7, 0x2 * _0x3a1c7c * _0x5576e7);
  }
};
function _0x2faf2e() {
  _0x2faf2e.superClass.call(this, 0x2);
}
window.Seahorse = _0x2faf2e;
_0x2b451a.setCustomClassForGameObjType(_0x2faf2e, 0x2, _0xe6b188);
var _0x53abbc = _0xf4bb63;
_0x39f884.prototype = Object.create(_0x53abbc.prototype);
_0x39f884.prototype.constructor = _0x39f884;
_0x39f884.superClass = _0x53abbc;
_0x39f884.prototype.animalInfo = function () {
  var _0x4a9813 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x4a9813.aniName = "Shrimp!";
      break;
    case 0xc8:
      _0x4a9813.aniName = "Deluxe Shrimp!";
      break;
    case 0xc9:
      _0x4a9813.aniName = "Chef Shrimp!";
      break;
    case 0xca:
      _0x4a9813.aniName = "Sushi Shrimp!";
      break;
  }
  _0x4a9813.skinName = this.getSkinName();
  _0x4a9813.aniDesc = '';
  _0x4a9813.upgradeText = "UPGRADED to " + _0x4a9813.aniName;
  _0x4a9813.aniCol = "#502E1A";
  return _0x4a9813;
};
_0x39f884.prototype.getSkinName = function () {
  let _0x5dcf66 = this.getSpeciesPath() + "/shrimp";
  if (this.flag_usingAbility) {
    _0x5dcf66 += "2";
  }
  return _0x5dcf66;
};
_0x39f884.prototype.getSpeciesPath = function () {
  return "ocean/shrimp/" + this.animalSpecies + this.getSubSpecies();
};
_0x39f884.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x39f884() {
  _0x39f884.superClass.call(this, 0x2);
}
window.Shrimp = _0x39f884;
_0x2b451a.setCustomClassForGameObjType(_0x39f884, 0x2, _0x46f565);
var _0x53abbc = _0xf4bb63;
_0x2f1285.prototype = Object.create(_0x53abbc.prototype);
_0x2f1285.prototype.constructor = _0x2f1285;
_0x2f1285.superClass = _0x53abbc;
_0x2f1285.prototype.animalInfo = function () {
  var _0xe57014 = {};
  switch (this.animalSubSpecies) {
    case 0xde:
    case 0x0:
      _0xe57014.aniName = "Trout";
      break;
    case 0xc8:
      _0xe57014.aniName = "Clownfish";
      break;
    case 0xc9:
      _0xe57014.aniName = "Popsicle Trout";
      break;
    case 0xca:
      _0xe57014.aniName = "Royal Guppy";
      break;
    case 0xdd:
      _0xe57014.aniName = "Ice Husk Trout";
      break;
    case 0x7e7:
      _0xe57014.aniName = "Dr. Lochness";
      break;
  }
  _0xe57014.skinName = this.getSkinName();
  _0xe57014.aniDesc = '';
  _0xe57014.upgradeText = "UPGRADED to " + _0xe57014.aniName + "!";
  _0xe57014.aniCol = "#502E1A";
  return _0xe57014;
};
_0x2f1285.prototype.getAbilityInfo = function (_0x2dc32b) {
  var _0x5891e9 = {
    abilName: "Extra Boost!",
    abilImg: "abilities/Dash-Boost.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x5891e9;
};
_0x2f1285.prototype.getSkinName = function () {
  let _0x1455a8 = this.getSpeciesPath() + "/trout";
  return _0x1455a8;
};
_0x2f1285.prototype.getSpeciesPath = function () {
  return "ocean/trout/" + this.animalSpecies + "/" + this.animalSubSpecies;
};
function _0x2f1285() {
  _0x2f1285.superClass.call(this, 0x2);
}
window.Trout = _0x2f1285;
_0x2b451a.setCustomClassForGameObjType(_0x2f1285, 0x2, _0x5c1699);
var _0x53abbc = _0xf4bb63;
_0x412df8.prototype = Object.create(_0x53abbc.prototype);
_0x412df8.prototype.constructor = _0x412df8;
_0x412df8.superClass = _0x53abbc;
_0x412df8.prototype.getSkinName = function () {
  return "arctic/arcticfox/" + this.animalSpecies + this.getSubSpecies() + "/arcticfox";
};
_0x412df8.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x412df8.prototype.animalInfo = function () {
  var _0x583c8d = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x583c8d.aniName = "Arctic Fox";
      break;
    case 0xc8:
      _0x583c8d.aniName = "Ice Fox";
      break;
    case 0xc9:
      _0x583c8d.aniName = "Forest Spirit Fox";
      break;
    case 0xca:
      _0x583c8d.aniName = "Ice Fox";
      break;
  }
  _0x583c8d.skinName = this.getSkinName();
  _0x583c8d.aniDesc = '';
  _0x583c8d.upgradeText = "UPGRADED to " + _0x583c8d.aniName + "!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
  _0x583c8d.aniCol = "#CFCFCF";
  return _0x583c8d;
};
_0x412df8.prototype.getAbilityInfo = function (_0x280196) {
  var _0x2e9a1a = {
    abilName: "Pull from Hole",
    abilImg: "abilities/Dig.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x2e9a1a;
};
function _0x412df8() {
  _0x412df8.superClass.call(this, 0x2);
}
window.ArcticFox = _0x412df8;
_0x2b451a.setCustomClassForGameObjType(_0x412df8, 0x2, _0x3d4e92);
var _0x53abbc = _0xf4bb63;
_0x1f8c01.prototype = Object.create(_0x53abbc.prototype);
_0x1f8c01.prototype.constructor = _0x1f8c01;
_0x1f8c01.superClass = _0x53abbc;
_0x1f8c01.prototype.getSkinName = function () {
  let _0x4c6e45 = this.getSpeciesPath() + "/fox";
  return _0x4c6e45;
};
_0x1f8c01.prototype.getSpeciesPath = function () {
  return "land/fox/" + this.animalSpecies + this.getSubSpecies();
};
_0x1f8c01.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x1f8c01.prototype.animalInfo = function () {
  var _0x418c78 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x418c78.aniName = "Fox!";
      break;
    case 0xc8:
      _0x418c78.aniName = "Night Thief!";
      break;
    case 0xc8:
      _0x418c78.aniName = "Sneaky Fox";
      break;
    case 0xcc:
      _0x418c78.aniName = "Black Asura Fox";
      break;
  }
  _0x418c78.skinName = this.getSkinName();
  _0x418c78.aniDesc = '';
  _0x418c78.upgradeText = "UPGRADED to " + _0x418c78.aniName + "!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
  _0x418c78.aniCol = "#FF9D43";
  return _0x418c78;
};
_0x1f8c01.prototype.getAbilityInfo = function (_0x15c36c) {
  var _0xbfb58f = {
    abilName: "Pull from Hole",
    abilImg: "abilities/Dig.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0xbfb58f;
};
function _0x1f8c01() {
  _0x1f8c01.superClass.call(this, 0x2);
}
window.Fox = _0x1f8c01;
_0x2b451a.setCustomClassForGameObjType(_0x1f8c01, 0x2, _0x1dbdce);
var _0x53abbc = _0xf4bb63;
_0x55a473.prototype = Object.create(_0x53abbc.prototype);
_0x55a473.prototype.constructor = _0x55a473;
_0x55a473.superClass = _0x53abbc;
_0x55a473.prototype.animalInfo = function () {
  var _0x12eb38 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x12eb38.aniName = "Rabbit!";
      break;
    case 0xc8:
      _0x12eb38.aniName = "Monochrome Rabbit!";
      break;
    case 0xca:
      switch (this.animalSubSpecies) {
        case 0x0:
          _0x12eb38.aniName = "Jackapole";
          break;
        case 0x1:
          _0x12eb38.aniName = "Hollow Rabbit";
      }
      break;
    case 0xcc:
      _0x12eb38.aniName = "Carrot Rabbit";
      break;
    case 0xdc:
      _0x12eb38.aniName = "Fairy Rabbit";
      break;
    case 0xde:
      _0x12eb38.aniName = "Jolly Rabbit";
      break;
  }
  _0x12eb38.skinName = this.getSpeciesPath("rabbit") + "/rabbit";
  _0x12eb38.aniDesc = '';
  _0x12eb38.upgradeText = "UPGRADED to " + _0x12eb38.aniName;
  _0x12eb38.aniCol = "#502E1A";
  return _0x12eb38;
};
_0x55a473.prototype.getSkinName = function () {
  return this.getSpeciesPath("rabbit") + "/rabbit";
};
_0x55a473.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return this.animalSpecies === 0xca ? "/" + this.animalSubSpecies : '';
};
_0x55a473.prototype.getSpeciesPath = function (_0xf80c10) {
  return "land/" + _0xf80c10 + "/" + this.animalSpecies + this.getSubSpecies();
};
_0x55a473.prototype.getAbilityInfo = function (_0x5a1c93) {
  var _0x13244d = {
    abilName: "Dig Hole!",
    abilImg: "abilities/Dig.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x13244d;
};
_0x55a473.prototype.getSkinName = function (_0x5c2b73) {
  var _0x52896e = this.getSpeciesPath("rabbit") + "/rabbit" + (_0x5c2b73 === true ? ".png" : '');
  return _0x52896e;
};
function _0x55a473() {
  _0x55a473.superClass.call(this, 0x2);
}
window.Rabbit = _0x55a473;
_0x2b451a.setCustomClassForGameObjType(_0x55a473, 0x2, _0x5ebc28);
var _0x53abbc = _0xf4bb63;
_0x2ce93d.prototype = Object.create(_0x53abbc.prototype);
_0x2ce93d.prototype.constructor = _0x2ce93d;
_0x2ce93d.superClass = _0x53abbc;
_0x2ce93d.prototype.getSkinName = function () {
  let _0x31b2e3 = this.getSpeciesPath() + "/hedgehog";
  if (this.flag_usingAbility) {
    _0x31b2e3 += "2";
  }
  return _0x31b2e3;
};
_0x2ce93d.prototype.getSpeciesPath = function () {
  return "land/hedgehog/" + this.animalSpecies + this.getSubSpecies();
};
_0x2ce93d.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x2ce93d.prototype.animalInfo = function () {
  var _0x339f91 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x339f91.aniName = "Hedgehog!";
      break;
    case 0xca:
      _0x339f91.aniName = "Grass Hedgehog";
      break;
  }
  _0x339f91.skinName = this.getSkinName();
  _0x339f91.aniDesc = '';
  _0x339f91.upgradeText = "UPGRADED to " + _0x339f91.aniName + "!\n (Hold W to become spiky, and dangerous to touch!)";
  _0x339f91.aniCol = "#5b400d";
  return _0x339f91;
};
_0x2ce93d.prototype.getAbilityInfo = function (_0x557143) {
  var _0x4cb497 = {
    abilName: "Spikes!",
    abilImg: "abilities/Spike.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x4cb497;
};
function _0x2ce93d() {
  _0x2ce93d.superClass.call(this, 0x2);
}
window.Hedgehog = _0x2ce93d;
_0x2b451a.setCustomClassForGameObjType(_0x2ce93d, 0x2, _0x35e093);
var _0x53abbc = _0x472b99;
_0x329548.prototype = Object.create(_0x53abbc.prototype);
_0x329548.prototype.constructor = _0x329548;
_0x329548.superClass = _0x53abbc;
_0x329548.prototype.foodType = 0x0;
_0x329548.prototype.updateZ = function () {
  this.z = -0x62;
};
_0x329548.prototype.customDraw = function (_0x43642d) {
  var _0x20c2ec = this.rad - 0xa;
  this.waterRipples(_0x20c2ec);
  _0x3b8ba2.save();
  _0x3b8ba2.restore();
  var _0xe133dc = "img/floaters/" + this.floaterType + ".png";
  this.drawSkin(_0xe133dc, _0x20c2ec);
};
_0x329548.prototype.drawSkin = function (_0x45c5cb, _0xfcaa31) {
  _0x3b8ba2.save();
  var _0x2af568 = this.getSkinImageObj(_0x45c5cb);
  if (_0x2af568) {
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x2af568, -_0xfcaa31, -_0xfcaa31, 0x2 * _0xfcaa31, 0x2 * _0xfcaa31);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
_0x329548.prototype.waterRipples = function (_0xfa3c4e) {
  _0xfa3c4e = _0xfa3c4e - 0x5;
  var _0x58160a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0xa8ad95 = 0.5 * Math.sin(0x2 * Math.PI / 1.75 * _0x58160a);
  var _0x533e4f = _0x3b8ba2.globalAlpha;
  if (!this.isFloatingInWater) {
    _0xa8ad95 = 0x1;
  }
  if (this.floaterType == 0x0 || this.floaterType == 0x2 || this.floaterType == 0x3 || this.floaterType == 0x4 || this.floaterType == 0x5 || this.floaterType == 0x7) {
    var _0x4449bb = "img/floaters/" + this.floaterType + "_ripple.png";
    _0x3b8ba2.globalAlpha *= 0.7 - 0.25 * _0xa8ad95;
    this.drawSkin(_0x4449bb, _0xfa3c4e + 0xa - 0x5);
    _0x3b8ba2.globalAlpha *= 0.6 - 0.2 * _0xa8ad95;
    this.drawSkin(_0x4449bb, _0xfa3c4e + 0xf - 0x5);
  } else {
    _0x3b8ba2.globalAlpha *= 0.8 - 0.2 * _0xa8ad95;
    _0x10165e(0x0, _0xfa3c4e * 0.01, _0xfa3c4e * (0.9 + 0.15 * _0xa8ad95), 0xa, "#4668ff");
    _0x3b8ba2.globalAlpha *= 0.7 - 0.2 * _0xa8ad95;
    _0x10165e(0x0, -_0xfa3c4e * 0.02, _0xfa3c4e * (1.05 + 0.1 * _0xa8ad95), 0xf, "#4668ff");
  }
  _0x3b8ba2.globalAlpha = _0x533e4f;
};
_0x329548.prototype.readCustomData_onNewlyVisible = function (_0x470ecd) {
  this.floaterType = _0x470ecd.readUInt8();
};
_0x329548.prototype.isFloatingInWater = true;
_0x329548.prototype.readUpdatedProperty = function (_0x46e5c3, _0x279271) {
  if (_0x46e5c3 == 0x12) {
    this.isFloatingInWater = _0x279271.readUInt8() == 0x1;
  }
};
function _0x329548() {
  _0x329548.superClass.call(this, 0x90);
  this.drawEffectScale_Slow = true;
}
window.WaterFloater = _0x329548;
_0x2b451a.setCustomClassForGameObjType(_0x329548, 0x90);
var _0x53abbc = _0x472b99;
_0x18c5ac.prototype = Object.create(_0x53abbc.prototype);
_0x18c5ac.prototype.constructor = _0x18c5ac;
_0x18c5ac.superClass = _0x53abbc;
_0x18c5ac.prototype.lookAngle = 0x0;
_0x18c5ac.prototype.frameNumber = 0x0;
_0x18c5ac.prototype.isRolling = false;
_0x18c5ac.prototype.pumpkinType = false;
_0x18c5ac.prototype.updateZ = function () {
  this.z = 0x3ea;
};
var _0x5976f6 = -0.07;
var _0x24871f = -0.1;
_0x18c5ac.prototype.waterRipples = function (_0x512f4e) {
  _0x3b8ba2.save();
  _0x512f4e = _0x512f4e + 0x8;
  var _0xd1eca8 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
  var _0x36e68d = 0.5 * Math.sin(0x2 * Math.PI / 1.75 * _0xd1eca8);
  var _0x58ecc1 = _0x3b8ba2.globalAlpha;
  if (!this.isFloating) {
    _0x36e68d = 0x1;
  }
  _0x3b8ba2.rotate((this.lookAngle + 0x2d) * (Math.PI / 0xb4));
  _0x3b8ba2.globalAlpha *= 0.8 - 0.2 * _0x36e68d;
  _0x10165e(0x0, _0x512f4e * _0x5976f6, _0x512f4e * (0.9 + 0.15 * _0x36e68d), 0x8, "#4668ff");
  _0x3b8ba2.globalAlpha *= 0.7 - 0.2 * _0x36e68d;
  _0x10165e(0x0, -_0x512f4e * _0x24871f, _0x512f4e * (1.05 + 0.1 * _0x36e68d), 0xc, "#4668ff");
  _0x3b8ba2.globalAlpha = _0x58ecc1;
  _0x3b8ba2.restore();
};
_0x18c5ac.prototype.customDraw = function (_0x3f6de8) {
  var _0x24223d = 0x1;
  var _0x28e357 = 0.15;
  var _0x505d0b = 0.8;
  var _0x5d8e38 = 0.5 * (_0x505d0b - _0x28e357);
  var _0x24223d = 0x1;
  var _0x28e357 = 0.85;
  var _0x505d0b = 0x1;
  var _0x5d8e38 = 0.5 * (_0x505d0b - _0x28e357);
  if (this.isRolling) {
    this.frameNumber = Math.trunc(_0x1f4c9e / 0x78) % 0x8;
  }
  var _0x1f949c = this.getSkinImageObj("img/beachball/" + this.pumpkinType + "/" + this.frameNumber + ".png");
  if (_0x1f949c) {
    var _0x4f9d29 = this.rad;
    var _0x516369 = this.rad * 2.5;
    imH = this.rad * 2.5;
    _0x3b8ba2.save();
    {
      _0x3b8ba2.globalAlpha *= this.onFireEffA * 0x1;
      _0x3b8ba2.rotate(this.angle + _0x4bb70c);
      _0x3b8ba2.drawImage(_0x1f949c, 0x0 + _0x516369 * -0.5, _0x4f9d29 + imH * -0.95, _0x516369, imH);
    }
    _0x3b8ba2.restore();
  } else {}
};
_0x18c5ac.prototype.isFloating = false;
_0x18c5ac.prototype.isRolling = false;
_0x18c5ac.prototype.readUpdatedProperty = function (_0x11bd91, _0x3920d1) {
  if (_0x11bd91 == 0x12) {
    this.isFloating = _0x3920d1.readUInt8() == 0x1;
  } else if (_0x11bd91 == 0x11) {
    this.isRolling = _0x3920d1.readUInt8() == 0x1;
  }
};
_0x18c5ac.prototype.readCustomData_onNewlyVisible = function (_0x30bff9) {
  this.isRolling = _0x30bff9.readUInt8() == 0x1;
  this.pumpkinType = _0x30bff9.readUInt8();
  this.isFloating = _0x30bff9.readUInt8() == 0x1;
};
function _0x18c5ac() {
  _0x18c5ac.superClass.call(this, 0x91);
  this.lookAngle = 0x0;
  this.isRolling = false;
  this.pumpkinType = false;
  this.doesDrawEffectScale = true;
  this.drawEffectScale_Slow = true;
}
window.BeachBall = _0x18c5ac;
_0x2b451a.setCustomClassForGameObjType(_0x18c5ac, 0x91);
var _0x53abbc = _0x472b99;
_0x54ee57.prototype = Object.create(_0x53abbc.prototype);
_0x54ee57.prototype.constructor = _0x54ee57;
_0x54ee57.superClass = _0x53abbc;
_0x54ee57.prototype.frameNumber = 0x0;
_0x54ee57.prototype.umbrellaType = 0x0;
_0x54ee57.prototype.umbrellaColor = 0x0;
_0x54ee57.prototype.isClosed = false;
_0x54ee57.prototype.updateZ = function () {
  this.z = this.rad + (!this.isClosed ? 0x834 : 0x0);
};
_0x54ee57.prototype.customDraw = function (_0x233dfa) {
  var _0x27e67f = 0x1;
  var _0x523212 = 0.15;
  var _0x7f1d74 = 0.8;
  var _0x3e3130 = 0.5 * (_0x7f1d74 - _0x523212);
  var _0x27e67f = 0x1;
  var _0x523212 = 0.85;
  var _0x7f1d74 = 0x1;
  var _0x3e3130 = 0.5 * (_0x7f1d74 - _0x523212);
  var _0x30265e = this.getSkinImageObj("img/umbrella/" + this.umbrellaType + "/" + this.umbrellaColor + "/umbrella" + (this.isClosed ? "-closed" : '') + ".png");
  if (_0x30265e) {
    var _0x3f39c7 = this.rad;
    var _0xb5dfd3 = this.rad * 2.5;
    imH = this.rad * 2.5;
    _0x3b8ba2.save();
    {
      _0x3b8ba2.globalAlpha *= this.onFireEffA * 0x1;
      _0x3b8ba2.rotate(this.angle);
      _0x3b8ba2.drawImage(_0x30265e, 0x0 + _0xb5dfd3 * -0.5, _0x3f39c7 + imH * -0.95, _0xb5dfd3, imH);
    }
    _0x3b8ba2.restore();
  } else {}
};
_0x54ee57.prototype.readUpdatedProperty = function (_0x19c920, _0xbf7e85) {
  if (_0x19c920 == 0x12) {
    this.isFloating = _0xbf7e85.readUInt8() == 0x1;
  } else if (_0x19c920 == 0x11) {
    this.isClosed = _0xbf7e85.readUInt8() == 0x0;
  }
};
_0x54ee57.prototype.readCustomData_onNewlyVisible = function (_0x28b8b0) {
  this.isClosed = _0x28b8b0.readUInt8() == 0x1;
  this.umbrellaType = _0x28b8b0.readUInt8();
  this.umbrellaColor = _0x28b8b0.readUInt8();
};
function _0x54ee57() {
  _0x54ee57.superClass.call(this, 0x92);
  this.umbrellaType = 0x0;
  this.isClosed = false;
  this.doesDrawEffectScale = true;
  this.drawEffectScale_Slow = true;
}
window.Umbrella = _0x54ee57;
_0x2b451a.setCustomClassForGameObjType(_0x54ee57, 0x92);
var _0x53abbc = _0xf4bb63;
_0x2603a5.prototype = Object.create(_0x53abbc.prototype);
_0x2603a5.prototype.constructor = _0x2603a5;
_0x2603a5.superClass = _0x53abbc;
_0x2603a5.prototype.animalInfo = function () {
  var _0x426368 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x426368.aniName = "Chipmunk!";
      break;
    case 0xc9:
      _0x426368.aniName = "Playful Munk!";
      break;
    case 0xca:
      _0x426368.aniName = "Chipmonk";
      break;
  }
  _0x426368.skinName = this.getSkinName();
  _0x426368.aniDesc = '';
  _0x426368.upgradeText = "You're a tiny " + _0x426368.aniName + " - Eat food to grow!";
  _0x426368.aniCol = "#CFCFCF";
  return _0x426368;
};
_0x2603a5.prototype.getSkinName = function () {
  return "arctic/chipmunk/" + this.animalSpecies + this.getSubSpecies() + "/chipmunk";
};
_0x2603a5.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x2603a5() {
  _0x2603a5.superClass.call(this, 0x2);
}
window.Chipmunk = _0x2603a5;
_0x2b451a.setCustomClassForGameObjType(_0x2603a5, 0x2, _0x1b70a9);
var _0x53abbc = _0xf4bb63;
_0x1c412b.prototype = Object.create(_0x53abbc.prototype);
_0x1c412b.prototype.constructor = _0x1c412b;
_0x1c412b.superClass = _0x53abbc;
_0x1c412b.prototype.getSkinName = function () {
  return "arctic/arctichare/" + this.animalSpecies + this.getSubSpecies() + "/arctichare";
};
_0x1c412b.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x1c412b.prototype.animalInfo = function () {
  var _0x2184f5 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x2184f5.aniName = "Arctic Hare!";
      break;
    case 0xc9:
      _0x2184f5.aniName = "Snow Cone Hare!";
      break;
  }
  _0x2184f5.skinName = this.getSkinName();
  _0x2184f5.aniDesc = '';
  _0x2184f5.upgradeText = "UPGRADED to " + _0x2184f5.aniName;
  _0x2184f5.aniCol = "#CFCFCF";
  return _0x2184f5;
};
_0x1c412b.prototype.getAbilityInfo = function (_0x14e08f) {
  var _0x5bd1d7 = {
    abilName: "Dig Hole!",
    abilImg: "abilities/Dig.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x5bd1d7;
};
function _0x1c412b() {
  _0x1c412b.superClass.call(this, 0x2);
}
window.ArcticHare = _0x1c412b;
_0x2b451a.setCustomClassForGameObjType(_0x1c412b, 0x2, _0x197269);
var _0x53abbc = _0xf4bb63;
_0x11915c.prototype = Object.create(_0x53abbc.prototype);
_0x11915c.prototype.constructor = _0x11915c;
_0x11915c.superClass = _0x53abbc;
_0x11915c.prototype.animalInfo = function () {
  var _0x29227f = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x29227f.aniName = "Polar Bear";
      break;
    case 0xc9:
      _0x29227f.aniName = "Cola Connoisseur";
      break;
    case 0xca:
      _0x29227f.aniName = "Water Bear";
      break;
  }
  _0x29227f.aniDesc = '';
  _0x29227f.upgradeText = "UPGRADED to " + _0x29227f.aniName + "!\n Polar bears can climb hills! \n+ They're amazing swimmers!";
  _0x29227f.aniCol = "#e4e4e4";
  _0x29227f.skinName = this.getSkinName();
  return _0x29227f;
};
_0x11915c.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x11915c.prototype.getAbilityInfo = function (_0x47ba16) {
  var _0x78031f = {
    abilName: "Claw Slash!",
    abilImg: "abilities/Slash-Claw.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x78031f;
};
_0x11915c.prototype.getSkinName = function () {
  var _0x4b6d0e = "arctic/bear/" + this.animalSpecies + this.getSubSpecies() + "/bear";
  if (this.animalSpecies == 0xc9 && this.flag_usingAbility) {
    _0x4b6d0e += "1";
  }
  return _0x4b6d0e;
};
function _0x11915c() {
  _0x11915c.superClass.call(this, 0x2);
}
window.PolarBear = _0x11915c;
_0x2b451a.setCustomClassForGameObjType(_0x11915c, 0x2, _0x3146b2);
var _0x53abbc = _0xf4bb63;
_0x2224be.prototype = Object.create(_0x53abbc.prototype);
_0x2224be.prototype.constructor = _0x2224be;
_0x2224be.superClass = _0x53abbc;
_0x2224be.prototype.getSpeciesPath = function (_0xab7b02) {
  return "arctic/" + _0xab7b02 + "/" + this.animalSpecies;
};
_0x2224be.prototype.animalInfo = function () {
  var _0x17c3a7 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x17c3a7.aniName = "Lemming!";
      break;
  }
  _0x17c3a7.skinName = this.getSpeciesPath("lemming") + "/lemming";
  _0x17c3a7.aniDesc = '';
  _0x17c3a7.upgradeText = "You're a tiny " + _0x17c3a7.aniName + " - Eat food to grow!";
  _0x17c3a7.aniCol = "#CFCFCF";
  return _0x17c3a7;
};
_0x2224be.prototype.getSkinName = function () {
  var _0x369c8c = this.getSpeciesPath("lemming") + "/lemming";
  return _0x369c8c;
};
function _0x2224be() {
  _0x2224be.superClass.call(this, 0x2);
}
window.Lemming = _0x2224be;
_0x2b451a.setCustomClassForGameObjType(_0x2224be, 0x2, _0x119c33);
function _0x4895d1(_0x4d12f7) {
  var _0x2c288f = _0x2b451a.createGameObjOfOType(0x2, _0x4d12f7.animalType);
  _0x2c288f.animalType = _0x4d12f7.animalType;
  _0x2c288f.animalSpecies = _0x4d12f7.animalSpecies;
  _0x2c288f.animalSubSpecies = _0x4d12f7.animalSubSpecies;
  _0x2c288f.animalPremiumSkin = _0x4d12f7.premiumSkinGroup;
  _0x2c288f.mopeSeasonID = 0x1;
  _0x2c288f.skinThemeID = 0x0;
  var _0xa8b56b = _0x2c288f.animalInfo();
  _0x4d12f7.aniCol = _0xa8b56b.aniCol;
  _0x4d12f7.aniName = _0xa8b56b.aniName;
  _0x4d12f7.skinName = _0xa8b56b.skinName;
  _0x4d12f7.upgradeText = _0xa8b56b.upgradeText;
  var _0x158889 = _0x2c288f.getAbilityInfo(_0x4d12f7.abilityType);
  _0x4d12f7.abilityImage = _0x158889.abilImg;
  _0x4d12f7.abilityName = _0x158889.abilName;
  return _0x4d12f7;
}
class _0x2a8b3a {
  constructor(_0x10a3c5) {
    this.data = _0x10a3c5;
    for (let _0x42006a = 0x0; _0x42006a < this.data.objects.length; _0x42006a++) {
      let _0x690fd8 = this.data.objects[_0x42006a];
      if (!_0x690fd8.isRect) {
        if (_0x690fd8.objType == _0x5e29d8 && _0x388788) {
          var _0xac3d4c = "/assets/s/2/gameobj/78/mini" + _0x690fd8.teamID + ".png";
          var _0x452720 = _0x3df4ce(_0xac3d4c);
          if (_0x452720) {
            _0x690fd8.image = _0x452720;
          }
        }
      }
    }
    this.redrawMap = true;
  }
  ["drawCircle"](_0x3c1401) {
    this.data.push(_0x3c1401);
  }
  ["updateMapData"]() {
    this.redrawMap = true;
  }
  ["drawMap"]() {
    if (this.redrawMap) {
      this.redrawMap = false;
      $bus.emit($bus.EVENTS.UI_INITIALIZE_MINI_MAP, this.data);
    }
    _0x302247();
    if (_0x219364 && _0x219364.length > 0x0) {
      const _0x4761fb = this.data.mapWidth + 0xc;
      for (var _0x13717d = 0x0; _0x13717d < _0x219364.length; _0x13717d++) {
        _0x219364[_0x13717d].sx = _0x4761fb;
        _0x219364[_0x13717d].sy = 0xa;
        _0x26cee8(_0x219364[_0x13717d], "white", 0x1);
      }
    }
    if (_0x4dfdf3 != null) {
      _0x26cee8(_0x4dfdf3, "cyan", 0x1);
    }
    var _0x522932 = _0x5c52f8[_0x2bd878];
    if (_0x522932) {
      const _0x2a9125 = this.data.mapWidth + 0xc;
      _0x26cee8({
        "id": _0x2bd878,
        "sx": _0x2a9125,
        "sy": 0xa,
        "x": _0x491674,
        "y": _0xef1426
      }, "white", 0x1);
    }
    this.setRelativeOverlayPositions();
    $bus.emit($bus.EVENTS.UI_UPDATE_MINI_MAP, _0x19a957);
  }
  ["setRelativeOverlayPositions"]() {}
  ["getRelativePosition"](_0x58bb26, _0x4ffadc) {
    return {
      "x": _0x58bb26 / this.data.mapWidth,
      "y": _0x4ffadc / this.data.mapWidth
    };
  }
  ["setPlayersCount"](_0x1522c8) {
    _0x18c03a.playersCount = _0x1522c8;
    $bus.emit($bus.EVENTS.UI_SET_PLAYERS_ONLINE, _0x1522c8);
  }
  ["getFontSize"]() {
    return 0x12 * _0x301800;
  }
}
var _0x53abbc = _0x472b99;
_0x23bbfa.prototype = Object.create(_0x53abbc.prototype);
_0x23bbfa.prototype.constructor = _0x23bbfa;
_0x23bbfa.superClass = _0x53abbc;
_0x23bbfa.prototype.drawGrid = _0x39811a.drawGrid;
_0x23bbfa.prototype.updateZ = function () {
  switch (this.biome) {
    case 0x1:
      this.z = -0x12c;
      break;
    case 0x76:
      this.z = -0x12b;
      break;
    case 0x4f:
    case 0x10:
      this.z = -0x12a;
      break;
    case 0x2f:
      if (this.forceBiomeColor) {
        this.z = -0xd2;
      } else {
        this.z = -0xd0;
      }
      break;
    case 0xc:
      this.z = -0x127;
      break;
  }
};
_0x23bbfa.prototype.customDraw = function (_0x124567) {
  if (this.isRect) {
    this.drawBiome(_0x124567);
    if (!_0x124567) {
      if (this.jaggedSides) {
        _0x3b8ba2.save();
        this.jaggedSidesForRect();
        _0x3b8ba2.restore();
      }
    }
    if (_0x39811a.showGrid) {
      _0x345827(-this.getRectWidth() / 0x2 + 0x2d, -this.getRectHeight() / 0x2 + 0x2d, this.getRectWidth() / 0x2 - 0x2d, this.getRectHeight() / 0x2 - 0x2d, this.x, this.y);
    }
    _0x3b8ba2.save();
    _0x3b8ba2.restore();
    if (!_0x39811a.noTextures) {
      this.drawTerrainFeatures();
    }
  } else {
    this.drawBiome(false);
  }
};
_0x23bbfa.prototype.jaggedPointsForRect = function (_0x2efdc7) {
  if (this.jaggedSides) {
    if (_0x2efdc7 == 0x2) {
      this.jaggedRect[_0x2efdc7] = [];
      var _0x35adaf = -this.getRectWidth() / 0x2;
      var _0x3e6885 = this.getRectWidth() / 0x2;
      var _0x8ebc2 = this.getRectHeight() / 0x2 - 0x20;
      var _0x102bbd = this.getRectHeight() / 0x2 - 0x20;
      this.jaggedRect[_0x2efdc7].push({
        "x": _0x35adaf,
        "y": _0x8ebc2
      });
      var _0x376cb0 = 0x14;
      var _0x4fce06 = [-0xc, 0x5, 0xa, 0x0, -0xa, 0x3, 0xc, 0x4, 0x0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
      var _0x40614d = 0x3c;
      var _0x2723df = 0x0;
      var _0x31230f = _0x1f0c0a - this.x;
      var _0x25160b = 0x0 - this.x;
      var _0x244f32 = _0x578943 - this.y;
      var _0x456682 = 0x0 - this.y;
      var _0x28d5ed;
      var _0x1fbb12 = _0x35adaf - _0x376cb0;
      this.jaggedRect[_0x2efdc7].push({
        "x": _0x35adaf,
        "y": _0x8ebc2
      });
      _0x28d5ed = _0x102bbd + _0x376cb0;
      var _0x5d6c2d = 0x0;
      var _0x3a085b = 0x0;
      for (_0x1fbb12 = _0x35adaf; _0x1fbb12 < _0x3e6885; _0x1fbb12 += _0x40614d) {
        _0x3a085b = _0x1fbb12;
        _0x5d6c2d = Math.min(_0x244f32, Math.max(_0x456682, _0x28d5ed + _0x4fce06[_0x2723df]));
        this.jaggedRect[_0x2efdc7].push({
          "x": _0x3a085b,
          "y": _0x5d6c2d
        });
        _0x2723df = (_0x2723df + 0x1) % _0x4fce06.length;
      }
      this.jaggedRect[_0x2efdc7].push({
        "x": _0x3e6885,
        "y": _0x102bbd
      });
      this.jaggedRect[_0x2efdc7].push({
        "x": _0x3e6885,
        "y": _0x8ebc2
      });
      this.jaggedRect[_0x2efdc7].push({
        "x": _0x35adaf,
        "y": _0x8ebc2
      });
    } else {
      if (_0x2efdc7 == 0x0) {
        this.jaggedRect[_0x2efdc7] = [];
        _0x3b8ba2.fillStyle = "#4854a2";
        var _0x35adaf = -this.getRectWidth() / 0x2;
        var _0x3e6885 = this.getRectWidth() / 0x2;
        var _0x8ebc2 = -this.getRectHeight() / 0x2 + 0x18;
        var _0x102bbd = -this.getRectHeight() / 0x2 + 0xc;
        this.jaggedRect[_0x2efdc7].push({
          "x": _0x35adaf,
          "y": _0x8ebc2
        });
        var _0x376cb0 = 0x0;
        var _0x4fce06 = [-0xc, 0x5, 0xa, 0x0, -0xa, 0x3, 0xc, 0x4, 0x0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
        var _0x40614d = 0x3c;
        var _0x2723df = 0x0;
        var _0x31230f = _0x1f0c0a - this.x;
        var _0x25160b = 0x0 - this.x;
        var _0x244f32 = _0x578943 - this.y;
        var _0x456682 = 0x0 - this.y;
        var _0x28d5ed;
        var _0x1fbb12 = _0x35adaf;
        this.jaggedRect[_0x2efdc7].push({
          "x": _0x35adaf,
          "y": _0x102bbd
        });
        _0x28d5ed = _0x102bbd;
        for (_0x1fbb12 = _0x35adaf; _0x1fbb12 < _0x3e6885; _0x1fbb12 += _0x40614d) {
          _0x3a085b = _0x1fbb12;
          _0x5d6c2d = Math.min(_0x244f32, Math.max(_0x456682, _0x28d5ed + _0x4fce06[_0x2723df]));
          this.jaggedRect[_0x2efdc7].push({
            "x": _0x3a085b,
            "y": _0x5d6c2d
          });
          _0x2723df = (_0x2723df + 0x1) % _0x4fce06.length;
        }
        this.jaggedRect[_0x2efdc7].push({
          "x": _0x3e6885,
          "y": _0x102bbd
        });
        this.jaggedRect[_0x2efdc7].push({
          "x": _0x3e6885,
          "y": _0x8ebc2
        });
      }
    }
  }
};
_0x23bbfa.prototype.drawJaggedCircle = function (_0xe84e5e, _0x3d1224) {
  if (this.points2) {
    this.drawPoints(this.points2, _0x3d1224, true);
  }
  this.drawPoints(this.points1, _0xe84e5e, true);
};
_0x23bbfa.prototype.getRectWidth = function () {
  var _0x32d946 = this.rectW;
  return _0x32d946;
};
_0x23bbfa.prototype.getRectHeight = function () {
  var _0x485ad3 = this.rectH;
  return _0x485ad3;
};
_0x23bbfa.prototype.drawBiome = function (_0xeb25b3) {
  if (this.biome == 0x2f) {
    this.drawVolcanoBiome(_0xeb25b3);
  } else {
    if (!this.isRect) {
      _0x3b8ba2.fillStyle = _0xeb25b3 ? "red" : this.getBiomeColor();
      _0x3b8ba2.beginPath();
      _0x3b8ba2.arc(0x0, 0x0, Math.max(0x1, this.rad), 0x0, Math.PI * 0x2);
      _0x3b8ba2.fill();
    } else {
      if (this.biome == 0x76) {
        _0x3b8ba2.globalAlpha = 0x1;
      }
      if (!_0xeb25b3) {
        _0x3b8ba2.fillStyle = _0xeb25b3 ? "#bfaf43" : this.getBiomeColor();
        var _0x4f9e81 = _0xeb25b3 ? 0x0 : 0x14;
        _0x3b8ba2.fillRect(-this.getRectWidth() / 0x2 + _0x4f9e81, -this.getRectHeight() / 0x2 + _0x4f9e81, this.getRectWidth() - _0x4f9e81 * 0x2, this.getRectHeight() - _0x4f9e81 * 0x2);
      }
    }
  }
};
_0x23bbfa.prototype.drawVolcanoBiome = function (_0x540fec) {
  _0x3b8ba2.save();
  if (!(_0x4bda0b == 0x2)) {
    _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
  }
  var _0x8b2546 = 1.5;
  var _0x271f88 = _0x1d1686("volcano", this.spawnTime);
  if (_0x271f88 !== undefined && _0x271f88 != null) {
    this.theFrame = _0x271f88;
  }
  _0x8b2546 = this.theFrame;
  if (this.forceBiomeColor) {
    _0x3b8ba2.fillStyle = "#bfaf43";
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - 8 * _0x8b2546), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.save();
    _0x3b8ba2.fillStyle = "#8A681B";
    _0x3b8ba2.globalAlpha = 0.9;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - 16), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.restore();
  } else {
    _0x3b8ba2.fillStyle = "#604729";
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, this.rad, 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
  }
  if (!(_0x4bda0b == 0x2 || this.forceBiomeColor)) {
    _0x3b8ba2.fillStyle = "#8A681B";
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(0x0, 0x0, Math.max(0x0, this.rad - 0x4 + _0x8b2546), 0x0, Math.PI * 0x2);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * 0.45, -this.rad * 0.45 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x8b2546), 0x0, 0x2 * Math.PI);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad * 0.5, this.rad * 0.5 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.4 + _0x8b2546), 0x0, 0x2 * Math.PI);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(-this.rad * 0.55 * 0.707, +this.rad * 0.55 * 0.707 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.5 + _0x8b2546), 0x0, 0x2 * Math.PI);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(-this.rad * 0.75, -this.rad * 0.35 + 0xf * this.rPer, Math.max(0x0, this.rad * 0.3 + _0x8b2546), 0x0, 0x2 * Math.PI);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0x0, 0x2 * Math.PI);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.beginPath();
    _0x3b8ba2.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0x0, 0x2 * Math.PI);
    _0x3b8ba2.fill();
    _0x3b8ba2.beginPath();
  }
  _0x3b8ba2.restore();
};
_0x23bbfa.prototype.drawPoints = function (_0x53420f, _0x29d3dd, _0x4ee5ec) {
  if (_0x4ee5ec) {
    _0x3b8ba2.fillStyle = _0x29d3dd;
  } else {
    _0x3b8ba2.strokeStyle = _0x29d3dd;
  }
  _0x3b8ba2.strokeStyle = _0x29d3dd;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(_0x53420f[0x0].x * 0xa, _0x53420f[0x0].y * 0xa);
  for (var _0x53eab5 = 0x1; _0x53eab5 < _0x53420f.length; _0x53eab5++) {
    _0x3b8ba2.lineTo(_0x53420f[_0x53eab5].x * 0xa, _0x53420f[_0x53eab5].y * 0xa);
  }
  _0x3b8ba2.lineTo(_0x53420f[0x0].x * 0xa, _0x53420f[0x0].y * 0xa);
  if (_0x4ee5ec) {
    _0x3b8ba2.fill();
  } else {
    _0x3b8ba2.stroke();
  }
};
_0x23bbfa.prototype.drawJaggedRect = function () {
  for (var _0x5e4d72 = 0x0; _0x5e4d72 < this.jaggedRect.length; _0x5e4d72++) {
    if (this.jaggedRect[_0x5e4d72]) {
      var _0x23120f = this.jaggedRect[_0x5e4d72];
      if (_0x23120f && _0x23120f.length > 0x0) {
        _0x3b8ba2.fillStyle = this.biomeColor;
        _0x3b8ba2.strokeStyle = "red";
        _0x3b8ba2.beginPath();
        _0x3b8ba2.moveTo(_0x23120f[0x0].x, _0x23120f[0x0].y);
        for (i = 0x1; i < _0x23120f.length; i++) {
          _0x3b8ba2.lineTo(_0x23120f[i].x, _0x23120f[i].y);
        }
        _0x3b8ba2.closePath();
        _0x3b8ba2.fill();
        _0x3b8ba2.stroke();
      }
    }
  }
};
_0x23bbfa.prototype.jaggedPointsForCircle = function (_0x3490c2, _0x20f822, _0x42399b, _0x5e7f5d, _0x22248f) {
  if (this.points1 == undefined) {
    this.points1 = [];
    if (_0x22248f > 0x0) {
      this.points2 = [];
    }
    var _0x1f0c2c = _0x4421b3(-0x2, 0x2);
    var _0x2a224c = 0x2 * Math.PI / _0x5e7f5d;
    a = _0x1f0c2c * (Math.PI / 0xb4);
    var _0x4d9a09 = Math.cos(a);
    var _0x43d90a = Math.sin(a);
    var _0x433cdd = _0x3490c2 + _0x42399b * _0x4d9a09;
    var _0x24be63 = _0x20f822 + _0x42399b * _0x43d90a;
    this.points1.push({
      "x": _0x433cdd,
      "y": _0x24be63
    });
    if (_0x22248f > 0x0) {
      var _0x11fd7a = _0x3490c2 + (_0x42399b + _0x22248f) * _0x4d9a09;
      var _0x18eb5a = _0x20f822 + (_0x42399b + _0x22248f) * _0x43d90a;
      this.points2.push({
        "x": _0x11fd7a,
        "y": _0x18eb5a
      });
    }
    for (var _0x37e73b = 0x1; _0x37e73b < _0x5e7f5d; _0x37e73b++) {
      var _0x38f534 = _0x4421b3(-0x1, 0x1);
      _0x1f0c2c = _0x4421b3(-0x2, 0x2);
      var _0x52e323 = _0x42399b + _0x38f534;
      a = _0x2a224c * _0x37e73b + _0x1f0c2c * (Math.PI / 0xb4);
      _0x4d9a09 = Math.cos(a);
      _0x43d90a = Math.sin(a);
      var _0x41ec24 = _0x3490c2 + _0x52e323 * _0x4d9a09;
      var _0x293459 = _0x20f822 + _0x52e323 * _0x43d90a;
      this.points1.push({
        "x": _0x41ec24,
        "y": _0x293459
      });
      if (_0x22248f > 0x0) {
        var _0x4f8251 = _0x42399b + _0x22248f + _0x38f534;
        var _0x1446b4 = _0x3490c2 + (_0x4f8251 + _0x22248f) * _0x4d9a09;
        var _0x237ac3 = _0x20f822 + (_0x4f8251 + _0x22248f) * _0x43d90a;
        this.points2.push({
          "x": _0x1446b4,
          "y": _0x237ac3
        });
      }
    }
    this.points1.push({
      "x": _0x433cdd,
      "y": _0x24be63
    });
    if (_0x22248f > 0x0) {
      this.points2.push({
        "x": _0x11fd7a,
        "y": _0x18eb5a
      });
    }
  }
};
_0x23bbfa.prototype.jaggedSidesForRect = function () {
  _0x3b8ba2.fillStyle = this.getBiomeColor();
  var _0x5521ff = -this.getRectWidth() / 0x2 + 0x2a;
  var _0x1468dd = this.getRectWidth() / 0x2 - 0x2a;
  var _0x20b22b = -this.getRectHeight() / 0x2 + 0x2a;
  var _0x3bc59e = this.getRectHeight() / 0x2 - 0x2a;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(_0x5521ff, _0x20b22b);
  var _0x504413 = [-0x8, 0xa, -0xa, 0xc, 0x0, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0x0, -0x6];
  var _0xefe3f = 0x0;
  var _0x4cff3b = _0x1f0c0a - this.x;
  var _0x3d4785 = 0x0 - this.x;
  var _0xfaa301 = _0x578943 - this.y;
  var _0x2d0310 = 0x0 - this.y;
  var _0x1f39fc;
  var _0x55d651 = _0x5521ff - 0x1e;
  for (_0x1f39fc = _0x20b22b; _0x1f39fc < _0x3bc59e; _0x1f39fc += 0x2d) {
    _0x3b8ba2.lineTo(Math.min(_0x4cff3b, Math.max(_0x3d4785, _0x55d651 + _0x504413[_0xefe3f])), _0x1f39fc);
    _0xefe3f = (_0xefe3f + 0x1) % _0x504413.length;
  }
  _0x3b8ba2.lineTo(_0x5521ff, _0x3bc59e);
  _0x1f39fc = _0x3bc59e + 0x1e;
  for (_0x55d651 = _0x5521ff; _0x55d651 < _0x1468dd; _0x55d651 += 0x2d) {
    _0x3b8ba2.lineTo(_0x55d651, Math.min(_0xfaa301, Math.max(_0x2d0310, _0x1f39fc + _0x504413[_0xefe3f])));
    _0xefe3f = (_0xefe3f + 0x1) % _0x504413.length;
  }
  _0x3b8ba2.lineTo(_0x1468dd, _0x3bc59e);
  _0x55d651 = _0x1468dd + 0x1e;
  for (_0x1f39fc = _0x3bc59e; _0x1f39fc > _0x20b22b; _0x1f39fc -= 0x2d) {
    _0x3b8ba2.lineTo(Math.min(_0x4cff3b, Math.max(_0x3d4785, _0x55d651 + _0x504413[_0xefe3f])), _0x1f39fc);
    _0xefe3f = (_0xefe3f + 0x1) % _0x504413.length;
  }
  _0x3b8ba2.lineTo(_0x1468dd, _0x20b22b);
  _0x1f39fc = _0x20b22b - 0x1e;
  for (_0x55d651 = _0x1468dd; _0x55d651 > _0x5521ff; _0x55d651 -= 0x2d) {
    _0x3b8ba2.lineTo(_0x55d651, Math.min(_0xfaa301, Math.max(_0x2d0310, _0x1f39fc + _0x504413[_0xefe3f])));
    _0xefe3f = (_0xefe3f + 0x1) % _0x504413.length;
  }
  _0x3b8ba2.closePath();
  _0x3b8ba2.fill();
};
_0x23bbfa.prototype.getBiomeColor = function () {
  if (this.forceBiomeColor) {
    return this.biomeColor;
  }
  switch (this.biome) {
    case 0xc:
      return "#4854a2";
    case 0x10:
      return "#c4dee7";
    case 0x4f:
      return "#c8b745";
    case 0x2f:
      return "#604729";
    case 0x1:
      return "#3FBA54";
    case 0x76:
      return "#25b645";
    default:
      return "#3FBA54";
  }
};
_0x23bbfa.prototype.jaggedSides = null;
_0x23bbfa.prototype.forceBiomeColor = false;
_0x23bbfa.prototype.readCustomData_onNewlyVisible = function (_0x1f507e) {
  this.isRect = _0x1f507e.readUInt8() == 0x1;
  this.biomeColor = _0x1f507e.readString();
  this.biome = _0x1f507e.readUInt16();
  var _0x41f96a = _0x1f507e.readBitGroup();
  this.forceBiomeColor = _0x41f96a.getBool();
  if (this.isRect) {
    this.jaggedSides = [_0x41f96a.getBool(), _0x41f96a.getBool(), _0x41f96a.getBool(), _0x41f96a.getBool()];
  }
  if (!this.isRect) {
    this.jaggedPointsForCircle(0x0, 0x0, this.rad, 0x28, 0x5, this.biomeColor, "#DAB601");
  } else {
    this.jaggedRect = [];
  }
  this.drawGrid = _0x39811a.showGrid;
  if (this.isRect && this.biome != 0xc) {
    this.generateTerrainFeatures();
  }
};
_0x23bbfa.prototype.biomePattern = null;
_0x23bbfa.prototype.generateTerrainFeatures = function () {
  var _0x4e9075 = 0x64;
  var _0x16bc31 = 0x64;
  var _0x987265 = 1.5;
  if (this.biome == 0x4f) {
    _0x4e9075 = 0x7d;
    _0x16bc31 = 0x7d;
    _0x987265 = 1.5;
  } else if (this.biome == 0x76) {
    _0x4e9075 = 0x4b;
    _0x16bc31 = 0x4b;
    _0x987265 = 0x2;
  }
  var _0x2d27ba = 0x1;
  var _0x3d4be0 = -this.getRectWidth() / 0x2 + _0x4e9075;
  var _0x442d81 = -this.getRectHeight() / 0x2 + _0x16bc31;
  var _0x47077a = this.getRectWidth() / 0x2;
  var _0x55b17c = this.getRectHeight() / 0x2;
  var _0x1bf3a4 = _0x4e9075 * (this.biome == 0x76 ? 0x2 : 0x3);
  var _0x6c9f9b = [];
  for (; _0x3d4be0 < _0x47077a - _0x4e9075; _0x3d4be0++) {
    if (_0x2d27ba == 0x1) {
      var _0x33be54 = {
        "x": _0x3d4be0,
        "y": _0x442d81,
        "rx": _0x3d4be0 + _0x4e9075 * _0x4421b3(-0.25, 0.25),
        "ry": _0x442d81 + _0x16bc31 * _0x4421b3(-0.25, 0.25),
        "w": _0x4e9075 * _0x987265,
        "h": _0x16bc31 * _0x987265,
        "c": "blue",
        "img": this.getRandomPatternImg(),
        "r": _0x4421b3(0x0, 0xb4)
      };
      if (_0x33be54.img < 0x0) {
        _0x33be54.img = 0x0;
      }
      _0x6c9f9b.push(_0x33be54);
    }
    _0x3d4be0 += _0x1bf3a4;
    if (_0x3d4be0 >= _0x47077a - _0x4e9075) {
      _0x442d81 += _0x1bf3a4;
      if (this.biome != 0x1 && this.biome != 0x76) {
        _0x2d27ba = _0x2d27ba == 0x0 ? 0x1 : 0x0;
      }
      _0x3d4be0 = -this.getRectWidth() / 0x2 + _0x4e9075;
    }
    if (this.biome != 0x1 && this.biome != 0x76) {
      _0x2d27ba = _0x2d27ba == 0x0 ? 0x1 : 0x0;
    } else {
      _0x2d27ba = _0x2d27ba == 0x0 ? 0x1 : 0x0;
    }
    if (this.biome == 0x1) {
      _0x2d27ba = 0x1;
    }
    if (_0x442d81 > _0x55b17c - _0x16bc31) {
      break;
    }
  }
  this.biomePattern = _0x6c9f9b;
};
_0x23bbfa.prototype.drawTerrainFeatures = function () {
  if (this.biomePattern) {
    for (i = 0x0; i < this.biomePattern.length; i++) {
      this.drawRectObj(this.biomePattern[i]);
    }
  }
};
_0x23bbfa.prototype.fillPattern = function (_0x15594d) {
  var _0x1cc4db = this.curBiome + "_" + _0x15594d;
  var _0x4ac175 = "gameobj/" + this.oType + "/" + _0x1cc4db + ".jpg";
  var _0x4ab276 = this.getSkinImageObj(_0x4ac175);
  if (_0x4ab276) {
    var _0x48b782 = -this.getRectWidth() / 0x2;
    var _0x2f297e = -this.getRectHeight() / 0x2;
    var _0x50e730 = this.getRectWidth() * 0x2;
    var _0x2d2c42 = this.getRectHeight() * 0x2;
    var _0x573185 = _0x3b8ba2.createPattern(_0x4ab276, "repeat");
    _0x3b8ba2.fillStyle = _0x573185;
    _0x3b8ba2.fillRect(_0x48b782, _0x2f297e, _0x50e730, _0x2d2c42);
  }
};
_0x23bbfa.prototype.drawRectObj = function (_0x43e2e4) {
  var _0x2e8232 = this.curBiome + "_" + _0x43e2e4.img;
  var _0x139a3a = "gameobj/" + this.oType + "/" + _0x2e8232 + ".png";
  var _0x383e42 = this.getSkinImageObj(_0x139a3a);
  if (_0x383e42) {
    _0x3b8ba2.save();
    _0x3b8ba2.translate(_0x43e2e4.rx, _0x43e2e4.ry);
    if (this.biome == 0x1 || this.biome == 0x10 && _0x43e2e4.img == 0x1 || this.biome == 0x4f && _0x43e2e4.img > 0x1) {
      _0x3b8ba2.rotate(_0x43e2e4.r);
    }
    _0x3b8ba2.drawImage(_0x383e42, 0x0, 0x0, _0x43e2e4.w, _0x43e2e4.h);
    _0x3b8ba2.restore();
  }
};
_0x23bbfa.prototype.getRandomPatternImg = function () {
  var _0x44899a = 0x1;
  if (this.biome == 0x1 || this.biome == 0x10) {
    _0x44899a = Math.max(0x0, Math.round(_0x4421b3(0x0, 0x3)));
  } else {
    if (this.biome == 0x76) {
      _0x44899a = 0x1;
    } else {
      _0x44899a = Math.max(0x0, Math.round(_0x4421b3(0x0, 0x2)));
    }
  }
  return _0x44899a - 0x1;
};
function _0x23bbfa() {
  _0x23bbfa.superClass.call(this, 0x93);
}
window.BiomeShape = _0x23bbfa;
_0x2b451a.setCustomClassForGameObjType(_0x23bbfa, 0x93);
var _0x53abbc = _0x472b99;
_0xc21796.prototype = Object.create(_0x53abbc.prototype);
_0xc21796.prototype.constructor = _0xc21796;
_0xc21796.superClass = _0x53abbc;
_0xc21796.prototype.updateZ = function () {
  this.z = this.rad;
};
_0xc21796.prototype.customDraw = function (_0x4e2e21) {
  var _0x1435bc = this.getSkinImageObj("gameobj/" + this.oType + "/" + this.oType + ".png");
  if (_0x1435bc) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = this.alpha < 0.7 ? this.alpha : 0x1;
    var _0x5967d1 = this.rad * 0x1;
    _0x3b8ba2.rotate(this.angle + 0xb4 * (Math.PI / 0xb4));
    _0x3b8ba2.drawImage(_0x1435bc, -_0x5967d1, -_0x5967d1, _0x5967d1 * 0x2, _0x5967d1 * 0x2);
    _0x3b8ba2.restore();
  }
};
_0xc21796.prototype.readCustomData_onNewlyVisible = function (_0x448a9a) {
  this.alpha = _0x448a9a.readUInt8() / 0x64;
};
_0xc21796.prototype.readUpdatedProperty = function (_0x2ad502, _0x3b2ab7) {
  if (_0x2ad502 == 0x26) {
    this.alpha = _0x3b2ab7.readUInt8() / 0x64;
  }
};
function _0xc21796() {
  _0xc21796.superClass.call(this, 0x94);
}
window.OceanWave = _0xc21796;
_0x2b451a.setCustomClassForGameObjType(_0xc21796, 0x94);
var _0x53abbc = _0x472b99;
_0x2e9f9a.prototype = Object.create(_0x53abbc.prototype);
_0x2e9f9a.prototype.constructor = _0x2e9f9a;
_0x2e9f9a.superClass = _0x53abbc;
_0x2e9f9a.prototype.updateZ = function () {
  this.z = -0x126;
};
_0x2e9f9a.prototype.customDraw = function (_0x127108) {
  var _0x39292b = this.getSkinImageObj("gameobj/" + this.oType + "/" + this.oType + "_" + this.speciesType + ".png");
  if (_0x39292b) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = this.alpha < 0.7 ? this.alpha : 0x1;
    var _0x449415 = this.rad;
    _0x3b8ba2.rotate(this.angle + 0xb4 * (Math.PI / 0xb4));
    _0x3b8ba2.drawImage(_0x39292b, -_0x449415, -_0x449415, _0x449415 * 0x2, _0x449415 * 0x2);
    _0x3b8ba2.restore();
  }
};
_0x2e9f9a.prototype.readCustomData_onNewlyVisible = function (_0xf306e1) {
  this.alpha = _0xf306e1.readUInt8() / 0x64;
};
_0x2e9f9a.prototype.readUpdatedProperty = function (_0x365672, _0x3ef915) {
  if (_0x365672 == 0x26) {
    this.alpha = _0x3ef915.readUInt8() / 0x64;
  }
};
function _0x2e9f9a() {
  _0x2e9f9a.superClass.call(this, 0x95);
}
window.UnderwaterFish = _0x2e9f9a;
_0x2b451a.setCustomClassForGameObjType(_0x2e9f9a, 0x95);
var _0x53abbc = _0x472b99;
_0x274552.prototype = Object.create(_0x53abbc.prototype);
_0x274552.prototype.constructor = _0x274552;
_0x274552.superClass = _0x53abbc;
_0x274552.prototype.updateZ = function () {
  this.z = this.rad + 0x64;
};
_0x274552.prototype.setSkinPath = function () {
  var _0x161c2a = this.oType + "_" + this.speciesSubType;
  this.objSkinPath = "gameobj/" + this.oType + "/" + _0x161c2a + "_" + this.hasPopped + ".png";
};
_0x274552.prototype.customDraw = function (_0x3f2688) {
  var _0xd43c6f = this.getSkinImageObj(this.objSkinPath);
  if (_0xd43c6f) {
    _0x3b8ba2.save();
    var _0x98f916 = this.rad * 0x1;
    _0x3b8ba2.globalAlpha = 0x1;
    _0x3b8ba2.drawImage(_0xd43c6f, -_0x98f916, -_0x98f916, _0x98f916 * 0x2, _0x98f916 * 0x2);
    _0x3b8ba2.restore();
  }
};
_0x274552.prototype.hasPopped = 0x0;
_0x274552.prototype.readUpdatedProperty = function (_0x35d944, _0x427686) {
  if (_0x35d944 == 0x1a) {
    this.hasPopped = _0x427686.readUInt8();
  }
};
function _0x274552() {
  _0x274552.superClass.call(this, 0x97);
}
window.Bubbles = _0x274552;
_0x2b451a.setCustomClassForGameObjType(_0x274552, 0x97);
var _0x53abbc = _0x472b99;
_0x4626de.prototype = Object.create(_0x53abbc.prototype);
_0x4626de.prototype.constructor = _0x4626de;
_0x4626de.superClass = _0x53abbc;
_0x4626de.prototype.updateZ = function () {
  this.z = -0x96;
};
_0x4626de.prototype.customDraw = function (_0xd9edb5) {
  var _0x4b0e46 = 0x0;
  var _0x9c90b5 = 0x1;
  var _0x14d241 = 0x1;
  if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
    var _0x3357c7 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
    _0x9c90b5 = 3.5 * Math.cos(0x2 * Math.PI / 1.2 * _0x3357c7);
    _0x14d241 = 2.5 * Math.sin(0x2 * Math.PI / 1.2 * _0x3357c7);
    var _0x12e001 = (_0x1f4c9e - this.spawnTime) % 12000 / 12000;
    _0x4b0e46 = _0x12e001 * 0x2 * Math.PI;
  }
  _0x3b8ba2.save();
  _0x3b8ba2.rotate(_0x4b0e46);
  _0x3b8ba2.globalAlpha = this.getObjAlpha();
  for (i = 0x0; i < 0x5; i++) {
    var _0x255ad8 = this.getSkinImage(i);
    if (_0x255ad8) {
      var _0x2de290 = this.rad;
      var _0xadb102 = i > 0x3 ? _0x9c90b5 * (0x1 - i / 0xa) : 0x0;
      var _0xc245fa = i > 0x3 ? _0x14d241 * (0x1 - i / 0x5) : 0x0;
      _0x3b8ba2.drawImage(_0x255ad8, -_0x2de290 + _0xadb102, -_0x2de290 + _0xc245fa, 0x2 * _0x2de290, 0x2 * _0x2de290);
    }
  }
  _0x3b8ba2.restore();
};
_0x4626de.prototype.getSkinPath = function (_0x31319c) {
  return "gameobj/" + this.oType + "/" + _0x31319c + ".png";
};
_0x4626de.prototype.getSkinImage = function (_0x48e8bb) {
  var _0x3606a2 = this.getSkinImageObj(this.getSkinPath(_0x48e8bb));
  return _0x3606a2;
};
function _0x4626de() {
  _0x4626de.superClass.call(this, 0xd);
  this.doesDrawEffectScale = false;
  this.drawEffectScale_Slow = false;
}
window.OceanHidinghole = _0x4626de;
_0x2b451a.setCustomClassForGameObjType(_0x4626de, 0xd);
var _0x53abbc = _0x472b99;
_0x2e1bc0.prototype = Object.create(_0x53abbc.prototype);
_0x2e1bc0.prototype.constructor = _0x2e1bc0;
_0x2e1bc0.superClass = _0x53abbc;
_0x2e1bc0.prototype.playerID = 0x0;
_0x2e1bc0.prototype.shellState = 0x0;
_0x2e1bc0.prototype.cracksCount = 0x0;
_0x2e1bc0.prototype.updateZ = function () {
  if (this.shellState == 0x0) {
    this.z = this.rad;
  } else {
    this.z = -0x99;
  }
};
_0x2e1bc0.prototype.isEdibleOutlined = function () {
  if (this.playerID == _0x2bd878) {
    return false;
  }
  return _0x37d716.superClass.prototype.isEdibleOutlined.call(this);
};
_0x2e1bc0.prototype.nextShakeEndT = 0x0;
_0x2e1bc0.prototype.nextShakeStartT = 0x0;
_0x2e1bc0.prototype.drawScaleEffect = function () {
  if (this.shellState != 0x1) {
    this.drawNickName(0x1);
  }
  if (this.shellState == 0x0) {
    if (_0x1f4c9e > this.nextShakeEndT) {
      this.nextShakeEndT = +new Date() + _0x4421b3(0x9c4, 0x1194);
      this.nextShakeStartT = this.nextShakeEndT - _0x4421b3(0x3e8, 0x5dc);
    }
    if (_0x1f4c9e > this.nextShakeStartT && _0x1f4c9e < this.nextShakeEndT) {
      var _0x205900 = (_0x1f4c9e - this.spawnTime) / 0x3e8;
      var _0x58e42f = 0.1;
      var _0x57dcb4 = this.rad * 0.02;
      var _0xe84a4f = _0x57dcb4 * Math.sin(0x2 * Math.PI / _0x58e42f * _0x205900);
      var _0x58e42f = 0.15;
      var _0x57dcb4 = this.rad * 0.02;
      var _0x5c5af7 = _0x57dcb4 * Math.cos(0x2 * Math.PI / _0x58e42f * _0x205900);
      _0x3b8ba2.translate(-_0xe84a4f, -_0x5c5af7);
    }
  }
};
_0x2e1bc0.prototype.customDraw = function (_0x2eee0a) {
  var _0x12aefc = "upgradeshell";
  if (this.shellState == 0x0) {
    if (this.cracksCount > 0x0 && this.cracksCount <= 0xa) {
      _0x12aefc = "egg_crack" + this.cracksCount;
    } else {
      _0x12aefc += '' + this.shellState;
    }
  } else {
    _0x12aefc += '' + this.shellState;
  }
  var _0x5019e4 = this.getSkinImageObj("img/upgradeshell/" + _0x12aefc + ".png");
  var _0x407551 = this.getSkinImageObj("img/upgradeshell/outline" + this.curBiome + ".png");
  var _0x315253 = this.rad;
  var _0x580d0f = this.rPer * Math.PI * 0x2;
  _0x3b8ba2.save();
  _0x3b8ba2.rotate(_0x580d0f);
  if (_0x5019e4) {
    _0x3b8ba2.drawImage(_0x5019e4, -_0x315253, -_0x315253 * 1.1, 0x2 * _0x315253, 2.2 * _0x315253);
    if (this.shellState == 0x0 && _0x407551) {
      _0x3b8ba2.drawImage(_0x407551, -_0x315253, -_0x315253 * 1.1, 0x2 * _0x315253, 2.21 * _0x315253);
    }
  }
  _0x3b8ba2.restore();
};
_0x2e1bc0.prototype.getNameSize = function () {
  return 0x6;
};
_0x2e1bc0.prototype.setNick = function (_0x4008ad) {
  this.nickName = _0x4008ad;
  if (null == this.nickTXT) {
    this.nickTXT = new _0x4e6b66(this.getNameSize(), "#FFFFFF");
    this.nickTXT.strokeW = 1.5;
    this.nickTXT.renderScale = 0x5;
    this.nickTXT.setText(this.nickName);
  } else {
    this.nickTXT.setFontSize(this.getNameSize());
    this.nickTXT.setText(this.nickName);
  }
};
_0x2e1bc0.prototype.drawNickName = function (_0x49e13a) {
  if (this.nickName && this.nickTXT && !_0xce1d60) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = _0x49e13a;
    this.nickTXT.x = 0x0;
    this.nickTXT.y = this.rad + 0x5;
    this.nickTXT.draw();
    _0x3b8ba2.restore();
  }
};
_0x2e1bc0.prototype.readCustomData_onNewlyVisible = function (_0x666b2f) {
  _0x2e1bc0.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x666b2f);
  this.playerID = _0x666b2f.readUInt32();
  if (this.playerID > 0x0) {
    var _0x450dc4 = _0x666b2f.readString();
    this.setNick(_0x450dc4 ? _0x450dc4 : "mope.io");
  }
  this.readUpdatedProperty(0xd, _0x666b2f);
  this.readUpdatedProperty(0xc, _0x666b2f);
};
_0x2e1bc0.prototype.readUpdatedProperty = function (_0x16846c, _0x403f10) {
  if (_0x16846c == 0xd) {
    this.shellState = _0x403f10.readUInt8();
  } else {
    if (_0x16846c == 0xc) {
      this.cracksCount = _0x403f10.readUInt8();
    }
  }
};
function _0x2e1bc0() {
  _0x2e1bc0.superClass.call(this, 0x98);
}
window.UpgradeShell = _0x2e1bc0;
_0x2b451a.setCustomClassForGameObjType(_0x2e1bc0, 0x98);
for (_eimg = 0x1; _eimg <= 0xa; _eimg++) {
  var _0x13beaf = "egg_crack" + _eimg;
  var _0x5630bb = "./assets/s/2/img/upgradeshell/" + _0x13beaf + ".png";
  _0x3df4ce(_0x5630bb);
}
for (_eimg = 0x0; _eimg <= 0x5; _eimg++) {
  var _0x13beaf = "outline" + _eimg;
  var _0x5630bb = "./assets/s/2/img/upgradeshell/" + _0x13beaf + ".png";
  _0x3df4ce(_0x5630bb);
}
var _0x53abbc = _0x472b99;
_0x1e1e36.prototype = Object.create(_0x53abbc.prototype);
_0x1e1e36.prototype.constructor = _0x1e1e36;
_0x1e1e36.superClass = _0x53abbc;
_0x1e1e36.prototype.playerID = 0x0;
_0x1e1e36.prototype.shellState = 0x0;
_0x1e1e36.prototype.cracksCount = 0x0;
_0x1e1e36.prototype.updateZ = function () {
  this.z = 0x186a0;
};
_0x1e1e36.prototype.customDraw = function (_0x59cd18) {
  switch (this.speciesType) {
    case 0x98:
      {
        var _0x1264ea = this.getSkinImageObj("img/upgradeshell/shellpart" + this.speciesSubType + ".png");
        var _0x4ff005 = this.rad;
        var _0x39817b = this.rPer * Math.PI * 0x2;
        if (_0x1264ea) {
          _0x3b8ba2.save();
          _0x3b8ba2.rotate(_0x39817b);
          _0x3b8ba2.drawImage(_0x1264ea, -_0x4ff005, -_0x4ff005, 0x2 * _0x4ff005, 0x2 * _0x4ff005);
          _0x3b8ba2.restore();
        }
        break;
      }
    default:
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0.1;
      _0x133658(0x0, 0x0, this.rad, "black");
      _0x3b8ba2.restore();
      break;
  }
};
function _0x1e1e36() {
  _0x1e1e36.superClass.call(this, 0x99);
}
window.Particle = _0x1e1e36;
_0x2b451a.setCustomClassForGameObjType(_0x1e1e36, 0x99);
var _0x2995b5 = _0x2ff244;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x2ff244.prototype.updateZ = function () {
  this.z = 0x186a2;
};
_0x2ff244.prototype.customDraw = function (_0xc59e6a) {
  this.drawEffectScale_Slow = true;
  this.doesDrawEffectScale = true;
  _0x3b8ba2.globalAlpha = 0.2;
  _0x133658(0x0, 0x0, this.rad * 0.85, "white");
  var _0x979f92 = this.isGreenTarget ? "_e" : '';
  var _0x160300 = this.getSkinImageObj("img/target" + _0x979f92 + ".png");
  if (_0x160300) {
    var _0x3465b9 = this.rad;
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = 0.5;
    _0x3b8ba2.drawImage(_0x160300, -_0x3465b9, -_0x3465b9, 0x2 * _0x3465b9, 0x2 * _0x3465b9);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.save();
  if (this.hasTimer && this.timerTxt != null) {
    _0x3b8ba2.globalAlpha = 0x1;
    this.timerTxt.x = 0x0;
    this.timerTxt.y = 0x0;
    this.timerTxt.draw();
  }
  _0x3b8ba2.restore();
};
_0x2ff244.prototype.worldUpd_readMsgNewlyVisible = function (_0x29389d, _0x5b8afd, _0x2e1c8e) {
  this.setObjTypes(_0x5b8afd, _0x2e1c8e);
  this.id = _0x29389d.readUInt32();
  var _0x148ef5 = _0x29389d.readUInt16() / 0x4;
  var _0x3876b2 = _0x29389d.readUInt16() / 0x4;
  var _0x2862e9 = _0x29389d.readUInt16() / 0x4;
  this.ox = this.x = this.nx = _0x3876b2;
  this.oy = this.y = this.ny = _0x2862e9;
  this.nRad = _0x148ef5;
  this.oRad = this.rad = 0x0;
  this.setMovedToPos(_0x3876b2, _0x2862e9);
  this.setNewRad(_0x148ef5);
  this.hasTimer = _0x29389d.readUInt8() == 0x1;
  this.readUpdatedProperty(0x77, _0x29389d);
};
_0x2ff244.prototype.readUpdatedProperty = function (_0x493741, _0xdaab94) {
  if (_0x493741 == 0x1b) {
    this.timer = _0xdaab94.readUInt16() / 0x64;
    if (this.timer < 0x1e) {
      this.updateTimer();
    }
  } else {
    if (_0x493741 == 0x65) {
      this.targetText = _0xdaab94.readString();
      this.hasTimer = true;
      this.setTimer(this.targetText);
    } else {
      if (_0x493741 == 0x66) {
        this.hasVictim = true;
        var _0x1ddbab = _0xdaab94.readUInt16() / 0x4;
        var _0x219a74 = _0xdaab94.readUInt16() / 0x4;
        this.spider_ox = this.victimX;
        this.spider_oy = this.victimY;
        this.spider_nx = _0x1ddbab;
        this.spider_ny = _0x219a74;
      } else if (_0x493741 == 0x77) {
        this.isGreenTarget = _0xdaab94.readUInt8() == 0x1;
      }
    }
  }
};
_0x2ff244.prototype.isGreenTarget = false;
_0x2ff244.prototype.hasVictim = false;
_0x2ff244.prototype.victimX = null;
_0x2ff244.prototype.victimY = null;
_0x2ff244.prototype.onLerpUpdate = function (_0x37d1ac) {
  if (this.hasVictim) {
    this.victimX = _0x37d1ac * (this.spider_nx - this.spider_ox) + this.spider_ox;
    this.victimY = _0x37d1ac * (this.spider_ny - this.spider_oy) + this.spider_oy;
  }
};
_0x2ff244.prototype.beforeCustomDraw = function (_0xd4cfe8) {
  if (this.hasVictim) {
    console.log("beforeCustomDraw");
    _0x3b8ba2.save();
    _0x3b8ba2.strokeStyle = "white";
    _0x3b8ba2.globalAlpha = 0x1;
    _0x3b8ba2.beginPath();
    _0x3b8ba2.moveTo(this.x, this.y);
    _0x3b8ba2.lineTo(this.victimX, this.victimY);
    _0x3b8ba2.stroke();
    _0x3b8ba2.restore();
  }
};
_0x2ff244.prototype.updateTimer = function () {
  this.timer = Math.round(this.timer);
  var _0x3f0892 = this.timer;
  this.setTimer(_0x3f0892);
};
_0x2ff244.prototype.timerTxt = null;
_0x2ff244.prototype.setTimer = function (_0x2ad892) {
  var _0x2deb5b = '' + _0x2ad892;
  if (null == this.timerTxt) {
    this.timerTxt = new _0x4e6b66(0x14, "#FFFFFF");
    this.timerTxt.strokeW = 0x2;
    this.timerTxt.multiLine = true;
    this.timerTxt.renderScale = 0x5;
    this.timerTxt.setText(_0x2deb5b);
  } else {
    this.timerTxt.setFontSize(0x14);
    this.timerTxt.setText(_0x2deb5b);
  }
};
function _0x2ff244() {
  _0x2ff244.superClass.call(this);
}
window.TargetCircle = _0x2ff244;
_0x2b451a.setCustomClassForGameObjType(_0x2ff244, 0xe, 0x3b);
var _0x53abbc = _0x472b99;
_0x6433d4.prototype = Object.create(_0x53abbc.prototype);
_0x6433d4.prototype.constructor = _0x6433d4;
_0x6433d4.superClass = _0x53abbc;
_0x6433d4.prototype.stoneIncentive = 0x0;
_0x6433d4.prototype.teamID = 0x0;
_0x6433d4.prototype.lastHurtByTeamID = 0x0;
_0x6433d4.prototype.coolDownTime = 0x0;
_0x6433d4.prototype.isDefended = false;
_0x6433d4.prototype.updateZ = function () {
  this.z = 0x3ea;
};
_0x6433d4.prototype.customDraw = function (_0x4ece47) {
  let _0x165606 = this.teamID;
  if (this.teamID == 0x0) {
    if (this.lastHurtByTeamID != 0x0) {
      _0x165606 += "_" + this.lastHurtByTeamID;
    } else {
      if (this.coolDownTime > 0.1) {
        _0x165606 += "_0";
      }
    }
  }
  var _0x9d76bd = this.getSkinImageObj("gameobj/" + this.oType + "/stone" + _0x165606 + ".png");
  if (_0x9d76bd) {
    var _0x3ae3ad = this.rad * 1.25;
    _0x3b8ba2.drawImage(_0x9d76bd, -_0x3ae3ad, -_0x3ae3ad, 0x2 * _0x3ae3ad, 0x2 * _0x3ae3ad);
  }
  if (!this.isDefended) {
    var _0x44caed = this.getSkinImageObj("gameobj/" + this.oType + "/stone_undefended.png");
    if (_0x44caed) {
      var _0x3ae3ad = this.rad * 1.25;
      _0x3b8ba2.drawImage(_0x44caed, -_0x3ae3ad, -_0x3ae3ad, 0x2 * _0x3ae3ad, 0x2 * _0x3ae3ad);
    }
  }
  var _0x5f08f1 = this.getSkinImageObj("gameobj/" + this.oType + "/incentive/" + this.stoneIncentive + ".png");
  if (_0x5f08f1) {
    var _0x3ae3ad = this.rad / 0x4;
    _0x3b8ba2.drawImage(_0x5f08f1, -_0x3ae3ad, -_0x3ae3ad, 0x2 * _0x3ae3ad, 0x2 * _0x3ae3ad);
  }
};
_0x6433d4.prototype.setIncentiveText = function () {
  if (null == this.incentiveTxt) {
    this.incentiveTxt = new _0x4e6b66(0xa, "#FFFFFF");
    this.incentiveTxt.strokeW = 1.5;
    this.incentiveTxt.multiLine = true;
    this.incentiveTxt.renderScale = 0x5;
    this.incentiveTxt.setText(this.nickName);
  } else {
    this.incentiveTxt.setFontSize(0xa);
    this.incentiveTxt.multiLine = true;
    let _0x56847d = '';
    if (this.coolDownTime > 0.1) {
      _0x56847d = "\ncooldown: " + this.coolDownTime + "s";
    }
    this.incentiveTxt.setText(this.nickName + _0x56847d);
  }
};
_0x6433d4.prototype.drawIncentiveText = function (_0x35021a) {
  if (this.incentiveTxt && !_0xce1d60) {
    _0x3b8ba2.save();
    _0x3b8ba2.globalAlpha = _0x35021a;
    this.incentiveTxt.x = -this.rad / 0x2;
    this.incentiveTxt.y = -this.rad / 0x2;
    this.incentiveTxt.draw();
    _0x3b8ba2.restore();
  }
};
_0x6433d4.prototype.readCustomData_onNewlyVisible = function (_0x6c165c) {
  _0x6433d4.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x6c165c);
  this.stoneIncentive = _0x6c165c.readUInt8();
  this.readUpdatedProperty(0x6d, _0x6c165c);
  this.readUpdatedProperty(0x70, _0x6c165c);
  this.readUpdatedProperty(0x71, _0x6c165c);
  this.readUpdatedProperty(0x72, _0x6c165c);
};
_0x6433d4.prototype.readUpdatedProperty = function (_0x220b3f, _0x55c483) {
  if (_0x220b3f == 0x6d) {
    this.teamID = _0x55c483.readUInt8();
  } else {
    if (_0x220b3f == 0x70) {
      this.lastHurtByTeamID = _0x55c483.readUInt8();
    } else {
      if (_0x220b3f == 0x72) {
        this.isDefended = _0x55c483.readUInt8() == 0x1;
      } else if (_0x220b3f == 0x71) {
        this.coolDownTime = _0x55c483.readUInt16() / 0x64;
      }
    }
  }
};
_0x6433d4.prototype.onHurt = function () {};
var _0x5e29d8 = 0x4e;
function _0x6433d4() {
  _0x6433d4.superClass.call(this, _0x5e29d8);
}
window.TeamStone = _0x6433d4;
_0x2b451a.setCustomClassForGameObjType(_0x6433d4, _0x5e29d8);
var _0x53abbc = _0x472b99;
_0x1ce8cc.prototype = Object.create(_0x53abbc.prototype);
_0x1ce8cc.prototype.constructor = _0x1ce8cc;
_0x1ce8cc.superClass = _0x53abbc;
_0x1ce8cc.prototype.updateZ = function () {
  this.z = this.hasImpact ? this.rad : 0x174876e800;
};
_0x1ce8cc.prototype.frame = 0x0;
_0x1ce8cc.prototype.customDraw = function (_0x4195cd) {
  if (!this.hasImpact) {
    this.frame = Math.trunc(_0x1f4c9e / 0x78) % 0x6;
  } else {
    this.frame = 0x0;
  }
  var _0x11d340 = "gameobj/" + this.oType + "/" + this.oType + "_" + this.frame + ".png";
  var _0x12e24b = this.getSkinImageObj(_0x11d340);
  if (_0x12e24b) {
    _0x3b8ba2.save();
    var _0x1c6775 = this.rad * 0x2;
    if (!this.hasImpact) {
      _0x3b8ba2.shadowColor = "rgba(0,0,0,0.05)";
      _0x3b8ba2.shadowBlur = 0x0;
      _0x3b8ba2.shadowOffsetX = this.shadowDistance;
      _0x3b8ba2.shadowOffsetY = this.shadowDistance;
      _0x3b8ba2.rotate(this.angle);
      _0x3b8ba2.drawImage(_0x12e24b, -_0x1c6775 / 0x2, -_0x1c6775 * 1.5, _0x1c6775, _0x1c6775 * 0x2);
    } else {
      _0x11d340 = "gameobj/" + this.oType + "/meteorite.png";
      _0x12e24b = null;
      _0x12e24b = this.getSkinImageObj(_0x11d340);
      if (_0x12e24b) {
        _0x3b8ba2.rotate(this.angle);
        _0x1c6775 = this.rad;
        _0x3b8ba2.drawImage(_0x12e24b, -_0x1c6775, -_0x1c6775, _0x1c6775 * 0x2, _0x1c6775 * 0x2);
      }
    }
    _0x3b8ba2.restore();
  }
};
_0x1ce8cc.prototype.readCustomData_onNewlyVisible = function (_0x381ec0) {
  _0x1ce8cc.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x381ec0);
  this.readUpdatedProperty(0x6f, _0x381ec0);
  this.readUpdatedProperty(0x6e, _0x381ec0);
};
_0x1ce8cc.prototype.shadowDistance = 0x0;
_0x1ce8cc.prototype.hasImpact = false;
_0x1ce8cc.prototype.readUpdatedProperty = function (_0x5b1c92, _0x4de393) {
  if (_0x5b1c92 == 0x6e) {
    let _0x471d9f = _0x4de393.readUInt16() / 0xa;
    this.shadowDistance = _0x471d9f;
  } else if (_0x5b1c92 == 0x6f) {
    this.hasImpact = _0x4de393.readUInt8() == 0x1;
  }
};
function _0x1ce8cc() {
  _0x1ce8cc.superClass.call(this, 0x9a);
}
window.Meteor = _0x1ce8cc;
_0x2b451a.setCustomClassForGameObjType(_0x1ce8cc, 0x9a);
var _0x53abbc = _0x472b99;
_0x321c9e.prototype = Object.create(_0x53abbc.prototype);
_0x321c9e.prototype.constructor = _0x321c9e;
_0x321c9e.superClass = _0x53abbc;
_0x321c9e.prototype.updateZ = function () {
  this.z = -0x65;
};
_0x321c9e.prototype.customDraw = function (_0x30e4c3) {
  skin = "gameobj/" + this.oType + "/" + this.oType + ".png";
  var _0x31dd45 = this.getSkinImageObj(skin);
  if (_0x31dd45) {
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.angle);
    rad = this.rad * 1.5;
    _0x3b8ba2.drawImage(_0x31dd45, -rad, -rad, rad * 0x2, rad * 0x2);
    _0x3b8ba2.restore();
  }
};
function _0x321c9e() {
  _0x321c9e.superClass.call(this, 0x9b);
}
window.MeteorCrater = _0x321c9e;
_0x2b451a.setCustomClassForGameObjType(_0x321c9e, 0x9b);
var _0x53abbc = _0x472b99;
_0x2421ec.prototype = Object.create(_0x53abbc.prototype);
_0x2421ec.prototype.constructor = _0x2421ec;
_0x2421ec.superClass = _0x53abbc;
_0x2421ec.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x2421ec.prototype.customDraw = function (_0x3906aa) {
  this.frame = Math.trunc(_0x1f4c9e / 0x78) % 0x5;
  var _0x3a44a0 = "gameobj/" + this.oType + "/" + this.oType + "_" + this.frame + ".png";
  var _0x203f61 = this.getSkinImageObj(_0x3a44a0);
  if (_0x203f61) {
    var _0x323406 = this.rad;
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0x203f61, -_0x323406, -_0x323406, _0x323406 * 0x2, _0x323406 * 0x2);
    _0x3b8ba2.restore();
  }
};
function _0x2421ec() {
  _0x2421ec.superClass.call(this, 0x9d);
}
window.MeteorShockwave = _0x2421ec;
_0x2b451a.setCustomClassForGameObjType(_0x2421ec, 0x9d);
var _0x53abbc = _0x472b99;
_0x2bf870.prototype = Object.create(_0x53abbc.prototype);
_0x2bf870.prototype.constructor = _0x2bf870;
_0x2bf870.superClass = _0x53abbc;
_0x2bf870.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x2bf870.prototype.customDraw = function (_0x46ad84) {
  var _0x10b256 = this.getSkinImageObj("gameobj/" + this.oType + "/" + this.oType + "_" + this.speciesType + (this.isEdibleOutlined() ? "_e" : '') + ".png");
  if (_0x10b256) {
    var _0x3294ae = this.rad;
    _0x3b8ba2.drawImage(_0x10b256, -_0x3294ae, -_0x3294ae, 0x2 * _0x3294ae, 0x2 * _0x3294ae);
  }
};
_0x2bf870.prototype.readCustomData_onNewlyVisible = function (_0x3682f4) {
  _0x2bf870.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x3682f4);
  this.speciesType = _0x3682f4.readUInt16();
  this.speciesSubType = _0x3682f4.readUInt16();
};
function _0x2bf870() {
  _0x2bf870.superClass.call(this, 0x9e);
}
window.HalloweenFood = _0x2bf870;
_0x2b451a.setCustomClassForGameObjType(_0x2bf870, 0x9e);
var _0x5dd576 = _0x5dd576;
var _0x53abbc = _0xf4bb63;
_0x5dd576.prototype = Object.create(_0x53abbc.prototype);
_0x5dd576.prototype.constructor = _0x5dd576;
_0x5dd576.superClass = _0x53abbc;
_0x5dd576.prototype.animalInfo = function () {
  var _0xb3e84d = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0xb3e84d.aniName = "Swinehoe";
      break;
    case 0x1:
      _0xb3e84d.aniName = "Golden Pheasant";
      break;
  }
  _0xb3e84d.aniCol = "#FF9000";
  _0xb3e84d.skinName = this.getSkinName();
  _0xb3e84d.upgradeText = "UPGRADED to " + _0xb3e84d.aniName + "!\nHold W to fly around. ";
  return _0xb3e84d;
};
_0x5dd576.prototype.getSkinName = function () {
  return this.getSpeciesPath() + this.getSubSpecies() + "/pheasant" + (this.specType == 0x0 ? '' : this.specType);
};
_0x5dd576.prototype.getSpeciesPath = function () {
  return "forest/pheasant/" + this.animalSpecies;
};
_0x5dd576.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x5dd576.prototype.getWing = function (_0x5cd778, _0x117780, _0x1151df) {
  var _0x3da8e6 = "skins/" + this.getSpeciesPath() + "/";
  _0x3da8e6 += _0x5cd778 + "_wing" + _0x117780 + ".png";
  return _0x3da8e6;
};
_0x5dd576.prototype.getHead = function (_0x56a39d, _0x11a8eb) {
  var _0xd24367 = "skins/" + this.getSpeciesPath() + "/";
  _0xd24367 += _0x56a39d + "_head.png";
  return _0xd24367;
};
_0x5dd576.prototype.theFrame = 0x0;
_0x5dd576.prototype.drawUnderSkinImg = function () {
  this.setSkinScale();
  var _0x45b945 = -0.7;
  var _0x1c80b6 = 0.9;
  var _0x528080 = "skins/" + this.getSpeciesPath() + "/tail.png";
  var _0x5d942b = this.getSkinImageObj(_0x528080);
  if (_0x5d942b) {
    if (this.flag_usingAbility) {
      _0x1c80b6 = 1.1;
    }
    var _0x46b74c = this.skinScale;
    var _0x2f88a7 = this.rad - this.outlineW;
    _0x3b8ba2.drawImage(_0x5d942b, -_0x2f88a7 * _0x46b74c * _0x1c80b6, (-_0x2f88a7 + _0x2f88a7 * _0x45b945) * _0x46b74c * _0x1c80b6, 0x2 * _0x2f88a7 * _0x46b74c * _0x1c80b6, 0x2 * _0x2f88a7 * _0x46b74c * _0x1c80b6);
  }
};
_0x5dd576.prototype.drawSkinCustomization = function () {
  if (this.flag_usingAbility) {
    if (this.flag_flying) {
      {
        var _0x3f4e43 = 1.4705882352941178;
        if (this.flag_flying && !this.flag_isGrabbed) {
          _0x3b8ba2.save();
          var _0x14284c = _0x1d1686("bird", this.spawnTime);
          if (_0x14284c !== undefined && _0x14284c != null) {
            this.theFrame = _0x14284c;
          }
          var _0x310319 = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
          var _0x6b53a5 = this.getSkinImageObj(this.getWing("pheasant", 0x1, true));
          if (_0x6b53a5) {
            _0x3b8ba2.save();
            var _0x2a8dd6 = -(-0.2 + _0x310319) * _0x4bb70c;
            var _0x4a4a37 = this.rad * 0.8;
            _0x3b8ba2.rotate(_0x46d781 + _0x2a8dd6);
            var _0x3eef98 = 0x0;
            var _0x32a8f2 = this.rad;
            var _0x405d19 = _0x4a4a37 * 0x2 * 0.62;
            var _0x5ed94d = _0x4a4a37 * 2.5;
            var _0x1d6564 = 0.2;
            var _0x7f4395 = 1.7;
            _0x3b8ba2.drawImage(_0x6b53a5, _0x3eef98 + _0x405d19 * -_0x1d6564, _0x32a8f2 + _0x5ed94d * -_0x7f4395, _0x405d19, _0x5ed94d);
            _0x3b8ba2.restore();
          }
          var _0x6b53a5 = this.getSkinImageObj(this.getWing("pheasant", 0x2, true));
          if (_0x6b53a5) {
            _0x3b8ba2.save();
            var _0x2a8dd6 = -(-0.2 + _0x310319) * (-0x5a * (Math.PI / 0xb4));
            var _0x4a4a37 = this.rad * 0.8;
            _0x3b8ba2.rotate(-0x2d * (Math.PI / 0xb4) + _0x2a8dd6);
            var _0x3eef98 = 0x0;
            var _0x32a8f2 = this.rad;
            var _0x405d19 = _0x4a4a37 * 0x2 * 0.62;
            var _0x5ed94d = _0x4a4a37 * 2.5;
            var _0x1d6564 = 0.8;
            var _0x7f4395 = 1.7;
            _0x3b8ba2.drawImage(_0x6b53a5, _0x3eef98 + _0x405d19 * -_0x1d6564, _0x32a8f2 + _0x5ed94d * -_0x7f4395, _0x405d19, _0x5ed94d);
            _0x3b8ba2.restore();
          }
          _0x3b8ba2.restore();
        }
        if (this.specType != 0x0 && this.specType != undefined) {
          var _0x490ca8 = this.getSkinImageObj(this.getHead("pheasant", true));
          if (_0x490ca8) {
            _0x3b8ba2.save();
            var _0x4a4a37 = this.rad;
            _0x3b8ba2.drawImage(_0x490ca8, -_0x4a4a37 * _0x3f4e43, (-_0x4a4a37 + _0x4a4a37 * 0.2) * _0x3f4e43, 0x2 * _0x4a4a37 * _0x3f4e43, 0x2 * _0x4a4a37 * _0x3f4e43);
            _0x3b8ba2.restore();
          }
        }
      }
    } else {
      var _0x3f4e43 = 1.4705882352941178;
      if (this.flag_usingAbility) {
        _0x3b8ba2.save();
        var _0x310319 = 0x0;
        var _0x6b53a5 = this.getSkinImageObj(this.getWing("pheasant", 0x1, true));
        if (_0x6b53a5) {
          _0x3b8ba2.save();
          var _0x2a8dd6 = -(-0.2 + _0x310319) * (0xf * (Math.PI / 0xb4));
          var _0x4a4a37 = this.rad * 0.8;
          _0x3b8ba2.rotate(0xf * (Math.PI / 0xb4) + _0x2a8dd6);
          var _0x3eef98 = 0x0;
          var _0x32a8f2 = this.rad;
          var _0x405d19 = _0x4a4a37 * 0x2 * 0.7;
          var _0x5ed94d = _0x4a4a37 * 2.2;
          var _0x1d6564 = 0x0;
          var _0x7f4395 = 1.5;
          _0x3b8ba2.drawImage(_0x6b53a5, _0x3eef98 + _0x405d19 * -_0x1d6564, _0x32a8f2 + _0x5ed94d * -_0x7f4395, _0x405d19, _0x5ed94d);
          _0x3b8ba2.restore();
        }
        var _0x6b53a5 = this.getSkinImageObj(this.getWing("pheasant", 0x2, true));
        if (_0x6b53a5) {
          _0x3b8ba2.save();
          var _0x2a8dd6 = -(-0.2 + _0x310319) * (-0xf * (Math.PI / 0xb4));
          var _0x4a4a37 = this.rad * 0.8;
          _0x3b8ba2.rotate(-0xf * (Math.PI / 0xb4) + _0x2a8dd6);
          var _0x3eef98 = 0x0;
          var _0x32a8f2 = this.rad;
          var _0x405d19 = _0x4a4a37 * 0x2 * 0.7;
          var _0x5ed94d = _0x4a4a37 * 2.2;
          var _0x1d6564 = 0x1;
          var _0x7f4395 = 1.5;
          _0x3b8ba2.drawImage(_0x6b53a5, _0x3eef98 + _0x405d19 * -_0x1d6564, _0x32a8f2 + _0x5ed94d * -_0x7f4395, _0x405d19, _0x5ed94d);
          _0x3b8ba2.restore();
        }
        var _0x490ca8 = this.getSkinImageObj(this.getHead("pheasant", true));
        if (_0x490ca8) {
          _0x3b8ba2.save();
          var _0x4a4a37 = this.rad * 0x1;
          var _0x441572 = -this.rad * 0.1;
          _0x3b8ba2.drawImage(_0x490ca8, -_0x4a4a37 * _0x3f4e43, -_0x4a4a37 + _0x441572 * _0x3f4e43, 0x2 * _0x4a4a37 * _0x3f4e43, 0x2 * _0x4a4a37 * _0x3f4e43);
          _0x3b8ba2.restore();
        }
        _0x3b8ba2.restore();
      }
    }
  }
};
function _0x5dd576() {
  _0x5dd576.superClass.call(this, 0x2);
}
window.Pheasant = _0x5dd576;
_0x2b451a.setCustomClassForGameObjType(_0x5dd576, 0x2, _0x51f970);
var _0x53abbc = _0xf4bb63;
_0x1f811a.prototype = Object.create(_0x53abbc.prototype);
_0x1f811a.prototype.constructor = _0x1f811a;
_0x1f811a.superClass = _0x53abbc;
_0x1f811a.prototype.getSkinName = function () {
  return this.getSpeciesPath() + this.getSubSpecies() + "/flyinglizard" + (this.flag_usingAbility ? "_body" : '');
};
_0x1f811a.prototype.getSpeciesPath = function () {
  return "forest/flyinglizard/" + this.animalSpecies;
};
_0x1f811a.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x1f811a.prototype.animalInfo = function () {
  var _0x21bd38 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x21bd38.aniName = "Flying Lizard!";
      break;
  }
  _0x21bd38.skinName = this.getSkinName();
  _0x21bd38.aniDesc = '';
  _0x21bd38.upgradeText = "UPGRADED to " + _0x21bd38.aniName + "!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
  _0x21bd38.aniCol = "#FF9D43";
  return _0x21bd38;
};
_0x1f811a.prototype.getAbilityInfo = function (_0xd27b92) {
  var _0x29806d = {
    abilName: "Pull from Hole",
    abilImg: "abilities/Dig.svg",
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x29806d;
};
_0x1f811a.prototype.getAsset = function (_0x548b8e) {
  var _0x297a89 = "skins/" + this.getSpeciesPath() + "/flyinglizard";
  _0x297a89 += "_" + _0x548b8e + ".png";
  return _0x297a89;
};
_0x1f811a.prototype.backOffset = -0.4;
_0x1f811a.prototype.armsOffset = 0.16;
_0x1f811a.prototype.headOffset = 0.3;
_0x1f811a.prototype.wingsOffset = -0.5;
_0x1f811a.prototype.wingsScale = 1.5;
_0x1f811a.prototype.backScale = 1.1;
_0x1f811a.prototype.drawSkinCustomization = function () {
  if (this.flag_usingAbility) {
    this.drawAsset(1.4705882352941178, "arms", this.armsOffset);
    this.drawAsset(1.4705882352941178, "wings", this.wingsOffset, 1.4705882352941178 * this.wingsScale);
    this.drawAsset(1.4705882352941178, "back", this.backOffset, 1.4705882352941178 * this.backScale);
    this.drawAsset(1.4705882352941178, "head", this.headOffset);
  }
};
_0x1f811a.prototype.drawAsset = function (_0x3fbbd8, _0x5bff1a, _0x495567, _0x557432) {
  var _0x26be76 = this.getSkinImageObj(this.getAsset(_0x5bff1a));
  if (_0x26be76) {
    if (_0x495567 === undefined) {
      _0x495567 = 0x0;
    }
    if (_0x557432 === undefined) {
      _0x557432 = _0x3fbbd8;
    }
    _0x3b8ba2.save();
    var _0x3cb2ff = this.rad;
    _0x3b8ba2.drawImage(_0x26be76, -_0x3cb2ff * _0x3fbbd8, (-_0x3cb2ff + _0x3cb2ff * _0x495567) * _0x3fbbd8, 0x2 * _0x3cb2ff * _0x3fbbd8, 0x2 * _0x3cb2ff * _0x557432);
    _0x3b8ba2.restore();
  }
};
function _0x1f811a() {
  _0x1f811a.superClass.call(this, 0x2);
}
window.FlyingLizard = _0x1f811a;
_0x2b451a.setCustomClassForGameObjType(_0x1f811a, 0x2, 0x79);
var _0x53abbc = _0xf4bb63;
_0x182849.prototype = Object.create(_0x53abbc.prototype);
_0x182849.prototype.constructor = _0x182849;
_0x182849.superClass = _0x53abbc;
_0x182849.prototype.getSpeciesPath = function (_0xda178) {
  return "forest/" + _0xda178 + "/" + this.animalSpecies;
};
_0x182849.prototype.animalInfo = function () {
  var _0x22c36d = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x22c36d.aniName = "Tarsier!";
      break;
  }
  _0x22c36d.skinName = this.getSkinName();
  _0x22c36d.aniDesc = '';
  _0x22c36d.upgradeText = "UPGRADED to " + _0x22c36d.aniName + "!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
  _0x22c36d.aniCol = "#FF9D43";
  return _0x22c36d;
};
_0x182849.prototype.getSkinName = function () {
  return this.getSpeciesPath() + this.getSubSpecies() + "/tarsier" + (this.specType == 0x0 ? '' : this.specType);
};
_0x182849.prototype.getSpeciesPath = function () {
  return "forest/tarsier/" + this.animalSpecies;
};
_0x182849.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
function _0x182849() {
  _0x182849.superClass.call(this, 0x2);
}
window.Tarsier = _0x182849;
_0x2b451a.setCustomClassForGameObjType(_0x182849, 0x2, 0x71);
var _0x53abbc = _0xf4bb63;
_0x4c9765.prototype = Object.create(_0x53abbc.prototype);
_0x4c9765.prototype.constructor = _0x4c9765;
_0x4c9765.superClass = _0x53abbc;
_0x4c9765.prototype.getSpeciesPath = function (_0x2b2e40) {
  return "forest/" + _0x2b2e40 + "/" + this.animalSpecies;
};
_0x4c9765.prototype.animalInfo = function () {
  var _0x1af115 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x1af115.aniName = "Chukar!";
      break;
  }
  _0x1af115.skinName = this.getSkinName();
  _0x1af115.aniDesc = '';
  _0x1af115.upgradeText = "UPGRADED to " + _0x1af115.aniName + "!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!";
  _0x1af115.aniCol = "#FF9D43";
  return _0x1af115;
};
_0x4c9765.prototype.getSkinName = function () {
  return this.getSpeciesPath() + this.getSubSpecies() + "/chukar" + (this.specType == 0x0 ? '' : this.specType);
};
_0x4c9765.prototype.getSpeciesPath = function () {
  return "forest/chukar/" + this.animalSpecies;
};
_0x4c9765.prototype.getSubSpecies = function () {
  if (this.mopeSeasonID == 0x2) {
    if (this.animalSpecies === 0x0 && this.animalSubSpecies > 0x0) {
      return "/" + this.animalSubSpecies;
    }
  }
  return '';
};
_0x4c9765.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    return;
  }
  {
    if (this.flag_flying && !this.flag_isGrabbed) {
      _0x3b8ba2.save();
      var _0x3ae34b = _0x1d1686("bird", this.spawnTime);
      if (_0x3ae34b !== undefined && _0x3ae34b != null) {
        this.theFrame = _0x3ae34b;
      }
      var _0x2ace5d = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
      var _0x4b7f5a = this.getSkinImageObj(this.getAsset("wing1"));
      if (_0x4b7f5a) {
        _0x3b8ba2.save();
        var _0x1f89ef = -(-0.2 + _0x2ace5d) * _0x4bb70c;
        var _0x48a2a6 = this.rad * 0.8;
        _0x3b8ba2.rotate(_0x46d781 + _0x1f89ef);
        var _0xa151de = 0x0;
        var _0x57cb81 = this.rad;
        var _0x5da1b4 = _0x48a2a6 * 0x2 * 0.62;
        var _0x44e693 = _0x48a2a6 * 2.5;
        var _0x40f87d = 0.2;
        var _0x4bdd5f = 1.7;
        _0x3b8ba2.drawImage(_0x4b7f5a, _0xa151de + _0x5da1b4 * -_0x40f87d, _0x57cb81 + _0x44e693 * -_0x4bdd5f, _0x5da1b4, _0x44e693);
        _0x3b8ba2.restore();
      }
      var _0x4b7f5a = this.getSkinImageObj(this.getAsset("wing2"));
      if (_0x4b7f5a) {
        _0x3b8ba2.save();
        var _0x1f89ef = -(-0.2 + _0x2ace5d) * (-0x5a * (Math.PI / 0xb4));
        var _0x48a2a6 = this.rad * 0.8;
        _0x3b8ba2.rotate(-0x2d * (Math.PI / 0xb4) + _0x1f89ef);
        var _0xa151de = 0x0;
        var _0x57cb81 = this.rad;
        var _0x5da1b4 = _0x48a2a6 * 0x2 * 0.62;
        var _0x44e693 = _0x48a2a6 * 2.5;
        var _0x40f87d = 0.8;
        var _0x4bdd5f = 1.7;
        _0x3b8ba2.drawImage(_0x4b7f5a, _0xa151de + _0x5da1b4 * -_0x40f87d, _0x57cb81 + _0x44e693 * -_0x4bdd5f, _0x5da1b4, _0x44e693);
        _0x3b8ba2.restore();
      }
      _0x3b8ba2.restore();
    }
    if (this.specType != 0x0 && this.specType != undefined) {
      var _0x32e9f9 = this.getSkinImageObj(this.getAsset("head"));
      if (_0x32e9f9) {
        _0x3b8ba2.save();
        var _0x48a2a6 = this.rad;
        _0x3b8ba2.drawImage(_0x32e9f9, -_0x48a2a6 * 1.4705882352941178, (-_0x48a2a6 + _0x48a2a6 * 0.1) * 1.4705882352941178, 0x2 * _0x48a2a6 * 1.4705882352941178, 0x2 * _0x48a2a6 * 1.4705882352941178);
        _0x3b8ba2.restore();
      }
    }
  }
};
_0x4c9765.prototype.getAsset = function (_0x56b60a) {
  var _0x22d8d0 = "skins/" + this.getSpeciesPath() + "/chukar";
  _0x22d8d0 += "_" + _0x56b60a + ".png";
  return _0x22d8d0;
};
function _0x4c9765() {
  _0x4c9765.superClass.call(this, 0x2);
}
window.Chukar = _0x4c9765;
_0x2b451a.setCustomClassForGameObjType(_0x4c9765, 0x2, 0x72);
var _0x53abbc = _0x472b99;
_0x41e1bc.prototype = Object.create(_0x53abbc.prototype);
_0x41e1bc.prototype.constructor = _0x41e1bc;
_0x41e1bc.superClass = _0x53abbc;
_0x41e1bc.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x41e1bc.prototype.customDraw = function (_0x15a652) {
  var _0x3b2629 = this.getSkinImageObj("gameobj/" + this.oType + "/" + this.oType + "_" + this.speciesType + (this.isEdibleOutlined() ? "_e" : '') + ".png");
  if (_0x3b2629) {
    var _0x2c29b2 = this.rad;
    _0x3b8ba2.drawImage(_0x3b2629, -_0x2c29b2, -_0x2c29b2, 0x2 * _0x2c29b2, 0x2 * _0x2c29b2);
  }
};
_0x41e1bc.prototype.readCustomData_onNewlyVisible = function (_0x181338) {
  _0x41e1bc.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x181338);
  this.speciesType = _0x181338.readUInt16();
  this.speciesSubType = _0x181338.readUInt16();
};
function _0x41e1bc() {
  _0x41e1bc.superClass.call(this, 0x9f);
}
window.ThanksgivingFood = _0x41e1bc;
_0x2b451a.setCustomClassForGameObjType(_0x41e1bc, 0x9f);
var _0x53abbc = _0x472b99;
_0x5be218.prototype = Object.create(_0x53abbc.prototype);
_0x5be218.prototype.constructor = _0x5be218;
_0x5be218.prototype.rAngle = 0x0;
_0x5be218.prototype.rAngleF = 0.005;
_0x5be218.prototype.rAngleDirection = 0x1;
_0x5be218.superClass = _0x53abbc;
_0x5be218.prototype.updateZ = function () {
  if (this.isSnowFlake) {
    this.z = 0x2af8;
  } else {
    if (this.isStickingOnObject) {
      this.z = 0x1 + this.stickingOnObjectZIndex;
    } else {
      this.z = this.rad;
    }
  }
};
_0x5be218.prototype.customDraw = function (_0x50fb3e) {
  if (this.isSnowFlake) {
    _0x3b8ba2.globalAlpha = 0.9;
    _0x3b8ba2.globalAlpha = 0x1;
    var _0x16a837 = "gameobj/" + this.oType + "/snow-flake.png";
    var _0x7d57f6 = this.getSkinImageObj(_0x16a837);
    if (_0x7d57f6) {
      _0x3b8ba2.save();
      var _0x3d5c8f = this.rad * 0x1;
      this.rAngle += this.rAngleF * this.rAngleDirection;
      _0x3b8ba2.rotate(this.rAngle);
      _0x3b8ba2.drawImage(_0x7d57f6, -_0x3d5c8f, -_0x3d5c8f, _0x3d5c8f * 0x2, _0x3d5c8f * 0x2);
      _0x3b8ba2.restore();
    }
  } else {
    _0x3b8ba2.globalAlpha = 0x1;
    var _0x16a837 = "gameobj/" + this.oType + "/" + this.oType + ".png";
    var _0x7d57f6 = this.getSkinImageObj(_0x16a837);
    if (_0x7d57f6) {
      _0x3b8ba2.save();
      var _0x3d5c8f = this.rad * 0x1;
      _0x3b8ba2.rotate(this.rPer * 0x2 * Math.PI);
      _0x3b8ba2.drawImage(_0x7d57f6, -_0x3d5c8f, -_0x3d5c8f, _0x3d5c8f * 0x2, _0x3d5c8f * 0x2);
      _0x3b8ba2.restore();
    }
  }
};
_0x5be218.prototype.isSnowFlake = true;
_0x5be218.prototype.isStickingOnObject = false;
_0x5be218.prototype.stickingOnObjectZIndex = 0x0;
_0x5be218.prototype.readUpdatedProperty = function (_0x432a9d, _0x5e2f6d) {
  _0x5be218.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x5e2f6d);
  if (_0x432a9d == 0x73) {
    this.isSnowFlake = _0x5e2f6d.readUInt8() == 0x1;
  } else {
    if (_0x432a9d == 0x74) {
      this.isStickingOnObject = _0x5e2f6d.readUInt8() == 0x1;
    } else {
      if (_0x432a9d == 0x75) {
        let _0x4312d6 = _0x5e2f6d.readUInt32();
        let _0xa0093b = _0x5c52f8[_0x4312d6];
        if (_0xa0093b) {
          this.stickingOnObjectZIndex = _0xa0093b.z;
        }
      }
    }
  }
};
_0x5be218.prototype.readCustomData_onNewlyVisible = function (_0x4e3d7d) {
  this.readUpdatedProperty(0x73, _0x4e3d7d);
  this.readUpdatedProperty(0x74, _0x4e3d7d);
  this.readUpdatedProperty(0x75, _0x4e3d7d);
};
function _0x5be218() {
  _0x5be218.superClass.call(this, 0x6a);
  this.rAngleDirection = _0x4421b3(0x0, 0x1) == 0x0 ? 0x1 : -0x1;
}
window.Snow = _0x5be218;
_0x2b451a.setCustomClassForGameObjType(_0x5be218, 0x6a);
class _0x21cb20 {
  constructor() {
    this.ENDPOINTS = {
      "GET_INCENTIVIZED_AD_SKINS": "/getIncentivizedAdSkins",
      "REDEEM_INCENTIVIZED_AD_REWARD": "/redeemIncentivizedAdReward"
    };
    this.url = _0x902c25 && $config.useDevAccountServer ? $config.devAccountServerUrl : "https://mope-accountserver-do.mope.io";
  }
  async ["getIncentivizedAdSkins"]({
    sessionId: _0x5792ea,
    serverId: _0x419e8e,
    userId: _0x5626a8,
    passwordToken: _0x159cc1
  }) {
    try {
      const _0x16fea3 = await fetch('' + this.url + this.ENDPOINTS.GET_INCENTIVIZED_AD_SKINS, {
        "method": "POST",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": JSON.stringify({
          "sessionId": _0x5792ea,
          "serverId": _0x419e8e,
          "userId": _0x5626a8,
          "passwordToken": _0x159cc1
        })
      });
      const _0x123e72 = await _0x16fea3.json();
      return _0x123e72;
    } catch (_0x2c9624) {
      console.log("::: AccountServerService - getIncentivzedAdSkins() ::: ERROR", _0x2c9624);
      return {
        "success": false,
        "error": _0x2c9624
      };
    }
  }
  async ["redeemIncentivizedAdReward"]({
    sessionId: _0x26454d,
    serverId: _0x4d252a,
    userId: _0x2f27fa,
    passwordToken: _0x4588c6
  }) {
    try {
      const _0x5383ee = {
        "sessionId": _0x26454d,
        "serverId": _0x4d252a,
        "userId": _0x2f27fa,
        "passwordToken": _0x4588c6
      };
      const _0x342f32 = await fetch('' + this.url + this.ENDPOINTS.REDEEM_INCENTIVIZED_AD_REWARD, {
        "method": "POST",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": JSON.stringify(_0x5383ee)
      });
      const _0x58adc1 = await _0x342f32.json();
      return _0x58adc1;
    } catch (_0x12fc77) {
      console.log("::: AccountServerService - redeemIncentivizedAdReward() ::: ERROR", _0x12fc77);
      return {
        "success": false,
        "error": _0x12fc77
      };
    }
  }
}
const _0x4eaa45 = new _0x21cb20();
class _0x3209ee {
  static ["localStorageKeyName"] = "totalSessionsSinceLastAd";
  static ["onIncentivizedAdStatus"];
  static ["onIncentivizedAdComplete"];
  static ["incrementSessionCount"]() {
    const _0xa3f98 = window.localStorage.getItem(_0x3209ee.localStorageKeyName);
    if (_0xa3f98) {
      let _0x49be50 = parseInt(_0xa3f98);
      if (!isNaN(_0x49be50)) {
        if (_0x49be50 === 0x3) {
          _0x49be50 = 0x0;
        } else {
          _0x49be50 += 0x1;
        }
        window.localStorage.setItem(_0x3209ee.localStorageKeyName, _0x49be50);
      }
    }
  }
  static ["shouldShowIncentivzedAdPopup"]({
    sessionCount: _0x113262,
    userClickedButton: _0x352193
  }) {
    return _0x113262 === 0x3 && _0x170772 || _0x352193;
  }
  static async ["handleShowIncentivizedAdPopup"]({
    userClickedButton: _0x1f77d6
  }) {
    const _0x2e5469 = window.localStorage.getItem(_0x3209ee.localStorageKeyName);
    if (_0x2e5469) {
      const _0xa082e9 = parseInt(_0x2e5469);
      if (!isNaN(_0xa082e9) || _0x1f77d6) {
        const _0x318ece = _0x3209ee.shouldShowIncentivzedAdPopup({
          "sessionCount": _0xa082e9,
          "userClickedButton": _0x1f77d6
        });
        if (_0x318ece) {
          const _0x5ae238 = {
            "sessionId": _0x192f81.serverInfo.sessionId,
            "serverId": _0x192f81.serverInfo.serverId,
            "userId": _0x4c129a,
            "passwordToken": _0x325d70
          };
          _0x4eaa45.getIncentivizedAdSkins(_0x5ae238).then(_0x4657e7 => {
            const {
              success: _0x18b20a
            } = _0x4657e7;
            if (_0x18b20a) {
              const {
                skinData: _0x13b042
              } = _0x4657e7;
              const _0x5547d3 = _0x13b042.map(_0x188a49 => {
                const _0x5206f2 = _0x8db18e.prototype.getAnimalInfo(_0x188a49.itemName);
                return [..._0x5206f2, _0x188a49.season];
              });
              $bus.emit($bus.EVENTS.SHOW_INCENTIVIZED_AD_POPUP, {
                "skins": _0x5547d3
              });
            } else {
              const {
                error: _0x2ad931
              } = _0x4657e7;
              _0x54e075(_0x2ad931, "error", 0xbb8);
            }
          });
        }
        _0x3209ee.incrementSessionCount();
      }
    } else {
      window.localStorage.setItem(_0x3209ee.localStorageKeyName, 0x1);
    }
  }
  static async ["playNativeIncentivizedVideoAd"]() {
    const _0x36024c = await _0x562bd4.showRewardAd();
    if (_0x36024c.success) {
      console.log("::: native-ad ::: Played Native Incentivized Ad", _0x36024c.data);
      gtag("event", "incentivzed_ad", {
        "event_category": "incentivized_ads",
        "event_label": "ad_finished",
        "value": "ad_finished"
      });
      _0x3209ee.handleFinishedWatchingAd();
    } else {
      console.log("::: native-ad ::: Error playing incentivized ad:", _0x36024c.error);
      gtag("event", "native_incentivized_ad", {
        "event_category": "native_incentivized_ads",
        "event_label": "failed_to_play",
        "value": "failed_to_play"
      });
    }
  }
  static async ["playIncentivizedVideoAd"]() {
    if (_0x562bd4.hasRivetNative) {
      return await this.playNativeIncentivizedVideoAd();
    }
    const _0x448dd7 = await _0x227930();
    if (_0x448dd7) {
      return _0x54e075("Disable Ad Block to get a free skin for 24 hours!", "success", 0xbb8);
    }
    console.log("::: ad-tech ::: Attempting to play Incentivized Ad");
    let _0x3eefc8 = null;
    setTimeout(() => {
      if (!_0x3eefc8) {
        _0x3209ee.handleFinishedWatchingAd();
        console.log("::: ad-tech ::: Failed to play Incentivized Ads.");
        gtag("event", "incentivized_ad", {
          "event_category": "incentivized_ads",
          "event_label": "failed_to_play",
          "value": "failed_to_play"
        });
      }
    }, 0x2710);
    $bus.emit($bus.EVENTS.PLAYING_WEBSITE_INCENTIVIZED_AD);
    if (_0x1c65d6) {
      _0x7b6cf7.showVideoAd();
    } else {
      if (!_0x3209ee.onIncentivizedAdStatus) {
        _0x3209ee.onIncentivizedAdStatus = _0x549c64 => {
          _0x3eefc8 = _0x549c64.state;
          console.log("::: ad-tech ::: playIncentivizedVideoAd status:", _0x549c64.state);
          if (_0x3eefc8 === "empty") {
            console.log("::: ad-tech ::: Incentivized Ad Queue is Empty");
            gtag("event", "incentivized_ad", {
              "event_category": "incentivized_ads",
              "event_label": "ad_queue_empty",
              "value": "ad_queue_empty"
            });
            $bus.emit($bus.EVENTS.FINISHED_INCENTIVIZED_AD);
          } else {
            if (_0x3eefc8 === "closed") {
              console.log("::: ad-tech ::: Incentivized Ad Skipped");
              gtag("event", "incentivized_ad", {
                "event_category": "incentivized_ads",
                "event_label": "ad_skipped",
                "value": "ad_skipped"
              });
              $bus.emit($bus.EVENTS.FINISHED_INCENTIVIZED_AD);
            } else {
              if (_0x3eefc8 === "timeout") {
                console.log("::: ad-tech ::: Incentivized Ad Timed Out");
                gtag("event", "incentivized_ad", {
                  "event_category": "incentivized_ads",
                  "event_label": "ad_timeout",
                  "value": "ad_timeout"
                });
                $bus.emit($bus.EVENTS.FINISHED_INCENTIVIZED_AD);
              } else if (_0x3eefc8 === "unsupported") {
                console.log("::: ad-tech ::: Incentivized Ad Unsupported");
                gtag("event", "incentivized_ad", {
                  "event_category": "incentivized_ads",
                  "event_label": "ad_unsupported",
                  "value": "ad_unsupported"
                });
                $bus.emit($bus.EVENTS.FINISHED_INCENTIVIZED_AD);
              }
            }
          }
        };
        window.addEventListener("aip-reward-status", _0x3209ee.onIncentivizedAdStatus);
      }
      if (!_0x3209ee.onIncentivizedAdComplete) {
        _0x3209ee.onIncentivizedAdComplete = () => {
          _0x3eefc8 = "finished";
          console.log("::: ad-tech ::: Incentivized Ad Finished Playing");
          _0x3209ee.handleFinishedWatchingAd();
          gtag("event", "incentivzed_ad", {
            "event_category": "incentivized_ads",
            "event_label": "ad_finished",
            "value": "ad_finished"
          });
        };
        window.addEventListener("aip-reward-complete", _0x3209ee.onIncentivizedAdComplete);
      }
      if (typeof aiptag.adplayer !== "undefined") {
        "::: ad-tech ::: playIncentivizedVideoAd callback hit! ";
        aiptag.cmd.player.push(function () {
          aiptag.adplayer.startRewardedAd();
        });
        gtag("event", "incentivized_ad", {
          "event_category": "incentivized_ads",
          "event_label": "started",
          "value": "started"
        });
      }
    }
  }
  static ["handleFinishedWatchingAd"]() {
    try {
      _0x4eaa45.redeemIncentivizedAdReward({
        "sessionId": _0x192f81.serverInfo.sessionId,
        "serverId": _0x192f81.serverInfo.serverId,
        "userId": _0x4c129a,
        "passwordToken": _0x325d70
      }).then(_0x5ba602 => {
        const {
          success: _0x5cb9c1,
          reward: _0x5c3eb8
        } = _0x5ba602;
        if (!_0x5cb9c1) {
          return _0x54e075(_0x5ba602.error, "error", 0xfa0);
        }
        gtag("event", "incentivized_ad", {
          "event_category": "incentivized_ads",
          "event_label": "reward_awarded",
          "value": "reward_awarded"
        });
        const _0x459db6 = new _0x449657(null, _0x5c3eb8.animalType);
        const _0xe1c7ff = _0x8db18e.prototype.getAnimalInfo(_0x5c3eb8.itemName);
        const _0x3a4381 = _0x4895d1({
          "animalType": _0x5c3eb8.animalType
        });
        const _0x2c1b21 = [{
          "name": _0x3a4381.abilityName,
          "img": _0x3a4381.abilityImage,
          "desc": "Left click to " + _0x3a4381.abilityName
        }];
        if (_0x459db6 && _0xe1c7ff && _0x3a4381) {
          $bus.emit($bus.EVENTS.ADD_SHOP_ITEM, {
            "isNew": true,
            "skinName": _0xe1c7ff[0x2],
            "itemName": _0x5c3eb8.itemName,
            "tier": _0x5c3eb8.tier,
            "shopImage": "/assets/s/" + _0x5c3eb8.season + "/skins/" + _0xe1c7ff[0x3] + ".png",
            "data": {
              "info": "Unlocked for 24 hours."
            },
            "isOnSale": false,
            "isFree": false,
            "finalPrice": -0x1,
            "purchasedByPlayer": true,
            "itemType": "skin",
            "isTemporary": true
          });
          $bus.emit($bus.EVENTS.FINISHED_INCENTIVIZED_AD, {
            "rewardType": "skin",
            "tier": _0x5c3eb8.tier,
            "season": _0x5c3eb8.season,
            "biome": _0x459db6.biomeName,
            "name": _0xe1c7ff[0x2],
            "img": _0xe1c7ff[0x3],
            "abilities": _0x2c1b21
          });
        }
      });
    } catch (_0x22712b) {
      $bus.emit($bus.EVENTS.FINISHED_INCENTIVIZED_AD);
    }
  }
}
$bus.on($bus.EVENTS.HANDLE_INCENTIVIZED_AD, () => _0x3209ee.handleShowIncentivizedAdPopup({
  "userClickedButton": true
}));
var _0x53abbc = _0x472b99;
_0x2fccc4.prototype = Object.create(_0x53abbc.prototype);
_0x2fccc4.prototype.constructor = _0x2fccc4;
_0x2fccc4.superClass = _0x53abbc;
_0x2fccc4.prototype.foodType = 0x0;
_0x2fccc4.prototype.updateZ = function () {
  this.z = this.rad;
};
_0x2fccc4.prototype.customDraw = function (_0xe1a4e1) {
  _0x3b8ba2.save();
  var _0x2f6d13 = "gameobj/" + this.oType + "/" + this.oType + "_" + this.foodType + '' + (this.isEdibleOutlined() ? "_e" : '') + ".png";
  var _0x222de9 = this.getSkinImageObj(_0x2f6d13);
  if (_0x222de9) {
    var _0x30f4f8 = this.rad;
    _0x3b8ba2.save();
    _0x3b8ba2.rotate(this.rPer * 0.5 * Math.PI * 0x2);
    _0x3b8ba2.drawImage(_0x222de9, -_0x30f4f8, -_0x30f4f8, 0x2 * _0x30f4f8, 0x2 * _0x30f4f8);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
_0x2fccc4.prototype.readCustomData_onNewlyVisible = function (_0x53b498) {
  this.foodType = _0x53b498.readUInt8();
};
function _0x2fccc4() {
  _0x2fccc4.superClass.call(this, 0xa0);
  this.doesDrawEffectScale = true;
}
window.ValentineFood = _0x2fccc4;
_0x2b451a.setCustomClassForGameObjType(_0x2fccc4, 0xa0);
var _0x53abbc = _0x472b99;
_0x55a134.prototype = Object.create(_0x53abbc.prototype);
_0x55a134.prototype.constructor = _0x55a134;
_0x55a134.superClass = _0x53abbc;
_0x55a134.prototype.updateZ = function () {
  this.z = 0xf4240;
};
_0x55a134.prototype.customDraw = function (_0x3ba6ca) {
  console.log("sand storm created...");
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0.4;
  _0x133658(0x0, 0x0, this.rad, "#000");
  _0x3b8ba2.restore();
};
_0x55a134.prototype.readCustomData_onNewlyVisible = function (_0x40a5c5) {
  this.alpha = _0x40a5c5.readUInt8() / 0x64;
};
_0x55a134.prototype.readUpdatedProperty = function (_0x31cbb0, _0x4daabc) {
  if (_0x31cbb0 == 0x26) {
    this.alpha = _0x4daabc.readUInt8() / 0x64;
  }
};
function _0x55a134() {
  _0x55a134.superClass.call(this, 0xa1);
  this.alpha = 0x9;
}
window.SandStorm = _0x55a134;
_0x2b451a.setCustomClassForGameObjType(_0x55a134, 0xa1);
var _0x2995b5 = _0x5dd231;
var _0x53abbc = _0x472b99;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x5dd231.prototype.customDraw = function (_0x462fdd) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = 0x1;
  _0x133658(0x0, 0x0, this.rad, this.color);
  _0x3b8ba2.restore();
};
_0x5dd231.prototype.updateZ = function () {
  this.z = 0x2710 + this.rad;
};
function _0x5dd231() {
  _0x5dd231.superClass.call(this);
  this.color = _0x4421b3(0x0, 0x1) == 0x1 ? "#D2B48C" : "#F0E68C";
  this.spawnTime = _0x1f4c9e;
}
window.SandShard = _0x5dd231;
_0x2b451a.setCustomClassForGameObjType(_0x5dd231, 0xa2);
var _0x36c59b = _0x36c59b;
var _0x53abbc = _0xf4bb63;
_0x36c59b.prototype = Object.create(_0x53abbc.prototype);
_0x36c59b.prototype.constructor = _0x36c59b;
_0x36c59b.superClass = _0x53abbc;
_0x36c59b.prototype.getSkinName = function () {
  var _0x203857 = this.getSpeciesPath("land/birdmonster") + "/birdmonster";
  _0x203857 += this.specType == 0x0 ? '' : this.specType;
  return _0x203857;
};
_0x36c59b.prototype.animalInfo = function () {
  var _0x4e1927 = {};
  switch (this.animalSpecies) {
    case 0x0:
      _0x4e1927.aniName = "Bird Monster";
      break;
  }
  _0x4e1927.upgradeText = "UPGRADED to " + _0x4e1927.aniName + "! \nPress W to Fly, and do a powerful Electro Swoop attack! Aim it well.\nPress S to create Gale charge and Electro Tornado" + '';
  _0x4e1927.aniCol = "#FF9000";
  var _0x58d0e5 = '' + (this.specType == 0x0 ? '' : this.specType);
  if (this.specType2 == 0x4) {
    _0x58d0e5 += "4";
  }
  _0x4e1927.skinName = "land/birdmonster/" + this.animalSpecies + "/birdmonster" + _0x58d0e5;
  return _0x4e1927;
};
_0x36c59b.prototype.getWing = function (_0x58f907, _0x4f30c1, _0x2a5572) {
  _0x2a5572 = true;
  var _0x37f93f = "skins/land/" + (_0x2a5572 ? this.getSpeciesPath(_0x58f907) + "/" : _0x58f907 + "/");
  _0x37f93f += _0x58f907 + "_wing" + _0x4f30c1 + ".png";
  return _0x37f93f;
};
_0x36c59b.prototype.getHead = function (_0x47d078, _0x4d3961, _0x1085e6) {
  _0x1085e6 = true;
  headType = this.specType;
  if (this.specType2 == 0x1) {
    headType = 0x4;
  }
  var _0x343047 = "skins/land/" + (_0x1085e6 ? this.getSpeciesPath(_0x47d078) + "/" : _0x47d078 + "/");
  _0x343047 += _0x47d078 + "_head" + headType + ".png";
  return _0x343047;
};
_0x36c59b.prototype.getWindImage = function (_0x141110) {
  hasSpecies = true;
  var _0x5d98d5 = "skins/land/" + (hasSpecies ? this.getSpeciesPath("birdmonster") + "/" : "birdmonster/");
  _0x5d98d5 += "tailwind/" + _0x141110 + ".png";
  return _0x5d98d5;
};
_0x36c59b.prototype.getElectroChargeImage = function (_0x25e8e4) {
  hasSpecies = true;
  var _0x19821a = "skins/land/" + (hasSpecies ? this.getSpeciesPath("birdmonster") + "/" : "birdmonster/");
  _0x19821a += "charge/" + _0x25e8e4 + ".png";
  return _0x19821a;
};
_0x36c59b.prototype.getAbilityInfo = function (_0x107110) {
  var _0x139f64 = {
    abilName: "Electro Swoop & Gale Charge",
    abilImg: "abilities/SkyDive.svg",
    speciesType: this.animalSpecies,
    skinThemeID: this.skinThemeID,
    mopeSeasonID: this.mopeSeasonID
  };
  return _0x139f64;
};
var _0x37d112 = 0x14;
var _0x286271 = 0x1;
var _0x12a454 = 0x1;
var _0x1a2cab = 0x0;
var _0x4734d9 = undefined;
_0x36c59b.prototype.drawTopEffects = function () {
  _0x36c59b.superClass.prototype.drawTopEffects.call(this);
  this.drawElectroChargeEffect();
};
_0x36c59b.prototype.drawSkinCustomization = function () {
  if (!this.flag_usingAbility) {
    _0x4734d9 = undefined;
    return;
  }
  if (!this.flag_flying) {
    var _0x1e87fb = _0x1d1686("bird", this.spawnTime);
    if (_0x1e87fb !== undefined && _0x1e87fb != null) {
      this.theFrame = _0x1e87fb;
    }
    var _0x2508e4 = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
    var _0x56736c = this.rad * _0xfe7dc4;
    _0x321b6b = -0.2;
    _0x449b0a = 1.4;
    _0x12a454 = 0.25;
    var _0x1b9e1e = 0x0;
    if (_0x4734d9 == undefined) {
      _0x4734d9 = _0x1f4c9e;
    } else {
      let _0x216284 = (_0x1f4c9e - _0x4734d9) / 0x3e8;
      _0x1b9e1e = _0x216284 / 0x6 * 0x10e;
    }
    if (_0x1b9e1e > 0x10e) {
      _0x1b9e1e = 0x10e;
    }
    var _0x49faa0;
    var _0xc6180a;
    var _0x56af91;
    _0x49faa0 = _0x1b9e1e * (Math.PI / 0xb4);
    _0xc6180a = 0x0;
    _0x56af91 = true;
    this.drawImageCustom("birdmonster", 0xd, _0x2508e4, _0x56736c, _0x49faa0, _0xc6180a, _0x56af91);
    this.drawImageCustom("birdmonster", 0x17, _0x2508e4, _0x56736c, -_0x49faa0, 0x1, _0x56af91);
  } else {
    if (this.flag_flying && !this.flag_isGrabbed) {
      _0x37d112 = 0x14;
      _0x286271 = 0x1;
      _0x12a454 = 0x1;
      _0x1a2cab = 0x0;
      var _0x1e87fb = _0x1d1686("bird", this.spawnTime);
      if (_0x1e87fb !== undefined && _0x1e87fb != null) {
        this.theFrame = _0x1e87fb;
      }
      var _0x2508e4 = !(_0x4bda0b == 0x2 || _0x11da90) ? this.theFrame : this.birdNoAnimationFlyWingAngle;
      var _0x56736c = this.rad * _0xfe7dc4;
      var _0x49faa0;
      var _0xc6180a;
      var _0x56af91;
      if (this.specType == 0x1) {
        _0x286271 = 1.1;
        _0x12a454 = 0.25;
        _0x1a2cab = 0xb4;
        _0x49faa0 = (0x3c + _0x1a2cab) * (Math.PI / 0xb4);
        _0xc6180a = 0x0;
        _0x56af91 = false;
      } else {
        if (this.specType == 0x2) {
          _0x2508e4 = 0x0;
          _0x49faa0 = 0x19 * (Math.PI / 0xb4);
          _0xc6180a = 0x0;
          _0x56af91 = false;
        } else if (this.specType == 0x3) {
          _0x49faa0 = 0x2d * (Math.PI / 0xb4);
          _0xc6180a = 0x0;
          _0x56af91 = true;
        }
      }
      this.drawImageCustom("birdmonster", 0x1, _0x2508e4, _0x56736c, _0x49faa0, _0xc6180a, _0x56af91);
      this.drawImageCustom("birdmonster", 0x2, _0x2508e4, _0x56736c, -_0x49faa0, 0x1, _0x56af91);
    }
  }
  if (this.specType != 0x0 && this.specType != undefined) {
    var _0x491b89 = this.getSkinImageObj(this.getHead("/birdmonster", true));
    if (_0x491b89) {
      _0x3b8ba2.save();
      var _0x56736c = this.rad * 0.9;
      var _0x1e1405 = _0x56736c * _0x321b6b;
      _0x3b8ba2.drawImage(_0x491b89, -_0x56736c * 1.4705882352941178, (-_0x56736c + _0x1e1405) * 1.4705882352941178, 0x2 * _0x56736c * 1.4705882352941178, 0x2 * _0x56736c * 1.4705882352941178);
      _0x3b8ba2.restore();
    }
  }
};
_0x36c59b.prototype.flag_eff_electroCharged = false;
_0x36c59b.prototype.drawElectroChargeEffect = function () {
  if (this.flag_eff_electroCharged === true) {
    var _0x1159f7 = Math.trunc(_0x1f4c9e / 0xfa) % 0x4;
    var _0x2b2ccd = this.getSkinImageObj(this.getElectroChargeImage(_0x1159f7));
    if (_0x2b2ccd) {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = _0x2bd878 == this.id ? 0.7 : 0x1;
      var _0xff993c = this.rad * 1.2;
      _0x3b8ba2.rotate(this.angle);
      _0x3b8ba2.drawImage(_0x2b2ccd, -_0xff993c, -_0xff993c, 0x2 * _0xff993c, 0x2 * _0xff993c);
      _0x3b8ba2.restore();
    }
  }
};
_0x36c59b.prototype.drawImageCustom = function (_0x21818a, _0x24eb8d, _0x29f1ed, _0x2ae648, _0x13c220, _0x19bc68, _0x33a064) {
  var _0x2936e9 = this.getSkinImageObj(this.getWing(_0x21818a, _0x24eb8d, _0x33a064));
  if (_0x2936e9) {
    _0x3b8ba2.save();
    _0x13c220 = -(-0.2 + _0x29f1ed * _0x12a454) * _0x13c220;
    _0x3b8ba2.rotate(_0x13c220 * _0x286271);
    var _0x5235ab = this.rad;
    var _0x1eef08 = _0x2ae648 * 0x2 * _0xfe7dc4;
    var _0xa19c47 = _0x2ae648 * 2.5;
    var _0x2f1a61 = _0x449b0a;
    _0x3b8ba2.drawImage(_0x2936e9, 0x0 + _0x1eef08 * -_0x19bc68, _0x5235ab + _0xa19c47 * -_0x2f1a61, _0x1eef08, _0xa19c47);
    _0x3b8ba2.restore();
  }
};
var _0x449b0a = 1.5;
var _0xfe7dc4 = 0.8;
var _0x152b9e = 0x1;
var _0x2176a1 = 1.6;
_0x36c59b.prototype.basicDrawSkinImg = function () {
  this.setSkinScale();
  var _0x567331 = this.skinScale;
  var _0x1fbf1f = this.getAniRadius(this.skinRad);
  if (this.loadedSkinImg) {
    _0x3b8ba2.drawImage(this.loadedSkinImg, -_0x1fbf1f - _0x1fbf1f * 0.5, -_0x1fbf1f - _0x1fbf1f * 0.8, 0x2 * _0x1fbf1f * _0x567331, 0x2 * _0x1fbf1f * (_0x567331 * 1.2));
  }
};
_0x36c59b.prototype.drawUnderSkinImgOutline = function () {
  _0x36c59b.superClass.prototype.drawUnderSkinImgOutline.call(this);
  if (this.flag_usingAbility && this.flag_flying && this.specType == 0x2) {
    var _0x30a030 = -0x2;
    var _0x12550d = 0x1 + Math.trunc(_0x1f4c9e / 0x78) % 0x5;
    var _0x143ee3 = this.getSkinImageObj(this.getWindImage(_0x12550d));
    if (_0x143ee3) {
      _0x3b8ba2.save();
      var _0x34be82 = this.rad * 0x1;
      var _0x199ee4 = _0x34be82 * _0x30a030;
      var _0x1df38a = _0x34be82 * 0x0;
      _0x3b8ba2.drawImage(_0x143ee3, -_0x34be82 + _0x1df38a, -_0x34be82 + _0x199ee4 * 0x2, 0x2 * _0x34be82, 0x2 * _0x34be82 * 0x2);
      _0x3b8ba2.restore();
    }
  }
};
_0x36c59b.prototype.customUpdatedProperty = function (_0x427c8a, _0xffbf7b) {
  if (_0x427c8a == 0x79) {
    this.flag_eff_electroCharged = _0xffbf7b.readUInt8() == 0x1;
  } else {
    if (_0x427c8a == 0x7a) {
      var _0x2d699c = this.activeAbility;
      this.activeAbility = _0xffbf7b.readUInt16();
      if (_0x2d699c != this.activeAbility) {
        this.onAbilityChanged(_0x2d699c);
      }
    }
  }
};
var _0x321b6b = 0.3;
_0x36c59b.prototype.activeAbility = 0x0;
_0x36c59b.prototype.onAbilityChanged = function (_0x5c0b80) {
  console.log("prev ability: " + _0x5c0b80);
  console.log("curr ability: " + this.activeAbility);
  if (this.activeAbility == 0x0) {
    _0x321b6b = 0.3;
    _0x449b0a = 1.5;
    _0xfe7dc4 = 0.8;
    _0x152b9e = 0x1;
    _0x2176a1 = 1.6;
  }
};
_0x36c59b.prototype.readCustomData_onNewlyVisible = function (_0xa16368) {
  _0x36c59b.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0xa16368);
  this.customUpdatedProperty(0x79, _0xa16368);
};
function _0x36c59b() {
  _0x36c59b.superClass.call(this, 0x2);
}
window.BirdMonster = _0x36c59b;
_0x2b451a.setCustomClassForGameObjType(_0x36c59b, 0x2, _0xc764f6);
var _0x2995b5 = _0x52d88f;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x52d88f.prototype.customDraw = function (_0x50a3b4) {
  _0x3b8ba2.save();
  var _0x15392e = _0x3b8ba2.globalAlpha;
  _0x3b8ba2.globalAlpha = 0.05 * _0x15392e;
  _0x133658(0x0, 0x0, this.rad, "#E4E7C8");
  var _0x7d72b = "crater" + this.curBiome;
  console.log("birdmonster crater: " + _0x7d72b);
  _0x3b8ba2.globalAlpha = 0x1 * _0x15392e;
  var _0x5e4bb5 = "skins/land/birdmonster/" + this.speciesType + "/" + _0x7d72b + ".png";
  var _0x11cf29 = this.getSkinImageObj(_0x5e4bb5);
  if (_0x11cf29) {
    _0x3b8ba2.save();
    var _0x41b881 = this.rad;
    _0x3b8ba2.drawImage(_0x11cf29, -_0x41b881, -_0x41b881, 0x2 * _0x41b881, 0x2 * _0x41b881);
    _0x3b8ba2.restore();
  }
  _0x3b8ba2.restore();
};
_0x52d88f.prototype.getSkinImageObj = function (_0x1b4ec6) {
  var _0x330e3f = this.speciesType === 0x1 || this.speciesType === 0x2 || this.speciesType === 0xc9 ? 0x1 : 0x2;
  var _0x5843d0 = "./assets/s/" + _0x330e3f + "/" + _0x1b4ec6;
  if (this.skinThemeID > 0x0) {
    _0x5843d0 = "./assets/t/" + this.skinThemeID + "/" + _0x1b4ec6;
  }
  return _0x3df4ce(_0x5843d0, function (_0x144911) {
    console.log(_0x144911.src);
  });
};
_0x52d88f.prototype.readCustomData_onNewlyVisible = function (_0x4225f5) {
  _0x52d88f.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x4225f5);
};
_0x52d88f.prototype.readCustomData_onUpdate = function (_0x4b9478) {
  _0x52d88f.superClass.prototype.readCustomData_onUpdate.call(this, _0x4b9478);
};
function _0x52d88f() {
  _0x52d88f.superClass.call(this);
}
window.BirdMonsterCrater = _0x52d88f;
_0x2b451a.setCustomClassForGameObjType(_0x52d88f, 0xe, 0x90);
var _0x53abbc = _0x472b99;
_0x58761e.prototype = Object.create(_0x53abbc.prototype);
_0x58761e.prototype.constructor = _0x58761e;
_0x58761e.superClass = _0x53abbc;
_0x58761e.prototype.updateZ = function () {
  this.z = 0x2710 + this.rad;
};
_0x58761e.prototype.customDraw = function (_0x3745c4) {
  var _0x231349 = "skins/land/birdmonster/" + this.speciesType + "/tornado.png";
  var _0x53a7e6 = this.getSkinImageObj(_0x231349);
  if (_0x53a7e6) {
    var _0x51b1f8 = this.rad * 1.1;
    if (!_0x11da90 && !(_0x4bda0b == 0x2)) {
      var _0x188e6d = 1;
      var _0x4bf9dc = 0x3e8 / _0x188e6d;
      var _0x5bf92a = (_0x1f4c9e - this.spawnTime) % _0x4bf9dc / _0x4bf9dc;
      var _0x26341f = _0x5bf92a * 0x2 * Math.PI;
      var _0x188e6d = 0.5;
      var _0x4bf9dc = 0x3e8 / _0x188e6d;
      var _0x5bf92a = (_0x1f4c9e - this.spawnTime) % _0x4bf9dc / _0x4bf9dc;
      var _0x34c8ce = _0x5bf92a * 0x2 * Math.PI;
      _0x3b8ba2.save();
      _0x3b8ba2.rotate(_0x26341f);
      var _0xa1682f = _0x3b8ba2.globalAlpha;
      _0x3b8ba2.globalAlpha = 0x1 * _0xa1682f;
      var _0x39db8a = (_0x1f4c9e - this.spawnTime) / 0x3e8;
      var _0x31951d = 6.5 * Math.cos(0x2 * Math.PI / 2.2 * _0x39db8a);
      _0x3b8ba2.globalAlpha = 0.3;
      _0x3b8ba2.drawImage(_0x53a7e6, -_0x51b1f8 - _0x31951d / 2.2, -_0x51b1f8, 0x2 * _0x51b1f8, 0x2 * _0x51b1f8);
      _0x3b8ba2.restore();
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0.7;
      _0x3b8ba2.rotate(_0x34c8ce);
      _0x3b8ba2.drawImage(_0x53a7e6, -_0x51b1f8 - _0x31951d / 2.2, -_0x51b1f8, 0x2 * _0x51b1f8, 0x2 * _0x51b1f8);
      _0x3b8ba2.restore();
    } else {
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = 0.7;
      _0x3b8ba2.drawImage(_0x53a7e6, -_0x51b1f8, -_0x51b1f8, 0x2 * _0x51b1f8, 0x2 * _0x51b1f8);
      _0x3b8ba2.restore();
    }
  }
};
function _0x58761e() {
  _0x58761e.superClass.call(this, 0xa3);
  this.doesDrawEffectScale = false;
  this.drawEffectScale_Slow = true;
}
window.ElectroTornado = _0x58761e;
_0x2b451a.setCustomClassForGameObjType(_0x58761e, 0xa3);
var _0x53abbc = _0x472b99;
_0x66f9c0.prototype = Object.create(_0x53abbc.prototype);
_0x66f9c0.prototype.constructor = _0x66f9c0;
_0x66f9c0.superClass = _0x53abbc;
_0x66f9c0.prototype.updateZ = function () {
  this.z = 0x2710 + this.rad;
};
_0x66f9c0.prototype.customDraw = function (_0x1e86f5) {
  var _0x2e6727 = "skins/land/birdmonster/" + this.speciesType + "/electric-charge.png";
  var _0xf17afc = this.getSkinImageObj(_0x2e6727);
  if (_0xf17afc) {
    _0x3b8ba2.save();
    var _0x2ad853 = this.rad * 0x1;
    _0x3b8ba2.rotate(this.angle);
    _0x3b8ba2.drawImage(_0xf17afc, -_0x2ad853, -_0x2ad853, _0x2ad853 * 0x2, _0x2ad853 * 0x2);
    _0x3b8ba2.restore();
  }
};
function _0x66f9c0() {
  _0x66f9c0.superClass.call(this, 0xa4);
}
window.ElectricCharge = _0x66f9c0;
_0x2b451a.setCustomClassForGameObjType(_0x66f9c0, 0xa4);
var _0x2995b5 = _0x45b40b;
var _0x53abbc = _0x593a9b;
_0x2995b5.prototype = Object.create(_0x53abbc.prototype);
_0x2995b5.prototype.constructor = _0x2995b5;
_0x2995b5.superClass = _0x53abbc;
_0x45b40b.prototype.customDraw = function (_0x2b8936) {
  _0x3b8ba2.save();
  _0x3b8ba2.rotate(this.angle);
  _0x3b8ba2.globalAlpha = this.alpha < 0.7 ? this.alpha : 0.7;
  var _0x2c1b76 = "skins/land/birdmonster/" + this.speciesType + "/wind.png";
  var _0x4f0a3b = this.getSkinImageObj(_0x2c1b76);
  if (_0x4f0a3b) {
    var _0xb19198 = this.rad * 1.25;
    _0x3b8ba2.drawImage(_0x4f0a3b, -_0xb19198, -_0xb19198, 0x2 * _0xb19198, 0x2 * _0xb19198);
  }
  _0x3b8ba2.restore();
};
_0x45b40b.prototype.updateZ = function () {
  this.z = 0x2710 - this.rad;
};
_0x45b40b.prototype.readCustomData_onNewlyVisible = function (_0x4d5cc7) {
  this.alpha = _0x4d5cc7.readUInt8() / 0x64;
};
_0x45b40b.prototype.readUpdatedProperty = function (_0x576f24, _0x13de30) {
  if (_0x576f24 == 0x26) {
    this.alpha = _0x13de30.readUInt8() / 0x64;
  }
};
function _0x45b40b() {
  _0x45b40b.superClass.call(this);
  this.spawnTime = _0x1f4c9e;
  this.alpha = 0x0;
}
window.GaleCharge = _0x45b40b;
_0x2b451a.setCustomClassForGameObjType(_0x45b40b, 0xe, 0x91);
var _0x53abbc = _0x472b99;
_0x1a6f58.prototype = Object.create(_0x53abbc.prototype);
_0x1a6f58.prototype.constructor = _0x1a6f58;
_0x1a6f58.superClass = _0x53abbc;
_0x1a6f58.prototype.lookAngle = 0x0;
_0x1a6f58.prototype.frameNumber = 0x0;
_0x1a6f58.prototype.isRolling = false;
_0x1a6f58.prototype.biomeType = false;
_0x1a6f58.prototype.updateZ = function () {
  this.z = 0x3ea;
};
_0x1a6f58.prototype.customDraw = function (_0x59ca92) {
  var _0x152e96 = 0x1;
  var _0x5aa6d1 = 0.15;
  var _0x3ed03b = 0.8;
  var _0x33b6b5 = 0.5 * (_0x3ed03b - _0x5aa6d1);
  var _0x152e96 = 0x1;
  var _0x5aa6d1 = 0.85;
  var _0x3ed03b = 0x1;
  var _0x33b6b5 = 0.5 * (_0x3ed03b - _0x5aa6d1);
  if (this.isRolling) {
    this.frameNumber = Math.trunc(_0x1f4c9e / 0xa6) % 0x6;
  }
  var _0x25c2a0 = "gameobj/" + this.oType + "/" + this.biomeType + "/" + this.frameNumber + ".png";
  var _0x53acf0 = this.getSkinImageObj(_0x25c2a0);
  if (_0x53acf0) {
    var _0x59dad4 = this.rad;
    var _0x355741 = this.rad * 2.5;
    imH = this.rad * 2.5;
    _0x3b8ba2.save();
    {
      _0x3b8ba2.globalAlpha *= this.onFireEffA * 0x1;
      _0x3b8ba2.rotate(this.angle + _0x10fe04);
      _0x3b8ba2.drawImage(_0x53acf0, 0x0 + _0x355741 * -0.5, _0x59dad4 + imH * -0.95, _0x355741, imH);
    }
    _0x3b8ba2.restore();
  }
};
_0x1a6f58.prototype.isFloating = false;
_0x1a6f58.prototype.isRolling = false;
_0x1a6f58.prototype.readUpdatedProperty = function (_0x528733, _0x34b6c4) {
  if (_0x528733 == 0x12) {
    this.isFloating = _0x34b6c4.readUInt8() == 0x1;
  } else if (_0x528733 == 0x11) {
    this.isRolling = _0x34b6c4.readUInt8() == 0x1;
  }
};
_0x1a6f58.prototype.readCustomData_onNewlyVisible = function (_0x207cb8) {
  this.biomeType = _0x207cb8.readUInt8();
  this.isRolling = _0x207cb8.readUInt8() == 0x1;
  this.isFloating = _0x207cb8.readUInt8() == 0x1;
};
function _0x1a6f58() {
  _0x1a6f58.superClass.call(this, 0xa5);
  this.lookAngle = 0x0;
  this.isRolling = false;
  this.biomeType = false;
  this.doesDrawEffectScale = true;
  this.drawEffectScale_Slow = true;
}
window.MopeBall = _0x1a6f58;
_0x2b451a.setCustomClassForGameObjType(_0x1a6f58, 0xa5);
_0x4fdd9d.preloadImages();
function _0x5a53d0() {
  var _0x5ba96d = _0x57b481("audio/click.mp3");
  if (_0x5ba96d) {
    try {
      _0x5ba96d.play();
    } catch (_0x3498bb) {}
  }
}
_0x57b481("audio/click.mp3");
_0x414a31();
_0x45a1f5();
var _0x35584e = [];
function _0x5dd199(_0x467796) {
  switch (_0x467796) {
    case 0x65:
    case 0x3:
    case 0x8:
    case 0x1b:
    case 0x9:
    case 0xd:
    case 0x4:
    case 0x63:
    case 0x28:
    case 0xa:
    case 0xb:
      return true;
  }
  return false;
}
var _0x4867ae = null;
var _0x33f543 = null;
const _0x39ce3e = function (_0x220b91) {
  var _0x223591 = _0x220b91.readBitGroup();
  var _0x2a2c02 = _0x223591.getBool();
  if (_0x2a2c02) {
    var _0x5ed619 = _0x223591.getBool();
    if (_0x5ed619) {
      vID = _0x220b91.readUInt32();
      if (_0x33f543 == null) {
        _0x33f543 = {
          "id": vID
        };
        _0x33f543._ox = _0x33f543.X = _0x33f543._nx = 0x0;
        _0x33f543._oy = _0x33f543.Y = _0x33f543._ny = 0x0;
      }
      var _0x71f030 = _0x220b91.readUInt32() / 0x64;
      var _0xff0129 = _0x220b91.readUInt32() / 0x64;
      _0x33f543._ox = _0x33f543.X;
      _0x33f543._oy = _0x33f543.Y;
      _0x33f543._nx = _0x71f030;
      _0x33f543._ny = _0xff0129;
    } else {
      _0x33f543 = null;
    }
  } else {
    _0x33f543 = null;
  }
};
const _0x3611c6 = function () {
  var _0x45ea86 = _0x5c52f8[_0x2bd878];
  if (_0x33f543 == null || !_0x45ea86) {
    return;
  }
  _0x4a7764();
  _0x3b8ba2.save();
  _0x3b8ba2.strokeStyle = "white";
  _0x3b8ba2.globalAlpha = 0x1;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.moveTo(_0x45ea86.x, _0x45ea86.y);
  _0x3b8ba2.lineTo(_0x33f543.X, _0x33f543.Y);
  _0x3b8ba2.stroke();
  _0x3b8ba2.restore();
};
const _0x4a7764 = function () {
  _0x33f543.X = 0.1 * (_0x33f543._nx - _0x33f543._ox) + _0x33f543._ox;
  _0x33f543.Y = 0.1 * (_0x33f543._ny - _0x33f543._oy) + _0x33f543._oy;
};
var _0x1b05e8 = new Array();
const _0x4630c6 = function (_0xa8e768) {
  var _0x5d4836 = _0xa8e768.readUInt8();
  _0x1b05e8 = new Array();
  for (i = 0x0; i < _0x5d4836; i++) {
    var _0x566140 = _0xa8e768.readUInt16();
    var _0x3a884a = _0xa8e768.readUInt8();
    if (_0x3a884a > 0x0) {
      for (s = 0x0; s < _0x3a884a; s++) {
        var _0xab04ba = _0xa8e768.readUInt16() / 0x4;
        var _0x5267b3 = _0xa8e768.readUInt16() / 0x4;
        if (_0x566140 == 0x83) {
          var _0x21b733 = _0xa8e768.readUInt8() == 0x1;
          var _0x49329a = _0xa8e768.readUInt8();
          _0x1b05e8.push({
            "oType": _0x566140,
            "specType": _0x49329a,
            "x": _0xab04ba,
            "y": _0x5267b3,
            "rad": 0x2,
            "droppedInHole": _0x21b733
          });
        } else {
          if (_0x566140 == 0x67) {
            var _0x49329a = _0xa8e768.readUInt8();
            _0x1b05e8.push({
              "oType": _0x566140,
              "specType": _0x49329a,
              "x": _0xab04ba,
              "y": _0x5267b3,
              "rad": 0x2
            });
          } else {
            _0x1b05e8.push({
              "oType": _0x566140,
              "x": _0xab04ba,
              "y": _0x5267b3,
              "rad": 0x2
            });
          }
        }
      }
    }
  }
  var _0x3a884a = _0xa8e768.readUInt8();
  for (s = 0x0; s < _0x3a884a; s++) {
    var _0x3f786c = _0xa8e768.readUInt16();
    var _0x2b34ea = _0xa8e768.readUInt16() / 0x4;
    var _0xab04ba = _0xa8e768.readUInt16() / 0x4;
    var _0x5267b3 = _0xa8e768.readUInt16() / 0x4;
    _0x1b05e8.push({
      "oType": 0xe,
      "abil": _0x3f786c,
      "x": _0xab04ba,
      "y": _0x5267b3,
      "angle": _0x2b34ea,
      "rad": 0x2
    });
  }
};
const _0x45ee22 = function (_0x5951fe) {
  _0x5727ca = {};
  var _0x35108b = _0x5951fe.readUInt8() == 0x1;
  if (_0x35108b) {
    var _0xbecf53 = _0x5951fe.readUInt8();
    _0x5727ca = {};
    _0x5727ca.treesCount = _0xbecf53;
    for (i = 0x0; i < _0xbecf53; i++) {
      _0x5727ca[_0x5951fe.readUInt32()] = 0x1;
    }
  }
};
function _0x453c16(_0x434228) {
  var _0x1add6e = [];
  _0x1add6e.rank = _0x434228.readUInt16();
  _0x1add6e.topRank = _0x434228.readUInt16();
  _0x1add6e.timeAlive = _0x434228.readUInt16();
  _0x1add6e.totalKills = _0x434228.readUInt16();
  _0x1add6e.maxXP = _0x434228.readUInt32();
  return _0x1add6e;
}
var _0x3fad8d = null;
var _0x510e85 = 0x0;
function _0x59d70c(_0x4894ed) {
  _0x510e85 = _0x2c7985 * 0.6;
  if (_0x3fad8d == null) {
    _0x3fad8d = document.createElement("canvas");
  }
  var _0x53fc20 = _0x3fad8d.getContext("2d");
  var _0x4792c9 = 0x37;
  _0x4792c9 = 210;
  _0x3fad8d.width = 430;
  _0x3fad8d.height = _0x4792c9;
  _0x53fc20.globalAlpha = 0.2;
  _0x53fc20.fillStyle = "#000000";
  _0x53fc20.fillRect(0x0, 0x0, _0x3fad8d.width, _0x3fad8d.height);
  _0x53fc20.fillStyle = "#000000";
  _0x53fc20.fillRect(0x5, 0x5, _0x3fad8d.width - 10, _0x3fad8d.height - 10);
  var _0xeac64d = 60;
  _0x53fc20.globalAlpha = 0x1;
  _0x53fc20.fillStyle = "#FFFFFF";
  _0x53fc20.font = "30px Arial";
  var _0x74b0c6 = "YOU DIED!";
  _0x53fc20.font = "30px Arial";
  _0x53fc20.fillText(_0x74b0c6, _0x3fad8d.width / 0x2 - _0x53fc20.measureText(_0x74b0c6).width / 0x2, _0xeac64d);
  _0x53fc20.font = "20px Arial";
  _0xeac64d += 0x2d;
  _0x74b0c6 = "You were #" + _0x4894ed.rank;
  _0x53fc20.fillText(_0x74b0c6, _0x3fad8d.width / 0x2 - _0x53fc20.measureText(_0x74b0c6).width / 0x2, _0xeac64d);
  _0xeac64d += 0x28;
  var _0x4db00d = _0x4ec1fc(_0x4894ed.timeAlive);
  var _0x42eedf = 20;
  _0x27ab59(_0x53fc20, "Time Alive", _0x4db00d, _0x42eedf, _0xeac64d);
  _0x42eedf += 0xd2;
  _0x27ab59(_0x53fc20, "Total Kills", _0x4894ed.totalKills, _0x42eedf, _0xeac64d);
  _0xeac64d += 0x28;
  _0x42eedf = 20;
  _0x27ab59(_0x53fc20, "Top rank", _0x4894ed.topRank, _0x42eedf, _0xeac64d);
  _0x42eedf += 0xd2;
  _0x27ab59(_0x53fc20, "Max XP", _0x40c2b6(_0x4894ed.maxXP, 0x0), _0x42eedf, _0xeac64d);
}
function _0x345827(_0xfb5d49, _0x1e2277, _0x1dd92c, _0x16395c, _0x2fb66d, _0xd0a852) {
  if (_0x4bda0b == 0x2) {
    return;
  }
  _0x3b8ba2.save();
  var _0x432fbe = _0x1dd92c - _0xfb5d49;
  var _0x43e5a8 = _0x16395c - _0x1e2277;
  var _0x2cd645 = _0x485584 / 0x2 / _0x53126a;
  var _0x577703 = _0x2c7985 / 0x2 / _0x53126a;
  _0xfb5d49 = Math.max(_0xfb5d49, _0x9f8d15 - _0x2cd645 - _0x2fb66d + 0x0);
  _0x1e2277 = Math.max(_0x1e2277, _0x4a5a9f - _0x577703 - _0xd0a852 + 0x0);
  _0x1dd92c = Math.min(_0x1dd92c, _0x9f8d15 + _0x2cd645 - _0x2fb66d - 0x0);
  _0x16395c = Math.min(_0x16395c, _0x4a5a9f + _0x577703 - _0xd0a852 - 0x0);
  _0x3b8ba2.strokeStyle = "black";
  _0x3b8ba2.globalAlpha = 0.055;
  var _0x560eea = _0x1dd92c - _0xfb5d49;
  fillH = _0x16395c - _0x1e2277;
  for (var _0x54a779 = -0.5 + _0xfb5d49 + (_0x432fbe - _0xfb5d49) % 0x1e; _0x54a779 < _0xfb5d49 + _0x560eea; _0x54a779 += 0x1e) {
    _0x3b8ba2.beginPath();
    _0x3b8ba2.moveTo(_0x54a779, _0x1e2277);
    _0x3b8ba2.lineTo(_0x54a779, _0x1e2277 + fillH);
    _0x3b8ba2.stroke();
  }
  for (dy = -0.5 + _0x1e2277 + (_0x43e5a8 - _0x1e2277) % 0x1e; dy < _0x1e2277 + fillH; dy += 0x1e) {
    _0x3b8ba2.beginPath();
    _0x3b8ba2.moveTo(_0xfb5d49, dy);
    _0x3b8ba2.lineTo(_0xfb5d49 + _0x560eea, dy);
    _0x3b8ba2.stroke();
  }
  _0x3b8ba2.restore();
}
const _0x3e1828 = function () {
  _0x38d75f = false;
  _0x3bd073 = false;
  if (_0x444b0f) {
    return;
  }
  _0x40d246();
  if (_0x248a2e || true) {
    return;
  }
  _0x2bbb30(false);
};
$bus.on($bus.EVENTS.START_GAME, _0x3e1828);
$bus.on($bus.EVENTS.UI_SPECTATE, () => {
  _0x1b09d5();
});
$bus.on($bus.EVENTS.BLOCK_PLAYER_MOVEMENT, _0x5f460c => {
  _0x16104f = _0x5f460c;
});
const _0x1b09d5 = function () {
  if (!_0x444b0f) {
    var _0x1e03da = new _0x1c4421(0x1);
    _0x1e03da.writeUInt8(0x38);
    _0x446c6b(_0x1e03da);
  }
};
var _0x2bc1ba = false;
var _0x18c47f = false;
let _0x3497ca = false;
$bus.on($bus.EVENTS.UI_PRESSED_ENTER, () => {
  _0x3497ca = true;
  setTimeout(() => {
    _0x3497ca = false;
  }, 0x1f4);
});
function _0x41f447(_0x59b286) {
  var _0x2b7332 = document.getElementById("chatinput");
  switch (_0x59b286.key) {
    case "ArrowLeft":
      if (_0x59b286.ctrlKey) {
        var _0xa00501 = _0x2b7332.style.width;
        _0xa00501 = _0xa00501.replace("px", '');
        _0xa00501 = Number(_0xa00501) - 0x5;
        _0x2b7332.style.width = _0xa00501 + "px";
      } else {
        var _0xa00501 = _0x2b7332.style.left;
        _0xa00501 = _0xa00501.replace("px", '');
        _0xa00501 = Number(_0xa00501) - 0x5;
        _0x2b7332.style.left = _0xa00501 + "px";
      }
      break;
    case "ArrowRight":
      if (_0x59b286.ctrlKey) {
        var _0xa00501 = _0x2b7332.style.width;
        _0xa00501 = _0xa00501.replace("px", '');
        _0xa00501 = Number(_0xa00501) + 0x5;
        _0x2b7332.style.width = _0xa00501 + "px";
      } else {
        var _0xa00501 = _0x2b7332.style.left;
        _0xa00501 = _0xa00501.replace("px", '');
        _0xa00501 = Number(_0xa00501) + 0x5;
        _0x2b7332.style.left = _0xa00501 + "px";
      }
      break;
    case "ArrowUp":
      var _0xa00501 = _0x2b7332.style.top;
      _0xa00501 = _0xa00501.replace("px", '');
      _0xa00501 = Number(_0xa00501) - 0x5;
      _0x2b7332.style.top = _0xa00501 + "px";
      break;
    case "ArrowDown":
      var _0xa00501 = _0x2b7332.style.top;
      _0xa00501 = _0xa00501.replace("px", '');
      _0xa00501 = Number(_0xa00501) + 0x5;
      _0x2b7332.style.top = _0xa00501 + "px";
      break;
  }
}
var _0x45f543 = false;
var _0x61b9da = true;
function _0x28fc5a(_0x552479) {
  if (_0x552479.indexOf("/anim-switch:") != -0x1) {
    var _0xce0e60 = _0x552479.replace("/anim-switch:", '');
    switch (_0xce0e60) {
      case "honeybee":
        _0x498079 = !_0x498079;
        return true;
      case "phoenix":
        _0x10772e = !_0x10772e;
        return true;
    }
  }
  return _0x3ee764(_0x552479);
}
var _0x556bdd = false;
const _0x3ee764 = function (_0x3e0ec4) {
  if (!_0x902c25 && !_0x53fc25) {
    return false;
  }
  if (_0x3e0ec4.indexOf("chatbox:") != -0x1) {
    var _0x3bcee4 = _0x3e0ec4.replace("chatbox:", '');
    switch (_0x3bcee4) {
      case "edit:start":
        _0x45f543 = true;
        break;
      case "edit:end":
        var _0x32db2b = document.getElementById("chatinput");
        var _0xaeb490 = {
          "autoLoad": _0x61b9da,
          "left": _0x32db2b.style.left,
          "top": _0x32db2b.style.top,
          "width": _0x32db2b.style.width
        };
        localStorage.setItem("chatbox", JSON.stringify(_0xaeb490));
        _0x45f543 = false;
        break;
      case "set:autoload":
        _0x61b9da = true;
        break;
      case "load":
        var _0x32db2b = document.getElementById("chatinput");
        var _0xaeb490 = JSON.parse(localStorage.getItem("chatbox"));
        _0x32db2b.style.left = _0xaeb490.left;
        _0x32db2b.style.top = _0xaeb490.top;
        _0x32db2b.style.width = _0xaeb490.width;
        break;
      case "reset":
        var _0x32db2b = document.getElementById("chatinput");
        _0x32db2b.style.left = '';
        _0x32db2b.style.right = '';
        _0x32db2b.style.width = '';
        break;
    }
    return;
  }
  switch (_0x3e0ec4) {
    case "show:interface":
      _0x38d115 = true;
      _0x594e87 = true;
      _0x4fb5be = true;
      _0x1a97c8 = true;
      _0x4b799d = true;
      _0x5ac5b7 = true;
      _0x556bdd = false;
      return true;
    case "hide:interface":
      _0x38d115 = false;
      _0x594e87 = false;
      _0x4fb5be = false;
      _0x1a97c8 = false;
      _0x4b799d = false;
      _0x5ac5b7 = false;
      _0x556bdd = true;
      return true;
    case "show:map":
      _0x38d115 = true;
      return true;
    case "show:xpbar":
      _0x4fb5be = true;
      return true;
    case "show:board":
      _0x594e87 = true;
      return true;
    case "show:waterbar":
      _0x1a97c8 = true;
      return true;
    case "show:1v1":
      _0x5ac5b7 = true;
      return true;
    case "show:ability":
      _0x4b799d = true;
      return true;
    case "hide:map":
      _0x38d115 = false;
      return true;
    case "hide:xpbar":
      _0x4fb5be = false;
      return true;
    case "hide:board":
      _0x594e87 = false;
      return true;
    case "hide:waterbar":
      _0x1a97c8 = false;
      return true;
    case "hide:1v1":
      _0x5ac5b7 = false;
      return true;
    case "hide:ability":
      _0x4b799d = false;
      return true;
  }
  return false;
};
function _0x4f3a67(_0x2a66ba) {
  if (_0xe2ab1e) {
    var _0x46560d = JSON.parse(localStorage.getItem("chatbox"));
    if (_0x2a66ba && _0x46560d && _0x46560d.autoLoad) {
      var _0x40d5dd = document.getElementById("chatinput");
      _0x40d5dd.style.left = _0x46560d.left;
      _0x40d5dd.style.top = _0x46560d.top;
      _0x40d5dd.style.width = _0x46560d.width;
    }
  }
}
_0x4f3a67(true);
const _0x4347b2 = function () {
  if (!_0x170772 && _0x414d65) {
    return;
  }
  var _0x5a3071 = document.getElementById("chatinput");
  if (!_0x2bc1ba && _0x5f5cae) {
    _0x5a3071.style.visibility = "visible";
    _0x5a3071.focus();
    _0x2bc1ba = true;
    if (_0x53fc25) {
      _0x5a3071.maxLength = 0x64;
    }
    _0x5a3071.onblur = function () {
      if (_0x2bc1ba) {
        _0x4347b2();
      }
    };
  } else {
    if (_0x2bc1ba) {
      var _0x475cf3 = _0x5a3071.value + '';
      _0x2bc1ba = false;
      _0x5a3071.style.visibility = "hidden";
      if (_0x475cf3.length > 0x0 && _0x5f5cae) {
        if (!_0x28fc5a(_0x475cf3)) {
          newMsg = new _0x1c4421(0x3 + unescape(encodeURIComponent(_0x475cf3)).length);
          newMsg.writeUInt8(0x13);
          newMsg.writeString(_0x475cf3);
          _0x446c6b(newMsg);
        }
      }
      _0x5a3071.value = '';
    }
  }
};
var _0x57fc6f = 0x3e8;
var _0x4db334 = 0x3e8;
function _0x3d88df() {
  _0x219d8c = 0xc8;
}
function _0x349219() {
  _0x57fc6f = window.innerWidth;
  _0x4db334 = window.innerHeight;
  if (_0xf66a12) {
    _0x57fc6f = document.body.clientWidth;
    _0x4db334 = document.body.clientHeight;
  }
  switch (_0x4bda0b) {
    case 0x1:
    case 0x2:
      _0x43e85b = 0.6 * window.devicePixelRatio;
      break;
    case 0x3:
      _0x43e85b = window.devicePixelRatio;
      break;
    default:
      console.log("Unknown graphics level " + _0x4bda0b);
  }
  _0x485584 = _0x57fc6f * _0x43e85b;
  _0x2c7985 = _0x4db334 * _0x43e85b;
  _0x301800 = _0x43e85b * Math.max(_0x57fc6f / 0x780, _0x4db334 / 0x438);
}
function _0x414a31() {
  _0x349219();
  _0x2751fb = null;
  _0x14e258.width = _0x485584;
  _0x14e258.height = _0x2c7985;
  _0x14e258.style.width = _0x57fc6f + "px";
  _0x14e258.style.height = _0x4db334 + "px";
  var _0x472aeb = document.getElementById("chatinput");
  _0x472aeb.style.marginTop = _0x4db334 / 0x2 - 0x32 + "px";
  _0x459004();
  if (_0x192f81 && _0x192f81.ws && _0x192f81.ws.readyState === WebSocket.OPEN) {
    mes = new _0x1c4421(0x7);
    mes.writeUInt8(0x11);
    mes.writeUInt16(_0x485584);
    mes.writeUInt16(_0x2c7985);
    _0x3d88df();
    mes.writeUInt16(_0x219d8c);
    _0x446c6b(mes);
  }
  if (_0x388788 != null) {
    _0x388788.onResize();
  }
  _0x33a49f(_0x480f5b);
}
window.onresize = _0x414a31;
function _0x43bc11(_0x59095a) {
  var _0x46fe50 = new _0x1c4421(0x2);
  _0x46fe50.writeUInt8(0x15);
  _0x46fe50.writeUInt8(_0x59095a ? 0x1 : 0x0);
  _0x446c6b(_0x46fe50);
}
function _0x107c51(_0x1323da, _0xc8d4d7) {
  switch (_0x1323da) {
    case 0x1:
      {
        if (_0xdc801 != _0xc8d4d7) {
          if (_0x192f81 && _0x192f81.ws && _0x192f81.ws.readyState === WebSocket.OPEN && _0x5f5cae) {
            if (_0xc8d4d7) {
              _0xf8bec2();
            }
            _0x43bc11(_0xc8d4d7);
            if (_0x274629 > 0x0) {
              var _0x590080 = new _0x1c4421(0x5);
              _0x590080.writeUInt8(0x44);
              _0x590080.writeUInt32(_0x274629);
              _0x446c6b(_0x590080);
              _0x274629 = 0x0;
            }
          }
        }
        _0xdc801 = _0xc8d4d7;
      }
      break;
    case 0x2:
      {
        if (_0x51f15e != _0xc8d4d7) {
          if (_0x192f81 && _0x192f81.ws && _0x192f81.ws.readyState === WebSocket.OPEN && _0x5f5cae) {
            if (_0xc8d4d7) {
              _0xf8bec2();
            }
            var _0x590080 = new _0x1c4421(0x2);
            _0x590080.writeUInt8(0x14);
            _0x590080.writeUInt8(_0xc8d4d7 ? 0x1 : 0x0);
            _0x446c6b(_0x590080);
          }
        }
        _0x51f15e = _0xc8d4d7;
      }
      break;
    case 0x3:
      {
        if ((_0x902c25 || _0x53fc25) && _0x5f5cae) {
          var _0x590080 = new _0x1c4421(0x1);
          _0x590080.writeUInt8(0x1a);
          _0x446c6b(_0x590080);
        }
      }
      break;
    case 0x4:
      {
        if ((_0x902c25 || _0x53fc25) && _0x5f5cae) {
          var _0x590080 = new _0x1c4421(0x1);
          _0x590080.writeUInt8(0x1b);
          _0x446c6b(_0x590080);
        }
      }
      break;
    case 0x5:
      {
        if (_0x5f5cae) {
          var _0x590080 = new _0x1c4421(0x2);
          _0x590080.writeUInt8(0x1c);
          _0x590080.writeUInt8(_0xc8d4d7 ? 0x1 : 0x0);
          _0x446c6b(_0x590080);
        }
      }
      break;
    case 0x6:
      {
        if (_0x5f5cae && _0x53fc25) {
          var _0x590080 = new _0x1c4421(0x2);
          _0x590080.writeUInt8(0x1e);
          _0x590080.writeUInt8(_0xc8d4d7 ? 0x1 : 0x0);
          _0x446c6b(_0x590080);
        }
      }
      break;
    case 0x7:
      {
        if (_0x5f5cae && _0x53fc25) {
          var _0x590080 = new _0x1c4421(0x2);
          _0x590080.writeUInt8(0x1d);
          _0x590080.writeUInt8(_0xc8d4d7 ? 0x1 : 0x0);
          _0x446c6b(_0x590080);
        }
      }
      break;
  }
}
function _0x45e8c3() {
  if (!_0x2bc1ba && _0x5f5cae) {
    if (document.activeElement && document.activeElement != _0x14e258) {
      if (_0x14e258) {
        console.log("canvas is focused now!");
        _0x14e258.focus();
      }
    } else {}
  }
}
_0x14e258.onblur = function (_0x5c040f) {
  _0x44b701(_0x5c040f);
};
window.onfocus = function (_0x39888f) {
  _0x42c0f6(_0x39888f);
};
function _0x44b701(_0x2ef4f7) {
  if (_0x51f15e || _0xdc801) {
    return;
  }
  _0x107c51(0x1, false);
  _0x107c51(0x2, false);
}
function _0x42c0f6(_0x16f70b) {
  _0x40d246();
}
document.oncontextmenu = document.body.oncontextmenu = function () {
  return !_0x5f5cae;
};
function _0x433dd6() {
  var _0x1f79ae = _0x485584 / 0x2;
  var _0x33b327 = _0x2c7985 / 0x2;
  _0x84fdf7 = (_0x35adbe - (_0x1f79ae - _0x9f8d15 * _0x53126a)) / _0x53126a;
  _0x2cc7d6 = (_0x30f4c1 - (_0x33b327 - _0x4a5a9f * _0x53126a)) / _0x53126a;
}
function _0x59dc12(_0x1e6bec) {
  return _0x1e6bec * _0x53126a + (_0x485584 / 0x2 - _0x9f8d15 * _0x53126a);
}
function _0x4030b5(_0xd3ed07) {
  return _0xd3ed07 * _0x53126a + (_0x2c7985 / 0x2 - _0x4a5a9f * _0x53126a);
}
function _0x22231a(_0x1b9e98) {
  return (_0x1b9e98 - (_0x485584 / 0x2 - _0x9f8d15 * _0x53126a)) / _0x53126a;
}
function _0x3494d7(_0x555564) {
  return (_0x555564 - (_0x2c7985 / 0x2 - _0x4a5a9f * _0x53126a)) / _0x53126a;
}
function _0xf8bec2() {
  if (_0x18c47f || _0x16104f) {
    var _0x1ada2b = _0x5c52f8[_0x2bd878];
    if (_0x1ada2b) {
      _0x84fdf7 = _0x1ada2b.x;
      _0x2cc7d6 = _0x1ada2b.y + 0x2;
    } else {
      return;
    }
  }
  if (_0x192f81 && _0x192f81.ws && _0x192f81.ws.readyState === WebSocket.OPEN && (_0x5f5cae || _0x11f79b)) {
    if (Math.abs(_0x62de65 - _0x84fdf7) > 0.1 || Math.abs(_0x1f2d53 - _0x2cc7d6) > 0.1) {
      _0x62de65 = _0x84fdf7;
      _0x1f2d53 = _0x2cc7d6;
      mes = new _0x1c4421(7);
      mes.writeUInt8(0x5);
      mes.writeInt16(_0x84fdf7);
      mes.writeInt16(_0x2cc7d6);
      _0x446c6b(mes);
    }
  }
}
setInterval(_0xf8bec2, 0xa);
setInterval(_0x171db0, 0x1388);
function _0x45a1f5() {
  _0x414a31();
  _0x3eca11 = 0x0;
  _0x5c52f8 = {};
  _0x40bb76 = [];
  _0x581b8a = [];
  _0x2a6191 = 0x19;
  _0x1f73ce = _0x2b49a7 = 0x0;
  _0x1e791c(_0x1f73ce);
  curBarPerc_n = _0x5531b5 = 0x64;
  _0x198c8b = _0x5e0baa = _0x5b916c = 0x0;
  _0x3a6545(_0x5b916c);
  _0x47971a = null;
  _0x444b0f = false;
  _0x565399 = null;
  _0x24704c = '';
  _0x5b2837();
  _0x1d6ac7 = false;
  _0x29479c = 0x0;
  _0x184a26 = [];
  _0xb7589f = false;
  _0x4b86f0 = [];
  _0x99cd04 = 0x0;
  _0x281ad8 = 0x0;
  isInfected = _0x11da90 = false;
  _0x4bf4b8 = 0x0;
  _0x44469a = false;
  _0x3236f2 = 0x0;
  _0x48efb1 = [];
  _0x1e91ae = null;
  _0x69d6ce = false;
  _0x364866 = 0x0;
  _0x1bd0dc = 0x0;
  _0x53fc25 = false;
  _0x11f79b = false;
  _0x3fad8d = null;
  $bus.emit($bus.EVENTS.RESET_GAME);
}
$bus.on($bus.EVENTS.UI_UPDATED_PLAYERNAME, _0x42baa3 => {
  if (typeof _0x315411 !== "undefined") {
    _0x315411 = _0x42baa3;
    if (window.localStorage) {
      try {
        window.localStorage.setItem("nick", _0x42baa3);
      } catch (_0x1440e7) {}
    }
  }
});
window.onload = function () {
  _0x414a31();
  if (window.localStorage) {
    var _0x310d74 = window.localStorage.getItem("nick");
    if (_0x310d74) {
      if (typeof _0x315411 !== "undefined") {
        _0x315411 = _0x310d74;
      }
      $bus.emit($bus.EVENTS.CLIENT_UPDATED_PLAYERNAME, {
        "name": _0x310d74,
        "focusInput": !_0x28c607,
        "setInputRangeToEnd": true
      });
    }
  }
};
if (_0x14e258.addEventListener) {
  _0x14e258.addEventListener("mousewheel", _0x56b700);
  _0x14e258.addEventListener("DOMMouseScroll", _0x56b700);
} else {
  _0x14e258.attachEvent("onmousewheel", _0x56b700);
}
var _0x1f5793 = 0x0;
function _0x56b700(_0x3cf2d6) {
  var _0x3cf2d6 = window.event || _0x3cf2d6;
  var _0x55184b = Math.max(-0x1, Math.min(0x1, _0x3cf2d6.wheelDelta || -_0x3cf2d6.detail));
  if (_0x55184b == 0x1) {
    _0x1f5793 += 0x1;
  } else {
    _0x1f5793 -= 0.1;
  }
  _0x1f5793 = Math.max(0x0, _0x1f5793);
  _0x1f5793 = Math.min(0xa, _0x1f5793);
  if (_0xacfc21) {
    var _0x146446 = Math.abs(_0x1f5793) * 0x64;
    var _0x4f3827 = new _0x1c4421(0x4);
    _0x4f3827.writeUInt8(0x3c);
    _0x4f3827.writeUInt8(_0x55184b == -0x1 ? 0x0 : 0x1);
    _0x4f3827.writeInt16(_0x146446);
    _0x446c6b(_0x4f3827);
  }
}
var _0x388788 = null;
function _0x3ca4f9() {
  _0x1d4a81();
  if (_0x388788 != null) {
    _0x388788.interfaceReset();
  }
  _0x388788 = null;
  console.log("setting game mode interface:" + _0x16c921);
  if (_0x16c921 == 0x0) {
    _0x388788 = new _0xa1b27(_0x16c921);
    _0x388788.state = _0x4fc996;
  } else {
    if (_0x16c921 == 0x5) {
      _0x388788 = new _0x552bd1(_0x16c921);
      _0x388788.state = _0x4fc996;
    } else {
      if (_0x16c921 == 0x2) {
        _0x388788 = new _0x31f41d(_0x16c921);
        _0x388788.state = _0x4fc996;
      } else {
        if (_0x16c921 == 0x3) {
          _0x388788 = new _0xf572d3();
          _0x388788.state = _0x4fc996;
        } else if (_0x16c921 == 0x4) {
          _0x388788 = new _0x46bdd9(_0x16c921);
          _0x388788.state = _0x4fc996;
        }
      }
    }
  }
  console.log(_0x388788);
}
function _0x32ce24(_0x167be6, _0x3114ef, _0x3a9a7d) {
  var _0x139f66 = _0x167be6.x + _0x3114ef * Math.cos(_0x3a9a7d);
  var _0x4a9187 = _0x167be6.y + _0x3114ef * Math.sin(_0x3a9a7d);
  return {
    "x": _0x139f66,
    "y": _0x4a9187
  };
}
function _0x2ea566(_0x4ede1d, _0x9069e9, _0x2fe9b5, _0x33f0eb, _0x3dddef) {
  _0x3b8ba2.save();
  _0x3b8ba2.globalAlpha = _0x3dddef;
  _0x3b8ba2.beginPath();
  _0x3b8ba2.translate(_0x4ede1d, _0x9069e9);
  _0x3b8ba2.rotate(_0x2fe9b5);
  _0x3b8ba2.moveTo(-0x5, -0x5);
  _0x3b8ba2.lineTo(-0x5, 0x5);
  _0x3b8ba2.lineTo(0x5, 0x5);
  _0x3b8ba2.lineWidth = 1.5;
  _0x3b8ba2.strokeStyle = _0x33f0eb;
  _0x3b8ba2.fillStyle = _0x33f0eb;
  _0x3b8ba2.stroke();
  _0x3b8ba2.restore();
}
function _0x2d0ebe() {
  var _0x4ba52b = _0x5c52f8[_0x2bd878];
  if (_0x4ba52b) {
    for (d = 0x0; d < _0x40bb76.length; d++) {
      var _0x47fbd7 = _0x40bb76[d];
      if (_0x4ba52b.id != _0x47fbd7.id) {
        if (_0x47fbd7.oType === 0x2) {
          var _0x3fa5b1 = _0x47fbd7.getOutlineColor();
          var _0x312c64 = false;
          if (_0x3fa5b1 == "#EF3C31" || _0x3fa5b1 == "#4AE05E") {
            _0x312c64 = true;
          }
          if (_0x312c64) {
            _0x5cba32(_0x4ba52b, _0x47fbd7, _0x3fa5b1);
          }
        }
      }
    }
  }
}
function _0x1f059c(_0x203e2a, _0x89f944) {
  var _0x7416cd = _0x203e2a.x - _0x89f944.x;
  var _0x2dc174 = _0x203e2a.y - _0x89f944.y;
  var _0xd945a5 = Math.sqrt(_0x7416cd * _0x7416cd + _0x2dc174 * _0x2dc174);
  return _0xd945a5;
}
function _0x5cba32(_0x239943, _0x1759b1, _0x4dd4a7) {
  var _0xbe61c1 = Math.atan2(_0x239943.y - _0x1759b1.y, _0x239943.x - _0x1759b1.x);
  var _0x27e30b = -0x32 - _0x239943.rad;
  var _0x2eee69 = _0x32ce24({
    "x": _0x239943.x,
    "y": _0x239943.y
  }, _0x27e30b, _0xbe61c1);
  var _0x197c53 = _0x1f059c({
    "x": _0x2eee69.x,
    "y": _0x2eee69.y
  }, {
    "x": _0x1759b1.x,
    "y": _0x1759b1.y
  });
  if (_0x1759b1.rad < 0x64 && _0x197c53 < _0x1759b1.rad * 0.5 || _0x197c53 < 0xc8) {
    return;
  }
  _0xbe61c1 += 0x2d * (Math.PI / 0xb4);
  _0x2ea566(_0x2eee69.x, _0x2eee69.y, _0xbe61c1, _0x4dd4a7, 0x1);
}
function _0x1d4a81() {
  _0x5f1a0c(true);
}
function _0x2def0b() {
  if (_0xfc9bc1 == _0x1a6650) {
    if (_0x1527d2 == null) {
      var _0x31fce1 = new _0x1c4421(0x2);
      _0x31fce1.writeUInt8(0x3b);
      _0x446c6b(_0x31fce1);
    } else {
      var _0x31fce1 = new _0x1c4421(0x2);
      _0x31fce1.writeUInt8(0x3b);
      _0x446c6b(_0x31fce1);
      _0x1527d2.updateExpiry();
    }
  }
}
var _0x16d835 = null;
var _0x378c07 = 0x0;
var _0x28e081 = null;
var _0x3b83b7 = 0x0;
var _0x1527d2 = null;
function _0x232d1a() {
  if (_0x1527d2 != null) {
    _0x1527d2.display();
  }
}
function _0x1b2ae9() {
  if (_0x28e081 == null) {
    _0x3b83b7 = 0x0;
    _0x16d835 = null;
    return;
  }
  if (_0x16d835 == null) {
    _0x16d835 = document.createElement("canvas");
  }
  if (_0x16d835 == null) {
    return;
  }
  if (_0x3b83b7 == 0x0) {
    _0x3b83b7 = _0x1f4c9e;
  }
  var _0x8c62c9 = _0x16d835.getContext("2d");
  var _0x117cd1 = 0x37;
  var _0x23f55d = 0x50 * _0x301800;
  var _0x335dee = 0x82 + 0x5 * (_0x23f55d + 0xa);
  var _0x335dee = 0x2bc * _0x301800;
  var _0x12b462 = 0x2bc * _0x301800;
  console.log("inferface scale " + _0x301800 + " borad_height " + _0x335dee);
  _0x117cd1 = _0x335dee + 10;
  _0x16d835.width = _0x12b462 + 10;
  _0x16d835.height = _0x117cd1;
  var _0x375799 = 0xc8;
  _0x378c07 = _0x375799;
  _0x8c62c9.globalAlpha = 0.1;
  var _0x20191c = 0x5;
  _0x8c62c9.globalAlpha = 0x1;
  _0x8c62c9.fillStyle = "#FFFFFF";
  _0x8c62c9.font = "30px Arial";
  _0x20191c += 0x2d;
  _0x8c62c9.font = "30px Arial";
  _0x8c62c9.fillText("APEX KILLS", _0x16d835.width / 0x2 - _0x8c62c9.measureText("APEX KILLS").width / 0x2, _0x20191c);
  _0x375799 = 0x64;
  _0x20191c += _0x23f55d;
  var _0x5a1d0a = 0x168 / _0x28e081.anis.length;
  var _0x558d98 = 0xfa * _0x301800;
  var _0x4c99a4 = _0x16d835.width / 0x2;
  var _0x458c3d = _0x16d835.height / 0x2;
  _0x8c62c9.fillStyle = "black";
  _0x8c62c9.globalAlpha = 0.1;
  _0x8c62c9.beginPath();
  _0x8c62c9.arc(_0x4c99a4, _0x4c99a4, _0x558d98 - _0x23f55d / 0x2, 0x0, Math.PI * 0x2, false);
  _0x8c62c9.arc(_0x4c99a4, _0x4c99a4, _0x558d98 + _0x23f55d / 0x2, Math.PI * 0x2, 0x0, true);
  _0x8c62c9.fill();
  _0x8c62c9.globalAlpha = 0.5;
  _0x8c62c9.beginPath();
  _0x8c62c9.arc(_0x4c99a4, _0x4c99a4, _0x558d98 + _0x23f55d / 0x2, Math.PI * 0x2, 0x0);
  _0x8c62c9.stroke();
  var _0xe83e8a = Math.PI * 0x2 / _0x28e081.anis.length;
  var _0x569316 = 0x0;
  var _0x331baf = (_0x1f4c9e - _0x3b83b7) / 0x3e8;
  _0x569316 = 0x8 * Math.sin(0x2 * Math.PI / 0x2 * _0x331baf);
  for (r = 0x0; r < _0x28e081.anis.length; r++) {
    var _0x15cb0f = _0x458c3d + Math.sin(_0x5a1d0a * r * (Math.PI / 0xb4) - 0x5a * (Math.PI / 0xb4)) * _0x558d98;
    var _0x54510d = _0x4c99a4 + Math.cos(_0x5a1d0a * r * (Math.PI / 0xb4) - 0x5a * (Math.PI / 0xb4)) * _0x558d98;
    var _0x1414c4 = r * _0xe83e8a - 0x5a * (Math.PI / 0xb4) - _0xe83e8a / 0x2;
    var _0x5a6a32 = _0x1414c4 + _0xe83e8a;
    ani = _0x28e081.anis[r];
    var _0x2639b3 = _0x43e6c8(ani);
    var _0x5d1eb3 = _0x3df4ce(_0x2639b3);
    if (_0x5d1eb3) {
      var _0x99a11c = _0x28e081[ani] > 0x0;
      _0x8c62c9.save();
      _0x8c62c9.globalAlpha = _0x99a11c ? 0x1 : 0.3;
      var _0x307594 = _0x23f55d;
      if (_0x99a11c) {
        _0x8c62c9.shadowOffsetX = 0x0;
        _0x8c62c9.shadowOffsetY = 0x0;
        _0x8c62c9.shadowColor = "black";
        _0x8c62c9.shadowBlur = 0x8;
        _0x307594 -= _0x569316;
      }
      _0x8c62c9.drawImage(_0x5d1eb3, _0x54510d - _0x307594 / 0x2, _0x15cb0f - _0x307594 / 0x2, _0x307594, _0x307594);
      _0x8c62c9.restore();
      _0x8c62c9.save();
      if (_0x99a11c) {
        _0x8c62c9.shadowOffsetX = 0x0;
        _0x8c62c9.shadowOffsetY = 0x0;
        _0x8c62c9.shadowColor = "black";
        _0x8c62c9.shadowBlur = 0x8;
      }
      _0x8c62c9.strokeStyle = _0x99a11c ? "#ff6e00" : "black";
      var _0x3b80db = _0x99a11c ? 0x5 : 0x1;
      _0x8c62c9.lineWidth = _0x3b80db;
      _0x8c62c9.globalAlpha = _0x99a11c ? 0x1 : 0.5;
      _0x8c62c9.beginPath();
      _0x8c62c9.arc(_0x4c99a4, _0x4c99a4, _0x558d98 - (_0x3b80db - 0x2) - _0x23f55d / 0x2, _0x1414c4, _0x5a6a32);
      _0x8c62c9.stroke();
    }
  }
  if (_0x16d835 != null) {
    if (_0x16d835.width) {
      var _0x2db83d = (_0x1f4c9e - _0x3b83b7) / 0x258;
      var _0x1f53fa = (0x0 - _0x1f4c9e) / 0x258;
      if (_0x1f53fa < 0x1) {
        _0x2db83d = Math.max(0x0, _0x1f53fa);
      }
      var _0x4700c1 = Math.min(0x1, _0x2db83d);
      var _0x19956a = _0x16d835.width * _0x4700c1;
      var _0xe14eef = _0x16d835.height * _0x4700c1;
      _0x3b8ba2.save();
      _0x3b8ba2.globalAlpha = _0x4700c1;
      _0x3b8ba2.drawImage(_0x16d835, _0x485584 / 0x2 - _0x19956a / 0x2, _0x2c7985 / 0x2 - _0xe14eef / 0x2, _0x19956a, _0xe14eef);
      _0x3b8ba2.restore();
      if (_0x1f4c9e > 0x0 || !_0x5f5cae) {
        _0x28e081 = null;
        _0x3b83b7 = 0x0;
      }
    }
  }
}
function _0x43e6c8(_0x2da446) {
  switch (_0x2da446) {
    case _0x1a6650:
      return "./skins/volcano/blackdragon/0/blackdragon.png";
    case _0x30afcb:
      return "./skins/land/dinomonster/0/dinomonster.png";
    case _0xc3cf49:
      return "./skins/arctic/icemonster/0/icemonster.png";
    case _0x23a03f:
      return "./skins/volcano/landmonster/0/landmonster.png";
    case _0x2fcf20:
      return "./skins/ocean/seamonster/0/seamonster.png";
    case _0x2a5063:
      return "./skins/desert/scorpion/0/giantscorpion.png";
    case _0x4b1170:
      return "./skins/arctic/yeti/0/wolf.png";
    case _0x578001:
      return "./skins/land/dragon/0/dragon.png";
    case _0x43c61f:
      return "./skins/land/trex/0/trex.png";
    case _0x301ddb:
      return "./skins/ocean/kraken/0/kraken.png";
    case _0x3db2bf:
      return "./skins/ocean/kingcrab/0/kingcrab.png";
    case _0x21817a:
      return "./skins/phoenix/phoenix.png";
    case _0x3032f7:
      return "./skins/desert/pterodactyl/0/pterodactyl_ability.png";
  }
}
document.addEventListener("keydown", function (_0x322c33) {
  if (_0x322c33.ctrlKey == true && (_0x322c33.code == "Minus" || _0x322c33.key == "Equal" || _0x322c33.code == "NumpadSubtract" || _0x322c33.key == "NumpadAdd")) {
    _0x322c33.preventDefault();
  }
}, {
  "passive": false
});
document.addEventListener("wheel", function (_0x156a7c) {
  const _0x3b75a1 = document.getElementById("updates_v2");
  if (!_0x320bc8 && (!_0x3b75a1 || _0x3b75a1.style && _0x3b75a1.style.display === "none")) {
    _0x156a7c.preventDefault();
  }
}, {
  "passive": false
});
